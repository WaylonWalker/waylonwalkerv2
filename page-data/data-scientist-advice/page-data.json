{"componentChunkName":"component---src-templates-blog-post-js","path":"/data-scientist-advice/","result":{"data":{"markdownRemark":{"id":"55db2ebc-8374-5c76-a8e4-521ec3fc422d","html":"<ul>\n<li>Learn the business</li>\n<li>Learn Git</li>\n<li>Your code does not need to be amazing</li>\n<li>Keep Learning</li>\n</ul>\n<h1>Learn Git</h1>\n<p>You dont have to start out as a git wizard with the cleanest possible commit history.  At first dont let yourself get too wrapped up in it, the most important part is that you make commits.  You will find needs for more advanced stuff later.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"FEAT added new function to calculate revenue by product family\"</span>\n<span class=\"token function\">git</span> push</code></pre></div>\n<p>Get comfortable with this, then learn how to <code class=\"language-text\">branch</code>, <code class=\"language-text\">rebase</code>, <code class=\"language-text\">stash</code>, etc...</p>\n<h1>Your code does not need to be amazing</h1>\n<p>Get the job done.  Keep it in small bite size pieces.  Make readable function definitions and variable names.  You will thank yourself for naming things well later.  Readability counts more than performance in most cases of data science.  If it gets the job done try not to over worry about things like performance.  A few extra seconds to clean a dataset or build a model is not worth hours of your time.  As you go you will have cases that performance is more critical and you will learn what to do from the start to avoid them.</p>","fields":{"slug":"/data-scientist-advice/"},"frontmatter":{"date":"2020-02-26T12:55:00.000Z","title":"What is YOUR Advice for New Data Scientists","description":"What is YOUR Advice for New Data Scientists","status":"published","cover":null}}},"pageContext":{"id":"55db2ebc-8374-5c76-a8e4-521ec3fc422d","prev":{"id":"d1750aac-fbf5-5e33-be6b-a2a2e988adde","html":"<script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'></script>\n<style>\n    #content{\n        max-width: 800px;\n        margin: 0 auto;\n    }\n    .chart {\n        display: block;\n        padding: 10px;\n        background: peachpuff;\n    }\n\n    .bar {\n        height: 30px;\n        margin: 5px;\n        background: teal;\n    }\n    .bar:hover{\n        background: #444;\n        }\n    button {\n        background: rgb(240, 196, 211);\n        border: none;\n        font-size: 1.3rem;\n        border-radius: 5px;\n        padding: .2rem 1rem;\n        margin-bottom: 1rem\n    }\n    .on {\n        background: palevioletred;\n    }\n    .big {\n    width: 100%\n    }\n    .small {\n    width: 50%\n    }\n</style>\n<h2>Learn D3 in 5 days</h2>\n<p>For what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere!  These are just stepping stones into real custom visualizations that cannot be done in any other tool today.  I still cannot explain how excited I am to say <strong>\"I created that in d3!!!\"</strong></p>\n<h3>Todays Result</h3>\n<h2>Recall Example 3 from yesterday</h2>\n<div id='buttons'>\n    <h3>Subject</h3>\n    <div id='subjects'>\n        <button class='math' onclick=\"render4('math')\">Math</button>\n        <button class='science' onclick=\"render4('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes'>\n        <button class='chart4-big-btn' onclick='chart4_size(\"big\")')>Large</button>\n        <button class='chart4-small-btn' onclick='chart4_size(\"small\")'>Small</button>\n    </div>\n</div>\n<div id=\"chart4\" class='chart'></div>\n<script>\n    const data4 = [\n        { name: 'Alice', math: 93, science: 84},\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78},\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    chart4 = document.getElementById('chart4')\n\n\n    let width = function() {\n        return chart4.getBoundingClientRect().width\n        }\n    let height = function() {\n        return chart4.getBoundingClientRect().height\n        }\n    let barHeight = function() {\n        height() /  data4.length + 'px'\n        }\n\n    function chart4_size(size) {\n        d3.select('#sizes')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#sizes')\n            .select('.chart4-' + size + '-btn')\n            .classed('on', true)\n        d3.select('#chart4')\n            .attr('class', 'chart ' + size)\n        subject = document\n            .getElementById('subjects')\n            .querySelector('.on')\n            .classList[0]\n        render4(subject)\n    }\n\n    function render4(subject) {\n\n        d3.select('#subjects')\n            .selectAll('button')\n            .classed('on', false);\n\n        d3.select('#subjects')\n            .select('.' + subject)\n            .attr('class', subject + ' on');\n\n        let xScale = d3.scaleLinear()\n            .domain([50, 100])\n            .range([0, width()]);\n\n        const bars5 = d3.select('#chart4')\n            .selectAll('div')\n            .data(data4, function(d) {\n                return d.name\n            })\n        const newBars = bars5.enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n\n        newBars.merge(bars5)\n            .transition()\n            .style('width', function(d) {\n                return xScale(d[subject]) + 'px'\n            })\n            .style('height', barHeight())\n    }\n    render4('math')\n    chart4_size('big')\n</script>\n<h2>Final Result</h2>\n<div id='buttons5'>\n    <h3>Subject</h3>\n    <div id='subjects5'>\n        <button class='math' onclick=\"render5('math')\">Math</button>\n        <button class='science' onclick=\"render5('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes5'>\n        <button class='chart5-big-btn' onclick='chart5_size(\"big\")')>Large</button>\n        <button class='chart5-small-btn' onclick='chart5_size(\"small\")'>Small</button>\n    </div>\n</div>\n<div id=\"chart5\" class='chart'></div>\n<script>\n    const data5 = [\n        { name: 'Alice', math: 93, science: 84},\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78},\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    chart5 = document.getElementById('chart5')\n\n\n    let width5 = function() {\n        return chart5.getBoundingClientRect().width\n        }\n    let height5 = function() {\n        return chart5.getBoundingClientRect().height\n        }\n    let barHeight5 = function() {\n        height5() /  data5.length + 'px'\n        }\n\n\n    function chart5_size(size) {\n        d3.select('#sizes5')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#sizes5')\n            .select('.chart5-' + size + '-btn')\n            .classed('on', true)\n        d3.select('#chart5')\n            .attr('class', 'chart ' + size)\n        subject = document\n            .getElementById('subjects5')\n            .querySelector('.on')\n            .classList[0]\n        console.log(subject)\n        render5(subject)\n    }\n\n    function render5(subject) {\n\n        d3.select('#subjects5')\n            .selectAll('button')\n            .classed('on', false);\n\n        d3.select('#subjects5')\n            .select('.' + subject)\n            .attr('class', subject + ' on');\n\n        let xScale = d3\n            .scaleLinear()\n            .domain([50, 100])\n            .range([0, width5()]);\n\n\n        const bars5 = d3.select('#chart5')\n            .selectAll('div')\n            .data(data5, function(d) {\n                return d.name\n            })\n        const newBars = bars5\n            .enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n\n        newBars.merge(bars5)\n            .transition()\n            .style('width', function(d) {\n                return xScale(d[subject]) + 'px'\n            })\n            .style('height', barHeight5())\n\n        d3\n         .select('#chart5')\n         .select('svg')\n         .remove()\n\n        const svg5 = d3\n            .select('#chart5')\n            .append('svg')\n            .attr('width', width5())\n            .attr('height', height5())\n            .style('position', 'relative')\n            .append('g')\n            .call(d3.axisBottom(xScale))\n    }\n    render5('math')\n    chart5_size('big')\n</script>","fields":{"slug":"/d3-day5/"},"frontmatter":{"tags":["webdev"],"title":"D3 Day 5","description":"none","templateKey":"blog-post","status":"draft","date":"2018-05-08T00:00:00.000Z","cover":null}},"next":{"id":"cf6ce595-b7e1-582f-af53-c5d95f6f9272","html":"<p>In 2018 I transitioned from a Product Engineering (Mechanical) role to a Data Scientist Role.  I entered this space with strong subject matter expertise with our products, our data, munging through data in pyhon, and data visualization in python.  My sql skills were lacking to say the least.  I had learned what I needed to know to get data from our relational databases, then use pandas to do any further analysis.    Just run something like the following and you have data.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n    <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span>\n    <span class=\"token keyword\">Table</span>\n<span class=\"token keyword\">Where</span>\n    col_1 <span class=\"token operator\">=</span> <span class=\"token string\">'col_1_filter'</span></code></pre></div>\n<p>This technique works great for small data sets that you only need to run once.  There is no shame to pull in a big dataset and start munging with it in pandas to get some results, and make decisions.  The problem becomes when your dataset becomes too big or you need to run the query on a frequent basis.  Doing the aggregations on the server run much quicker, as it reduces the time spent in io.  My longest running steps are currently io related.  Reducing these steps have improved my workflow.  At the point that I was getting server timeout errors, or using the same long running query in many places I would be searching for examples online, because I just did not have the experience with many more techniques.  I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed.</p>\n<h2>Why Learn SQL in 2018??</h2>\n<p>SQL is far from the hot topic in 2018, AI, Deep Learning, BIG data, Machine Learning, Natural Language Processing take the win here.  SQL is so simple why would anyone want to spend time learning SQL?  The reason... all of those hot topics in 2018 require data.  My data mostly comes from relational databases which require sql to get data from them.  Without the ability to efficiently get the data I need to do an aanlysis I cannot even start.  Sure I could use an ORM, but I found that to be a bit unwieldy with the thousands of tables  we have in formats that were determined many years ago. Plus raw SQL is more transportable.  I commonly collaborate with other folks who do not use python.  I am proud that I am able to point them to the SQL I use rather than telling them to suck it up an learn python.  I truly believe that people are the most effective when they are able to choose their own stack of tools.  Taking some time to focus on the basics of Data Science will help be build a strong foundation for my career.</p>\n<h2><a href=\"https://campus.datacamp.com/courses/joining-data-in-postgresql\">Joining Data in Posgres</a></h2>\n<p>Below are my notes from the <a href=\"https://campus.datacamp.com/courses/joining-data-in-postgresql\">Joining Data in Posgres</a>\ncourse on DataCamp.  I will use these notes as a refresher when I need a quick reference.</p>\n<h3>Using()</h3>\n<p>When joining two tables on the same column the <code class=\"language-text\">USING</code> clause can be used as a shorthand.</p>\n<p><strong>without using</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">FROM</span>\n    Table1 <span class=\"token keyword\">as</span> t1\n\n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>\n    Table2 <span class=\"token keyword\">as</span> t2\n    <span class=\"token keyword\">ON</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>id</code></pre></div>\n<p><strong>with using</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n    <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">FROM</span>\n    Table1 <span class=\"token keyword\">as</span> t1\n\n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>\n    Table2 <span class=\"token keyword\">as</span> t2\n    <span class=\"token keyword\">USING</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Join Types</h3>\n<p><em>for joining columns of data together into a single table</em></p>\n<p><code class=\"language-text\">INNER</code>: Includes only records contained in <strong>both</strong> tables.</p>\n<p><code class=\"language-text\">RIGHT</code>: Inlcudes all records from the <strong>right</strong>, droping values from the left if non-existent in the right, or leaving nulls if non-existant in the left.</p>\n<p><code class=\"language-text\">LEFT</code>: Inlcudes all records from the <strong>left</strong>, droping values from the right if non-existent in the left, or leaving nulls if non-existant in the right.</p>\n<p><code class=\"language-text\">FULL</code>: Combination of <code class=\"language-text\">Left</code> and <code class=\"language-text\">Right</code> Join, leaving nulls where data is missing in one table, and not droping any data.</p>\n<p><code class=\"language-text\">CROSS</code>: returns all <strong>pairs</strong> from two tables, does not have an on or using clause.</p>\n<h3>Union</h3>\n<p><em>for concatenating rows of data with the same columns</em></p>\n<p><code class=\"language-text\">Union</code>: returns only unique records, does not include duplicates.</p>\n<p><code class=\"language-text\">Union All</code>: returns all records(including duplicates)</p>\n<h3>Intersect</h3>\n<p><code class=\"language-text\">Intersect</code>: returns only records appearing in both tables</p>\n<h3>Execpt</h3>\n<p><code class=\"language-text\">Except</code>: returns only records not in the second table</p>\n<h3>Self-Joins</h3>\n<p><code class=\"language-text\">Semi-Join</code>: Filters based on results of a subquery.  Does not have direct sql syntax.  This type of join is achieved through a subquery in the where statement.</p>\n<p><code class=\"language-text\">Anti-Join</code>: Similar to the Semi-join, but using a <code class=\"language-text\">not</code> modifier.  This is particularly useful for debugging situations.</p>\n<h3>Subqueries</h3>\n<p>This is where I have really stepped up my sql game.  I was able to get practice writing more complex queries. I also learned about different methods of joining tables together.</p>\n<h4>WHERE</h4>\n<p>Subqueries are commonly found in the where clause to filter data.  Below is an example given in the course to select only the Asian countries with below average fertility rate from the states table.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n   name<span class=\"token punctuation\">,</span>\n   fert_rate\n<span class=\"token keyword\">FROM</span>\n    states\n<span class=\"token keyword\">WHERE</span>\n    continent <span class=\"token operator\">=</span> <span class=\"token string\">'Asia'</span>\n<span class=\"token operator\">AND</span> fert_rate <span class=\"token operator\">&lt;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>fert_rate<span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">FROM</span> states<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>SELECT</h4>\n<p>Subqueries can be found in the <code class=\"language-text\">SELECT</code> clause to create new columns of data.  This is a different technique than I have used in the past.  Previously I have only used <code class=\"language-text\">GROUPBY</code> statements to get this effect.  I can see where this can be really useful because it is not constrained by aggregations any data point can be pulled in with this tecnhique.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n    continent<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span>\n        <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">FROM</span>\n        states\n     <span class=\"token keyword\">WHERE</span>\n        prime_ministers<span class=\"token punctuation\">.</span>continent <span class=\"token operator\">=</span> states<span class=\"token punctuation\">.</span>continent\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> countries_num\n\n<span class=\"token keyword\">From</span> Prime Ministers</code></pre></div>\n<h4>FROM</h4>\n<p>subqueries found in the <code class=\"language-text\">FROM</code> clause can be very helpful to create a new dataset from an existing table.  I find these the easiest to read as it is not much different than creating a new table.  Again this can be very powerful in creating new columns that were not easily available otherwise.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n    monarchs<span class=\"token punctuation\">.</span>continent<span class=\"token punctuation\">,</span>\n    subquery<span class=\"token punctuation\">.</span>max_perc\n\n<span class=\"token keyword\">FROM</span>\n    monarchs<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span>\n        continent<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>women_parli_perc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> max_perc\n\n    <span class=\"token keyword\">FROM</span>\n        states\n\n    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>\n        continent\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> subquery\n\n<span class=\"token keyword\">WHERE</span>\n    monarchs<span class=\"token punctuation\">.</span>continent <span class=\"token operator\">=</span> subquery<span class=\"token punctuation\">.</span>continent\n\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\n    continent<span class=\"token punctuation\">;</span></code></pre></div>\n<h4>ON</h4>\n<p><strong>Challenge Problem 1</strong>  This problem was the one that had me more stumped than any other problem in the course.  I found the subquery inside the on statement very confusing to understand.  In this question we are joining the countries table to a subquery what yields country codes of countries with offial languages from the languages table.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n    c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    e<span class=\"token punctuation\">.</span>total_investment<span class=\"token punctuation\">,</span>\n    e<span class=\"token punctuation\">.</span>imports\n\n<span class=\"token keyword\">FROM</span>\n    countries <span class=\"token keyword\">as</span> c\n<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span>\n    economies <span class=\"token keyword\">as</span> e\n    <span class=\"token keyword\">ON</span> c<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>code\n\n    <span class=\"token operator\">AND</span> c<span class=\"token punctuation\">.</span>code <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">SELECT</span>\n        l<span class=\"token punctuation\">.</span>code\n    <span class=\"token keyword\">FROM</span>\n        languages <span class=\"token keyword\">as</span> l\n    <span class=\"token keyword\">WHERE</span>\n        official <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">WHERE</span>\n    c<span class=\"token punctuation\">.</span>region <span class=\"token operator\">=</span> <span class=\"token string\">'Central America'</span>\n<span class=\"token operator\">AND</span> e<span class=\"token punctuation\">.</span><span class=\"token keyword\">year</span> <span class=\"token operator\">=</span> <span class=\"token number\">2015</span>\n\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span>\n    c<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/datacamp-sql/"},"frontmatter":{"tags":["data","sql"],"title":"Stepping Up My SQL Game","description":"none","templateKey":"blog-post","status":"draft","date":"2018-03-25T00:00:00.000Z","cover":null}},"similarPosts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}},"staticQueryHashes":["2992646504"]}