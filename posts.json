[
    {
        "cover": "/static/pyspark-v-pandas-xmas2020.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/pyspark-v-pandas.md",
        "canonical_url": "https://waylonwalker.com/pyspark-v-pandas",
        "cover_image": "https:waylonwalker.com/pyspark-v-pandas.png",
        "description": "",
        "published": false,
        "content": "",
        "date": "2000-01-01 00:00:00+00:00",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_004.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_004.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_004.png",
        "canonical_url": "https://waylonwalker.com/gratitude_004",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude-093.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude-093.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude-093.png",
        "canonical_url": "https://waylonwalker.com/gratitude-093",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_001.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_001.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_001.png",
        "canonical_url": "https://waylonwalker.com/gratitude_001",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_008.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_008.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_008.png",
        "canonical_url": "https://waylonwalker.com/gratitude_008",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_005.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_005.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_005.png",
        "canonical_url": "https://waylonwalker.com/gratitude_005",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_007.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_007.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_007.png",
        "canonical_url": "https://waylonwalker.com/gratitude_007",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/good-morning.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/good-morning.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/good-morning.png",
        "canonical_url": "https://waylonwalker.com/good-morning",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_003.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_003.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_003.png",
        "canonical_url": "https://waylonwalker.com/gratitude_003",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_002.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_002.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_002.png",
        "canonical_url": "https://waylonwalker.com/gratitude_002",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/gratitude_006.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/gratitude/gratitude_006.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/gratitude_006.png",
        "canonical_url": "https://waylonwalker.com/gratitude_006",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/002.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "",
        "path": "../../src/pages/hot_tips/002.md",
        "published": false,
        "cover_image": "https:waylonwalker.com/002.png",
        "canonical_url": "https://waylonwalker.com/002",
        "description": "",
        "date": "2000-01-01 00:00:00+00:00",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "./pycon-cityscape-xmas2020.png",
        "title": "Pycon 2017 Roundup",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/pycon-2017-roundup.md",
        "canonical_url": "https://waylonwalker.com/pycon-2017-roundup",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./pycon-cityscape.png",
        "date": "2017-05-30 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "# Pycon 2017 Roundup\n\nGood afternoon fellow Data Geeks.  Last week [Pycon](https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg) released 141 videos of greatness.  Here are my top picks from the event.\n\n\n## \\#3 Kelsey Hightower - Keynote - Pycon 2017\n\nhttp://www.youtube.com/watch?v=u_iAXzy3xBA&t=1795s\n\n## \\#2 Al Sweigart Yes, It's Time to Learn Regular Expressions PyCon 2017\n\nhttp://www.youtube.com/watch?v=abrcJ9MpF60\n\n\n## \\#1 Trey Hunner Readability Counts PyCon 2017\n\n\nhttp://www.youtube.com/watch?v=knMg6G9_XCg\n\n## What's on Tap\n\nThis afternoon we have a cup of from one of my favorite roasters Thirty Thiry Coffee.  This\n\n[![Whats on Tap](https://www.thirty-thirtycoffee.com/wp-content/uploads/2016/09/thirty-thirty-peoria-logo.png)](http://www.thirty-thirtycoffee.com/ \"Whats on Tap\")",
        "long_description": "Pycon 2017 Roundup Good afternoon fellow Data Geeks. Last week Pycon released 141 videos of greatness. Here are my top picks from the event. #3 Kelsey Hightower - Keynote - Pycon 2017 http://www.youtube.com/watch?v=u_iAXzy3xBA&t=1795s #2 Al Sweigar..."
    },
    {
        "cover": "./gabriele-diwald-199200-unsplash.jpg",
        "title": "background tasks in python",
        "tags": [
            "python",
            "data"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/background-1.md",
        "canonical_url": "https://waylonwalker.com/background-1",
        "category": "python",
        "cover_image": "https:waylonwalker.com/./gabriele-diwald-199200-unsplash.jpg",
        "date": "2017-09-16 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "# background tasks in python\n\nI have tried most of the different methods in the past and found that copying and pasting the [threadpoolexecutor example](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example) or the [processpoolexecutor example](https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example) from the standard library documentation to be the most reliable.  Since this is often something that I stuff in the back of a utility module of a library it is not something that I write often enough to be familiar with, which makes it both hard to write and hard to read and debug.  If you are looking for a good overview of the difference concurrency [Raymond Hettinger](https://twitter.com/raymondh) has a great talk about the difference between the various different methods, when to use them and why.\n\nRecently a new python library was released to make running tasks in the background very simple. The [background](https://github.com/kennethreitz/background) project by Kenneth Reitz is a high level implementation of python 3's ThreadPoolExecutor.  I have been playing around with this project over the last week and I will say that this is definitely the simplest way to run background tasks in python by far.  It really simplifes the syntax and lets me focus on my job rather than implementing custom concurrent code that is more difficult to debug.\n\n## Background\n\nI have pulled the latest version of the project in Sept 2017.  I found that it had some updates that were important to pass \\*args and \\*\\*kwargs compared to the pypi version.\n\n\n```python\nimport time\nimport background as bg\n\n%load_ext watermark\n%watermark -d -v -p background\n```\n\n    2017-09-16\n\n    CPython 3.6.2\n    IPython 6.1.0\n\n    background n\u0007\n\n\n## Define Worker Functions\n\nEach of these worker functions takes 1s to run, simulating a moderately long calculation that we need to do many times over.\n\n\n```python\ndef work():\n    time.sleep(1)\n    return 1\n\n@bg.task\ndef bg_work():\n    time.sleep(1)\n    return 1\n```\n\n## Run the Worker Functions\n\n## Blocking function\n\nThis function is blocking each time the function runs, thus taking 1 second to run for each calculation.  The example below took exactly **100 s** to run 100 calculations.  Depending on your use case this may not be fast enough.  If the calculations do not rely on the global state\n\n\n```python\n%%time\nfor _ in range(100):\n    work()\n```\n\n    Wall time: 1min 40s\n\n\n### Reaction\n\nI  know what half of you are saying to yourselfs..\n\n>    !!What!! that took 100 s, by now my users have already sent a dozen messages and filed an issue that my feature is down\n\nand the other half\n\n> Seriously that wasnt even enough time to grab a coffee.  Any real time consuming analysis takes at least 3 dats 14 hours 159 seconds before I start to care about concurrency\n\nTo you I say... I am impatient and I got other things to do rather than wait on this maching to finish its work.  Let's get into this concurrency stuff.\n\n## Background Function\n\nThis function spins off worker processes and runs much faster.  By default background sets the number of processes to the number of cpu cores available, Therefore this function should run in n/4 + (inefficiency).  Here we see that the result is just over **13 s**.\n\nNote:_Since there is a bit of inefficiency added by needing to handle all of the threads it is not exactly divided by the number of workers._\n\n\n```python\n%%time\nf_list = [bg_work() for _ in range(100)];\n\nwhile not all([f.done() for f in f_list]):\n    pass\n```\n\n    Wall time: 13.1 s\n\n\n### Reaction\n\nI know what your saying this time.\n\n>really a 7.6x improvement...  Is that really even woth the extra work.\n\n\nFine then lets crank it up to 11!\n\n### Lots of Background\n\nlets set the number of background processes to a value just higher to than the number of workers we need to run in order to start them all simultaneously. With this simple example that is not very CPU intensive we see the result is just over the amount of time that it takes to run 1 worker.\n\n\n```python\nbg.n = 110\n```\n\n\n```python\n%%time\nf_list = [bg_work() for _ in range(100)];\n\nwhile not all([f.done() for f in f_list]):\n    pass\n```\n\n    Wall time: 1.09 s\n\n\n### Reaction\n\n> 91x improvement by putting my calculations into a function, adding a decorator, and some checks, im in.\n\n## On Tap\n\nThis week while taking it up to 11 I was enjoying a super thick and rich cup of El Salvador Finca Rosa from Onyx Coffee Labs.  Check out their love for letting the bean speak for it self and producing a great cup.\n\n[<img src=\"https://cdn.shopify.com/s/files/1/1707/3261/files/coffee_science.png?5305428688827820856\">](https://onyxcoffeelab.com)",
        "long_description": "background tasks in python I have tried most of the different methods in the past and found that copying and pasting the threadpoolexecutor example or the processpoolexecutor example from the standard library documentation to be the most reliable. S..."
    },
    {
        "cover": "/static/gratitude_016-xmas2020.png",
        "title": "Gratitude 016",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_016.md",
        "canonical_url": "https://waylonwalker.com/gratitude_016",
        "cover_image": "https:waylonwalker.com/gratitude_016.png",
        "date": "2017-12-21 00:00:00+00:00",
        "description": "One on One time Last night we made a long trip back from my In-Laws. Which was a great day by the way. Sometimes we st",
        "published": false,
        "content": "#### One on One time\n\nLast night we made a long trip back from my In-Laws.  Which was a great day by the way.  Sometimes we struggle with Wyatt's energy in a house with lots of breakable items, but he did great yesterday.  When we got home Wyatt just finished up with a good two hour nap and was wired... at 11:00 PM.  He was hungry, as he was too excited to play while at grandmas house and did not eat much.  I sat up with him,  we shared a peanut butter sandwich and got out a new pack of trolls characters and worked on finding all of their names.\n\n>When we got home Wyatt just finished up with a good two hour nap and was wired... at 11:00 PM\n\n\nMoments like these do not seem to come often enough.  I really enjoy playing with the whole family and the full level of craziness that it brings, but having a calm one on one time with one member of the family seems extra special.  It was the perfect ending to a long day with lots of packing, travel, and excitement.",
        "long_description": "One on One time Last night we made a long trip back from my In-Laws. Which was a great day by the way. Sometimes we struggle with Wyatt's energy in a house with lots of breakable items, but he did great yesterday. When we got home Wyatt just finis..."
    },
    {
        "cover": "/static/gratitude_009-xmas2020.png",
        "title": "Gratitude 009",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_009.md",
        "canonical_url": "https://waylonwalker.com/gratitude_009",
        "cover_image": "https:waylonwalker.com/gratitude_009.png",
        "date": "2017-12-21 00:00:00+00:00",
        "description": "Good Doctors Today we are nearing the last week before Rhiannon's Next Treatment in chemotherapy. It was a rough day, s",
        "published": false,
        "content": "#### Good Doctors\n\nToday we are nearing the last week before Rhiannon's Next Treatment in chemotherapy.  It was a rough day, she had a bad carcinoid attack last night and was on edge of another all day today.  I am grateful that we were able to get in with a really good oncologist.  The best in the area in terms of carcinoid cancer.  I am really glad that he has a plan for us and it is helping get through most of the month between doses.  Since it is such a rare type of cancer there are few knowledgeable in the subject, which just makes it that much better that we are in with the best.   It allows us to have some really good days.",
        "long_description": "Good Doctors Today we are nearing the last week before Rhiannon's Next Treatment in chemotherapy. It was a rough day, she had a bad carcinoid attack last night and was on edge of another all day today. I am grateful that we were able to get in with..."
    },
    {
        "cover": "/static/gratitude_010-xmas2020.png",
        "title": "Gratitude 010",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_010.md",
        "canonical_url": "https://waylonwalker.com/gratitude_010",
        "cover_image": "https:waylonwalker.com/gratitude_010.png",
        "date": "2017-12-22 00:00:00+00:00",
        "description": "Strong Relationships A few months ago my wife and I decided to start going to family therapy, to talk about some things",
        "published": false,
        "content": "#### Strong Relationships\n\nA few months ago my wife and I decided to start going to family therapy, to talk about some things that we could see were only going to get worse without giving them some attention.  This is the best decision we have made in our marriage.  We have really learned to relate to the other person, and put ourself in their shoes.  We are learning about how our actions effect the other.\n\n> This is the best decision we have made in our marriage.\n\nWithout taking steps in the right direction our marriage was heading downhill.  Medical needs were taking precidence, and we were both fighing through a dark hole of depression.  After the first session we saw great improvement.  I am grateful that we took the steps to work on our marriage in such a dark time for us on every other aspect of life.  I am grateful that we got a great therapist on first try.  I feel like you rarely get a medical professional that works for you on the first try.  I am grateful that we are both devoted to making it work, and have made great strides in our relationship.  Most of all I am grateful to see how taking the right steps to strengthen our marriage has improved other parts of our life, and made it easier to handle events as they come up.",
        "long_description": "Strong Relationships A few months ago my wife and I decided to start going to family therapy, to talk about some things that we could see were only going to get worse without giving them some attention. This is the best decision we have made in our..."
    },
    {
        "cover": "/static/gratitude_011-xmas2020.png",
        "title": "Gratitude 011",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_011.md",
        "canonical_url": "https://waylonwalker.com/gratitude_011",
        "cover_image": "https:waylonwalker.com/gratitude_011.png",
        "date": "2017-12-23 00:00:00+00:00",
        "description": "Happy Holidays Round 1 I am grateful that we have been able to make it to my family for Christmas time. I am so glad to",
        "published": false,
        "content": "####  Happy Holidays Round 1\n\nI am grateful that we have been able to make it to my family for Christmas time.  I am so glad to see how much fun my parents and the kids have together.  They all get along so well. I am glad to see some of the changes that my parents are making to get through their tough times at home.  They seem to be quite a bit happier that the past few times that we have been home.   We all got some really nice gifts, and I am glad that everyone was able to at least get something that they enjoy, even if it wasn't much.  The kids were so excited to see all of the gifts, and had such fun opening them.  They have been playing with them all day.  I am very grateful to see them sharing and having fun together rather than fighting over who gets what.  Wyatt has really been stepping it up as a big brother, and even spent his own hard earned money to buy Ayla a gift!\n\n\n> I am very grateful to see them sharing and having fun together",
        "long_description": "Happy Holidays Round 1 I am grateful that we have been able to make it to my family for Christmas time. I am so glad to see how much fun my parents and the kids have together. They all get along so well. I am glad to see some of the changes that my..."
    },
    {
        "cover": "/static/gratitude_012-xmas2020.png",
        "title": "Gratitude 012",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_012.md",
        "canonical_url": "https://waylonwalker.com/gratitude_012",
        "cover_image": "https:waylonwalker.com/gratitude_012.png",
        "date": "2017-12-25 00:00:00+00:00",
        "description": "The Good Days Good days are the best. I enjoy the days where everything seems to fall into place seemingly without effo",
        "published": false,
        "content": "#### The Good Days\n\nGood days are the best.  I enjoy the days where everything seems to fall into place seemingly without effort.  The air is clean and easy to breathe.  The kids are cooperating.  I am working on a project with my best friend in the world.  I play with my kids, and we all have a great time together.\n\nToday was one of those days.  I spent much of the day helping Rhiannon set up the Cuttin Scrap channel.  We are setting up a really nice area for her to work on a craft that she is very passionate about.  It is the place that she has dreamed of for years.  No its not perfect with the most space available, but it is the best with what we have got, and it is all hers.  At the end of the day we were able to sit down and begin working through her website and socials.\n\n> It is the place that she has dreamed of for years.\n\n\nI also really enjoyed getting to play in the fresh snow with Wyatt.  He loved it.  We shoveled it into big piles to jump in, threw snowballs, and just had the best of adventure.  Ayla and Rhiannon came to the window to watch, and they laughed at us while we acted silly.  Today was Christmas, one of the most magical days of the year to spend with the ones you love most.",
        "long_description": "The Good Days Good days are the best. I enjoy the days where everything seems to fall into place seemingly without effort. The air is clean and easy to breathe. The kids are cooperating. I am working on a project with my best friend in the world...."
    },
    {
        "cover": "/static/gratitude_013-xmas2020.png",
        "title": "Gratitude 013",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_013.md",
        "canonical_url": "https://waylonwalker.com/gratitude_013",
        "cover_image": "https:waylonwalker.com/gratitude_013.png",
        "date": "2017-12-26 00:00:00+00:00",
        "description": "Long Days, Good Times This Christmas we had two events on Christmas day, with 5 hours of travel, and a final destination",
        "published": false,
        "content": "#### Long Days, Good Times\n\nThis Christmas we had two events on Christmas day, with 5 hours of travel, and a final destination to sleep at.  I am very grateful that we were able to get through all of the travel in one piece.  THe kids had a blast!  It was a very fun Christmas for them.  Wyatt got his most wished for gift this year, Maui's hook from Moana.  It was so fun to watch him open it.  He was absolutely speechless.\n\n\nI am glad everyone was able to enjoy the food.  Both events were very accomodating to our family allergies.  The first event was a potato bar where everything was kept separate and you could personalize your dish.  The kids really just wanted to snack all day.  At the second event they went out of their way to find dairy free butter to cook wtih.  There were only one or two items that had dairy in them.  It feels good to be supported by your family.",
        "long_description": "Long Days, Good Times This Christmas we had two events on Christmas day, with 5 hours of travel, and a final destination to sleep at. I am very grateful that we were able to get through all of the travel in one piece. THe kids had a blast! It was..."
    },
    {
        "cover": "/static/gratitude_014-xmas2020.png",
        "title": "Gratitude 014",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_014.md",
        "canonical_url": "https://waylonwalker.com/gratitude_014",
        "cover_image": "https:waylonwalker.com/gratitude_014.png",
        "date": "2017-12-29 00:00:00+00:00",
        "description": "Time Off I am currently in the middle of a week long holiday break. Its nice to take some time off from the everyday hu",
        "published": false,
        "content": "#### Time Off\n\nI am currently in the middle of a week long holiday break.  Its nice to take some time off from the everyday hustle to refresh the brain and focus on some other things.  We are able to do quite a bit of traveling and see family that we do not get to see very often.  I am able to spend more time with my wife and the kids.  I have also started making a website for my wife.  Its probably something that I would not otherwise have time to dig deeply into and make nearly the same progress as quickly.\n\n\nThe time in the car can be a nice time to connect.  We have taken quite a bit of time to plan out Rhiannon's new adventure, CuttinScrap.  It is a YouTube channel that will serve as her creative outlet, combining her love of speech and Drama with Crafting.  I am really excited to see her find her voice and get into a rhythm with the channel.  She is really excited as well.  We have been doing a lot of planning and behind the scenes work and anxiously awaiting time to make episode 0.",
        "long_description": "Time Off I am currently in the middle of a week long holiday break. Its nice to take some time off from the everyday hustle to refresh the brain and focus on some other things. We are able to do quite a bit of traveling and see family that we do no..."
    },
    {
        "cover": "/static/gratitude_015-xmas2020.png",
        "title": "Gratitude 015",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_015.md",
        "canonical_url": "https://waylonwalker.com/gratitude_015",
        "cover_image": "https:waylonwalker.com/gratitude_015.png",
        "date": "2017-12-29 00:00:00+00:00",
        "description": "Special Moments I love having those special moments of time with the kids. Today we had a few minutes to play before su",
        "published": false,
        "content": "#### Special Moments\n\nI love having those special moments of time with the kids.  Today we had a few minutes to play before supper time, and we decided to go down to the basement to play some imagination action adventure game.  The kids are really into minecraft at the moment so its always very centered around minecraft.  Tonight there was an extra special moment where Wyatt on his own gave Ayla his brand new nerf gun to play with.  At this point he has not alowed her to play with it because it was a new Christmas toy.  She was extatic, and we all enjoyed running from her as she shot towards us.  I thought it was extra special because we were all having fun and no one was arguing about who got the new toy.  I am so proud of Wyatt, because he is really growing up and growing out of the not sharing phase. I have really seen him open up to share an play with Ayla in new ways lately.  It really makes you feel like a good parent when you can watch them grow up like this.",
        "long_description": "Special Moments I love having those special moments of time with the kids. Today we had a few minutes to play before supper time, and we decided to go down to the basement to play some imagination action adventure game. The kids are really into min..."
    },
    {
        "cover": "./gemma-evans-64661-unsplash.jpg",
        "title": "No More Death By PowerPoint",
        "tags": [
            "webdev",
            "catalytic"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/death-by-powerpoint.md",
        "canonical_url": "https://waylonwalker.com/death-by-powerpoint",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./gemma-evans-64661-unsplash.jpg",
        "date": "2017-12-31 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "# No More Death By PowerPoint\n\n> I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec **DEATH BY POWERPOINT**\n\n\nIf you have not seen David JP Phillips [Death By PowerPoint](https://www.youtube.com/watch?v=Iwpi1Lm6dFo)  TEDx, stop now and watch it.  You will never look at slides the same again.  Watching this video ruined me for watching presentations with these issues.  Reveal is a tool that makes it very easy to follow these principles\n\nI currently work in a company that employs over 100K employees, and to this day I cannot recall a single presentation given where the slides did not violate the rules stated in David's Talk.  This year I am putting a stop to this starting with myself.  I am starting a new job role in 2018 and there is no better time to make some drastic changes to my workflow than now.  I expect there to be a few followers and many naysayers, but I dont care.  I will employ the directives listed below.\n\n\n## 1+1=0\n\nVery few people (_if any_) in your will be able to multi-task.  The human brain is just not built to truly multi-task.  Some folks can be good at task switching quickly but very few of us can truly multi-task.  By overwhelming your audience with more than one distinct message, you have successfully overwhelmed your audience and successfully delivered 0 messages to your audiance.\n\n## 6 items\n\nThe human brain is very capable of processing up to 6 items very efficiently, beyond this becomes an exponential rate of processing.  Watch David's video and you will see a remarkable example.\n\n## Size and Contrast\n\nThe most important points should be the fist thing that your eye goes to on the screen.\n\n## More Slides\n\nNo one ever said the sheer amount of slides was ever the problem.\n\n\n## Supporting Material\n\nSentences, Notes, reference material, etc belong in the speaker notes.  This is the part that took the longest for me to realize.  In my company PowerPoint documents as living documents that folks will reference long after the presentation is over.  For this reason we tend to put every point that we want to discuss on the slides, so that they are there weeks, months, even years later when someone goes back to review your slides.  Placing this material in the speaker notes will allow you to utilize your presentation as reference material if you need to, and refrain from placing it on the screen.\n\n## Tools\n\nA tool that is becoming very popular outside of the PowerPoind world is [Reveal js](https://github.com/hakimel/reveal.js/).  It is a fantastic framework to build beautiful slides using html.  I find that maintaining html to be a bit cumbersome. And the templating language [pug](https://pugjs.org/) to be much more simple.  I will be using my own fork of [reveal.js-jade](https://github.com/jlengstorf/reveal.js-jade) in 2018.  It will allow me to have interactive visualizations right in my slides.  Reveal also does a really nice job at making it hard to break the Death By PowerPoint rules.  It tends to be hard to jam a ton of information into them.",
        "long_description": "No More Death By PowerPoint I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec DEATH BY POWERPOINT If you have not seen David JP Phillips Death By PowerPoint TEDx, stop now and watch it. You w..."
    },
    {
        "cover": "./flex-xmas2020.png",
        "title": "Pug Reveal",
        "tags": [
            "webdev"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/pug-reveal.md",
        "canonical_url": "https://waylonwalker.com/pug-reveal",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./flex.png",
        "date": "2017-12-31 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "# Pug Reveal Slides\n\nI recently gave a presentation at the Big Brothers and Big Sisters Data Challenge.  I wanted to use reveal to create my slides.  I have used it before and it is a really nice package.  Compared to PowerPoint it is much easier to incorporate interactive visualizations right into the presentation,easy to re factor and maintain slides.  Since you are just working with text you can easily convert from a list of items on one slide to a set of slides.\n\n## Avoiding Death by PowerPoint\n\nIf you have not seen David JP Phillips [Death By PowerPoint](https://www.youtube.com/watch?v=Iwpi1Lm6dFo)  TEDx, stop now and watch it.  You will never look at slides the same again.  Watching this video ruined me for watching presentations with these issues.  Reveal is a tool that makes it very easy to follow these principles\n\n* You are the center of focus\n* Reduce clutter\n* Focus your users with\n    * size\n    * contrast\n\n## Reduce clutter\n\nIn the video David talks about reducing the number of points we have down to no more than 6. You may be thinking \"What No More than 6, Well I would have to have a hundred slides to get all of my point in\".  to this David tells us, \"The amount of slides in your PowerPoint has never been the problem. It is the amount of objects per slide that are the problem.\"\n\n>The amount of slides in your PowerPoint has never been the problem. It is the amount of objects per slide that are the problem.\n\n## Pug\n\n\n>\"What is this pug thing you speak of?\"\n\nPug is a markup language typically that is into html for the browser.  It is a much less verbose markup language that uses whitespace as syntax.",
        "long_description": "Pug Reveal Slides I recently gave a presentation at the Big Brothers and Big Sisters Data Challenge. I wanted to use reveal to create my slides. I have used it before and it is a really nice package. Compared to PowerPoint it is much easier to inc..."
    },
    {
        "cover": "/static/gratitude_017-xmas2020.png",
        "title": "Gratitude 017",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_017.md",
        "canonical_url": "https://waylonwalker.com/gratitude_017",
        "cover_image": "https:waylonwalker.com/gratitude_017.png",
        "date": "2018-01-01 00:00:00+00:00",
        "description": "Breaks Breaks are a good time for refresh and focus on some other things. During this holiday break I have been able to",
        "published": false,
        "content": "#### Breaks\n\nBreaks are a good time for refresh and focus on some other things.  During this holiday break I have been able to spend quite a bit of time with my beautiful wife Rhiannon.  I have really enjoyed helping her setup her new adventure [Cuttin Scrap](www.cuttinscrap.com).  It will be a nice creative outlet for her to combine her love of sewing and crafting with her love of speech and writing.  I am really excited to see her get going.\n\n\nWe have also spent some time at nights playing games and watching YouTube.  Its really nice to not have to worry about anything work related and focus on the family.  The extra time has helped strengthen our marriage and allow us to discuss some things that have been on our minds for awhile.  Now its time to start 2018 Fresh and Strong.",
        "long_description": "Breaks Breaks are a good time for refresh and focus on some other things. During this holiday break I have been able to spend quite a bit of time with my beautiful wife Rhiannon. I have really enjoyed helping her setup her new adventure Cuttin Scra..."
    },
    {
        "cover": "/static/gratitude_019-xmas2020.png",
        "title": "Gratitude 019",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_019.md",
        "canonical_url": "https://waylonwalker.com/gratitude_019",
        "cover_image": "https:waylonwalker.com/gratitude_019.png",
        "date": "2018-01-02 00:00:00+00:00",
        "description": "My Parter Last night stared like any other night. Put the kids to bed, hang out with my Beautiful wife for a while, off",
        "published": false,
        "content": "#### My Parter\n\nLast night stared like any other night. Put the kids to bed, hang out with my Beautiful wife for a while, off to sleep, then Wyatt comes in at the wee hours of the morning ready to start his day.  The only difference last night was that it was not the wee hours of the day, it was **11:30 PM**.  He was wired and ready to go as if he slept the whole night through.  I am very grateful that I was able to tag team the situation with Rhiannon, as he did not go back to sleep.  We were both able to get some rest through the night.  It may not have been the best, but we were able to make the best out of a tough situation.  In the Morning we had to take the van into the repair shop, and on the way home we were able to discuss some solutions to the problem when it happens in the future.  Rhiannon was able to get the ball rolling with the pediatrician to see their recommendations.  Man I love her, long before I would have even thought to go that route she had already sent the message out.",
        "long_description": "My Parter Last night stared like any other night. Put the kids to bed, hang out with my Beautiful wife for a while, off to sleep, then Wyatt comes in at the wee hours of the morning ready to start his day. The only difference last night was that it..."
    },
    {
        "cover": "/static/gratitude_021-xmas2020.png",
        "title": "Gratitude 022",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_021.md",
        "canonical_url": "https://waylonwalker.com/gratitude_021",
        "cover_image": "https:waylonwalker.com/gratitude_021.png",
        "date": "2018-01-07 00:00:00+00:00",
        "description": "Adult Time There is something special about having pure uninterrupted adult time with your spouse. Last night I went ou",
        "published": false,
        "content": "#### Adult Time\n\nThere is something special about having pure uninterrupted adult time with your spouse.  Last night I went out with Rhiannon and we had an absolute blast.  We went to the brand new brewery in town \"Industry Brewing Company\".  It was absolutely amazing.  The food was good, but the beer was completely flawless.  There is just something beautiful about something that is so flawless.  Each style I had was brewed to a T.  My favorite of course was the \"Industry Standard\", a super hoppy pale ale.\n\nNext we were off to the local big box quilting store to get some supplies for Rhiannon's next project on Cuttin Scrap.  It was fun, we looked at a bunch of different stuff.  And she was able to talk shop.\n\nAfter that we were off to see the latest Pitch perfect movie. before we were able to do that I required coffee to stay up through the whole thing.  So we went downtown to check out Zion coffee roasters for the first time.  It was a beautiful shop that reminded me of Horizon Line Coffee in downtown Des Moines, Iowa.  We finished the night off in the movies and headed home.\n\nI am so grateful to be able to spend such quality time with my best friend.  We have great friends that are able to watch the crazy kids.  We are able to afford a simple night out.  Lastly Rhiannon and I are getting closer than we ever have before.",
        "long_description": "Adult Time There is something special about having pure uninterrupted adult time with your spouse. Last night I went out with Rhiannon and we had an absolute blast. We went to the brand new brewery in town \"Industry Brewing Company\". It was absolu..."
    },
    {
        "cover": "/static/gratitude_022-xmas2020.png",
        "title": "Gratitude 022",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_022.md",
        "canonical_url": "https://waylonwalker.com/gratitude_022",
        "cover_image": "https:waylonwalker.com/gratitude_022.png",
        "date": "2018-01-08 00:00:00+00:00",
        "description": "Kid Time Sometimes you just need some time to be a kid. Today was that day... it was a snow day. During which the kids",
        "published": false,
        "content": "#### Kid Time\n\nSometimes you just need some time to be a kid.  Today was that day... it was a snow day.  During which the kids were very generous at letting me work, but we were also able to have some quality moments.  First of which happened at lunch.  Wyatt decided that we were having pancakes, and the kids would help make them.   I was really impressed at their cooperation.  They did really well at taking turns putting ingredients into the batter, and stirring.\n\n> I was really impressed at their cooperation.\n\nThe second bit of kid time came late in the afternoon after the kids had a nap.  We went outside to go sledding.  They were both a bit crabby to get clothes on, but cheered up once we got outside.  We all had a blast, Even Ayla who has had a terrible fear of the snow this year.  She just stood in it for the longest time before warming up to it.  Eventually she braved up enough, aka was forced on to the sled with daddy.  She loved it! She was absolutely smiling ear to ear when we hit the bottom.  From there on the kids took turns riding down with daddy for the next 2 hrs!",
        "long_description": "Kid Time Sometimes you just need some time to be a kid. Today was that day... it was a snow day. During which the kids were very generous at letting me work, but we were also able to have some quality moments. First of which happened at lunch. Wy..."
    },
    {
        "cover": "/static/gratitude_023-xmas2020.png",
        "title": "Gratitude 023",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_023.md",
        "canonical_url": "https://waylonwalker.com/gratitude_023",
        "cover_image": "https:waylonwalker.com/gratitude_023.png",
        "date": "2018-01-10 00:00:00+00:00",
        "description": "Excitement This year I started a new position at work. Everything about it is enjoyable. Not sure if that is jut the h",
        "published": false,
        "content": "#### Excitement\n\nThis year I started a new position at work.  Everything about it is enjoyable.  Not sure if that is jut the honeymoon phase or not.  I am working as a data scientist.  Its exciting that there is so much low hanging fruit to be had.  In my previous role as an engineer I was in a very established role.  While this role was great,  I really enjoyed it, and had no intentions of moving until  this oppotunity landed in my lap.  I felt like being in such an establishd role the job was to follow the processes that had been previously set up.  Now being in a much less established role there is a lot more room for creativity.  I like getting to work and really being excited to get to work creating things that add value to the organization.",
        "long_description": "Excitement This year I started a new position at work. Everything about it is enjoyable. Not sure if that is jut the honeymoon phase or not. I am working as a data scientist. Its exciting that there is so much low hanging fruit to be had. In my..."
    },
    {
        "cover": "/static/gratitude_024-xmas2020.png",
        "title": "Gratitude 024",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_024.md",
        "canonical_url": "https://waylonwalker.com/gratitude_024",
        "cover_image": "https:waylonwalker.com/gratitude_024.png",
        "date": "2018-01-11 00:00:00+00:00",
        "description": "Support Over the past few years we have recieved tons of support from other people. This is something that I am very g",
        "published": false,
        "content": "#### Support\n\nOver the past few years we have recieved tons of support from other people.   This is something that I am very grateful for and we would not be where we are today without it.  Along our journey we have came in contact with some very generous folks.  Yesterday was our opportunity to give a little back  to another.  One of Rhiannon's close friends boyfriends had passed away.  While we did not know him very well, he meant a whole lot to someone who means a whole lot to us.  I am very grateful that we were able to take the day off and make the long trip in good health.",
        "long_description": "Support Over the past few years we have recieved tons of support from other people. This is something that I am very grateful for and we would not be where we are today without it. Along our journey we have came in contact with some very generous..."
    },
    {
        "cover": "/static/gratitude_025-xmas2020.png",
        "title": "Gratitude 025",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_025.md",
        "canonical_url": "https://waylonwalker.com/gratitude_025",
        "cover_image": "https:waylonwalker.com/gratitude_025.png",
        "date": "2018-01-14 00:00:00+00:00",
        "description": "Support I am so grateful that I have Rhiannon in my life. Last night we were able to go out of our way to help a family",
        "published": false,
        "content": "#### Support\n\n\nI am so grateful that I have Rhiannon in my life.  Last night we were able to go out of our way to help a family member in  need.  I am so proud that she is able to stand up for what is right and help someone who really needs it.  This family member was in a really dark place and Rhiannon was able to spot that and stand up to help her.  This person really just needed someone there for her, to give her a hug, and not feel alone.  I am so proud of Rhiannon for being able to hold this persons hand, and walk her to a better place in life.\n\n\nI think there is a real sense of maturity that comes with being there yourslef and climbing out of that hole and realizing how much better life is on the other side if you can just put your head down, make some hard decisions and consiously control your life and direct it to where you want it to be.",
        "long_description": "Support I am so grateful that I have Rhiannon in my life. Last night we were able to go out of our way to help a family member in need. I am so proud that she is able to stand up for what is right and help someone who really needs it. This family..."
    },
    {
        "cover": "/static/gratitude_026-xmas2020.png",
        "title": "Gratitude 026",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_026.md",
        "canonical_url": "https://waylonwalker.com/gratitude_026",
        "cover_image": "https:waylonwalker.com/gratitude_026.png",
        "date": "2018-01-21 00:00:00+00:00",
        "description": "Calm On Thursday I got the call that Rhiannon had passes out during physical therapy. I went right to her therapy offic",
        "published": false,
        "content": "#### Calm\n\nOn Thursday I got the call that Rhiannon had passes out during physical therapy.  I went right to her therapy office to find her rehydrating in a chair.  She seemed ok and that this would pass and be ok.  When trying to get up again she passed out.  Three days later we are back home from the hospital and she is still passing out.  All we know is that she has cancer and she is struggling to keep her blood pressure up while standing.  I am very grateful that we have the friends we have to take care of everything at home for us.  Most of all I am grateful that we are able to keep it calm and collected.  Too many folks get very worked up through these events and it is not productive.  Our job is to remain calm, stay focused on the things that we are able to do that help her, and let the doctors do their job.  We have enough doctors involved that if there was something to find, it would have been found.  I really hope that we can get her back on her feet where she is not passing out everytime that she stands up.  But for now, I am keeping my calm, staying positive, spending time with the kids, and doing the tasks that help us function through the day.",
        "long_description": "Calm On Thursday I got the call that Rhiannon had passes out during physical therapy. I went right to her therapy office to find her rehydrating in a chair. She seemed ok and that this would pass and be ok. When trying to get up again she passed o..."
    },
    {
        "cover": "/static/gratitude_027-xmas2020.png",
        "title": "Gratitude 027",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_027.md",
        "canonical_url": "https://waylonwalker.com/gratitude_027",
        "cover_image": "https:waylonwalker.com/gratitude_027.png",
        "date": "2018-01-22 00:00:00+00:00",
        "description": "Encouragement CuttinScrap.com was released last night!!! I am very excited with how it is turning out. I am even more",
        "published": false,
        "content": "#### Encouragement\n\n[CuttinScrap.com](https://www.cuttinscrap.com) was released last night!!!  I am very excited with how it is turning out.  I am even more excited to see Rhiannon start using it and getting some more content built up.  This is the by far the biggest front end project that I have ever done.  I think most of all I really like seeing how much Rhiannon likes site.   She seems blown away and has commented that she did not think that it would turn out anywhere close to this good. She would have been proud to own it either way just knowing that I built it for her.  Seeing her face light up during each preview that we did really kept me going to finish.",
        "long_description": "Encouragement CuttinScrap.com was released last night!!! I am very excited with how it is turning out. I am even more excited to see Rhiannon start using it and getting some more content built up. This is the by far the biggest front end project t..."
    },
    {
        "cover": "/static/gratitude_028-xmas2020.png",
        "title": "Gratitude 028",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_028.md",
        "canonical_url": "https://waylonwalker.com/gratitude_028",
        "cover_image": "https:waylonwalker.com/gratitude_028.png",
        "date": "2018-01-23 00:00:00+00:00",
        "description": "Time I am not sure that time heals all wounds, but some wounds just take time. Yesterday during therapy Rhiannon finall",
        "published": false,
        "content": "#### Time\n\nI am not sure that time heals all wounds, but some wounds just take time.  Yesterday during therapy Rhiannon finally had a chance to talk about some very tough topics.  It was very tough to talk about at the time, and I did have a bit of a rough afternoon following the appointment.  I am not sure why, but I just needed some space and time.  Today I feel quite a bit better and am ready to start my day on a good note!  I am not sure how long it will take for these wounds to heal but time will help.\n\nI am very grateful that Rhiannon was able to give me some space and time yesterday after our appointment.  I know that it is very difficult for her to see me down.  I am also very grateful that she setup therapy for us and has given us this outlet to discuss topics like this.  I am grateful that we were able to bring it up and talk about it with a neutral party.",
        "long_description": "Time I am not sure that time heals all wounds, but some wounds just take time. Yesterday during therapy Rhiannon finally had a chance to talk about some very tough topics. It was very tough to talk about at the time, and I did have a bit of a rough..."
    },
    {
        "cover": "/static/gratitude_029-xmas2020.png",
        "title": "Gratitude 029",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_029.md",
        "canonical_url": "https://waylonwalker.com/gratitude_029",
        "cover_image": "https:waylonwalker.com/gratitude_029.png",
        "date": "2018-01-24 00:00:00+00:00",
        "description": "Finishing Last night was a night that I had to run back into work late at night to run some analysis. I was able to get",
        "published": false,
        "content": "#### Finishing\n\nLast night was a night that I had to run back into work late at night to run some analysis.  I was able to get in and get it done fairly quickly, and it felt really good to have it done and not have to worry about it in the last hour before the presentation.  I also stuck to my No More Death by powerpoint rule, and did not include an eye chart in the slides.  This was something that I always said I would change when I took over the role, but never did.  Now that I have vowed to never again break the principles of Death by PowerPoint I had to change.\n\n\nSecondly my wife is a rockstar.  She was up with our crazy son most of the night, as he was really struggling to sleep.  He was just up and ready to go really early in the morning.  I am grateful that I was able to get somme sleep, and really hope that she is able to get some rest while the house is quiet today.\n\n<style>@import url(\"https://goo.gl/RrPQm5\")</style>",
        "long_description": "Finishing Last night was a night that I had to run back into work late at night to run some analysis. I was able to get in and get it done fairly quickly, and it felt really good to have it done and not have to worry about it in the last hour before..."
    },
    {
        "cover": "/static/gratitude_030-xmas2020.png",
        "title": "Gratitude 030",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_030.md",
        "canonical_url": "https://waylonwalker.com/gratitude_030",
        "cover_image": "https:waylonwalker.com/gratitude_030.png",
        "date": "2018-01-25 00:00:00+00:00",
        "description": "Great Friends I am grateful that I have such great friends that are able to help us through a very difficult time. Toda",
        "published": false,
        "content": "#### Great Friends\n\nI am grateful that I have such great friends that are able to help us through a very difficult time.  Today I am able to work and not have to worry about Rhiannon or the kids, knowing that someone is home with them.  The peace of mind is invaluable when you have a family member with a severe medical issue.",
        "long_description": "Great Friends I am grateful that I have such great friends that are able to help us through a very difficult time. Today I am able to work and not have to worry about Rhiannon or the kids, knowing that someone is home with them. The peace of mind i..."
    },
    {
        "cover": "/static/gratitude_031-xmas2020.png",
        "title": "Gratitude 031",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_031.md",
        "canonical_url": "https://waylonwalker.com/gratitude_031",
        "cover_image": "https:waylonwalker.com/gratitude_031.png",
        "date": "2018-01-26 00:00:00+00:00",
        "description": "Pick me up Sometimes you just need a bit of help and it is hard to pick yourself up. This morning was one of those days",
        "published": false,
        "content": "#### Pick me up\n\nSometimes you just need a bit of help and it is hard to pick yourself up.  This morning was one of those days.  I just felt overwhelmed and like there was no stopping it.  Rhiannon gave me a call and after talking through some things I felt a huge weight lifted.  I wouldn't say that I was healed, but I would say I was on a good trajectory.  It's really hard to battle things as a family. We are all in it together and that picking each other up will help everyone.",
        "long_description": "Pick me up Sometimes you just need a bit of help and it is hard to pick yourself up. This morning was one of those days. I just felt overwhelmed and like there was no stopping it. Rhiannon gave me a call and after talking through some things I fel..."
    },
    {
        "cover": "/static/gratitude_032-xmas2020.png",
        "title": "Gratitude 032",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_032.md",
        "canonical_url": "https://waylonwalker.com/gratitude_032",
        "cover_image": "https:waylonwalker.com/gratitude_032.png",
        "date": "2018-01-29 00:00:00+00:00",
        "description": "Get out and move This weekend was an abnormally warm January weekend, which meant that we were able to ge the kids out a",
        "published": false,
        "content": "#### Get out and move\n\n\nThis weekend was an abnormally warm January weekend, which meant that we were able to ge the kids out and moving more than normal.  On Saturday we started to build Wyatt Walkers Walking path through the thick brush.  Both kids were really into it and were guiding me through the thick brush letting me know where the path should turn next.  Wyatt kept very busy with his tree pruners trimming the leftover branches.\n\nOn Sunday the kids and I went out to the skate park while mommy had a lunch date with a friend.  Ayla enjoyed throwing a small frisbee off of the top of the pyramid while Wyatt rode his scooter and daddy's skateboard around the park.",
        "long_description": "Get out and move This weekend was an abnormally warm January weekend, which meant that we were able to ge the kids out and moving more than normal. On Saturday we started to build Wyatt Walkers Walking path through the thick brush. Both kids were r..."
    },
    {
        "cover": "/static/gratitude_034-xmas2020.png",
        "title": "Gratitude 034",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_034.md",
        "canonical_url": "https://waylonwalker.com/gratitude_034",
        "cover_image": "https:waylonwalker.com/gratitude_034.png",
        "date": "2018-01-29 00:00:00+00:00",
        "description": "Communication Today I am grateful that I am able to communicate with my beautiful wife Rhiannon. I am so glad that we ar",
        "published": false,
        "content": "#### Communication\n\n\nToday I am grateful that I am able to communicate with my beautiful wife Rhiannon. I am so glad that we are able to help each other out on our worst days, and keep going even after our bad moments.  We are able to grow and build off of each other.  I am grateful that we have an open and honest relationship that we are able to talk about anything.  We have had a rough month, and will continue to have a rough patch until after Feb. 20.  Its to be expected that we have these patches with her illness. I am really grateful that we are able to get through them together, so that we can enjoy the good days.  Good days are coming, lets make the best out of the rough ones together.",
        "long_description": "Communication Today I am grateful that I am able to communicate with my beautiful wife Rhiannon. I am so glad that we are able to help each other out on our worst days, and keep going even after our bad moments. We are able to grow and build off of..."
    },
    {
        "cover": "/static/gratitude_033-xmas2020.png",
        "title": "Gratitude 033",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_033.md",
        "canonical_url": "https://waylonwalker.com/gratitude_033",
        "cover_image": "https:waylonwalker.com/gratitude_033.png",
        "date": "2018-01-29 00:00:00+00:00",
        "description": "Safety Today started out like most days, morning routine, kids in the car and headed to preschool. Since Rhiannon got t",
        "published": false,
        "content": "#### Safety\n\nToday started out like most days, morning routine, kids in the car and headed to preschool.  Since Rhiannon got the January mug at Starbucks we have been stopping there for the morning coffee on the way to preschool.  As we were leaving a police car came roaring from the parking lot lights on right behind us.  There was an accident at the intersection right in front of Starbucks.  Passing by the accident it clearly looked like one car took more damage than the other, and that it was from being hit by another car and pushed into a pole at a high speed.  My heart goes out to them! It made me really grateful that we have not been in any accidents, especially because we typically drive down a very crazy road in the mornings.  It is not uncommon to come accross accidents along the way.",
        "long_description": "Safety Today started out like most days, morning routine, kids in the car and headed to preschool. Since Rhiannon got the January mug at Starbucks we have been stopping there for the morning coffee on the way to preschool. As we were leaving a poli..."
    },
    {
        "cover": "./flex-xmas2020.png",
        "title": "Vim Notes",
        "tags": [],
        "status": "Draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/vim-notes.md",
        "canonical_url": "https://waylonwalker.com/vim-notes",
        "cover_image": "https:waylonwalker.com/./flex.png",
        "date": "2018-02-01 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "# vim notes\n\n## Using c to change text\n\nI have gone quite awhile without using ```c``` and instead using ```d```.  The reason that I started using ```c``` is because it automatically places you into insert mode.  This not only saves me one keystroke for commands such as ```diwi``` is now ```ciw```, but it also works with the repeat ```.``` command!!!  This is huge.  When refactoring a document I had been creating a macro to change one word to another, using ```c``` instead of ```d``` allows the use of the ```.``` rather than needing to create a macro.\n\n## Case for vim\n\n**Sublime/VSCode cannot**\n\n* edit a macro register\n* register\n\n\n## autocomplete\n\n<C-x> <C-p> repeats previously typed text\n\n    1. Whole lines                                     |i CTRL-X CTRL-L|\n    2. keywords in the current file                    |i CTRL-X CTRL-N|\n    3. keywords in 'dictionary'                        |i CTRL-X CTRL-K|\n    4. keywords in 'thesaurus', thesaurus-style        |i CTRL-X CTRL-T|\n    5. keywords in the current and included files      |i CTRL-X CTRL-I|\n    6. tags                                            |i CTRL-X CTRL-]|\n    7. file names                                      |i CTRL-X CTRL-F|\n    8. definitions or macros                           |i CTRL-X CTRL-D|\n    9. Vim command-line                                |i CTRL-X CTRL-V|\n    10. User defined completion                        |i CTRL-X CTRL-U|\n    11. omni completion                                |i CTRL-X CTRL-O|\n    12. Spelling suggestions                           |i CTRL-X s|\n    13. keywords in 'complete'                         |i CTRL-N|\n\n## z-commands\n\n```zn```\t\tFold none: reset 'foldenable'.  All folds will be open.",
        "long_description": "vim notes Using c to change text I have gone quite awhile without using c and instead using d. The reason that I started using c is because it automatically places you into insert mode. This not only saves me one keystroke for commands such as diwi..."
    },
    {
        "cover": "/static/gratitude_035-xmas2020.png",
        "title": "Gratitude 035",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_035.md",
        "canonical_url": "https://waylonwalker.com/gratitude_035",
        "cover_image": "https:waylonwalker.com/gratitude_035.png",
        "date": "2018-02-01 00:00:00+00:00",
        "description": "Peace Today I am strugging to come up with a new topic for my gratitude journal. I feel like I have written about many",
        "published": false,
        "content": "#### Peace\n\nToday I am strugging to come up with a new topic for my gratitude journal.  I feel like I have written about many of the things I am grateful for recently.  As I am sitting here with a nice display of color and listening to the frogs, from our kids's lighted sound machine of course.  I realize that I am just enjoying this moment of peace.  It is nice to not have to worry about anything for a few minutes and just let the words flow.  I think this is why I enjoy doing this gratitude journal, becuase I feel a nice sense of peace after completeing it for the day.  Sometimes the days are crazy, sometimes they are normal, sometimes they are quiet each day is new and none like the other.  But whatever the day brings most of them have included this 5 minutes of peace for the last 35 days.  Thank you Rhiannon for pushing me to start this journal.\n\n> Sometimes the days are crazy, sometimes they are normal, sometimes they are quiet each day is new and none like the other.\n\n\n<style>@import url(\"https://goo.gl/RrPQm5\")</style>",
        "long_description": "Peace Today I am strugging to come up with a new topic for my gratitude journal. I feel like I have written about many of the things I am grateful for recently. As I am sitting here with a nice display of color and listening to the frogs, from our..."
    },
    {
        "cover": "/static/gratitude_036-xmas2020.png",
        "title": "Gratitude 036",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_036.md",
        "canonical_url": "https://waylonwalker.com/gratitude_036",
        "cover_image": "https:waylonwalker.com/gratitude_036.png",
        "date": "2018-02-03 00:00:00+00:00",
        "description": "Special Time This morning Wyatt came into our room just as normal, chipper as can be ready to go. But something was dif",
        "published": false,
        "content": "#### Special Time\n\nThis morning Wyatt came into our room just as normal, chipper as can be ready to go.  But something was different than normal.  I felt like I had just hit the pillow.  I grabbed a phone so that he could go watch something on his own, when I relized that it was 2:30AM.  This is not out of the ordinary for him to have a few days that he is ready to go.  We have learned that this is part of his ADHD and his mind is just running and ready to go.  Fighting  it only makes for starting off what could have been a good day on a bad note.  I let him go downstairs and he stayed quiet for the most part and let everyone sleep.  When I came down just before 6 he greeted me with cheer, let me have my coffee and we proceeded to have some special time.  We build with magnet tiles, legos, played a game, and even went outside to continue carving our path through the woods.  I cherish our special time together in happiness and am glad that we are learning to work with his disorder and have more good days like this.",
        "long_description": "Special Time This morning Wyatt came into our room just as normal, chipper as can be ready to go. But something was different than normal. I felt like I had just hit the pillow. I grabbed a phone so that he could go watch something on his own, whe..."
    },
    {
        "cover": "/static/gratitude_037-xmas2020.png",
        "title": "Gratitude 037",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_037.md",
        "canonical_url": "https://waylonwalker.com/gratitude_037",
        "cover_image": "https:waylonwalker.com/gratitude_037.png",
        "date": "2018-02-04 00:00:00+00:00",
        "description": "Kid Smarts I cannot express how grateful I am for Rhiannon's smarts when it comes to raising small children. These thin",
        "published": false,
        "content": "#### Kid Smarts\n\nI cannot express how grateful I am for Rhiannon's smarts when it comes to raising small children.  These things are complicated and only continue to get more complicated as they grow!  There are times where I am just not quite sure what to do or how to handle certain situations, and she will come back with an answer that makes sense.  Giving an understanding about how that would make the child feel in the moment and what it will do to them in the long term.  As I am growing these understandings things are making more sense, but I still feel like I have a lot to learn when it comes to parenting.  I am not only grateful that she takes the lead on the research and develops new strategies as they grow, but she is also able to present to me in a way that makes sense.",
        "long_description": "Kid Smarts I cannot express how grateful I am for Rhiannon's smarts when it comes to raising small children. These things are complicated and only continue to get more complicated as they grow! There are times where I am just not quite sure what to..."
    },
    {
        "cover": "./crown-royal-bag-quilt.jpg",
        "title": "My favorite pandas pattern",
        "tags": [],
        "status": "Draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/pandas-pattern.md",
        "canonical_url": "https://waylonwalker.com/pandas-pattern",
        "cover_image": "https:waylonwalker.com/./crown-royal-bag-quilt.jpg",
        "date": "2018-03-01 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "# My favorite pandas pattern\n\n\nI work with a lot of transactional timeseries data that includes categories.  I often want to create timeseries plots with each category as its own line.  This is the method that I use almost data to achieve this result.  Typically the data that am working with changes very slowly and trends happen over years not days or weeks.  Plotting daily/weekly data tends to be noisy and hides the trend.  I use this pattern because it works well with my data and is easy to explain to my stakeholders.\n\n\n\n```python\nimport pandas as pd\nimport numpy as np\n% matplotlib inline\n```\n\n## Lets Fake some data\n\n\nHere I am trying to simulate a subset of a large transactional data set. This could be something like sales data, production data, hourly billing, anything that has a date, category, and value.  Since we generated this data we know that it is clean.  I am still going to assume that it contains some nulls, and an irregular date range.\n\n\n```python\nn = 365*5\ncols = {'level_0': 'date',\n        'level_1': 'item',\n        0: 'qty', }\ndata = (pd.DataFrame(np.random.randint(0, 10, size=(n, 4)),\n                     columns=['paper', 'pencils', 'note cards', 'markers'],\n                     index=pd.date_range('1/1/2017', periods=n, freq='d'),\n                     )\n        .stack()\n        .to_frame()\n        .reset_index()\n        .rename(columns=cols))\ndata.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>item</th>\n      <th>qty</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2017-01-01</td>\n      <td>paper</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2017-01-01</td>\n      <td>pencils</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2017-01-01</td>\n      <td>note cards</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2017-01-01</td>\n      <td>markers</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2017-01-02</td>\n      <td>paper</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## The pattern\n\nHere I am going to take my groupby date and item, this will take care of duplicate entries with the same time stamp.  Select the value I want to sum on. unstack the items index into columns.  Resample the data by month.  I could easily use any of the [available rules](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases). Fill any missing months with 0, since there wasnt a transaction during that month. Apply a rolling window to get the annual sum.  I find that this helps to ground values in values that my stakeholders are used to seeing on a regular basis and reduces the need for them to recalculate in their head.  Then I am going to drop the nulls created by the rolling window for the first 11 rows.\n\n\n```python\nplot_data = (data\n             .groupby(['date', 'item'])\n             .sum()\n             ['qty']\n             .unstack()\n             .resample('m')\n             .sum()\n             .fillna(0)\n             .rolling(12)\n             .sum()\n             .dropna()\n             )\nplot_data.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>item</th>\n      <th>markers</th>\n      <th>note cards</th>\n      <th>paper</th>\n      <th>pencils</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-31</th>\n      <td>1543.0</td>\n      <td>1739.0</td>\n      <td>1613.0</td>\n      <td>1657.0</td>\n    </tr>\n    <tr>\n      <th>2018-01-31</th>\n      <td>1572.0</td>\n      <td>1744.0</td>\n      <td>1635.0</td>\n      <td>1635.0</td>\n    </tr>\n    <tr>\n      <th>2018-02-28</th>\n      <td>1563.0</td>\n      <td>1717.0</td>\n      <td>1645.0</td>\n      <td>1645.0</td>\n    </tr>\n    <tr>\n      <th>2018-03-31</th>\n      <td>1596.0</td>\n      <td>1703.0</td>\n      <td>1629.0</td>\n      <td>1600.0</td>\n    </tr>\n    <tr>\n      <th>2018-04-30</th>\n      <td>1557.0</td>\n      <td>1693.0</td>\n      <td>1648.0</td>\n      <td>1581.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nplot_data.plot(title='Rolling annual sum of Categorical Random Data');\n```\n\n## For the Visual Learners\n\n### Groupby\n\n\n```python\nplot_data = (data\n             .groupby(['date', 'item'])\n             .sum()\n             )\nplot_data.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>qty</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th>item</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">2017-01-01</th>\n      <th>markers</th>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>note cards</th>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>paper</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>pencils</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2017-01-02</th>\n      <th>markers</th>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Select Values\n\nIn this case I chose to do this to avoid working with a multiple levels in the columns that would be created in the unstack() step.\n\n\n```python\nplot_data = plot_data['qty']\n\nplot_data.head()\n```\n\n\n\n\n    date        item\n    2017-01-01  markers       9\n                note cards    5\n                paper         1\n                pencils       4\n    2017-01-02  markers       4\n    Name: qty, dtype: int32\n\n\n\n### unstack\n\ntransform the last column in the index ('item') into rows.\n\n\n```python\nplot_data = plot_data.unstack()\n\nplot_data.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>item</th>\n      <th>markers</th>\n      <th>note cards</th>\n      <th>paper</th>\n      <th>pencils</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-01-01</th>\n      <td>9</td>\n      <td>5</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2017-01-02</th>\n      <td>4</td>\n      <td>2</td>\n      <td>3</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2017-01-03</th>\n      <td>9</td>\n      <td>5</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2017-01-04</th>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2017-01-05</th>\n      <td>0</td>\n      <td>1</td>\n      <td>6</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### resample\n\nThis step is important for irregular data in order to get the data into regular intervals.\n\n\n```python\nplot_data = plot_data.resample('m').sum()\n\nplot_data.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>item</th>\n      <th>markers</th>\n      <th>note cards</th>\n      <th>paper</th>\n      <th>pencils</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-01-31</th>\n      <td>145</td>\n      <td>128</td>\n      <td>117</td>\n      <td>146</td>\n    </tr>\n    <tr>\n      <th>2017-02-28</th>\n      <td>136</td>\n      <td>140</td>\n      <td>133</td>\n      <td>135</td>\n    </tr>\n    <tr>\n      <th>2017-03-31</th>\n      <td>112</td>\n      <td>145</td>\n      <td>125</td>\n      <td>163</td>\n    </tr>\n    <tr>\n      <th>2017-04-30</th>\n      <td>143</td>\n      <td>148</td>\n      <td>112</td>\n      <td>147</td>\n    </tr>\n    <tr>\n      <th>2017-05-31</th>\n      <td>86</td>\n      <td>134</td>\n      <td>139</td>\n      <td>141</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### rolling\n\nI like to use rolling because it get the data into annual numbers, and reduces noise.  I have found that most of my datasets have patterns and trends that are greater than 1y.  This  is just due to the industry that I am in.  Play with the resample and rolling rules to fit the need of your own data.\n\n\n```python\nplot_data = plot_data.rolling(12).sum()\n\nplot_data.head(20)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>item</th>\n      <th>markers</th>\n      <th>note cards</th>\n      <th>paper</th>\n      <th>pencils</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-01-31</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-02-28</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-03-31</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-04-30</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-05-31</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-06-30</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-07-31</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-08-31</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-09-30</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-10-31</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-11-30</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2017-12-31</th>\n      <td>1543.0</td>\n      <td>1739.0</td>\n      <td>1613.0</td>\n      <td>1657.0</td>\n    </tr>\n    <tr>\n      <th>2018-01-31</th>\n      <td>1572.0</td>\n      <td>1744.0</td>\n      <td>1635.0</td>\n      <td>1635.0</td>\n    </tr>\n    <tr>\n      <th>2018-02-28</th>\n      <td>1563.0</td>\n      <td>1717.0</td>\n      <td>1645.0</td>\n      <td>1645.0</td>\n    </tr>\n    <tr>\n      <th>2018-03-31</th>\n      <td>1596.0</td>\n      <td>1703.0</td>\n      <td>1629.0</td>\n      <td>1600.0</td>\n    </tr>\n    <tr>\n      <th>2018-04-30</th>\n      <td>1557.0</td>\n      <td>1693.0</td>\n      <td>1648.0</td>\n      <td>1581.0</td>\n    </tr>\n    <tr>\n      <th>2018-05-31</th>\n      <td>1624.0</td>\n      <td>1674.0</td>\n      <td>1632.0</td>\n      <td>1592.0</td>\n    </tr>\n    <tr>\n      <th>2018-06-30</th>\n      <td>1582.0</td>\n      <td>1645.0</td>\n      <td>1657.0</td>\n      <td>1593.0</td>\n    </tr>\n    <tr>\n      <th>2018-07-31</th>\n      <td>1662.0</td>\n      <td>1654.0</td>\n      <td>1680.0</td>\n      <td>1613.0</td>\n    </tr>\n    <tr>\n      <th>2018-08-31</th>\n      <td>1654.0</td>\n      <td>1617.0</td>\n      <td>1650.0</td>\n      <td>1616.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### dropna\n\nget rid of the first 11 null rows\n\n\n```python\nplot_data = plot_data.dropna()\n\nplot_data.head(10)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>item</th>\n      <th>markers</th>\n      <th>note cards</th>\n      <th>paper</th>\n      <th>pencils</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-31</th>\n      <td>1543.0</td>\n      <td>1739.0</td>\n      <td>1613.0</td>\n      <td>1657.0</td>\n    </tr>\n    <tr>\n      <th>2018-01-31</th>\n      <td>1572.0</td>\n      <td>1744.0</td>\n      <td>1635.0</td>\n      <td>1635.0</td>\n    </tr>\n    <tr>\n      <th>2018-02-28</th>\n      <td>1563.0</td>\n      <td>1717.0</td>\n      <td>1645.0</td>\n      <td>1645.0</td>\n    </tr>\n    <tr>\n      <th>2018-03-31</th>\n      <td>1596.0</td>\n      <td>1703.0</td>\n      <td>1629.0</td>\n      <td>1600.0</td>\n    </tr>\n    <tr>\n      <th>2018-04-30</th>\n      <td>1557.0</td>\n      <td>1693.0</td>\n      <td>1648.0</td>\n      <td>1581.0</td>\n    </tr>\n    <tr>\n      <th>2018-05-31</th>\n      <td>1624.0</td>\n      <td>1674.0</td>\n      <td>1632.0</td>\n      <td>1592.0</td>\n    </tr>\n    <tr>\n      <th>2018-06-30</th>\n      <td>1582.0</td>\n      <td>1645.0</td>\n      <td>1657.0</td>\n      <td>1593.0</td>\n    </tr>\n    <tr>\n      <th>2018-07-31</th>\n      <td>1662.0</td>\n      <td>1654.0</td>\n      <td>1680.0</td>\n      <td>1613.0</td>\n    </tr>\n    <tr>\n      <th>2018-08-31</th>\n      <td>1654.0</td>\n      <td>1617.0</td>\n      <td>1650.0</td>\n      <td>1616.0</td>\n    </tr>\n    <tr>\n      <th>2018-09-30</th>\n      <td>1669.0</td>\n      <td>1648.0</td>\n      <td>1638.0</td>\n      <td>1634.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
        "long_description": "My favorite pandas pattern I work with a lot of transactional timeseries data that includes categories. I often want to create timeseries plots with each category as its own line. This is the method that I use almost data to achieve this result. T..."
    },
    {
        "cover": "/static/gratitude_039-xmas2020.png",
        "title": "Gratitude 039",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_039.md",
        "canonical_url": "https://waylonwalker.com/gratitude_039",
        "cover_image": "https:waylonwalker.com/gratitude_039.png",
        "date": "2018-03-14 00:00:00+00:00",
        "description": "Leis Yesterday we had the great opportunity to meet with Leis from ramsey Solutions. We were very honored to be able to",
        "published": false,
        "content": "#### Leis\n\nYesterday we had the great opportunity to meet with Leis from ramsey Solutions.  We were very honored to be able to meet with such knowledgeable advisor as Leis.  He confirmed many of the things that we had in our minds and was able to offer a few suggestions for us.  Most of all I was really proud of all fo the work that Rhiannon has done to set up for the future.  The meeting with Leis confirmed that she has done everything possible to set up for success.  She had an answer for all of his questions, and had everything setup that he suggested.  Her organizational skills have really paid off.  I have a really good feeling that we are as well prepared as we can be and on track to succeed in the future.  Thank you Leis for your time! It is greatly appreciated.",
        "long_description": "Leis Yesterday we had the great opportunity to meet with Leis from ramsey Solutions. We were very honored to be able to meet with such knowledgeable advisor as Leis. He confirmed many of the things that we had in our minds and was able to offer a f..."
    },
    {
        "cover": "/static/gratitude_040-xmas2020.png",
        "title": "Gratitude 0040",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_040.md",
        "canonical_url": "https://waylonwalker.com/gratitude_040",
        "cover_image": "https:waylonwalker.com/gratitude_040.png",
        "date": "2018-03-18 00:00:00+00:00",
        "description": "No More Credit Cards Let's face it we all know that credit cards are bad and we should not let them get out of control,",
        "published": false,
        "content": "#### No More Credit Cards\n\nLet's face it we all know that credit cards are bad and we should not let them get out of control, but you know what life happens and when you dont have an emergency fund in order using one is better than being stranded with a broken car, or missing out on a very important family event.  I am very grateful to say that today we not only do we have a good emergency fund in place, but we also have our last credit card paid off.  I cannot explain how great this feels.   We had stretched ourselves too thin and were using debt for emergencies for a few years, and it had gotten to the point that I felt like we were in an endless cycle that we could never get out of.\n\n\nThis would not have been possible without the help of several folks.  First off Rhiannon, as if you are not on the same page as your wife with finances, you will never fix your financial problems.  Second Dave Ramsey for showing us the light. And finally our friends who have supported us more than we can even thank them for.",
        "long_description": "No More Credit Cards Let's face it we all know that credit cards are bad and we should not let them get out of control, but you know what life happens and when you dont have an emergency fund in order using one is better than being stranded with a br..."
    },
    {
        "cover": "/static/gratitude_041-xmas2020.png",
        "title": "Gratitude 0040",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_041.md",
        "canonical_url": "https://waylonwalker.com/gratitude_041",
        "cover_image": "https:waylonwalker.com/gratitude_041.png",
        "date": "2018-03-24 00:00:00+00:00",
        "description": "I slept in Today has been a really relaxing day! I woke up this morning Rhiannon was with Ayla, and Wyatt was downstair",
        "published": false,
        "content": "#### I slept in\n\nToday has been a really relaxing day!  I woke up this morning Rhiannon was with Ayla, and Wyatt was downstairs with some friends staying in the house, so I continued sleeping until I was ready to get up.  After getting up I helped Ayla with potty training for awhile,  in which we racked up 3 sticker! Then Wyatt and I went out sledding in this epic snow that we were blessed with today.  It was a thick heavy, and perfect sledding snow.  We built a tall takeoff ramp, and continued sledding for quite awile.  It was a bit tiring from the weight of the snow, but it was super fun.  The reason that I say that we were blessed with this snow is that the fires have stopped.  Every trip we  leave the house this past week has ended up with us running into a thick smoke from folks burning grass and brush.  This landed us in the hospital once, and Rhiannon in strong pain the other times.",
        "long_description": "I slept in Today has been a really relaxing day! I woke up this morning Rhiannon was with Ayla, and Wyatt was downstairs with some friends staying in the house, so I continued sleeping until I was ready to get up. After getting up I helped Ayla wit..."
    },
    {
        "cover": "./sql-wide-xmas2020.png",
        "title": "Stepping Up My SQL Game",
        "tags": [
            "data",
            "sql"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/datacamp-sql.md",
        "canonical_url": "https://waylonwalker.com/datacamp-sql",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./sql-wide.png",
        "date": "2018-03-25 00:00:00+00:00",
        "description": "none",
        "published": false,
        "summary": "I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed.",
        "content": "In 2018 I transitioned from a Product Engineering (Mechanical) role to a Data Scientist Role.  I entered this space with strong subject matter expertise with our products, our data, munging through data in pyhon, and data visualization in python.  My sql skills were lacking to say the least.  I had learned what I needed to know to get data from our relational databases, then use pandas to do any further analysis.    Just run something like the following and you have data.\n\n``` sql\nSELECT\n    *\nFROM\n    Table\nWhere\n    col_1 = 'col_1_filter'\n```\n\nThis technique works great for small data sets that you only need to run once.  There is no shame to pull in a big dataset and start munging with it in pandas to get some results, and make decisions.  The problem becomes when your dataset becomes too big or you need to run the query on a frequent basis.  Doing the aggregations on the server run much quicker, as it reduces the time spent in io.  My longest running steps are currently io related.  Reducing these steps have improved my workflow.  At the point that I was getting server timeout errors, or using the same long running query in many places I would be searching for examples online, because I just did not have the experience with many more techniques.  I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed.\n\n## Why Learn SQL in 2018??\n\nSQL is far from the hot topic in 2018, AI, Deep Learning, BIG data, Machine Learning, Natural Language Processing take the win here.  SQL is so simple why would anyone want to spend time learning SQL?  The reason... all of those hot topics in 2018 require data.  My data mostly comes from relational databases which require sql to get data from them.  Without the ability to efficiently get the data I need to do an aanlysis I cannot even start.  Sure I could use an ORM, but I found that to be a bit unwieldy with the thousands of tables  we have in formats that were determined many years ago. Plus raw SQL is more transportable.  I commonly collaborate with other folks who do not use python.  I am proud that I am able to point them to the SQL I use rather than telling them to suck it up an learn python.  I truly believe that people are the most effective when they are able to choose their own stack of tools.  Taking some time to focus on the basics of Data Science will help be build a strong foundation for my career.\n\n## [Joining Data in Posgres](https://campus.datacamp.com/courses/joining-data-in-postgresql)\n\nBelow are my notes from the [Joining Data in Posgres](https://campus.datacamp.com/courses/joining-data-in-postgresql)\ncourse on DataCamp.  I will use these notes as a refresher when I need a quick reference.\n\n### Using()\nWhen joining two tables on the same column the ```USING``` clause can be used as a shorthand.\n\n**without using**\n```sql\nSELECT *\n\nFROM\n    Table1 as t1\n\nLEFT JOIN\n    Table2 as t2\n    ON t1.id = t2.id\n```\n\n**with using**\n```sql\nSELECT\n    *\n\nFROM\n    Table1 as t1\n\nLEFT JOIN\n    Table2 as t2\n    USING (id)\n```\n\n### Join Types\n_for joining columns of data together into a single table_\n\n```INNER```: Includes only records contained in **both** tables.\n\n```RIGHT```: Inlcudes all records from the **right**, droping values from the left if non-existent in the right, or leaving nulls if non-existant in the left.\n\n```LEFT```: Inlcudes all records from the **left**, droping values from the right if non-existent in the left, or leaving nulls if non-existant in the right.\n\n```FULL```: Combination of ```Left``` and ```Right``` Join, leaving nulls where data is missing in one table, and not droping any data.\n\n```CROSS```: returns all **pairs** from two tables, does not have an on or using clause.\n\n### Union\n_for concatenating rows of data with the same columns_\n\n```Union```: returns only unique records, does not include duplicates.\n\n```Union All```: returns all records(including duplicates)\n\n### Intersect\n\n```Intersect```: returns only records appearing in both tables\n\n### Execpt\n\n```Except```: returns only records not in the second table\n\n### Self-Joins\n\n```Semi-Join```: Filters based on results of a subquery.  Does not have direct sql syntax.  This type of join is achieved through a subquery in the where statement.\n\n```Anti-Join```: Similar to the Semi-join, but using a ```not``` modifier.  This is particularly useful for debugging situations.\n\n### Subqueries\n\nThis is where I have really stepped up my sql game.  I was able to get practice writing more complex queries. I also learned about different methods of joining tables together.\n\n#### WHERE\n\nSubqueries are commonly found in the where clause to filter data.  Below is an example given in the course to select only the Asian countries with below average fertility rate from the states table.\n\n``` sql\nSELECT\n   name,\n   fert_rate\nFROM\n    states\nWHERE\n    continent = 'Asia'\nAND fert_rate <\n        (SELECT AVG(fert_rate)\n         FROM states;)\n```\n\n#### SELECT\n\nSubqueries can be found in the `SELECT` clause to create new columns of data.  This is a different technique than I have used in the past.  Previously I have only used `GROUPBY` statements to get this effect.  I can see where this can be really useful because it is not constrained by aggregations any data point can be pulled in with this tecnhique.\n\n``` sql\nSELECT DISTINCT\n    continent,\n    (SELECT\n        COUNT(*)\n     FROM\n        states\n     WHERE\n        prime_ministers.continent = states.continent\n    ) AS countries_num\n\nFrom Prime Ministers\n```\n\n#### FROM\n\nsubqueries found in the `FROM` clause can be very helpful to create a new dataset from an existing table.  I find these the easiest to read as it is not much different than creating a new table.  Again this can be very powerful in creating new columns that were not easily available otherwise.\n\n\n``` sql\nSELECT DISTINCT\n    monarchs.continent,\n    subquery.max_perc\n\nFROM\n    monarchs,\n    (SELECT\n        continent,\n        MAX(women_parli_perc) AS max_perc\n\n    FROM\n        states\n\n    GROUP BY\n        continent\n    ) as subquery\n\nWHERE\n    monarchs.continent = subquery.continent\n\nORDER BY\n    continent;\n```\n\n#### ON\n\n**Challenge Problem 1**  This problem was the one that had me more stumped than any other problem in the course.  I found the subquery inside the on statement very confusing to understand.  In this question we are joining the countries table to a subquery what yields country codes of countries with offial languages from the languages table.\n\n``` sql\nSELECT DISTINCT\n    c.name,\n    e.total_investment,\n    e.imports\n\nFROM\n    countries as c\nLEFT JOIN\n    economies as e\n    ON c.code = e.code\n\n    AND c.code in (\n    SELECT\n        l.code\n    FROM\n        languages as l\n    WHERE\n        official = true\n    )\n\nWHERE\n    c.region = 'Central America'\nAND e.year = 2015\n\nORDER BY\n    c.name asc;\n```",
        "long_description": "In 2018 I transitioned from a Product Engineering (Mechanical) role to a Data Scientist Role. I entered this space with strong subject matter expertise with our products, our data, munging through data in pyhon, and data visualization in python. My..."
    },
    {
        "cover": "/static/gratitude_042-xmas2020.png",
        "title": "Gratitude 042",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_042.md",
        "canonical_url": "https://waylonwalker.com/gratitude_042",
        "cover_image": "https:waylonwalker.com/gratitude_042.png",
        "date": "2018-03-26 00:00:00+00:00",
        "description": "Happy Birthday Today I am very grateful for all of the wonderful birthday wishes. I started off the day with two very e",
        "published": false,
        "content": "#### Happy Birthday\n\nToday I am very grateful for all of the wonderful birthday wishes.  I started off the day with two very excited kids.  They couldn't wait to wake up, give daddy a big hug and wish him happy birthday today.  My kids love them some birthday wishes and do all they can to make the birthday person  feel special.  Next the text messages started to roll in.  It is nice to hear from everyone that I havent heard from in awhile.  At night Scott Volunteered to bathe the kids, and get pajammas on them, while I was able to spend a  bit more time with Rhiannon.  Speaking of which...\n\nI didnt forget the most special of all.  Rhiannon, my beautiful wife, was a soldier  today.  She got up, forgone the medicine, and headed out with me bright and early to take the kids to Pre-K, get coffee, and run various errands.  In which we ran into smoke on several occassions that nearly took her down.  While I was out taking Wyatt to therapy, and picking up Ayla.  She muscled through and finished my quilt, wrapped my presents, and cooked an amazing jumbalya!!\n\n\nAll in all this was one of the best days I have had in awhile, Thanks everyone!",
        "long_description": "Happy Birthday Today I am very grateful for all of the wonderful birthday wishes. I started off the day with two very excited kids. They couldn't wait to wake up, give daddy a big hug and wish him happy birthday today. My kids love them some birth..."
    },
    {
        "cover": "/static/gratitude_043-xmas2020.png",
        "title": "Gratitude 043",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_043.md",
        "canonical_url": "https://waylonwalker.com/gratitude_043",
        "cover_image": "https:waylonwalker.com/gratitude_043.png",
        "date": "2018-03-30 00:00:00+00:00",
        "description": "Prep and Reflect I have recently found a new podcast, The Ken Coleman Show, from the Ramsey network. I really like Ken'",
        "published": false,
        "content": "####  Prep and Reflect\n\nI have recently found a new podcast, The Ken Coleman Show, from the Ramsey network.  I really like Ken's style.  He recently talked about 2 two things that you should do everyday.  Prepare and reflect. If you are not doing these things it is very difficult to progress in your goals.  I really like how the gratitude journal works into the reflect piece of life.  It brings me positivity and a chance to look back on the day.  I like how I am able to reflect on the day, or last few days and find something positive that happened.  It also helps me think about how I can improve myself.  I am  also reflecting throughout the day as I think about things that I might write about in the journal.",
        "long_description": "Prep and Reflect I have recently found a new podcast, The Ken Coleman Show, from the Ramsey network. I really like Ken's style. He recently talked about 2 two things that you should do everyday. Prepare and reflect. If you are not doing these thin..."
    },
    {
        "cover": "/static/gratitude_044-xmas2020.png",
        "title": "Gratitude 044",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_044.md",
        "canonical_url": "https://waylonwalker.com/gratitude_044",
        "cover_image": "https:waylonwalker.com/gratitude_044.png",
        "date": "2018-04-13 00:00:00+00:00",
        "description": "Running Over the course of the winter the kids and I have been creating trails through the woods behind our house. It h",
        "published": false,
        "content": "#### Running\n\nOver the course of the winter the kids and I have been creating trails through the woods behind our house.  It has been really fun.  The forrest is really thick with lots of small bits of brush,  a stream, logs and various old junk.  The kids have enjoyed having a place to get out of the house and stop around.  It has been a great outlet for us.\n\nRecently I have started running on them.  I have been getting better and better.  I feel like I am starting to get back inot a bit of shape where I am not winded within minutes, but can at least make a few laps.  I find the trails really fun to run on, as I have always really struggled running on a track or even sidewalk.  I am always looking for something to make it more exciting.",
        "long_description": "Running Over the course of the winter the kids and I have been creating trails through the woods behind our house. It has been really fun. The forrest is really thick with lots of small bits of brush, a stream, logs and various old junk. The kids..."
    },
    {
        "cover": "/static/gratitude_045-xmas2020.png",
        "title": "Gratitude 045",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_045.md",
        "canonical_url": "https://waylonwalker.com/gratitude_045",
        "cover_image": "https:waylonwalker.com/gratitude_045.png",
        "date": "2018-04-14 00:00:00+00:00",
        "description": "Time Out Yesterday Rhiannon and I were able to get some much needed time away for some very overdue haircuts. It was r",
        "published": false,
        "content": "#### Time Out\n\nYesterday Rhiannon and I were able to get some much needed time away for some  very overdue haircuts.  It was really nice to be able to just take off and leave the kids with friends on a whim. While it takes all that she's got to go anywhere I am still very grateful that she is able to get out of the house.  It was nice to spend a dreary day out with her.  Dreary days are the best because the air is always fresh and clear of most environmental smoke.\n\n> While it takes all that she's got to go anywhere I am still very grateful that she is able to get out of the house.",
        "long_description": "Time Out Yesterday Rhiannon and I were able to get some much needed time away for some very overdue haircuts. It was really nice to be able to just take off and leave the kids with friends on a whim. While it takes all that she's got to go anywhere..."
    },
    {
        "cover": "/static/gratitude_046-xmas2020.png",
        "title": "Gratitude 046",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_046.md",
        "canonical_url": "https://waylonwalker.com/gratitude_046",
        "cover_image": "https:waylonwalker.com/gratitude_046.png",
        "date": "2018-04-17 00:00:00+00:00",
        "description": "Kid Help I am very grateful that we have help with the kids when we need it on a moments notice. Today I came home with",
        "published": false,
        "content": "#### Kid Help\n\nI am very grateful that we have help with the kids when we need it on a moments notice.  Today I came home with a migrane, and was able to rest up for a little while before helping them with bedtime.  Rather than pushing though and being miserable, I was able to take a short break then proceed with a nice night with the kids and Rhiannon.",
        "long_description": "Kid Help I am very grateful that we have help with the kids when we need it on a moments notice. Today I came home with a migrane, and was able to rest up for a little while before helping them with bedtime. Rather than pushing though and being mis..."
    },
    {
        "cover": "/static/gratitude_047-xmas2020.png",
        "title": "Gratitude 047",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_047.md",
        "canonical_url": "https://waylonwalker.com/gratitude_047",
        "cover_image": "https:waylonwalker.com/gratitude_047.png",
        "date": "2018-04-21 00:00:00+00:00",
        "description": "Bravery Its not something that is handed out by participation. Being part of the battle does not earn bravery. Defeati",
        "published": false,
        "content": "#### Bravery\n\nIts not something that is handed out by participation.  Being part of the battle does not earn bravery.  Defeating the odds,  going into a battle with passion for the end result, and putting all of your heart into it.  Thats what defines bravery to me.  Last night I saw two family members give excelent examples of bravery.  Last night was the preschool prom night.  Ayla was unable to go, and Rhiannon was very passionate about going with Wyatt.  She has not been feeling well, and being around lots of poeple can make it very difficult at times, but she did it.  She was able to overcome the odds and make it through the prom for him. The other great example of bravery was Wyatt.  While in a very excited mood, with a lot going on around him.  He was able to stand by his mothers side, hold her hand, ask her if she was ok, and ask if there was anything he could do to help her through a rough spot.  He was able to overcome his ADHD, take a deep breath and stand strong for his mother.  This is not the first time that he has done this.  He has been growing up into a brave boy lately.\n\n> He was able to overcome his ADHD, take a deep breath and stand strong for his mother.",
        "long_description": "Bravery Its not something that is handed out by participation. Being part of the battle does not earn bravery. Defeating the odds, going into a battle with passion for the end result, and putting all of your heart into it. Thats what defines brav..."
    },
    {
        "cover": "./flex-xmas2020.png",
        "title": "FlexBox",
        "tags": [
            "webdev"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/flexbox-zombies.md",
        "canonical_url": "https://waylonwalker.com/flexbox-zombies",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./flex.png",
        "date": "2018-04-22 00:00:00+00:00",
        "description": "none",
        "published": true,
        "content": "<style>\n    em {\n        color: #ff9966;\n    }\n    code {\n        background: #FF06050A;\n        color: #6394C8;\n    }\n    .item {\n        color: #6394C8;\n        font-size: 1.5rem;\n        padding: 1rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100px;\n        width: 100px;\n        background: #351D57;\n        margin: 5px;\n        border: 2px solid #A83E75;\n        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);\n    }\n\n    .flex_container {\n        padding: 1rem;\n        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);\n        background: rgba(99, 148, 200, .2);\n        animation: animate_container 2s cubic-bezier(.66, -0.0, .28, 1.0) infinite both alternate;\n    }\n\n    .flex_container:hover {\n        animation: none\n    }\n\n    @keyframes animate_container {\n        0%{\n            width: 95%;\n        }\n\n        20% {\n            width: 95%;\n        }\n\n        80% {\n            width: 200px;\n        }\n\n        100% {\n            width: 200px;\n        }\n    }\n\n    h3 {\n        padding: 1rem;\n        margin: 2rem;\n        display: block;\n        width: 100vw;\n        background: white;\n        color: white;\n        background: #333;\n        position: sticky;\n        top: 0px;\n        box-shadow:  0 0 #333,\n                     -100vw 0 #333,\n                     100vw 0 #333;\n    }\n</style>\n\n# Flexbox-zombies\n\nI recently finished up the flexbox-zombies course to learn more about flexbox, and to become proficient with it.  I can truly say that this course has changed the way that I create layouts.  Flexbox is very intuitive now.  What this course does really well at is explaining the concepts and hitting you with a ton of examples that you can work through really quickly.\n\n\n![flexbox-zombies](./flexbox-zombies-12.gif)\n> A clip from the final round against Dave\n\n\n## Basic Setup\n\nFlexbox requires a wrapper container to work  I will refer to this as the  flex container, and the items in that container as items.\n\n### Markup\n\nI will use the following markup throughout the article, each with different css applied.\n\n\n**note**  The animated container is inspired by the flexbox-zombies course.  I really like how it allows you to see the responsiveness of each layout.  In the early example the reasoning may not be aparent, but as we go along some of the flexbox parameters will make more sense if we are viewing them on a dynamic layout since flexbox is designed for building responsive design.\n\n\n```HTML\n<div class='flex_container'>\n    <div class='item'>1</div>\n    <div class='item'>2</div>\n    <div class='item'>3</div>\n    <div class='item'>4</div>\n</div>\n```\n\n<div id=\"c0\">\n    <div class='flex_container'>\n        <div class='item'>1</div>\n        <div class='item'>2</div>\n        <div class='item'>3</div>\n        <div class='item'>4</div>\n    </div>\n</div>\n\n### Base Style\n```css\n    .item {\n        color: #6394C8;\n        font-size: 1.5rem;\n        padding: 1rem;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100px;\n        width: 100px;\n        background: #351D57;\n        margin: 5px;\n        border: 2px solid #A83E75;\n        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);\n    }\n\n    .flex_container {\n        padding: 1rem;\n        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);\n        background: rgba(99, 148, 200, .2);\n        animation: animate_container 2s cubic-bezier(.66, -0.0, .28, 1.0) infinite both alternate;\n    }\n\n    /* Animate the .flex_container to show responsiveness */\n\n    .flex_container:hover {\n    /* But not on hover, let the user pause the annimation*/\n        animation: none\n    }\n\n    @keyframes animate_container {\n        0%{\n            width: 95%;\n        }\n\n        20% {\n            width: 95%;\n        }\n\n        80% {\n            width: 200px;\n        }\n\n        100% {\n            width: 200px;\n        }\n    }\n```\n## Basic Technique\n\n### 1. Turn on the crossbow\n\n_applied to the flex container_\n```display: flex;```\n\nTurning on flexbox on the flex container will cause all child elements to align in a row at the top left corner of the parent container.  By defualt they will shrink to the minimum content size, but not automatically grow larger than their specified size.\n\n``` css\n    .flex_container {\n                display: flex;\n        }\n```\n<style>\n    .c1 .flex_container {\n            display: flex;\n            flex-direction: row;\n    }\n</style>\n\n<div class='c1'>\n    <div class='c1 flex_container'>\n        <div class='item'>1</div>\n        <div class='item'>2</div>\n        <div class='item'>3</div>\n        <div class='item'>4</div>\n    </div>\n</div>\n\n\n### 2. Aim it if necessary\n_applied to the flex container_\n\nThis parameter determines the direction that the flexbox container will orient the flex items.\n\n**example** ```flex-direction: row```\n**options** = ```('row'(default), 'column',  'row-reverse', 'column-reverse')```\n\n#### row\n\n<style>\n    .c2a .flex_container {\n            display: flex;\n            flex-direction: row;\n    }\n</style>\n\n``` css\n.flex_container {\n            display: flex;\n            flex-direction: row;\n    }\n```\n<div class='c2a'>\n    <div class='c1 flex_container'>\n        <div class='item'>1</div>\n        <div class='item'>2</div>\n        <div class='item'>3</div>\n        <div class='item'>4</div>\n    </div>\n</div>\n\n#### column\n\n<style>\n    .c2b .flex_container {\n            display: flex;\n            flex-direction: column;\n    }\n</style>\n\n``` css\n.flex_container {\n            display: flex;\n            flex-direction: column;\n    }\n```\n<div class='c2b'>\n    <div class='c1 flex_container'>\n        <div class='item'>1</div>\n        <div class='item'>2</div>\n        <div class='item'>3</div>\n        <div class='item'>4</div>\n    </div>\n</div>\n\n#### row-reverse\n\n<style>\n    .c2c .flex_container {\n            display: flex;\n            flex-direction: row-reverse;\n    }\n</style>\n\n``` css\n.flex_container {\n            display: flex;\n            flex-direction: row-reverse;\n    }\n```\n<div class='c2c'>\n    <div class='c1 flex_container'>\n        <div class='item'>1</div>\n        <div class='item'>2</div>\n        <div class='item'>3</div>\n        <div class='item'>4</div>\n    </div>\n</div>\n\n#### column-reverse\n\n<style>\n    .c2d .flex_container {\n            display: flex;\n            flex-direction: column-reverse;\n    }\n</style>\n\n``` css\n.flex_container {\n            display: flex;\n            flex-direction: column-rerverse;\n    }\n```\n<div class='c2d'>\n    <div class='c1 flex_container'>\n        <div class='item'>1</div>\n        <div class='item'>2</div>\n        <div class='item'>3</div>\n        <div class='item'>4</div>\n    </div>\n</div>\n\n### 3. Line them up along the red Justify Laser\n_applied to the flex container_\n\nThis parameter determines justification of the flex items within the flex container.  Think spacing or positioning around the flex items.\n\n**example** ```justify-content: flex-end;```\n**options** = ```('flex-start', 'flex-end', 'space-between', 'space-around', 'space-evenly', 'stretch', 'center', 'start', 'end', 'left', 'right')```\n\n\n<style>.c3a .flex_container { display: flex; justify-content: flex-start; }</style>\n<style>.c3b .flex_container { display: flex; justify-content: flex-end; }</style>\n<style>.c3c .flex_container { display: flex; justify-content: space-between; }</style>\n<style>.c3d .flex_container { display: flex; justify-content: space-around; }</style>\n<style>.c3e .flex_container { display: flex; justify-content: space-evenly; }</style>\n<style>.c3f .flex_container { display: flex; justify-content: center; }</style>\n\n#### flex-start\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: flex-start;\n    }\n```\n\n<div class='c3a'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### flex-end\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: flex-end;\n    }\n```\n\n<div class='c3b'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### space-between\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content:space-between;\n    }\n```\n\n<div class='c3c'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### space-around\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: space-around;\n    }\n```\n\n<div class='c3d'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### space-evenly\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: space-evenly;\n    }\n```\n\n<div class='c3e'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### center\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: center;\n    }\n```\n\n<div class='c3f'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n\n### 3b. Align them along the  blue Alignment Laser\n_applied to the flex container_\n* ```align-items: flex-end;```\n* options = ('flex-start', 'flex-end', 'normal', 'end', 'self-start', 'self-end', 'center', 'start' 'end')\n\n<style>.c4a .flex_container { height: 200px; display: flex; align-items: flex-start; }</style>\n<style>.c4b .flex_container { height: 200px; display: flex; align-items: flex-end; }</style>\n<style>.c4c .flex_container { height: 200px; display: flex; align-items: center; }</style>\n\n#### flex-start\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: flex-start;\n    }\n```\n\n<div class='c4a'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### flex-end\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: flex-end;\n    }\n```\n\n<div class='c4b'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### center\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: center;\n    }\n```\n\n<div class='c4c'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n\n\n### 4. Take care of any one-off alignments\n_applied to items_\n* ```align-self: flex-start;```\n* options = ('flex-start', 'flex-end', 'normal', 'end', 'self-start', 'self-end', 'center', 'start' 'end')\n<style>\n    .c5d .flex_container { height: 200px; display: flex; align-items: stretch; }\n    .c5d .item:nth-of-type(1){ align-self: flex-start  }\n    .c5d .item:nth-of-type(2){ align-self: center}\n    .c5d .item:nth-of-type(3){ height: auto; align-self: stretch;}\n    .c5d .item:nth-of-type(4){ height: auto; align-self: flex-end;}\n</style>\n\n#### combine\n\nthe align-self property is used to take care of one off alignments and is applied to the item itself.  All of the parameters are the same as ```align-items```.  In this example we will apply all of the previous example alignment types into one.\n\n\n``` css\n.flex_container {\n    display: flex;\n     }\n.item:nth-of-type(1){\n     align-self: flex-start\n     }\n.item:nth-of-type(2){\n     align-self: center\n     }\n.item:nth-of-type(3){\n     height: auto; align-self: stretch;\n     }\n.item:nth-of-type(4){\n     height: auto; align-self: flex-end;\n     }\n```\n\n<div class='c5d'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n### 6. growth along the red Justify Laser\n_applied to items_\n* ```flex-grow: 1```\n\n<style>.c6a .flex_container { display: flex; align-items: flex-start; } .c6a .item:nth-of-type(3){background: #B5F685; flex-grow: 1;}</style>\n<style>.c6b .flex_container { display: flex; align-items: flex-start; } .c6b .item:nth-of-type(3){background: #B5F685; flex-grow: 1;} .c6b .item:nth-of-type(1){background: #B5F685; flex-grow: 2;}</style>\n\n#### flex-grow\n\nBy setting ```flex-grow: 1;``` on item ```3``` it will take up any available free space.\n``` css\n.flex_container {\n            display: flex;\n    }\n.item:nth-of-type(3) {\n    flex-grow: 1\n}\n```\n\n<div class='c6a'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### multiple flex-grow\n\nBy setting ```flex-grow: 2;``` on item  ```1``` will take up the available free space 2x faster than ```3```\n\n``` css\n.flex_container {\n            display: flex;\n            justify-content: flex-start;\n    }\n.item:nth-of-type(3) {\n    flex-grow: 1\n}\n.item:nth-of-type(1) {\n    flex-grow: 2\n}\n```\n\n<div class='c6b'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n### 7. setting length of items along the red Justify Laser\n_applied to items_\n_in order of importance_\n* ```min-width```\n* ```max-width```\n* **```flex-basis```**\n* ```width```\n\n### 8. Out of Order\n_applied to items_\n_behaves similar to z-index_\n* ```order``` - takes an integer value\n\n<style>.c8a .flex_container { display: flex;} .c8a .item:nth-of-type(3){background: #B5F685; order: 1;}</style>\n<style>.c8b .flex_container { display: flex;} .c8b .item:nth-of-type(3){background: #B5F685; order: -1;}</style>\n\n#### order 1\n\n``` css\n.flex_container {\n            display: flex;\n    }\n.item:nth-of-type(3) {\n    order: 1\n}\n```\n\n<div class='c8a'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n#### order -1\n\n``` css\n.flex_container {\n            display: flex;\n    }\n.item:nth-of-type(3) {\n    order: -1\n}\n```\n\n<div class='c8b'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n### 9. Get your own Line\n_applied to the flex container_\n\n* ```flex-wrap``` - options= ```(wrap, nowrap(default))```\n* prefers wrap over shrink\n* but will still shrink after fully wraped\n\n<style>.c9a .flex_container { display: flex; flex-wrap: wrap;} .c9a {height: 700px;}</style>\n\n#### wrap\n\n``` css\n.flex_container {\n            display: flex;\n            flex-wrap: wrap;\n    }\n```\n\n<div class='c9a'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n### 10. Aligning wrapped content\n_applied to the flex container_\n\n*  ```align-content``` - same specs as align-items but works on wrapped content.\n\n<style>.c10a .flex_container { display: flex; flex-wrap: wrap; align-content: center;} .c10a .flex_container{height: 700px;}</style>\n\n#### wrap\n\n``` css\n.flex_container {\n            display: flex;\n            height: 700px;\n            flex-wrap: wrap;\n            align-content: center;\n    }\n```\n\n<div class='c10a'> <div class='flex_container'> <div class='item'>1</div> <div class='item'>2</div> <div class='item'>3</div> <div class='item'>4</div> </div> </div>\n\n### 11. Shortcuts\n\n**flex**\n_applied to the flex items_\n*  ```flex: grow, shrink, basis```\n* defaults - ```flex: 1 1 0px```\n* setting ```flex: none``` is equivalent to ```flex: 0 0 auto```\n\n\n**flex-flow**\n_applied to the flex container_\n* ```flex: flex-direction flex-wrap```\n*\n\n### Chapter 7: In a Perfect World (flex-basis)\n\n```flex-basis```\n* Starting point, ideal size, hypothetical size\n* applied to items\n* overrides width\n* shinks if necessary\n\nWhen Shooting Horizontally it controls width\n\nWhen Shooting Vertically it controls height",
        "long_description": "Flexbox-zombies I recently finished up the flexbox-zombies course to learn more about flexbox, and to become proficient with it. I can truly say that this course has changed the way that I create layouts. Flexbox is very intuitive now. What this..."
    },
    {
        "cover": "/static/gratitude_048-xmas2020.png",
        "title": "Gratitude 048",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_048.md",
        "canonical_url": "https://waylonwalker.com/gratitude_048",
        "cover_image": "https:waylonwalker.com/gratitude_048.png",
        "date": "2018-04-22 00:00:00+00:00",
        "description": "Playdate Today We had a playdate for the kids. While its good to get the kids out and interacting with others, its good",
        "published": false,
        "content": "#### Playdate\n\nToday We had a playdate for the kids.  While its good to get the kids out and interacting with others, its good for the adults as well.  I am not typically one to spring up an event with other adults, so its great that the kids drive that for us.  The adults were able to play a board game while the kids were playing.  I am very grateful that I was able to get out and enjoy some time with other adults, and that the kids had a really good afternoon.  The game we played was new to me and was a blast to play.",
        "long_description": "Playdate Today We had a playdate for the kids. While its good to get the kids out and interacting with others, its good for the adults as well. I am not typically one to spring up an event with other adults, so its great that the kids drive that fo..."
    },
    {
        "cover": "./d3-cropped-xmas2020.png",
        "title": "D3 Day 3",
        "tags": [
            "webdev"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/d3-day3.md",
        "canonical_url": "https://waylonwalker.com/d3-day3",
        "category": "Viz",
        "cover_image": "https:waylonwalker.com/./d3-cropped.png",
        "date": "2018-05-05 00:00:00+00:00",
        "description": "none",
        "published": false,
        "summary": "Creating my First d3.js viz by following along with Ben Clinkinbeard's d3 in 5 days email.",
        "content": "<script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'></script>\n<style>\n    #content{\n        max-width: 800px;\n        margin: 0 auto;\n    }\n    .chart {\n        display: block;\n        padding: 10px;\n        background: peachpuff;\n    }\n\n    .bar {\n        height: 30px;\n        margin: 5px;\n        background: teal;\n    }\n    button {\n        background: rgb(240, 196, 211);\n        border: none;\n        font-size: 1.3rem;\n        border-radius: 5px;\n        padding: .2rem 1rem;\n        margin-bottom: 1rem\n    }\n    .on {\n        background: palevioletred;\n    }\n</style>\n\n\n## Learn D3 in 5 days\n\nI recently subscribed to Ben Clinkinbeard's learn D3.js in 5 days, and am currently on day 3.  I read through the first 2 days, and felt fairly comfortable with selecting elements, so I did not follow along on the first two days.  I probably should have, but there are only so many hours in the day.\n\n### Why Learn D3\n\nD3 is the ubiquitous dynamic visualization library for building custom interactive visualizations on the web.  It is a bit low level, and more verbose than many other libraries that build upon it, but if you want full control D3 is the way to go.  I have used a few libraries built upon d3 in the past and have been very happy with the results.  For now I want to start learning a bit about how d3 works.  I know that learning it is going to take a long time, so I want to start working on some simple examples now in order to build my understanding so that I can learn quickly when I am ready to dive in.  If I never decide I need to take the deep dive into d3, I think understanding how it works will only help when I am using higher level libraries.\n\n## Final Result\nI cant express how fun it was to build this example. I always saw d3 as being super low level and that I could never build something in it.  It was so cool to watch the magic happen in such a short period of time.\n\n![final_result](d3-day3.gif)\n## Prep\n### Load D3\n\nI am going to load d3 from the cloudflare cdn for simplicity\n\n```HTML\n    script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'></script>\n```\n\n### Base Styles\nI will use this as by stylesheet throughout the examples.\n\n\n```html\n    <style>\n        .chart {\n            display: block;\n            padding: 10px;\n            background: peachpuff;\n        }\n\n        .bar {\n            height: 30px;\n            margin: 5px;\n            background: teal;\n        }\n        button {\n            background: rgb(240, 196, 211);\n            border: none;\n            font-size: 1.3rem;\n            border-radius: 5px;\n            padding: .2rem 1rem;\n            margin-bottom: 1rem\n        }\n        .on {\n            background: palevioletred;\n        }\n    </style>\n```\n\n## Example one\n\nThis one is a bit cheaty in that it has the exact number of divs already rendered for us, but it is a good learning point\nso see how to map data to attributes\n\n\nBy the way this is the first chart that I have ever created with d3, and this silly thing is so exciting!!\n\n### Markup\n```HTML\n<div id=\"chart1\" class='chart'>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>\n```\n\n### JavaScript\n```JavaScript\nconst data = [90, 270, 152, 42, 83]\nd3.select('#chart1')\n    .selectAll('div')\n    .data(data)\n    .attr('class', 'bar')\n    .style('width', function (d) {\n        return d + 'px'\n    })\n```\n\n### Result\n\n![d3 day3 example 1](d3-day3-1.png)\n\n_example 1 plot_\n\n<!--\n<div id=\"chart1\" class='chart'>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>\n\n<script>\n    const data = [90, 270, 152, 42, 83]\n    d3.select('#chart1')\n        .selectAll('div')\n        .data(data)\n        .attr('class', 'bar')\n        .style('width', function (d) {\n            return d + 'px'\n        })\n</script>\n -->\n\n\n## Example 2\nThis time we are going to get a bit more dynamic.  The divs will be generated on the fly and will update with the press of a button.\n\n### Markup\n```HTML\n<div id=\"chart2\" class='chart'>\n    <button class='math' onclick=\"render('math')\">Math</button>\n    <button class='science' onclick=\"render('science')\">Science</button>\n</div>\n```\n### JavaScript\n\n```JavaScript\nconst data2 = [\n    { name: 'Alice', math: 93, science: 84},\n    { name: 'Bob', math: 73, science: 82},\n    { name: 'James', math: 92, science: 78},\n    { name: 'Steve', math: 77, science: 93},\n    { name: 'Jordan', math: 80, science: 68},\n]\n\nfunction render(subject) {\n    d3.select('#chart2')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('.' + subject)\n        .attr('class', subject + ' on')\n    d3.select('#chart2')\n        .selectAll('div')\n        .remove()\n    d3.select('#chart2')\n        .selectAll('div')\n        .data(data2)\n        .enter()\n            .append('div')\n            .attr('class', 'bar')\n            .style('width', function(d) {\n                    return (d[subject]-50)*3 + 'px'\n                })\n}\nrender('math')\n```\n\n### Result\n<!--\n<div id=\"chart2\" class='chart'>\n    <button class='math' onclick=\"render('math')\">Math</button>\n    <button class='science' onclick=\"render('science')\">Science</button>\n</div>\n\n\n\n<script>\n    const data2 = [\n        { name: 'Alice', math: 93, science: 84},\n        { name: 'Bob', math: 73, science: 82},\n        { name: 'James', math: 92, science: 78},\n        { name: 'Steve', math: 77, science: 93},\n        { name: 'Jordan', math: 80, science: 68},\n    ]\n\n    function render(subject) {\n        d3.select('#chart2')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('.' + subject)\n            .attr('class', subject + ' on')\n        d3.select('#chart2')\n            .selectAll('div')\n            .remove()\n        d3.select('#chart2')\n            .selectAll('div')\n            .data(data2)\n            .enter()\n                .append('div')\n                .attr('class', 'bar')\n                .style('width', function(d) {\n                     return (d[subject]-50)*3 + 'px'\n                    })\n    }\n    render('math')\n</script>\n -->\n\n![d3 day 3 example 2](d3-day3-2.gif)\n\n_example 2 working buttons_\n\n## Example 3\nIn Example2 the chart jumped from one state to the next with a complete wipe and redraw in betweeen.  In this example we will retain the same bars and only update their width.  This will allow us to transition/animate them.\n\n### Markup\n```html\n<div id=\"chart3\" class='chart'>\n    <button class='math' onclick=\"render3('math')\">Math</button>\n    <button class='science' onclick=\"render3('science')\">Science</button>\n</div>\n```\n\n### JavaScript\n```JavaScript\nconst data3 = [\n    { name: 'Alice', math: 93, science: 84 },\n    { name: 'Bob', math: 73, science: 82 },\n    { name: 'James', math: 92, science: 78 },\n    { name: 'Steve', math: 77, science: 93 },\n    { name: 'Jordan', math: 80, science: 68 },\n]\n\nfunction render3(subject) {\n    d3.select('#chart3')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('#chart3')\n        .select('.' + subject)\n        .attr('class', subject + ' on')\n\n    const bars = d3.select('#chart3')\n        .selectAll('div')\n        .data(data3, function(d) {\n            return d.name\n        })\n    const newBars = bars.enter()\n        .append('div')\n            .attr('class', 'bar')\n            .style('width', 0)\n    newBars.merge(bars)\n        .transition()\n        .style('width', function(d) {\n            return (d[subject]-50)*3 + 'px'\n        })\n}\nrender3('math')\n```\n\n![d3 day3 example 3](d3-day3.gif)\n\n_example 3 nice and smooth_\n<!--\n<div id=\"chart3\" class='chart'>\n    <button class='math' onclick=\"render3('math')\">Math</button>\n    <button class='science' onclick=\"render3('science')\">Science</button>\n</div>\n\n\n\n<script>\n    const data3 = [\n        { name: 'Alice', math: 93, science: 84 },\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78 },\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    function render3(subject) {\n        d3.select('#chart3')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#chart3')\n            .select('.' + subject)\n            .attr('class', subject + ' on')\n\n        const bars = d3.select('#chart3')\n            .selectAll('div')\n            .data(data3, function(d) {\n                return d.name\n            })\n        const newBars = bars.enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n        newBars.merge(bars)\n            .transition()\n            .style('width', function(d) {\n                return (d[subject]-50)*3 + 'px'\n            })\n    }\n    render3('math')\n</script>\n -->\n\n## Final Thoughts\n\nI express how fun this was.  I have always viewed d3 as something so low level I would never be able to touch.  The tutorial was super fun and very approachable.  Any other resources that I have seen to start learning d3 appear to be very time consuming before you start writing code and digging into it yourself. These examples were great, I was able to get started creating visualizations in no more than 5 minutes of reading.  Now that I feel like I have a shallow understanding of how it works I feel better prepared to dive in.",
        "long_description": "Learn D3 in 5 days I recently subscribed to Ben Clinkinbeard's learn D3.js in 5 days, and am currently on day 3. I read through the first 2 days, and felt fairly comfortable with selecting elements, so I did not follow along on the first two days...."
    },
    {
        "cover": "./d3-cropped-xmas2020.png",
        "title": "D3 Day 4",
        "tags": [
            "webdev"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/d3-day4.md",
        "canonical_url": "https://waylonwalker.com/d3-day4",
        "category": "Viz",
        "cover_image": "https:waylonwalker.com/./d3-cropped.png",
        "date": "2018-05-06 00:00:00+00:00",
        "description": "none",
        "published": false,
        "summary": "Today we are adding scale to day 3's example horizontal bar chart.",
        "content": "<!--\n<script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'></script>\n<style>\n    #content{\n        max-width: 800px;\n        margin: 0 auto;\n    }\n    .chart {\n        display: block;\n        padding: 10px;\n        background: peachpuff;\n        /* transition: all 500ms */\n    }\n\n    .bar {\n        height: 30px;\n        margin: 5px;\n        background: teal;\n    }\n    .bar:hover{\n        background: #444;\n        }\n    button {\n        background: rgb(240, 196, 211);\n        border: none;\n        font-size: 1.3rem;\n        border-radius: 5px;\n        padding: .2rem 1rem;\n        margin-bottom: 1rem\n    }\n    .on {\n        background: palevioletred;\n    }\n    .big {\n    width: 100%\n    }\n    .small {\n    width: 50%\n    }\n</style>\n -->\n\n## Learn D3 in 5 days\n\nFor what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere!  These are just stepping stones into real custom visualizations that cannot be done in any other tool today.  I still cannot explain how excited I am to say **\"I created that in d3!!!\"**\n### Todays Result\n\nToday I will be learning about d3 scales, and adding them to the bar chart that we created yesterday.  Follow along as I try to create something interesting.\n\n![today's_result](d3-day4.gif)\n\n## Recall Example 3 from yesterday\n_maybe a few days ago.... give me a break I have a lot of other priorities_\n\nIn [yesterdays](https://waylonwalker.com/d3-day3) post we created a working example of a horizontal bar chart that shows grades for a set of 5 students that are all in two classes; 'Math' and 'Science'.  The chart is interactive, and will switch subjects at the press of a button.\n\n\n![d3 day 3 final result](d3-day3.gif)\n<!--\n<div id=\"chart3\" class='chart'>\n    <button class='math' onclick=\"render3('math')\">Math</button>\n    <button class='science' onclick=\"render3('science')\">Science</button>\n</div>\n\n<script>\n    const data3 = [\n        { name: 'Alice', math: 93, science: 84 },\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78 },\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    function render3(subject) {\n        d3.select('#chart3')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#chart3')\n            .select('.' + subject)\n            .attr('class', subject + ' on')\n\n        const bars = d3.select('#chart3')\n            .selectAll('div')\n            .data(data3, function(d) {\n                return d.name\n            })\n        const newBars = bars.enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n        newBars.merge(bars)\n            .transition()\n            .style('width', function(d) {\n                return (d[subject]) + 'px'\n            })\n    }\n    render3('math')\n</script>\n -->\n## Add Scales\n\nOne issue with that plot was that the scale was created by hand.  In todays example we will let d3 take care of the scale for us.  We will define a linear scale with an input range and an output range.\n\n```javascript\nlet xScale = d3.scaleLinear()\n    .domain([50, 100])\n    .range([0, width()]);\n```\n\nThen we will change the following .style method call from ```return (d[subject]-50 * 3) + 'px'``` to ```return xScale(d[subject]) = 'px'```.\n\n```javascript\nnewBars.merge(bars)\n    .transition()\n    .style('width', function(d) {\n        return xScale(d[subject]) + 'px'\n    })\n    .style('height', barHeight())\n```\n### Keeping it dry\n\nNote that if we had many different elements using the same scale with this code it would only exist in one place ```xScale``` and not separately in each style function.  This makes our viz much more maintainable as we may see a need to change the scales in the future.\n\n### Adding Some Flair\n\nTo give this viz some simple flair, and a reason that we might want to use scales.  I added a new set of buttons to allow us to change the chart size and see the viz respond.  Check out the markup in the Final Markup section if your interested in that.  I do want to point out that I used the d3 selectors to add the chart size classes to the chart.\n\nThe select api is very jQuery inspired, but the method chaining syntax feels very natural to me as my main data tools is pandas. The d3 methods feel very much like method chaining in python.  In fact, besides the way the function is defined it reads very much like python.  This feels very comfortable to me as I am always loosing track of braces and semicolons when writing javascript!\n\n```javascript\nfunction chart4_size(size) {\n    d3.select('#sizes')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('#sizes')\n        .select('.chart4-' + size + '-btn')\n        .classed('on', true)\n    d3.select('#chart4')\n        .attr('class', 'chart ' + size)\n    subject = document\n        .getElementById('subjects')\n        .querySelector('.on')\n        .classList[0]\n    render4(subject)\n}\n```\n\nThis is the css that we are using to change the size of our chart figure.  Nothing fancy, just make full width or half width to show the responsiveness of our chart.\n\n``` css\n.big {\nwidth: 100%\n}\n.small {\nwidth: 50%\n}\n```\n\n## Final Result\n<!--\n<div id='buttons'>\n    <h3>Subject</h3>\n    <div id='subjects'>\n        <button class='math' onclick=\"render4('math')\">Math</button>\n        <button class='science' onclick=\"render4('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes'>\n        <button class='chart4-big-btn' onclick='chart4_size(\"big\")')>Large</button>\n        <button class='chart4-small-btn' onclick='chart4_size(\"small\")'>Small</button>\n    </div>\n</div>\n\n<div id=\"chart4\" class='chart'></div>\n\n\n\n<script>\n    const data4 = [\n        { name: 'Alice', math: 93, science: 84},\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78},\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    chart4 = document.getElementById('chart4')\n\n\n    let width = function() {\n        return chart4.getBoundingClientRect().width\n        }\n    let height = function() {\n        return chart4.getBoundingClientRect().height\n        }\n    let barHeight = function() {\n        height() /  data4.length + 'px'\n        }\n\n    function chart4_size(size) {\n        d3.select('#sizes')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#sizes')\n            .select('.chart4-' + size + '-btn')\n            .classed('on', true)\n        d3.select('#chart4')\n            .attr('class', 'chart ' + size)\n        subject = document\n            .getElementById('subjects')\n            .querySelector('.on')\n            .classList[0]\n        render4(subject)\n    }\n\n    function render4(subject) {\n\n        d3.select('#subjects')\n            .selectAll('button')\n            .classed('on', false);\n\n        d3.select('#subjects')\n            .select('.' + subject)\n            .attr('class', subject + ' on');\n\n        let xScale = d3.scaleLinear()\n            .domain([50, 100])\n            .range([0, width()]);\n\n        const bars = d3.select('#chart4')\n            .selectAll('div')\n            .data(data4, function(d) {\n                return d.name\n            })\n        const newBars = bars.enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n\n        newBars.merge(bars)\n            .transition()\n            .style('width', function(d) {\n                return xScale(d[subject]) + 'px'\n            })\n            .style('height', barHeight())\n    }\n    render4('math')\n    chart4_size('big')\n</script>\n -->\n\n![d3 day4 final result](d3-day4.gif)\n### Final Markup\n\nMost of the markup here is for the buttons and the callbacks.  This is not really the focus of today's exercise.  I have included the html here so that you can see how the buttons are tied in to the Final Script.\n\n```html\n<div id='buttons'>\n    <h3>Subject</h3>\n    <div id='subjects'>\n        <button class='math' onclick=\"render4('math')\">Math</button>\n        <button class='science' onclick=\"render4('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes'>\n        <button class='chart4-big-btn' onclick='chart4_size(\"big\")')>Large</button>\n        <button class='chart4-small-btn' onclick='chart4_size(\"small\")'>Small</button>\n    </div>\n</div>\n\n<div id=\"chart4\" class='chart'></div>\n```\n### Final Style\n``` css\n#content{\n    max-width: 800px;\n    margin: 0 auto;\n}\n.chart {\n    display: block;\n    padding: 10px;\n    background: peachpuff;\n    /* transition: all 500ms */\n}\n\n.bar {\n    height: 30px;\n    margin: 5px;\n    background: teal;\n}\n.bar:hover{\n    background: #444;\n    }\nbutton {\n    background: rgb(240, 196, 211);\n    border: none;\n    font-size: 1.3rem;\n    border-radius: 5px;\n    padding: .2rem 1rem;\n    margin-bottom: 1rem\n}\n.on {\n    background: palevioletred;\n}\n.big {\nwidth: 100%\n}\n.small {\nwidth: 50%\n}\n```\n### Final script\n\nHere is the final script so that you showing everything put together.  Yes this is a lot of code for a bar chart without scales, click events, titles, tooltips, or anything fancy, but I need to start somewhere.  d3.js is the language that builds fully custom vizualizations like no other tool today, and by doing a bit of practice now I will be ready for some serious stuff in the future.\n\n``` javascript\n// Setup the data\nconst data4 = [\n    { name: 'Alice', math: 93, science: 84},\n    { name: 'Bob', math: 73, science: 82 },\n    { name: 'James', math: 92, science: 78},\n    { name: 'Steve', math: 77, science: 93 },\n    { name: 'Jordan', math: 80, science: 68 },\n]\n\n// Create some vanilla js functions to get the size of the chart\nchart4 = document.getElementById('chart4')\n\nlet width = function() {\n    return chart4.getBoundingClientRect().width\n    }\nlet height = function() {\n    return chart4.getBoundingClientRect().height\n    }\nlet barHeight = function() {\n    height() /  data4.length + 'px'\n    }\n\n// create a function to update the size of the chart\n// Size is updated by adding a css class big or small\n// Note: the  render function is called at the end to ensure the scale is re-rendered\nfunction chart4_size(size) {\n    d3.select('#sizes')\n        .selectAll('button')\n        .classed('on', false)\n    d3.select('#sizes')\n        .select('.chart4-' + size + '-btn')\n        .classed('on', true)\n    d3.select('#chart4')\n        .attr('class', 'chart ' + size)\n    subject = document\n        .getElementById('subjects')\n        .querySelector('.on')\n        .classList[0]\n    render4(subject)\n}\n\n// render the plot\n// Note: I did need to bring the xScale and the width() call  into the render\n// function to ensure that the scale was updated each time\nfunction render4(subject) {\n\n    d3.select('#subjects')\n        .selectAll('button')\n        .classed('on', false);\n\n    d3.seect('#subjects')\n        .select('.' + subject)\n        .attr('class', subject + ' on');\n\n    let xScale = d3.scaleLinear()\n        .domain([0, 100])\n        .range([50, width()]);\n\n    const bars = d3.select('#chart4')\n        .selectAll('div')\n        .data(data4, function(d) {\n            return d.name\n        })\n    const newBars = bars.enter()\n        .append('div')\n            .attr('class', 'bar')\n            .style('width', 0)\n\n    newBars.merge(bars)\n        .transition()\n        .style('width', function(d) {\n            return xScale(d[subject]) + 'px'\n        })\n        .style('height', barHeight())\n}\n\n// create initial render and size\nrender4('math')\nchart4_size('big')\n```",
        "long_description": "Learn D3 in 5 days For what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere! These are just stepping stones into real custom visualizations that cannot be done in any other tool today. I still cann..."
    },
    {
        "cover": "./d3-cropped-xmas2020.png",
        "title": "D3 Day 5",
        "tags": [
            "webdev"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/d3-day5.md",
        "canonical_url": "https://waylonwalker.com/d3-day5",
        "category": "Viz",
        "cover_image": "https:waylonwalker.com/./d3-cropped.png",
        "date": "2018-05-08 00:00:00+00:00",
        "description": "none",
        "published": false,
        "slug": "d3-day-5",
        "summary": "Today we are adding Axes to the horizontal bar chart that we have worked on throughout the past few days.",
        "content": "<script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'></script>\n<style>\n    #content{\n        max-width: 800px;\n        margin: 0 auto;\n    }\n    .chart {\n        display: block;\n        padding: 10px;\n        background: peachpuff;\n    }\n\n    .bar {\n        height: 30px;\n        margin: 5px;\n        background: teal;\n    }\n    .bar:hover{\n        background: #444;\n        }\n    button {\n        background: rgb(240, 196, 211);\n        border: none;\n        font-size: 1.3rem;\n        border-radius: 5px;\n        padding: .2rem 1rem;\n        margin-bottom: 1rem\n    }\n    .on {\n        background: palevioletred;\n    }\n    .big {\n    width: 100%\n    }\n    .small {\n    width: 50%\n    }\n</style>\n\n\n## Learn D3 in 5 days\n\nFor what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere!  These are just stepping stones into real custom visualizations that cannot be done in any other tool today.  I still cannot explain how excited I am to say **\"I created that in d3!!!\"**\n### Todays Result\n\n## Recall Example 3 from yesterday\n\n<div id='buttons'>\n    <h3>Subject</h3>\n    <div id='subjects'>\n        <button class='math' onclick=\"render4('math')\">Math</button>\n        <button class='science' onclick=\"render4('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes'>\n        <button class='chart4-big-btn' onclick='chart4_size(\"big\")')>Large</button>\n        <button class='chart4-small-btn' onclick='chart4_size(\"small\")'>Small</button>\n    </div>\n</div>\n\n<div id=\"chart4\" class='chart'></div>\n\n\n\n<script>\n    const data4 = [\n        { name: 'Alice', math: 93, science: 84},\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78},\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    chart4 = document.getElementById('chart4')\n\n\n    let width = function() {\n        return chart4.getBoundingClientRect().width\n        }\n    let height = function() {\n        return chart4.getBoundingClientRect().height\n        }\n    let barHeight = function() {\n        height() /  data4.length + 'px'\n        }\n\n    function chart4_size(size) {\n        d3.select('#sizes')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#sizes')\n            .select('.chart4-' + size + '-btn')\n            .classed('on', true)\n        d3.select('#chart4')\n            .attr('class', 'chart ' + size)\n        subject = document\n            .getElementById('subjects')\n            .querySelector('.on')\n            .classList[0]\n        render4(subject)\n    }\n\n    function render4(subject) {\n\n        d3.select('#subjects')\n            .selectAll('button')\n            .classed('on', false);\n\n        d3.select('#subjects')\n            .select('.' + subject)\n            .attr('class', subject + ' on');\n\n        let xScale = d3.scaleLinear()\n            .domain([50, 100])\n            .range([0, width()]);\n\n        const bars5 = d3.select('#chart4')\n            .selectAll('div')\n            .data(data4, function(d) {\n                return d.name\n            })\n        const newBars = bars5.enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n\n        newBars.merge(bars5)\n            .transition()\n            .style('width', function(d) {\n                return xScale(d[subject]) + 'px'\n            })\n            .style('height', barHeight())\n    }\n    render4('math')\n    chart4_size('big')\n</script>\n\n\n## Final Result\n\n<div id='buttons5'>\n    <h3>Subject</h3>\n    <div id='subjects5'>\n        <button class='math' onclick=\"render5('math')\">Math</button>\n        <button class='science' onclick=\"render5('science')\">Science</button>\n    </div>\n    <h3>Chart Size</h3>\n    <div id='sizes5'>\n        <button class='chart5-big-btn' onclick='chart5_size(\"big\")')>Large</button>\n        <button class='chart5-small-btn' onclick='chart5_size(\"small\")'>Small</button>\n    </div>\n</div>\n\n<div id=\"chart5\" class='chart'></div>\n\n\n\n<script>\n    const data5 = [\n        { name: 'Alice', math: 93, science: 84},\n        { name: 'Bob', math: 73, science: 82 },\n        { name: 'James', math: 92, science: 78},\n        { name: 'Steve', math: 77, science: 93 },\n        { name: 'Jordan', math: 80, science: 68 },\n    ]\n\n    chart5 = document.getElementById('chart5')\n\n\n    let width5 = function() {\n        return chart5.getBoundingClientRect().width\n        }\n    let height5 = function() {\n        return chart5.getBoundingClientRect().height\n        }\n    let barHeight5 = function() {\n        height5() /  data5.length + 'px'\n        }\n\n\n    function chart5_size(size) {\n        d3.select('#sizes5')\n            .selectAll('button')\n            .classed('on', false)\n        d3.select('#sizes5')\n            .select('.chart5-' + size + '-btn')\n            .classed('on', true)\n        d3.select('#chart5')\n            .attr('class', 'chart ' + size)\n        subject = document\n            .getElementById('subjects5')\n            .querySelector('.on')\n            .classList[0]\n        console.log(subject)\n        render5(subject)\n    }\n\n    function render5(subject) {\n\n        d3.select('#subjects5')\n            .selectAll('button')\n            .classed('on', false);\n\n        d3.select('#subjects5')\n            .select('.' + subject)\n            .attr('class', subject + ' on');\n\n        let xScale = d3\n            .scaleLinear()\n            .domain([50, 100])\n            .range([0, width5()]);\n\n\n        const bars5 = d3.select('#chart5')\n            .selectAll('div')\n            .data(data5, function(d) {\n                return d.name\n            })\n        const newBars = bars5\n            .enter()\n            .append('div')\n                .attr('class', 'bar')\n                .style('width', 0)\n\n        newBars.merge(bars5)\n            .transition()\n            .style('width', function(d) {\n                return xScale(d[subject]) + 'px'\n            })\n            .style('height', barHeight5())\n\n        d3\n         .select('#chart5')\n         .select('svg')\n         .remove()\n\n        const svg5 = d3\n            .select('#chart5')\n            .append('svg')\n            .attr('width', width5())\n            .attr('height', height5())\n            .style('position', 'relative')\n            .append('g')\n            .call(d3.axisBottom(xScale))\n    }\n    render5('math')\n    chart5_size('big')\n</script>",
        "long_description": "Learn D3 in 5 days For what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere! These are just stepping stones into real custom visualizations that cannot be done in any other tool today. I still can..."
    },
    {
        "cover": "./pycon2018.f76001445fbb-xmas2020.png",
        "title": "Pycon 2018 Roundup",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/pycon-2018-roundup.md",
        "canonical_url": "https://waylonwalker.com/pycon-2018-roundup",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./pycon2018.f76001445fbb.png",
        "date": "2018-05-12 00:00:00+00:00",
        "description": "none",
        "published": false,
        "summary": "These are my notes from pycon 2018 videos.  I love the python community and especially the conference talks.  This year I am going to take some notes from my favorite talks and post them here.",
        "content": "These are my notes from pycon 2018 videos.  I love the python community and especially the conference talks.  This year I am going to take some notes from my favorite talks and post them here.\n\nThis is an **Incomplete** working post.\n\n\n## [Jake VanderPlas - Performance Python: Seven Strategies for Optimizing Your Numerical Code](https://www.youtube.com/watch?v=zQeYx87mfyw)\n\n* **Always** profile **before** making any optimizations.\n* Vectorize with Numpy\n    * Looping in python can be slow\n* Use specialized data structures.\n    * scipy.spacial\n    * pandas\n    * xarray\n    * scipy.sparse\n    * sparse package\n    * scipy.sparce.csgraph\n* Cython\n    * Add types\n* Numba\n    * jit\n    * Fortran Like Speed\n    * heavy dependencies\n* Dask\n    * distributed tasks\n    * Can be executed locally or on a cluster\n* Look for an existing package\n    * **resist the urge to reinvent the wheel**\n\nhttps://www.youtube.com/watch?v=zQeYx87mfyw\n\n## [Justin Crown - \"WHAT IS THIS MESS?\" - Writing tests for pre-existing code bases - PyCon 2018](https://www.youtube.com/watch?v=LDdUuoI_lIg)\n\nThis was a great talk about not only test driven development on existing code bases, but how to be a good steward of code.  Justin talks about how to clean up an existing code base, and leave it better than you found it.  Start by improving the parts that you touch, write tests, and improve docstrings whenever you make a change to a particular feature.  As you clean up the code base and it matures consider taking a sprint day to write tests and imporove documentation.  Doing it after you have familiarity with the project will make it much easier to do.  You will also improve your understanding of the parts that you have not touched along the way.\n\nOne of the biggest takeaways that I heard in this talk, was do not assume that last person to touch the code was any less than yourself.  They likely did what they did for a reason, so before you have strong test coverage accross the project take it easy with rewriting everything they did, and only make the necessary changes.  Your changes could have an impact on other parts of the code base that you are not familiar with.\n\nhttps://.youtube.com/watch?v=zQeYx87mfyw\n\n\n## [Jason Huggins - Keynote ](https://www.youtube.com/watch?v=q-x7jK72E6E)\n\nJason had a great talk about teaching kids to code through his experiences with First Lego League.  He found that the event has the best of intentions, but does lend itself to schools with a larger budget that is able to order many different kits.  He has found himself deep down a rabbit hole of finding an affordable alternative that can be done with the inexpensive raspbery pi zero, and controlled  with the cheapest tablets.  He is currently working on a programming language called wildcard, that can be programmed with paper.  This really reminds me of a game that I play with my 5 year old son [Robot Turtles](https://www.robotturtles.com).  He really likes to play it.  I will definitely be following this project to see if this is something that I can do with him when its ready.\n\nhttps://www.youtube.com/watch?v=q-x7jK72E6E\n\n## [Dan Callahan - Keynote - PyCon 2018](https://www.youtube.com/watch?v=ITksU31c1WY)\nI was a bit sad when I was looking through the list of PyCon 2018 talks and did not see anything that appeared to talk about web assembly, but hidden in Dan Callagan's keynote was a great story about web assembly and what it means to python.  Dan's keynote was a great story about using the best tools available to you.  He goes back to his childhood where he programmed in basic because thats what he could take with him away from the desktop on his TI-82.  In modern times we have so many platforms other than desktop, and new ones comming out so frequently that its impossible to see what the next one will be.  There are even computers in refrigerators today.  The one thing that seems to be common is that they all have a web browser.  With that we can write web apps with python, but we are still missing the JavaScript dominated client side story.  Dan shows that this is changing with web assembly.  He showed examples where Autodesk compiled Autocad to wasm, and can run it in the browser!!  He showed versions of windows 3 running completely inside of firefox.  While it is currenly not realistic to compile python to web assembly as it creates large file sizes, it is possible and he sees a bright future for python in the browser.\n\n\nhttps://www.youtube.com/watch?v=ITksU31c1WY\n\n## [Alex Petralia - Analyzing Data: What pandas and SQL Taught Me About Taking an Average](https://www.youtube.com/watch?v=DlgG0QdrqAU)\n\n\nAsks the right questions before writing the first line of code.  Even the simplest questions such as averages have many possible pitfalls along the way.  Alex discusses how to prepare your data before averaging in this talk.  He brings some new _\"Jargon\"_ .  I am not sure that this jargon made this any easier for me to understand or discuss.  It may take some time for this one to sink in to become effective.  I feel like using plain english is more effective as it is more easily understood by anyone.  \"find the **daily** average **sales** by **seller**\"\n### Jargon\n**Collapsing key:**\n* the collapsed/aggregated data relevant to this analysis\n* _we are overriding the primary key (i.e. what a table defines as an observation)_\n* the original number of rows\n\n**Grouping key:** the key defining a group**\n* _eg. \"for each Seller\" is (seller), \"for each Country and city is (Country, City)_\n* this defines how many rows are in the result\n\n** Obvervation key: a unit of observation for this analysis**\n* _eg. \"daily average\" is (Date), \"across regions\" is (Region)_\n* this defines how many rows are in the denominator\n\n### Formula\nCollapsing Key - Grouping Key = Observation Key\n\n### Example Question\nCalculate the Average Daily Sales for each Seller.\n\n**Collapsing Key:** (Date, Seller)\n**Grouping Key:** (Seller)\n**Observation Key:** (Date)\n\n### data set\n\n| id | Date    | Seller | ApplesSold |\n|----|---------|--------|------------|\n| 1  | Monday  | Mary   | 5          |\n| 1  | Monday  | Bob    | 4          |\n| 1  | Tuesday | Bob    | 8          |\n| 1  | Thursday| Jane   | 10         |\n| 1  | Thursday| Jane   | 6          |\n\n### SQL Example\n```SQL\nSELECT\n    Seller,\n    AVG(total)\nFROM (\n    SELECT\n       DATE,\n       SELLER,\n       SUM(ApplesSold) AS total\n    FROM\n       Apples\n    GROUP BY\n       DATE,\n       SELLER -- Collapsing Key\n    ) as t\nGROUP BY\n    Seller -- Grouping Key\n\n\n```\n### Pandas Example\nI am interested in trying out this technique of using the second groupby.  I typically use an unstack instead, but that relies on having the order of the Collapsing key correct.\n```python\n(pd\n    .groupby(['Date', 'Seller']) # Collapsing Key\n    ['ApplesSold']\n    .sum()\n    .groupby(level='Seller') # Grouping Key\n    .mean()\n    )\n```\n\n\nhttps://www.youtube.com/watch?v=DlgG0QdrqAU\n\n## [Devishi Jha - Teaching Python 101 - PyCon 2018](https://www.youtube.com/watch?v=s36GwDng904&t=1113s)\n\nI was really impresssed by the professional level of presentation from Devishi from such a young age!  She had a great talk about teaching python to young people.  This talk really resonated with me as a father of two young children. She was advocating for python to be taught more frequently and earlier in schools.  In her opion onece students have a basic grasp of algebra they should be starting to use python over a higher level abstraction like scratch.  She also advocated that on the other Java tends to make computer science unaproachable and too difficult for students.  It is too large of a jump and tends to steer students away.\n\nhttps://www.youtube.com/watch?v=s36GwDng904",
        "long_description": "These are my notes from pycon 2018 videos. I love the python community and especially the conference talks. This year I am going to take some notes from my favorite talks and post them here. This is an Incomplete working post. Jake VanderPlas - Per..."
    },
    {
        "cover": "./nordwood-themes-162462-unsplash_cropped2.jpg",
        "title": "Generating Readme Tables From Pandas",
        "tags": [
            "data",
            "python"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/readme-tables.md",
        "canonical_url": "https://waylonwalker.com/readme-tables",
        "category": "Blog",
        "cover_image": "https:waylonwalker.com/./nordwood-themes-162462-unsplash_cropped2.jpg",
        "date": "2018-05-16 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "## Generating Readme Tables From Pandas\n\nI commonly have a need to paste the first few lines of a dataset into a markdown file.  I use two handy packages to do this, ```tabulate``` and ```pyperclip```.  Lets say I have a Pandas DataFrame in memory as ```df``` already.  All I would need to do to convert the first 5 rows to markdown and copy it to the clipboard is the following.\n\n```Python\nfrom tabulate import tabulate\nimport pyperclip\nmd = tabulate.tabulate(df.head(), df.columns, tablefmt='pipe')\npyperclip.copy(md)\n```\n\n\nThis is a super handy snippet that I use a lot.  Folks really appreciate it when they can see a sample of the data without opening the entire file.",
        "long_description": "Generating Readme Tables From Pandas I commonly have a need to paste the first few lines of a dataset into a markdown file. I use two handy packages to do this, tabulate and pyperclip. Lets say I have a Pandas DataFrame in memory as df already. Al..."
    },
    {
        "cover": "/static/gratitude_049-xmas2020.png",
        "title": "Gratitude 049",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_049.md",
        "canonical_url": "https://waylonwalker.com/gratitude_049",
        "cover_image": "https:waylonwalker.com/gratitude_049.png",
        "date": "2018-08-30 00:00:00+00:00",
        "description": "Support Today I woke up to find a very inspiring note from Rhiannon. It was hand writtent front and back! In the note",
        "published": false,
        "content": "#### Support\n\nToday I woke up to find a very inspiring note from Rhiannon.  It was hand writtent front and back!  In the note she talked about the stuggles that we have had over the last 2 years, and that while reading through her journal there was one thing that kept her going day in and day out, me.  I have been there through the hard times for her.  Yesterday I heard some news that was very sad for me to hear, and made me very unsure of the future.  She left me this note to let me know that no matter what happens she will be there by my side and we will get through it together.",
        "long_description": "Support Today I woke up to find a very inspiring note from Rhiannon. It was hand writtent front and back! In the note she talked about the stuggles that we have had over the last 2 years, and that while reading through her journal there was one thi..."
    },
    {
        "cover": "/static/gratitude_050-xmas2020.png",
        "title": "Gratitude 049",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_050.md",
        "canonical_url": "https://waylonwalker.com/gratitude_050",
        "cover_image": "https:waylonwalker.com/gratitude_050.png",
        "date": "2018-10-18 00:00:00+00:00",
        "description": "Happy Birthday Ayla Today was Ayla's fourth birthday, what an adventure it took to get here. I am so grateful for how f",
        "published": false,
        "content": "#### Happy Birthday Ayla\n\nToday was Ayla's fourth birthday, what an adventure it took to get here.  I am so grateful for how far she has came.  Her medical issues are all resolved, her speech is on point, and she is overall a very happy and healthy four year old girl.  Today we were able to celebrate her birthday at home as a family.  She absolutely loved the presents that we got her.  It was very fun to watch the excitement on her face all day long.  She is very attached to her new toys and hasnt stopped playing with them yet.  It has been a long journey for us to get here with us, and it was worth all of the effort!",
        "long_description": "Happy Birthday Ayla Today was Ayla's fourth birthday, what an adventure it took to get here. I am so grateful for how far she has came. Her medical issues are all resolved, her speech is on point, and she is overall a very happy and healthy four ye..."
    },
    {
        "cover": "/static/gratitude_051-xmas2020.png",
        "title": "Gratitude 051",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_051.md",
        "canonical_url": "https://waylonwalker.com/gratitude_051",
        "cover_image": "https:waylonwalker.com/gratitude_051.png",
        "date": "2018-11-05 00:00:00+00:00",
        "description": "Talking Today I am grateful for the fact that I have someone to talk about my problems with. Rhiannon is very influenti",
        "published": false,
        "content": "#### Talking\n\nToday I am grateful for the fact that I have someone to talk about my problems with.  Rhiannon is very influential when it comes to mental health.   She has conconcoured several very difficult issues of her own and is able to guide me through mine.  I am glad that we are able to talk through these things and come up with actionable things to correct.\n\nLife remains a rollar coaster and these issues will come  and go, new ones will rise and fall, old ones will creep in.  It is important to keep someone like this who you can talk to.  For me it is **very** difficult to identify what the root issue is to begin with let alone try to fix it.  Recently I was really struggling and it came down to confidence/imposter syndrome.  She was able to identify that, and point out some really amazing feedback that I have recieved as truth that I am achieving great standards, even if I dont feel that way when I am lost in the weeds of everything.",
        "long_description": "Talking Today I am grateful for the fact that I have someone to talk about my problems with. Rhiannon is very influential when it comes to mental health. She has conconcoured several very difficult issues of her own and is able to guide me through..."
    },
    {
        "cover": "/static/gratitude_052-xmas2020.png",
        "title": "Gratitude 052",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_052.md",
        "canonical_url": "https://waylonwalker.com/gratitude_052",
        "cover_image": "https:waylonwalker.com/gratitude_052.png",
        "date": "2018-11-09 00:00:00+00:00",
        "description": "6 years The past 6 years have taught me a lot about life. Especially about the most important part Family. Family are",
        "published": false,
        "content": "#### 6 years\n\nThe past 6 years have taught me a lot about life. Especially about the most important part  **Family**.  Family are those who have your back at any moment, and you have their back at any given moment.  6 years ago we expanded our family when we brought our first child into it.  Since then has been quite the journey.  Throughout those 6 years every single one of use have had our ups and downs, but the others always have our backs and help us through anything.  Not only is that sweet boy turning 6 today, but he is the one that needs a bit of extra attention right now.  We have his back and will help him through his journey.",
        "long_description": "6 years The past 6 years have taught me a lot about life. Especially about the most important part Family. Family are those who have your back at any moment, and you have their back at any given moment. 6 years ago we expanded our family when we b..."
    },
    {
        "cover": "/static/gratitude_053-xmas2020.png",
        "title": "Gratitude 053",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_053.md",
        "canonical_url": "https://waylonwalker.com/gratitude_053",
        "cover_image": "https:waylonwalker.com/gratitude_053.png",
        "date": "2018-11-11 00:00:00+00:00",
        "description": "She is a RockStar We recently (today) found out that that Wyatt has moderatly severe Sleep apnea. This explains a lot",
        "published": false,
        "content": "#### She is a RockStar\n\nWe recently _(today)_ found out that that Wyatt has moderatly severe Sleep apnea.  This explains a  lot for him, and is a bit scary for us at the moment, and we are hoping for the best for him.  We wouldnt have found out any of this if it wasnt for Rhiannon.  She is an advocate for these kids like nothing else.  The mom gene is strong wiht this one.  When she knows something is wrong in her gut, she stops at nothing to find answers.",
        "long_description": "She is a RockStar We recently (today) found out that that Wyatt has moderatly severe Sleep apnea. This explains a lot for him, and is a bit scary for us at the moment, and we are hoping for the best for him. We wouldnt have found out any of this i..."
    },
    {
        "cover": "/static/gratitude_054-xmas2020.png",
        "title": "Gratitude 054",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_054.md",
        "canonical_url": "https://waylonwalker.com/gratitude_054",
        "cover_image": "https:waylonwalker.com/gratitude_054.png",
        "date": "2018-11-13 00:00:00+00:00",
        "description": "Hanging in there... Through everything we have gone through we have always came out on top. Nothing has knocked us down",
        "published": false,
        "content": "#### Hanging in there...\n\nThrough everything we have gone through we have always came out on top.  Nothing has knocked us down so bad that we cannot get back up.  Some days it may feel like we will never recover, but we always do.  Some days everything just is too much and is too overwhelming, but we find our way to the top.  Some days we feel crushed, but somehow we find the strength to kick that boulder off of our chest and rise above.  We are human, we have our good days and out bad days.  Our bad days feel so low we think it may never end, but it always does.  We rise back to the top and crush this thing we call life.  Everyone has their own struggles that they deal with every day, and their own battles to fight.  Next time your down, just remember it will **not** last forever and your day will come to crush it.  We will stand strong, concour our enemies, and rise to the top.\n\n> Forever and Ever.",
        "long_description": "Hanging in there... Through everything we have gone through we have always came out on top. Nothing has knocked us down so bad that we cannot get back up. Some days it may feel like we will never recover, but we always do. Some days everything jus..."
    },
    {
        "cover": "/static/gratitude_056-xmas2020.png",
        "title": "Gratitude 056",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_056.md",
        "canonical_url": "https://waylonwalker.com/gratitude_056",
        "cover_image": "https:waylonwalker.com/gratitude_056.png",
        "date": "2018-11-19 00:00:00+00:00",
        "description": "Reflection Today is Thanksgiving here in the United States, what a great day to take a reflection on the past year, and",
        "published": false,
        "content": "#### Reflection\n\nToday is Thanksgiving here in the United States, what a great day to take a reflection on the past year, and think about what I am grateful for.\n\n\nAyla is a singing, speaking, yelling, and screeeeeming pro.  Over this last year she has gone from nearly mute to graduating from Speech therapy!  Her progress has been astounding, and seeing her now you would have no idea where she was one year ago.  I would say she has some of the best enunciation I have heard from a 4 year old.\n\nWyatt got his CPAP, and has a plan to help him start sleeping better.  We are all hoping for the best for this little boy.  Fingers crossed that some sleep will help his ADHD.\n\nI am also very grateful for where our marriage is and where it has came from over the last year.  It has been rocky, but what relationship isn't _we're people_.  But we have learned so much about each other, and continue to get better each and every day.  I think that it's pretty amazing that we can take everything that life throws at us and stay on top!.",
        "long_description": "Reflection Today is Thanksgiving here in the United States, what a great day to take a reflection on the past year, and think about what I am grateful for. Ayla is a singing, speaking, yelling, and screeeeeming pro. Over this last year she has gone..."
    },
    {
        "cover": "/static/gratitude_055-xmas2020.png",
        "title": "Gratitude 055",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_055.md",
        "canonical_url": "https://waylonwalker.com/gratitude_055",
        "cover_image": "https:waylonwalker.com/gratitude_055.png",
        "date": "2018-11-19 00:00:00+00:00",
        "description": "Signs of Improvement Ayla was born 4 years ago with her fair share of medical issues. Most of which are resolved... pot",
        "published": false,
        "content": "#### Signs of Improvement\n\nAyla was born 4 years ago with her fair share of medical issues.  Most of which are resolved... potty training continues to be a source of difficulty for us.   We have relaxed and are letting her take the wheel at the moment.  It is slow going, but every once in awhile she shows us a spark of hope that she will get it. Yesterday was one of those days.  It is good to continue to let these moments revive our hope that she can do it and that when we are ready to push her again she will be ready to take charge.",
        "long_description": "Signs of Improvement Ayla was born 4 years ago with her fair share of medical issues. Most of which are resolved... potty training continues to be a source of difficulty for us. We have relaxed and are letting her take the wheel at the moment. It..."
    },
    {
        "cover": "/static/gratitude_057-xmas2020.png",
        "title": "Gratitude 057",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_057.md",
        "canonical_url": "https://waylonwalker.com/gratitude_057",
        "cover_image": "https:waylonwalker.com/gratitude_057.png",
        "date": "2018-12-01 00:00:00+00:00",
        "description": "Feeling Good Lately I have been feeling great! Literally great. We have had a ton going on for awhile and its been a l",
        "published": false,
        "content": "#### Feeling Good\n\nLately I have been feeling great!  Literally great.  We have had a ton going on for awhile and its been a long time that I have truely felt this great.  The benefits are astounding.  They say that you can only help others when you are capable of helping yourself, _oh how that is so true_.  I feel like lately I have been able to keep my cool and help everyone else much better than when not feeling on top of my game.\n\n> They say that you can only help others when you are capable of helping yourself, _oh how that is so true_.",
        "long_description": "Feeling Good Lately I have been feeling great! Literally great. We have had a ton going on for awhile and its been a long time that I have truely felt this great. The benefits are astounding. They say that you can only help others when you are ca..."
    },
    {
        "cover": "/static/gratitude_058-xmas2020.png",
        "title": "Gratitude 058",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_058.md",
        "canonical_url": "https://waylonwalker.com/gratitude_058",
        "cover_image": "https:waylonwalker.com/gratitude_058.png",
        "date": "2018-12-12 00:00:00+00:00",
        "description": "Pick me up when I Fall Lately there has been a rollar coaster running through our house. So much going on that its hard",
        "published": false,
        "content": "#### Pick me up when I Fall\n\nLately there has been a rollar coaster running through our house.  So much going on that its hard for everyone ot keep their head above water at all times.  I am grateful that we all have remained on each others team.  Sometimes when we fall we have to help ourselves back up, but it is really nice when there are others there to help us up.  That's what family is for isn't it?  It is amazing to see how others respond when they see you down and jump in with all they can do to help. I recently had a fall (_mental_), and after getting through it felt rediculous.  It has really opened my eyes to how to help people, and how to spot someone who is just having a rough day.  Most people do not have poor intentions, but they can come off that way when they are in a bad place.  Spot these moments in someones day and try to pick them back up.",
        "long_description": "Pick me up when I Fall Lately there has been a rollar coaster running through our house. So much going on that its hard for everyone ot keep their head above water at all times. I am grateful that we all have remained on each others team. Sometime..."
    },
    {
        "cover": "/static/gratitude_059-xmas2020.png",
        "title": "Gratitude 059",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_059.md",
        "canonical_url": "https://waylonwalker.com/gratitude_059",
        "cover_image": "https:waylonwalker.com/gratitude_059.png",
        "date": "2018-12-13 00:00:00+00:00",
        "description": "Positivity There is no substitute for a positive personality. I am very grateful to have a super positive subset of fol",
        "published": false,
        "content": "#### Positivity\n\nThere is no substitute for a positive personality.  I am very grateful to have a super positive subset of folks that I work with every day, it really helps to cancel out the negative ones.   I really like what Gary V. says about surrounding yourself with positive people, Keep  only those who are positive arounnd you and let the rest go.  I really struggle to completely shut out anyone from my life, but I do try to focus my interactions to those who are positive and uplifting.  I will give nearly anyone who asks for help in a nice positive way 15mins - 1hr.  Those who come and demand help with negativity are hard to give that time to.  I do not seek them out for help, feedback, or to check in on them.  Keep the positive ones close to you.\n\nAs this one is about positivity I find it odd that it went in a direction about negative folks and was on the edge of not really being a gratitude post.  I guess thats what happens in a short/timed freeflow sometimes.",
        "long_description": "Positivity There is no substitute for a positive personality. I am very grateful to have a super positive subset of folks that I work with every day, it really helps to cancel out the negative ones. I really like what Gary V. says about surroundin..."
    },
    {
        "cover": "/static/gratitude_060-xmas2020.png",
        "title": "Gratitude 060",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_060.md",
        "canonical_url": "https://waylonwalker.com/gratitude_060",
        "cover_image": "https:waylonwalker.com/gratitude_060.png",
        "date": "2018-12-18 00:00:00+00:00",
        "description": "Chill Every once in awhile its time to take a deep breath.. Seriously do it with me stop, take a deep breath, exhale.",
        "published": false,
        "content": "#### Chill\n\nEvery once in awhile its time to take a deep breath..  Seriously do it with me stop,  take a deep breath, exhale.  Understand that you cannot do everything.  Sometimes life throws you a loop that is out of your control.  Today was one of those days.  Getting down to the end of the year I get really excited to work on my projects at work for me.  I take full advantage of the reduced workforce, reduced desk stops, reduced chit chat, and I GTD.  Getting down within the last week I am starting to prioritize projects to ensure I get everything done that really needs done while I have this time to ensure full productivity in the next year.  My son stayed home sick and I was with him.  As much as I wanted to stress out about the things I wasnt getting done we came to a comprimise.  I was able to work from home for a good chunk of the day, but we also spent some time chilling together on our Minecraft server.  It was really fun.  We were working through projects together, taking out mobs, building structures, the stresses of life seemed to melt away for awhile.  And you know what we both loved it.",
        "long_description": "Chill Every once in awhile its time to take a deep breath.. Seriously do it with me stop, take a deep breath, exhale. Understand that you cannot do everything. Sometimes life throws you a loop that is out of your control. Today was one of those..."
    },
    {
        "cover": "/static/gratitude_061-xmas2020.png",
        "title": "Gratitude 061",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_061.md",
        "canonical_url": "https://waylonwalker.com/gratitude_061",
        "cover_image": "https:waylonwalker.com/gratitude_061.png",
        "date": "2018-12-19 00:00:00+00:00",
        "description": "Inspirational Work I research everything to DEATH. This includes my work. I am constantly looking for inspiration, and",
        "published": false,
        "content": "#### Inspirational Work\n\nI research everything to _DEATH_.  This includes my work.  I am constantly looking for inspiration, and learning from others in how they do their work. I love seeing the results that can be achieved by someone who is dedicated fully to their craft, and try to understan how I can achieve 80% of that with 20% of the effort, so that I dont need to be a full time designer, front end developer, dev ops... you get the picture.  Over the last couple of months we have had a Data Scientist on rotation in our group and its time to get it into production and start getting  some feedback.  As he is learning how the web works its cool to see the light come on for someone else, and have that ah ha moment.  The web is an overly complicated beast these days with far too many options.  It is",
        "long_description": "Inspirational Work I research everything to DEATH. This includes my work. I am constantly looking for inspiration, and learning from others in how they do their work. I love seeing the results that can be achieved by someone who is dedicated fully..."
    },
    {
        "cover": "./flex-xmas2020.png",
        "title": "Follow Your Passion",
        "tags": [],
        "status": "Draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/passion.md",
        "canonical_url": "https://waylonwalker.com/passion",
        "cover_image": "https:waylonwalker.com/./flex.png",
        "date": "2019-01-01 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "## Follow Your Passion\n\n_my journey into data science_\n\nIn January 2018 I started work as a full time data scientist turning my passion into a career.  It is something that I didn't see myself doing 5 years ago, but is something that I love to do.  It combines my love of data, visualization, story telling, software development, and writing code.  Most of all it allows me to work in a space that promotes learning and creativity.  As a mechanical engineer for a company that has been building equipment for nearly a century the mechanical engineering is very well established I felt that there was not a lot of room for creativity.\n\n\n## Find Your Role\n\nWhen I first started as a full time  mechanical engineer",
        "long_description": "Follow Your Passion my journey into data science In January 2018 I started work as a full time data scientist turning my passion into a career. It is something that I didn't see myself doing 5 years ago, but is something that I love to do. It combi..."
    },
    {
        "cover": "./ross-van-der-wal-224852-unsplash.jpg",
        "title": "Do More of What Brings You Joy",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/happy.md",
        "canonical_url": "https://waylonwalker.com/happy",
        "cover_image": "https:waylonwalker.com/./ross-van-der-wal-224852-unsplash.jpg",
        "date": "2019-01-01 00:00:00+00:00",
        "description": "happiness in the workplace",
        "published": true,
        "content": "Today I want to take some time to talk about the things that make me happy in my work environment.  This is completely free-flow off the cuff, but are things that I do that make me happy, not having them would definitely be a deal breaker for me .\n\n### Attitude\n\nA positive work atmosphere goes a long ways.  We all have enough negativity going on in our lives that is out of our control accepting any negativity in the workplace is a no go for me.  There was a point in which I was suffering a lot of negativity at work.  This began to trickle into every part of life, and it became hard to see positivity anywhere.  My wife not only noticed this, but put a polite request in for change.  It was definitely a low point and she could tell tell that my work life was not helping anything.\n\n![positive gif](https://media.giphy.com/media/dJGYFScvBjfRabiH7m/giphy.gif)\nThrow out the negativity - courtesy [giphy](https://giphy.com/)\n\n**Bring the positivity** to your workplace.  It is really difficult for folks to tear you down if you are the one that is always up beat and happy.  **People will notice**. When they do they will bring the good projects your way, Praise you for your hard work, and  Ask for and value your advice.\n\n### Helping People\n\n**Helping people** is part of who I am,  I cannot change that.  I rarely turn someone away who comes to me looking for help.  I will give nearly anyone 15 minutes to help them reach thier goals.  I dont care if they are in a completely different part of my organization,  if they will ever return the favor, or how it will look on my performance review.\n\nBeing in the position that I am in I am graced with access to many data sets, that I can query en masse. It's not uncommon that I have someone come to me that has access to get the data they need but will take them 2 days to mine out the information they need one at a time every quarter.  I can save them these 2 days, increase their data quality, and increase its refresh rate by writing 10 lines of sql in about 5 minutes.  I hear so oftem from people why I do this, It's just part of who I am.  The benefits are that everytime I do this I build connections with many folks from a very broad range of backgrounds.\n\n### Learning\n\n**Learning** is one of the things that drive me to get excited to come to work every single day.  I am always looking for new techniques to improve my workflow, soft skills, and technical skills.  This keeps me confident that if something happens that I need to find another gig I am current with the latest tech and ready to hire in somewhere else.  It's also very enjoyable to watch my products improve, and be able to pump them out at faster and faster rates.\n\n### Grind\n\n![laser focus](https://media.giphy.com/media/3oEduGi1UWg9Q6nF84/giphy.gif)\nLaser Focus - courtesy [giphy](https://giphy.com/)\n\nThe last thing is that I need is a few hours of undistracted time to grind.  After I help some folks, and keep up with the latest skills I need to focus, **Laser Focus**.  I have a lot going on outside of work, so in order for me to keep some sort of balance I need to chrun out some quality hours of progress, otherwise I get behind, stressed, anxious, and start to loose my work-life balance as it is important for me to meet the deadlines that I commit to.",
        "long_description": "Today I want to take some time to talk about the things that make me happy in my work environment. This is completely free-flow off the cuff, but are things that I do that make me happy, not having them would definitely be a deal breaker for me . At..."
    },
    {
        "cover": "./flex-xmas2020.png",
        "title": "Follow Your Passion",
        "tags": [],
        "status": "Draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/test.md",
        "canonical_url": "https://waylonwalker.com/test",
        "cover_image": "https:waylonwalker.com/./flex.png",
        "date": "2019-01-01 00:00:00+00:00",
        "description": "none",
        "published": false,
        "content": "## Example\n\n<iframe src='/page2' width='375' height='812' scrolling='no' style='border: 1px solid #333;'>",
        "long_description": "Example..."
    },
    {
        "cover": "/static/gratitude_018-xmas2020.png",
        "title": "Gratitude 018",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_018.md",
        "canonical_url": "https://waylonwalker.com/gratitude_018",
        "cover_image": "https:waylonwalker.com/gratitude_018.png",
        "date": "2019-01-01 00:00:00+00:00",
        "description": "My First French Braid Tonight was the last night of the big holiday vacation and I finally got that special moment with",
        "published": false,
        "content": "#### My First French Braid\n\nTonight was the last night of the big holiday vacation and I finally got that special moment with every single family member over break.  It was Ayla's turn tonight.  We had our break when Wyatt wanted mommy to play MineCraft with him and did not want daddy to play.  Ayla's hair looked like a bird was trying to built its nest in it.  We made our way upstairs with a spray bottle, comb, brush and a whole lot of excitement.  We filled the spray bottle with water, and I let Ayla start going to town spraying everything in sight.  Although it was explicitly stated that it would not be used for its intended purpose, detangling hair.  Thats ok though as I was able to get some moisture in with my hands.  I continued to do my first french braid on her.  The first attempt was a fail as Ayla was moving too much and I lost it.  The second attemt was a success.  After this Ayla proceeded to water, brush, wipe, and comb daddy's har over the next hour!\n\n\n\nI ran out of time, but I will still mention that she painted her first set of toes.\n\n![](/static/toes.jpg)",
        "long_description": "My First French Braid Tonight was the last night of the big holiday vacation and I finally got that special moment with every single family member over break. It was Ayla's turn tonight. We had our break when Wyatt wanted mommy to play MineCraft wi..."
    },
    {
        "cover": "/static/gratitude_062-xmas2020.png",
        "title": "Gratitude 062",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_062.md",
        "canonical_url": "https://waylonwalker.com/gratitude_062",
        "cover_image": "https:waylonwalker.com/gratitude_062.png",
        "date": "2019-01-01 00:00:00+00:00",
        "description": "Productive Break It's nearing the end of the annual shutdown. We have had a lot of illness running through the house ove",
        "published": false,
        "content": "#### Productive Break\n\nIt's nearing the end of the annual shutdown. We have had a lot of illness running through the house over the course of the break, but the last couple of days have been very productive.  We have been **Spring Cleaning**.  We have cleared out a lot of unnecessary things, scrubbed the house, and packed up a lot of things in preparation for the upcoming move.  It feels great to finally start to see some progress on these tasks after talking about them for so long.",
        "long_description": "Productive Break It's nearing the end of the annual shutdown. We have had a lot of illness running through the house over the course of the break, but the last couple of days have been very productive. We have been Spring Cleaning. We have cleared..."
    },
    {
        "cover": "/static/gratitude_063-xmas2020.png",
        "title": "Gratitude 063",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_063.md",
        "canonical_url": "https://waylonwalker.com/gratitude_063",
        "cover_image": "https:waylonwalker.com/gratitude_063.png",
        "date": "2019-01-02 00:00:00+00:00",
        "description": "Shaggy No More 2019 I will be more professional looking every day... not just when convenient and to kick it off I got m",
        "published": false,
        "content": "#### Shaggy No More\n\n2019 I will be more professional looking every day... not just when convenient and to kick it off I got my hair cut today.  I have gone a few months now without a hair cut so I was pretty excited to get the shaggs cut down.  It was very nice to just get out of the house and away for a short period and come back looking like $1M bucks.  Rhiannon has been on me about my hair and my wrickly shirts in the past.  No more, this is the year that I will keep up on it myself without needing my wife to hold my hand!",
        "long_description": "Shaggy No More 2019 I will be more professional looking every day... not just when convenient and to kick it off I got my hair cut today. I have gone a few months now without a hair cut so I was pretty excited to get the shaggs cut down. It was ver..."
    },
    {
        "cover": "/static/gratitude_020-xmas2020.png",
        "title": "Gratitude 020",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_020.md",
        "canonical_url": "https://waylonwalker.com/gratitude_020",
        "cover_image": "https:waylonwalker.com/gratitude_020.png",
        "date": "2019-01-03 00:00:00+00:00",
        "description": "Good Tunes Recently the kids have really been into singing in the car with Daddy on the way to and from Preshool. It is",
        "published": false,
        "content": "#### Good Tunes\n\nRecently the kids have really been into singing in the car with Daddy on the way to and from Preshool.  It is so fun, because we are all belting it out so loud, and each take over for our special parts.  It's interesting how Ayla has grown into liking it.  For the longest time I thought that she did not like Wyatt and I being so loud, but she never complained about it.  Then over the past week I noticed during some parts of the songs she is the **LOUDEST** one in the car.  After each song the kids both ask, \"Did I sing the whole song?\", and I try to get super into it and have a very motivational Radio DJ style of voice encouraging them to continue and tell them how well they did.\n\n>during some parts of the songs she is the **LOUDEST** one in the car.\n\n\n#### Kids Current Favorite songs\n\n* Californication by Red Hot Chili Peppers\n* Stressed Out by Twenty One Pilots\n* Emperor's New Clothes by Panic! at the Disco\n* An 11 Year Old Wrote This About His Bully by Mac Lethal\n* Ride by Twenty One Pilots\n\nP.S. Its so awesome to see how into the Mac Lethal song they are.  It has a really cool message about being kind to others, and treating everyone with respect.",
        "long_description": "Good Tunes Recently the kids have really been into singing in the car with Daddy on the way to and from Preshool. It is so fun, because we are all belting it out so loud, and each take over for our special parts. It's interesting how Ayla has grown..."
    },
    {
        "cover": "/static/gratitude_064-xmas2020.png",
        "title": "Gratitude 64",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_064.md",
        "canonical_url": "https://waylonwalker.com/gratitude_064",
        "cover_image": "https:waylonwalker.com/gratitude_064.png",
        "date": "2019-01-03 00:00:00+00:00",
        "description": "Good Moods This morning I was graced with the greatest mood that my son could possibly have. He was incredibly courteou",
        "published": false,
        "content": "#### Good Moods\n\n\nThis morning I was graced with the greatest mood that my son could possibly have.  He was incredibly courteous, grateful, willing to do things on his own.  He got himself dressed, put his own shoes on, and when I told him that we had an early morning Dr. appointment he did not throw a fit and was 100% on board with going.  He was at the top of his game, and as happy as could be.\n\n>   Watching his gratitude and positivity shine this morning was more thatn enough motivation to start my day off on the right foot.\n\nThese are the moments that we long for as parents, and it is important to not brush over them and forget them.  It's important to to watch him grow into a great meaningful member of society.  Watching his gratitude and positivity shine this morning was more thatn enough motivation to start my day off on the right foot, and we did. We dropped off Ayla at preschool, attended his Dr. Appointment then came back to play and continue our wonderful morning.",
        "long_description": "Good Moods This morning I was graced with the greatest mood that my son could possibly have. He was incredibly courteous, grateful, willing to do things on his own. He got himself dressed, put his own shoes on, and when I told him that we had an ea..."
    },
    {
        "cover": "/static/gratitude_065-xmas2020.png",
        "title": "Gratitude 065",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_065.md",
        "canonical_url": "https://waylonwalker.com/gratitude_065",
        "cover_image": "https:waylonwalker.com/gratitude_065.png",
        "date": "2019-01-04 00:00:00+00:00",
        "description": "We played hard Today was filled with Dr. appointments... and Wyatt was still out of school. Days like this can terrify",
        "published": false,
        "content": "#### We played hard\n\nToday was filled with Dr. appointments... and Wyatt was still out of school.  Days like this can terrify my sometimes, but Wyatt was completely on board with it and we had a blast the entire day.  We played minecraft pocket edition in the wating room in apt 1, followed by some errands, a wonderful family lunch.  Then we played around a fountain at the last one, and it was a blast.  As he had surgery a week ago it has been awhile since we played this hard... and stayed completely positive the whole time.  We just went with the flow starting with some simple toys we had, to ninja moves, to an epic ninja Herobrine battle.  These are the moments that I yearn for as a parent.  Playing one on one, completely positive, in the flow, no fights, and having a blast.",
        "long_description": "We played hard Today was filled with Dr. appointments... and Wyatt was still out of school. Days like this can terrify my sometimes, but Wyatt was completely on board with it and we had a blast the entire day. We played minecraft pocket edition in..."
    },
    {
        "cover": "./namroud-gorguis-253765-unsplash.jpg",
        "title": "2018 Retrospective",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/2018-retrospective.md",
        "canonical_url": "https://waylonwalker.com/2018-retrospective",
        "cover_image": "https:waylonwalker.com/./namroud-gorguis-253765-unsplash.jpg",
        "date": "2019-01-05 00:00:00+00:00",
        "description": null,
        "published": true,
        "content": "2018 was a year of many ups and downs, and learning to deal with a whole new set of problems professionally and at home.  In 2018 I logged in to my first Linux system, setup my own webserver, data pipelines, database. I learned to use react and d3. Stepped up my python, javascript, and sql.\n\nAt home the doctor appointments keep piling in.  While I am learning to deal with it all there were several times throughout the year that I was very overwhelmed  with everything and broke down.\n\n\nHere are the goals I had listed out for 2018 and how I faired at completing them.\n\n### Positivity\n\n#### The Good\n\n\n---\n* Continue \"Favorite Things\" with family at dinner time\n* Take 2 10min breaks per day clear the mind\n\n---\n\nI can say that the kids are fully on board with favorite things and love to tell everyone about how their day went.  This is a time that they are very positive and generally give praise to another family member for helping them through their day.\n\n\n#### To Be Improved\n---\n\n* Gratitude journaling every day\n* Snooze Less be productive\n\n---\n\nI hit 61  gratitude journals in 2018.  I would not say that I met my goal, but I would definitely say that it's a great start and is something that I plan on improving next year.  I really like how it helps me focus on the positive things that happened throughout the day to find the best gratitude journal subject.  I do think the quick five minute deadline helps in that I have to be semi-prepared, which forces me to think about gratitude throughout the day.\n\n### Focus\n\nMediocore performance??\n\n---\n\n* 8 pomodoro\n* up to date kanban\n* daily/weekly planning session\n\n---\n\nIn 2018 I wanted to set out some goals to be more focused with the time that I do have at work.  I did quite a bit of research for the best techniques throughout December, and found a system that works well for me.  I did keep up with the _kanban_ system througout the year with trello.  I did not live by the board, but i did put things on there and move them.  The big thing that I found with this system is that it really made me **feel** productive, and gave me motivation to keep going.  While tracking my tasks throughout the day I was able to really see progress at the end of the day, and go home knowing I did some good work rather than feeling \"Where did this day go?\".\n\n> I am putting this back in for 2019, and I will learn to concur them.\n\nI completely fell off of the pomodoro system.  I really feel like this system works for me and keeps me on task, I really have issues with task jumping.  It is really hard to keep on it when there are so many distractions throughout the day.  I am putting this back in for 2019, and I will learn to concur them.  The biggest challenge is people.  I have a lot of people stop by for a quick answer or to chat about a project.  I really need to set strong boundaries and tell them in X minutes I can talk, right now I am busy.\n\n### Physical Health\n\n---\n\n* active 3 days a week... \ud83e\udd14\n* eat better \ud83d\udc4d\n\n---\n\nI will admit that I was not very measurable with \"eat better\", but I would say that I have done well.  I have really incorporated quite a few more vegetables into my diet, even when everyone else at the table isn't.  I throw some frozen brocoli in the microwave.  I have even started choosing vegan options at restaurants occasionally.\n\n> As different things started taking over my time I was back off the wagon.\n\nI started running in the March timeframe, and really enjoyed it.  As different things started taking over my time I was back off the wagon.  Overall I would say that I am still active 3 or so days of the week with the kids.\n\n### Educational\n\nContinuous Learning is something that I am really passionate for.  I truly believe in always learning from experiences, taking classes, watching conferences, listening to podcasts and reading blogs\n\n#### The Good \ud83d\udc4d\n\n_4 official courses completed_\n\n---\n\n* d3 in 5 days\n* flexbox zombies\n* cssgrid.io\n* datacamp sql\n* linux command line (many blogs/youtube... not a course)\n\n---\n\nI really stepped up my **front end web skills** this past year. I have started using es6, react, and building interactive web visualizations, laid out with native modern css.  These are things that I loosely understood in the past and really relied on libraries like `bokeh` or `dash` to get them to work right.\n\nI can also say that I have stopped google searching for every simple sql query that I write, Goal Complete.  I would say that I went beyond my sql goal in that I have learned to do far more than I realized was possible in the database, dramatically improving performance of my products.  I have also become the go to guy for reading/writing more complex queries.\n\n> Before 2018 I had never experienced the glory of the linux command line.\n\nBefore 2018 I had never experienced the glory of the linux command line.  Around May I was graced with a small on premis red hat virtual machine and my mind was quickly blown.  Many things that I have struggled to get up and working on windows simply worked right out of the box.  Webserver, task scheduling, 100% availability, and a great command line.  By the end of the year I installed Debian (wsl) on my windows machine and have converted all of my command line applications/languages to run from there, as there are far fewer compatability issues..\n\n#### The flop\n_planned coursed not completed_\n\n---\n\n* R\n* Machine Learning\n\n---\n\nHonestly I am not really hurt by not completing this one.  I really feel like I learned a ton of useful skills this year and I feel like neither of these two would have helped me progress.  R is too close to python to need both in my toolbelt without a specific project/need for it.  I did not have any projects with a dire need for ML.  I really hope to start getting some experience with it so I can have a better understanding when I should use it, but it was not a big need in any of my projects this year.\n\n\nOverall I am really happy with the progress from this year, and can't wait to get started next year.  Having the past few weeks off has really given me time for a reset that I didn't realize I needed.  Looking at these goals reminds me of the things that had started slipping towards the end during that last hard push to the end.\n\n\n\ud83c\udf89\ud83c\udf89 Hapy New Year \ud83c\udf89\ud83c\udf89",
        "long_description": "2018 was a year of many ups and downs, and learning to deal with a whole new set of problems professionally and at home. In 2018 I logged in to my first Linux system, setup my own webserver, data pipelines, database. I learned to use react and d3. S..."
    },
    {
        "cover": "/static/gratitude_066-xmas2020.png",
        "title": "Gratitude 066",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_066.md",
        "canonical_url": "https://waylonwalker.com/gratitude_066",
        "cover_image": "https:waylonwalker.com/gratitude_066.png",
        "date": "2019-01-05 00:00:00+00:00",
        "description": "Great Friends Today we are getting ready for our big move. I am very gratefull to have such great friends to help us p",
        "published": false,
        "content": "#### Great Friends\n\nToday we are getting ready for  our big move.  I am very gratefull to have such great friends to help us pack up our junk, and get rid of the things we dont need.  We started our minalist journey 2 years ago and during the last move we ended up with a bunch of boxes that were maybies that we are now getting rid of.  Anyways.  We just finished up a full day of prepping for a move, and our friends were so awesome.  Everyone was super helpful, positive, encouraging and no complaints from anyone.  Some even offered to take some things off of our hands as they would get more use out of them than we would in our new place, much better than seeing them hit the landfill.",
        "long_description": "Great Friends Today we are getting ready for our big move. I am very gratefull to have such great friends to help us pack up our junk, and get rid of the things we dont need. We started our minalist journey 2 years ago and during the last move we..."
    },
    {
        "cover": "/static/gratitude_067-xmas2020.png",
        "title": "Gratitude 067",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_067.md",
        "canonical_url": "https://waylonwalker.com/gratitude_067",
        "cover_image": "https:waylonwalker.com/gratitude_067.png",
        "date": "2019-01-08 00:00:00+00:00",
        "description": "Recognition from unexpected places Today I got a meeting invite with two folks that I do not usually get to interact wit",
        "published": false,
        "content": "####  Recognition from unexpected places\n\nToday I got a meeting invite with two folks that I do not usually get to interact with.  The title, recognition for Waylon Walker... I am very excited to see what it is, and very grateful to have the chance to meet these folks in person.  I do a lot of work that is not necessarily fit my job role, but is something that I know I have skills to do very quickly that many other folks do not.  I fill many of these requests throughout the year, and every once in awhile I get a VERY nice thank you from the person, or their boss.  I am grateful to be able to interact with these positive folks.  It makes me feel really good, and like I am doing a good job.  This particular on is different, and I will not know exactly what it is until Monday.",
        "long_description": "Recognition from unexpected places Today I got a meeting invite with two folks that I do not usually get to interact with. The title, recognition for Waylon Walker... I am very excited to see what it is, and very grateful to have the chance to meet..."
    },
    {
        "cover": "/static/gratitude_068-xmas2020.png",
        "title": "Gratitude 068",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_068.md",
        "canonical_url": "https://waylonwalker.com/gratitude_068",
        "cover_image": "https:waylonwalker.com/gratitude_068.png",
        "date": "2019-01-09 00:00:00+00:00",
        "description": "Amazing People This morning we informed Wyatt's bus diver that we were going to be moving and this was his last week rid",
        "published": false,
        "content": "#### Amazing People\n\nThis morning we informed Wyatt's bus diver that we were going to be moving and this was his last week riding the bus with her.  It was sad to let her know that we are leaving.  She has done so well with him, and they have become the best of friends.  He is the first one on the bus in the morning and sits right next to her.  She is able to start her day off early with a level of energy that is only parallelled by him, which is something that he needs.  He really attracts to positive people that can match his level of energy and enthusiasm for the day.  I am so grateful for people like her, who can bring so much positivity and gratitude to our life.  Some people are repelled by Wyatt's level of enthusiasm, so it is always exciting to see this.",
        "long_description": "Amazing People This morning we informed Wyatt's bus diver that we were going to be moving and this was his last week riding the bus with her. It was sad to let her know that we are leaving. She has done so well with him, and they have become the be..."
    },
    {
        "cover": "/static/gratitude_069-xmas2020.png",
        "title": "Gratitude 069",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_069.md",
        "canonical_url": "https://waylonwalker.com/gratitude_069",
        "cover_image": "https:waylonwalker.com/gratitude_069.png",
        "date": "2019-01-10 00:00:00+00:00",
        "description": "New Devices Alright I do not usually mix gratitude with material things, but hear me out here. Today is the second day",
        "published": false,
        "content": "#### New Devices\n\nAlright I do not usually mix gratitude with material things, but hear me out here.  Today is the second day with my new to me refurbished three year old phone, and I am really enjoying it.  I wanted to pay cash, didn't want to pay $800, wanted good performance, and didnt really care about having the Latest show room floor tech.  So far it is treating me really well.  The biggest reason that I got a new phone was that my signal was cutting out, and with our crazy lifestyle with lots of emergencies that I need to respond to I need somehing reliable.  Today I was at work and this phone had signal in places within my work that none of my last 2-3 devices could get signal in.  I was blown away when I could walk anywhere in the building and hold a conversation with my wife.  This gives me the confidence that my phone will have signal when I need it and I can respond to any emergency that I need to.",
        "long_description": "New Devices Alright I do not usually mix gratitude with material things, but hear me out here. Today is the second day with my new to me refurbished three year old phone, and I am really enjoying it. I wanted to pay cash, didn't want to pay $800, w..."
    },
    {
        "cover": "/static/gratitude_070-xmas2020.png",
        "title": "Gratitude 070",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_070.md",
        "canonical_url": "https://waylonwalker.com/gratitude_070",
        "cover_image": "https:waylonwalker.com/gratitude_070.png",
        "date": "2019-01-11 00:00:00+00:00",
        "description": "Great Morning Today is kicking off as a pretty amazing morning so far. The whole family was in a really happy mood, eve",
        "published": false,
        "content": "#### Great Morning\n\nToday is kicking off as a pretty amazing morning so far.  The whole family was in a really happy mood, even right after waking up.  I enjoyed the start of sunrise running around with Wyatt at the bus stop, and continuing now while writing my gratitude and daily planning.  Even though I was 10 minutes or so behind getting out the door this morning everything else has been going flawlessly, especially the most important things; family, mind, mood, and gratitude.",
        "long_description": "Great Morning Today is kicking off as a pretty amazing morning so far. The whole family was in a really happy mood, even right after waking up. I enjoyed the start of sunrise running around with Wyatt at the bus stop, and continuing now while writi..."
    },
    {
        "cover": "./steve-halama-1275997-unsplash.jpg",
        "title": "2019 goals",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/goals-2019.md",
        "canonical_url": "https://waylonwalker.com/goals-2019",
        "cover_image": "https:waylonwalker.com/./steve-halama-1275997-unsplash.jpg",
        "date": "2019-01-12 00:00:00+00:00",
        "description": "2019 goals",
        "published": true,
        "content": "<!-- cover: \"./namroud-gorguis-253765-unsplash.jpg\" -->\n\n<style>\nstrong {\n    /* color: goldenrod; */\n    /* text-shadow: 0rem 1px 1px goldenrod; */\n}\n</style>\n\n_The year of intenionality_\n\nThis is a follow up to my previous post [2018-retrospective](/blog/2018-retrospective/)\n\n## professional\n\nThis year I will become more productive, by intensionally working on a well thought out plan, learning the right technologies, and leave behind a positive legacy.\n\n### Productivity\n\nLast year I was able to make some great strides in my productivity and focus.  This year I want to be able to bring it up a notch.  **Intentionality** plays a big part in this.  Taking some time to sit down and think about the tasks you realistically want to complete for the day, then focusing on those tasks one at a time.\n\nI started off the year last year using the **pomodoro** system to focus on one task and one task only for 25 minutes at a time.  This worked really well for me but I quickly fell off of the train and fell into my old trap of reacting to the loudest customer over the items I put **intensionally** on my todo list.\n\nA **kanban** system is key to keeping it intentional.  I currently use a very simple trello system, with very few cards.  This helps to stay on track during those 25 minutes.  During the pomodoro session I move an item from todo, to doing, work that item, then move it to done when it is ready.  The only other thing that I can do during that time is to add items to the todo list.\n\n---\n\n* pomodoro\n    * 8 pomodori\n* Daily session planning\n    * Back on inbox zero\n    * todo's go in kanban not inbox\n\n---\n\n### Leave a Legacy\n\nI want to leave behind a legacy that I can be proud of. I want to be known for bringing a positive attitude that inspires others to do their best work, enourage others, and work as a team.  It is in my blood to help as many people as I can.  I am in a unique role and have a unique skill set that allows me to do what would take some hours and days in minutes and hours.  I really enjoy helping these folks, but I know many of them are smart enough to do it on their own, they just do not know where to get started.  For this reason I really want to amp up my docs this year.  I want people to be able to answer 80% of their questions right from the docs before needing to come to me to get started.  I want this to be part of the legacy that I leave with my projects for the next person that encounters them.\n\n---\n\n* better docs\n    * 80% oss questions should be answered\n    * finish pea course\n    * all projects have docs page with link by Feb\n    * consistent docs format\n* bring positivity to the workplace\n* blog weekly (52)\n    * lower barier to entry\n    * consistently work on writing skills\n    * 12 Medium/LinkedIn\n\n---\n\n\n### Educational\n\nLast year I made monumental improvements to my web development while continuing to hone my backend skills.  This year I want to amp up my web front end skills even more. I am finding this to be an area that not very many people in my organization have and I can knock out some simple projects really quick and gain a lot of value.  Last year I started using **react** as a front end framework.  I want to double down learning the intricicies of how it works, and how to effectively layout a react project. I also want to keep upping my design skills.  As I do more layouts I find that they are easier and easier to layout, and as I am able to get them out faster it give me more time to hone in the design. Lastly I want to continue honing in my backend skills.  Working with data pipelines, Linux command line, the cloud, and database architecture.\n\n\n---\n\n* Advanced React _dynamic web applications_\n* Refactoring UI _Rethinking how to layout data in logical ways_\n* Service Workies\n* AWS?? _we are moving to the cloud_\n* Continue Leveling up Linux Command Line\n* Data Pipeline\n\n---\n\n## Personal\n\nAt home I want to continue being a positive person.  Home is much harder to keep up a good attitude.  Mostly because I care more about my family and its harder to walk away and forget about a bad interaction with them.  I want to make sure that we keep up more positive interactions together as that will help everyone keep the positive attitude.  Lastly I would like to keep in touch with family better.  Rhiannon really loves a nice message to boost her day.  I would like to send her a few longer messages per week, and to one other family member at least once per week.  This can be in the form of a text, email, or hard copy letter in the mail.\n\n---\n\n* be your best\n   * +3 positives everyday (300+)\n   * gratitude daily (300+)\n* 5 languages\n* letters to family\n\n---\n\n\n**Bring it on 2019**  I am ready to take it on!",
        "long_description": "The year of intenionality This is a follow up to my previous post 2018-retrospective professional This year I will become more productive, by intensionally working on a well thought out plan, learning the right technologies, and leave behind a posi..."
    },
    {
        "cover": "/static/gratitude_071-xmas2020.png",
        "title": "Gratitude 071",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_071.md",
        "canonical_url": "https://waylonwalker.com/gratitude_071",
        "cover_image": "https:waylonwalker.com/gratitude_071.png",
        "date": "2019-01-12 00:00:00+00:00",
        "description": "The Right Words Yesterday we got a call from Wyatt's principal. It was something that I did not quite know how to deal",
        "published": false,
        "content": "#### The Right Words\n\nYesterday we got a call from Wyatt's principal.  It was something that I did not quite know how to deal with.  These things are not in my wheelhouse at all!  Rhiannon jumped right in and was able to talk to him and say all of the right things that he needed to hear.  I was amazed at the way she was able to speak to him with positivity, gratitude, and most of all inspiration.  She did not try to tear him down for what he did, but try to higlight the person that he was in those moments, and paint a picture of the person that he wants to be.  I was just amazed at how she was able to translate what we wanted to see from him into his terms, and give great example of things that he would really care about.  Hang in there mama we are on the right path to help him.",
        "long_description": "The Right Words Yesterday we got a call from Wyatt's principal. It was something that I did not quite know how to deal with. These things are not in my wheelhouse at all! Rhiannon jumped right in and was able to talk to him and say all of the righ..."
    },
    {
        "cover": "/static/gratitude_072-xmas2020.png",
        "title": "Gratitude 072",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_072.md",
        "canonical_url": "https://waylonwalker.com/gratitude_072",
        "cover_image": "https:waylonwalker.com/gratitude_072.png",
        "date": "2019-01-14 00:00:00+00:00",
        "description": "Preparation Yesterday was packing day for a big move. We have been getting ready for a few weeks now... Rhiannon has be",
        "published": false,
        "content": "### Preparation\n\nYesterday was packing day for a big move.  We have been getting ready for a few weeks now... Rhiannon has been getting ready for a few weeks and I kinda helped.  She really nocked this one out of the park.  Everything was so well organized into boxes and labeled we were able to load the truck really fast. She has been pushing herself really hard for a few weeks now.  We were both really impressed with how little the truck was filled.  We got the largest size Uhaul and only filled it half way.  We have had this same truck in the past, and filled it.  We have expanded our family, and yet trimmed down on the stuff.",
        "long_description": "Preparation Yesterday was packing day for a big move. We have been getting ready for a few weeks now... Rhiannon has been getting ready for a few weeks and I kinda helped. She really nocked this one out of the park. Everything was so well organize..."
    },
    {
        "cover": "/static/gratitude_073-xmas2020.png",
        "title": "gratitude 073",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_073.md",
        "canonical_url": "https://waylonwalker.com/gratitude_073",
        "cover_image": "https:waylonwalker.com/gratitude_073.png",
        "date": "2019-01-15 00:00:00+00:00",
        "description": "Great Friends We're officially moved into ouur new place today. I cannot thank all of our great friends enough for help",
        "published": false,
        "content": "#### Great Friends\n\nWe're officially moved into ouur new place today.  I cannot thank all of our great friends enough for helping us get through the move.  They helped us get the truck on the coldest and snowiest day of the year, pack it up in the snow, unload it, and return the truck.  But they did not leave before helping with the kids's number one concern.... **bunk beds**.  Last night two of them pulled a very late night to assemble the kids's bed so they could sleep.  These kids have been talking non-stop for a long time about these bunk beds and they were so excited when they saw them.\n\n**Thank You** everyone who helped us throughout our move!",
        "long_description": "Great Friends We're officially moved into ouur new place today. I cannot thank all of our great friends enough for helping us get through the move. They helped us get the truck on the coldest and snowiest day of the year, pack it up in the snow, un..."
    },
    {
        "cover": "/static/gratitude_074-xmas2020.png",
        "title": "Gratitude 074",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_074.md",
        "canonical_url": "https://waylonwalker.com/gratitude_074",
        "cover_image": "https:waylonwalker.com/gratitude_074.png",
        "date": "2019-01-18 00:00:00+00:00",
        "description": "Anti-Imposter I am so grateful that even during a rough time, a time where I feel that I struggle to get things accompli",
        "published": false,
        "content": "#### Anti-Imposter\n\nI am so grateful that even during a rough time, a time where I feel that I struggle to get things accomplished.  I feel that I dont put the time in, people recognize me for my work.  There are days that I feel that I cannot get the simplest of thing to work, and wonder what am I doing here, I feel like I dont know how to do what I need to, someone pops in to say thanks for my work for them.  Sometimes I feel that I stretch myself too broad and I do too many different types of things to get good at any of them.  Then someone comes my way to ask me how to do it because they know I am one of the few in our area that knows the full spectrum from end to end.  These gentle reminders keep me going.  They remind me that I can do it.  They remind me that no everyone knows what they are doing 100% of the time.  They remind me where I was, and where I am.  They remind me of the progress that I have already made.  They remind me that my goals are always changing and moving, but along the way I have reached so many.  So today, tell someone about the great work that they did, and how it helped you.  Tell them that you have confidence in their work and their hard work is appreciated.",
        "long_description": "Anti-Imposter I am so grateful that even during a rough time, a time where I feel that I struggle to get things accomplished. I feel that I dont put the time in, people recognize me for my work. There are days that I feel that I cannot get the simp..."
    },
    {
        "cover": "/static/gratitude_075-xmas2020.png",
        "title": "Gratitude 075",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_075.md",
        "canonical_url": "https://waylonwalker.com/gratitude_075",
        "cover_image": "https:waylonwalker.com/gratitude_075.png",
        "date": "2019-01-19 00:00:00+00:00",
        "description": "Calm We are tired, short on sleep, bodies tired from lifting, but we remain high on the excitement of what is to come.",
        "published": false,
        "content": "#### Calm\n\nWe are tired, short on sleep, bodies tired from lifting, but we remain high on the excitement of what is to come.  We are pushing through day by day to ensure that we meet our deadlines.  Our kids are missing the amount of time that we play with them, and starting to struggle emotionally, heck I think we are all struggling emotionally.  We have packed everything we own into a truck ready to move to a new place.  All of our favorite things are packed in, not surrounding us, and not giving us the compfort that we are used to.  This has been our life over the past week.  Now we take a deep breath and appreciate all of the help we have recieved this week.  The help that we recieved from our friends, to the landlords, my coworkers, and most of all each other.  Our favorite things are starting to surround us in our new place.  We have room, and time, to play.  Some things are not yet set up, but enough is setup to breathe.  Let's embrace the **calm** as we roll into the final phase of this move.",
        "long_description": "Calm We are tired, short on sleep, bodies tired from lifting, but we remain high on the excitement of what is to come. We are pushing through day by day to ensure that we meet our deadlines. Our kids are missing the amount of time that we play with..."
    },
    {
        "cover": "./brett-patzke-725745-unsplash-cropped.jpg",
        "title": "Python Tips",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/python-tips.md",
        "canonical_url": "https://waylonwalker.com/python-tips",
        "cover_image": "https:waylonwalker.com/./brett-patzke-725745-unsplash-cropped.jpg",
        "date": "2019-01-21 00:00:00+00:00",
        "description": null,
        "published": false,
        "content": "## Dictionaries\n\n### Unpacking\n\n* **kwargs\n* func(**input)\n* locals().update(d)\n\n###",
        "long_description": "Dictionaries Unpacking **kwargs func(**input) locals().update(d)..."
    },
    {
        "cover": "./nathan-dumlao-523529-unsplash-crop.jpg",
        "title": "remove git cruft",
        "tags": [
            "git"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-rm-cruft.md",
        "canonical_url": "https://waylonwalker.com/git-rm-cruft",
        "cover_image": "https:waylonwalker.com/./nathan-dumlao-523529-unsplash-crop.jpg",
        "date": "2019-01-21 00:00:00+00:00",
        "description": null,
        "published": false,
        "content": "cover: \"./nathan-dumlao-523529-unsplash-crop.jpg\"\ncover: \"./rawpixel-1055774-unsplash.jpg\"\n\n## inspiration\n\nhttps://blog.ostermiller.org/removing-and-purging-files-from-git-history/\n\n``` bash\ngit log --all --pretty=format: --name-only --diff-filter=D | sed -r 's|[^/]+$||g' | sort -u\n```\n``` bash\ngit filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch FILE_LIST' --prune-empty -f -- --all\n```\n\n``` bash\nrm -rf .git/refs/original/\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n```\n\n``` bash\ngit push origin --force --all\ngit push origin --force --tags\n```\n\n``` bash\ncd MY_LOCAL_GIT_REPO\ngit fetch origin\ngit rebase\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n```",
        "long_description": "cover: \"./nathan-dumlao-523529-unsplash-crop.jpg\" cover: \"./rawpixel-1055774-unsplash.jpg\" inspiration https://blog.ostermiller.org/removing-and-purging-files-from-git-history/ bash git log --all --pretty=format: --name-only --diff-filter=D | sed -r..."
    },
    {
        "cover": "./rawpixel-1055774-unsplash.jpg",
        "title": "Update Git User",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-update-user.md",
        "canonical_url": "https://waylonwalker.com/git-update-user",
        "cover_image": "https:waylonwalker.com/./rawpixel-1055774-unsplash.jpg",
        "date": "2019-01-21 00:00:00+00:00",
        "description": null,
        "published": true,
        "content": "This morning I log into my VCS and check activity on my projects to find that **someone else** has been _very_ active on my projects fo the last few weeks. I quicklyhover over the missing avatar to find that **It's Me**.  What's wrong here, why do I look like two different people throughout the day!  upon further investigation I see the issue.  while setting up a new terminal environment I mistyped my email address by **one character**.  After much searching and a few failed attempts I was able to fix it by following this article https://help.github.com/articles/changing-author-info/.\n\n\n## Bare Clone\n\nClone the repo, note it must be a `--bare` clone.\n\n``` bash\ngit clone --bare https://github.com/user/repo.git\ncd repo.git\n```\n\n## git-author-rewrite\n\nCurl down the `git-author-rewrite` script and edit the following variables `OLD_EMAIL` `CORECT_NAME` `CORRECT_EMAIL`\n\n``` bash\ncurl https://gist.githubusercontent.com/octocat/0831f3fbd83ac4d46451/raw/c197afe3e9ea2e4218f9fccbc0f36d2b8fd3c1e3/git-author-rewrite.sh > git-author-rewrite.sh\n```\n\nRun the script, and push the updates.\n\n\n``` bash\nbash git-author-rewrite.sh\ngit push --force --tags origin 'refs/heads/**'\n```\n\n## Cleanup\n\nDelete the `--bare` repo from your local machine.\n```bash\ncd ..\nrm -rf repo.git\n```\n\nI hope this helps someone, or future me who needs to fix their information in git.",
        "long_description": "This morning I log into my VCS and check activity on my projects to find that someone else has been very active on my projects fo the last few weeks. I quicklyhover over the missing avatar to find that It's Me. What's wrong here, why do I look like..."
    },
    {
        "cover": "/static/gratitude_076-xmas2020.png",
        "title": "Gratitude 076",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_076.md",
        "canonical_url": "https://waylonwalker.com/gratitude_076",
        "cover_image": "https:waylonwalker.com/gratitude_076.png",
        "date": "2019-01-21 00:00:00+00:00",
        "description": "Team Work The Boxes are slowly disappearing, the laundry pile is creeping down to the final pieces. We are nearing the",
        "published": false,
        "content": "#### Team Work\n\nThe Boxes are slowly disappearing, the laundry pile is creeping down to the final pieces.  We are nearing the final stages of the move thanks to some great teamwork.  We have been working though the day and late into the night, consistently putting the hours in.   Each day we creep closer to our final goal that seemed like it would never come.   Our  things are slowly finding their way to their home, placed with care  and precision.  Getting all of our things that we love brings us joy.  Some of these things were not seen since the last move.  I cannot wait to see the day's progress.",
        "long_description": "Team Work The Boxes are slowly disappearing, the laundry pile is creeping down to the final pieces. We are nearing the final stages of the move thanks to some great teamwork. We have been working though the day and late into the night, consistently..."
    },
    {
        "cover": "/static/gratitude_077-xmas2020.png",
        "title": "Gratitude 077",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_077.md",
        "canonical_url": "https://waylonwalker.com/gratitude_077",
        "cover_image": "https:waylonwalker.com/gratitude_077.png",
        "date": "2019-02-01 00:00:00+00:00",
        "description": "Teacher Appreciation It's the dead of winter, the cold January months, so cold in fact schools closed down for two days",
        "published": false,
        "content": "#### Teacher Appreciation\n\nIt's the dead of winter, the cold January months, so cold in fact schools closed down for two days due to an arctic wind.  For these two days Wyatt brought home homework to do at home.  Nothing big just a few simple things.  This really opened my eyes up to what teachers have to go through every day.  It is really tough to get him focused on doing the work for very long at all.  It is tough as an adult when you are _sooo_ close to the end of the task to let go and give a break, or to let him do it his way when you know he is capable of doing better.  For this I am grateful that we have teachers that are experts at working with kids like Wyatt to give him the best education possible, because without them I would loose my mind!",
        "long_description": "Teacher Appreciation It's the dead of winter, the cold January months, so cold in fact schools closed down for two days due to an arctic wind. For these two days Wyatt brought home homework to do at home. Nothing big just a few simple things. This..."
    },
    {
        "cover": "./brett-patzke-725745-unsplash-cropped.jpg",
        "title": "It's not all about winning",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/journey.md",
        "canonical_url": "https://waylonwalker.com/journey",
        "cover_image": "https:waylonwalker.com/./brett-patzke-725745-unsplash-cropped.jpg",
        "date": "2019-02-02 00:00:00+00:00",
        "description": "This is my story into data science.",
        "published": true,
        "content": "_This is my story into data science._\n\n# The Journey Begins\n\nI am addicted to the process of learning and improving my skills nearly to a fault. The reason I say nearly is because my addiction is fueled with results. I crave the output of my work enhance the work of others. I jump with joy as I see users gain insights they could have never imagined before. My mouth starts watering as I see their boring repetitive data mining activites be completed in a matter of seconds, opening up their mind to focus on their expertise. The day I stop learning will be the day that I start looking for another career path.\n\n> It's not all about winning.\n\n_~Mom_\n\nThis happened to me in 2014. I have a mechanical engineering degree and had a really good position at the time. I owned full engineering control of a small subset of engine components. The problem was that Everything is so proprietary and hardly documented the process of learning did not click with me. I felt like I had learned a lot about the product early on, and was stuck without any more resources to learn more. On the side, I had started learning python and data science techniques to enhance my job.\n\n![mountains in the fog](https://d33wubrfki0l68.cloudfront.net/a093e6c28214bb9556a4e877f5d128cf77b82bd3/9c5c4/static/eberhard-grossgasteiger-382452-unsplash-6f1eb07825ef1b2165ea1a3805fff023.jpg)\n\n> every time I feel like I have reached the peak of anyone topic the fog clears and I can now see a whole new mountain range that I did not know existed.\n\nI was addicted. I felt like there is so much knowledge easily obtained online in my free time, and I was able to take it back to my job and achieve results. Every time I feel like I have reached the peak of anyone's topic the fog clears and I can now see a whole new mountain range that I did not know existed.\n\n# Love the Journey\n\nBy 2017 I was really good at gaining results for our business and decided to make the jump to the data science team. I have achieved great results, and have been recognized as a high contributor to our business. Still, I do not feel like I have won. My goals are always moving and will always be 3-6 months ahead of me. I truly enjoy the process of learning and providing value so much that I will never let myself sit back and think that I have won and its time to reap the rewards of my hard work. I will say that I am winning. Not because of any results, awards, or recognition, but because I am happy. I have found a career path that I really enjoy the journey and I am not just trying to get on the fast track to a destination.",
        "long_description": "This is my story into data science. The Journey Begins I am addicted to the process of learning and improving my skills nearly to a fault. The reason I say nearly is because my addiction is fueled with results. I crave the output of my work enhance t..."
    },
    {
        "cover": "/static/gratitude_078-xmas2020.png",
        "title": "Gratitude 078",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_078.md",
        "canonical_url": "https://waylonwalker.com/gratitude_078",
        "cover_image": "https:waylonwalker.com/gratitude_078.png",
        "date": "2019-02-04 00:00:00+00:00",
        "description": "Simplicity We have been moved into the new apartment now for about 2 weeks, and I am really amazed how it feels to have",
        "published": false,
        "content": "#### Simplicity\n\nWe have been moved into the new apartment now for about 2 weeks, and I am really amazed how it feels to have simplified a lot of things along the way. There is a lot less clutter.  Cleaning is a breeze.  The kids are able to find their things and put them away with ease (for the most part).  There feels to be much less of a weight in each room.  Everywhere in the place feels light, clean, and easy to breathe.  There is very little in the way of stress of clutter and cleanliness.  The daily burden is quite minimal and everything can be cleaned up with very little effort.",
        "long_description": "Simplicity We have been moved into the new apartment now for about 2 weeks, and I am really amazed how it feels to have simplified a lot of things along the way. There is a lot less clutter. Cleaning is a breeze. The kids are able to find their thi..."
    },
    {
        "cover": "neonbrand-618322-unsplash.jpg",
        "title": "Rewrite History with Git",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-rewrite-history.md",
        "canonical_url": "https://waylonwalker.com/git-rewrite-history",
        "coverCredit": "Photo by NeONBRAND on Unsplash",
        "cover_image": "https:waylonwalker.com/neonbrand-618322-unsplash.jpg",
        "date": "2019-02-05 00:00:00+00:00",
        "description": null,
        "published": true,
        "content": "* rebase\n* git commit --amend\n\n## Unstage\n\n``` bash\ngit reset -- <file>\n```\n\n**rage** unstage to wipte out history of staged commit\n``` bash\ngit reset --hard <file>\n```\n\n## Undo file\n\n* rage quit\n* git reset HEAD~n <file>\n    * removes modifications\n    * keeps hitsory of changes and undoes them\n* git checkout HEAD~n -- <file>\n    * keeps modifications\n    * removes history\n\n    * --SOFT\n    * --HARD\n    * --Mixed\n\n## undo n commits back\n\nlocally before push\n``` bash\ngit reset HEAD~n\n```\n\nafter push\n``` bash\ngit revert HEAD~n\n```\n\n## update .gitignore\n\nafter push\n``` bash\ngit rm -r --cached .\ngit commit -am \"Updated .gitignore\"\n```",
        "long_description": "rebase git commit --amend Unstage bash git reset -- <file> rage unstage to wipte out history of staged commit bash git reset --hard <file> Undo file rage quit git reset HEAD~n removes modifications keeps hitsory of changes and undoes them git..."
    },
    {
        "cover": "/static/gratitude_079-xmas2020.png",
        "title": "Gratitude 079",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_079.md",
        "canonical_url": "https://waylonwalker.com/gratitude_079",
        "cover_image": "https:waylonwalker.com/gratitude_079.png",
        "date": "2019-02-05 00:00:00+00:00",
        "description": "Learning Resources Recently I have been thinking about all of the resources that have been available for me to learn. I",
        "published": false,
        "content": "#### Learning Resources\n\nRecently I have been thinking about all of the resources that have been available for me to learn.  I am so grateful to have these at my disposal.  Learning how to improve myself, and increase my productivity in the long run is a  passion of mine.  I spend many days spinning my wheels with something, but I am always learning.  Even though those few hours were lost in the short term, in the long term I always come away having learned something.  These small wins each day cumulativly add up to something that gives me a lot of productivity in my daily work and allows me to succeed.",
        "long_description": "Learning Resources Recently I have been thinking about all of the resources that have been available for me to learn. I am so grateful to have these at my disposal. Learning how to improve myself, and increase my productivity in the long run is a..."
    },
    {
        "cover": "/static/neonbrand-618322-unsplash.jpg",
        "title": "Rewrite History with Git",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-rewrite-history/git-rewrite-history.md",
        "canonical_url": "https://waylonwalker.com/git-rewrite-history",
        "coverCredit": "Photo by NeONBRAND on Unsplash",
        "cover_image": "https:waylonwalker.com/neonbrand-618322-unsplash.jpg",
        "date": "2019-02-05 00:00:00+00:00",
        "description": null,
        "published": true,
        "content": "* rebase\n* git commit --amend\n\n## Unstage learning-python-debugger\n\n``` bash\ngit reset -- <file>\n```\n\n**rage** unstage to wipte out history of staged commit\n``` bash\ngit reset --hard <file>\n```\n\n## Undo file\n\n* rage quit\n* git reset HEAD~n <file>\n    * removes modifications\n    * keeps hitsory of changes and undoes them\n* git checkout HEAD~n -- <file>\n    * keeps modifications\n    * removes history\n\n    * --SOFT\n    * --HARD\n    * --Mixed\n\n## undo n commits back\n\nlocally before push\n``` bash\ngit reset HEAD~n\n```\n\nafter push\n``` bash\ngit revert HEAD~n\n```\n\n## update .gitignore\n\nafter push\n``` bash\ngit rm -r --cached .\ngit commit -am \"Updated .gitignore\"\n```",
        "long_description": "rebase git commit --amend Unstage learning-python-debugger bash git reset -- <file> rage unstage to wipte out history of staged commit bash git reset --hard <file> Undo file rage quit git reset HEAD~n removes modifications keeps hitsory of change..."
    },
    {
        "cover": "/static/gratitude_080-xmas2020.png",
        "title": "Gratitude 080",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_080.md",
        "canonical_url": "https://waylonwalker.com/gratitude_080",
        "cover_image": "https:waylonwalker.com/gratitude_080.png",
        "date": "2019-02-06 00:00:00+00:00",
        "description": "Fun This morning Wyatt had a 2 hr delay. I still took Ayla to school on time. I did some work, but still had some time",
        "published": false,
        "content": "#### Fun\n\nThis morning Wyatt had a 2 hr delay.  I still took Ayla to school on time.  I did some work, but still had some time for fun on the MineCraft server.  This is a new world that Wyatt named Nathan.  We did a 20 minute mining session, and at the end wyatt found the first diamonds of the server.  He was in a really fun mood, and we were chatting it up the whole time, working together towards a common goal.  He was so cooperative, taking on tasks of his own, giving me tasks, divying up materials along the way to make sure each could accomplish their task.",
        "long_description": "Fun This morning Wyatt had a 2 hr delay. I still took Ayla to school on time. I did some work, but still had some time for fun on the MineCraft server. This is a new world that Wyatt named Nathan. We did a 20 minute mining session, and at the end..."
    },
    {
        "cover": "/static/gratitude_081-xmas2020.png",
        "title": "Gratitude 081",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_081.md",
        "canonical_url": "https://waylonwalker.com/gratitude_081",
        "cover_image": "https:waylonwalker.com/gratitude_081.png",
        "date": "2019-02-07 00:00:00+00:00",
        "description": "Freedom to learn I am very grateful that I have the freedom to learn the things I need to in order to advance my skills",
        "published": false,
        "content": "#### Freedom to learn\n\nI am very grateful that I have the freedom to learn the things I need to in order to advance my skills and grow my career.  I am very stretched for time, just like everyone else, but I am able to get the things done that I need to and still find time for learning.  I talk to some people that do not have the time.  They are piled so high with tasks to do that there is no time to learn.  I a grateful that my leadership sees value in it and do not really ask questions as long as tasks are being completed on time.",
        "long_description": "Freedom to learn I am very grateful that I have the freedom to learn the things I need to in order to advance my skills and grow my career. I am very stretched for time, just like everyone else, but I am able to get the things done that I need to an..."
    },
    {
        "cover": "/static/gratitude_082-xmas2020.png",
        "title": "Gratitude 082",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_082.md",
        "canonical_url": "https://waylonwalker.com/gratitude_082",
        "cover_image": "https:waylonwalker.com/gratitude_082.png",
        "date": "2019-02-08 00:00:00+00:00",
        "description": "Working Remotely I am so grateful that I am working in a space in which I can work remotely often. As a mechanical engi",
        "published": false,
        "content": "#### Working Remotely\n\nI am so grateful that I am working in a space in which I can work remotely often.  As a mechanical engineer I really struggled.  Our team was really structured for onsite work, and did not play well for remote folks.  Moving into data science, as long as I have a good connection to the data I need I can be productive from anywhere.  Actually Sometimes I find there to be fewer distractions at home.  Generally I work from home due to someone else's medical needs.  Today was different, my voice is completely gone.  This winter has been a rough one.  I am so grateful that I can cancel all of my meetings, push them to next week and take time to heal.  I can also put my head down and get some great work done without needing to use my voice.",
        "long_description": "Working Remotely I am so grateful that I am working in a space in which I can work remotely often. As a mechanical engineer I really struggled. Our team was really structured for onsite work, and did not play well for remote folks. Moving into dat..."
    },
    {
        "cover": "verstappen-photography-532656-unsplash.jpg",
        "title": "Minimal Project Structure",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/bit-01/bit_01.md",
        "canonical_url": "https://waylonwalker.com/bit_01",
        "coverCredits": "Photo by Verstappen Photography on Unsplash",
        "cover_image": "https:waylonwalker.com/verstappen-photography-532656-unsplash.jpg",
        "date": "2019-02-10 00:00:00+00:00",
        "description": "How to setup a data science project in python.",
        "published": false,
        "twitterCover": "./bit-01-twitter-card.jpg",
        "content": "# TLDR\n\nUse **[.gitignore.io](https://www.gitignore.io)** and consider adding an alias to your terminal to quickly add a .gitignore to any project missing one.\n\n``` bash\nalias gitignore='curl https://www.gitignore.io/api/vim,emacs,python,pycharm,sublimetext,visualstudio,visualstudiocode,data > .gitignore'\n```\n\nAdd a minimal **setup.py** to the root of your project, and use the following command to install it.\n\n``` bash\npip install -e .\n```\n\nconsider using **[cookiecutter](https://github.com/audreyr/cookiecutter)",
        "long_description": "TLDR Use .gitignore.io and consider adding an alias to your terminal to quickly add a .gitignore to any project missing one. bash alias gitignore='curl https://www.gitignore.io/api/vim,emacs,python,pycharm,sublimetext,visualstudio,visualstudiocode,da..."
    },
    {
        "cover": "/static/gratitude_083-xmas2020.png",
        "title": "Gratitude 083",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_083.md",
        "canonical_url": "https://waylonwalker.com/gratitude_083",
        "cover_image": "https:waylonwalker.com/gratitude_083.png",
        "date": "2019-02-10 00:00:00+00:00",
        "description": "Manners This weekend we re-implemented the ticket system in our house. It is really supposed to help focus ADHD kids.",
        "published": false,
        "content": "#### Manners\n\nThis weekend we re-implemented the ticket system in our house.  It is really supposed to help focus ADHD kids.  The kids have been really responsive to it.  Not only have they been really helpful to earn tickets so that they can have been cleaning up and doing nice things without being asked to.  They have been arguing less, and playing cooperatively more.  I really hope this is a sign of what is to come.  I am really grateful to have a wife that understands this kind of stuff and can research the latest techniques to help them.  She is just able to pick up and see things in kids that is far above normal.  She is then able to research and implement things to help them that are very targeted to their needs.",
        "long_description": "Manners This weekend we re-implemented the ticket system in our house. It is really supposed to help focus ADHD kids. The kids have been really responsive to it. Not only have they been really helpful to earn tickets so that they can have been cle..."
    },
    {
        "cover": "/static/gratitude_084-xmas2020.png",
        "title": "Gratitude 084",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_084.md",
        "canonical_url": "https://waylonwalker.com/gratitude_084",
        "cover_image": "https:waylonwalker.com/gratitude_084.png",
        "date": "2019-02-11 00:00:00+00:00",
        "description": "Reputation Today I am very proud of the reputation that I have buit. I am very well respected inside my community. My",
        "published": false,
        "content": "#### Reputation\n\n\nToday I am very proud of the reputation that I have buit.  I am very well respected inside my community.  My opinions are valued.  I am known to be very reliable.  I will deliver what I have promised on time, or give plenty heads up that it's not going to happen.  I work in an organization that is very closed doors.  Folks keep their knowledge to themselves, and are generally not willing to help others accross the organization without a kick back.  I give out all of my best knowledge for free, and will at lease give anyone a few mintutes of time to point them in the right direction. I am really proud of where this has lead me, and the reputation I have gained.",
        "long_description": "Reputation Today I am very proud of the reputation that I have buit. I am very well respected inside my community. My opinions are valued. I am known to be very reliable. I will deliver what I have promised on time, or give plenty heads up that i..."
    },
    {
        "cover": "/static/gratitude_085-xmas2020.png",
        "title": "Gratitude 085",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_085.md",
        "canonical_url": "https://waylonwalker.com/gratitude_085",
        "cover_image": "https:waylonwalker.com/gratitude_085.png",
        "date": "2019-02-14 00:00:00+00:00",
        "description": "Oh the Love Today is Valentines day, and I have been getting all sorts of love from my family, and it is really amazing.",
        "published": false,
        "content": "#### Oh the Love\n\n\nToday is Valentines day, and I have been getting all sorts of love from my family, and it is really amazing.  Rhiannon helped the kids create this massive heart out of post it notes that include all the ways that the kids love me.  The things they said were so sweet, and really made me feel good.  It really reminded me of the difference I make in their lives every day.  Rhiannon remade a sign that we used to have haning in our house.  It has a saying that we always used to say _\" Forever and Ever\"_.  She made it really modern and it looks amazing.  I also felt really good helping the kids give mommy a present, and giving the kids their presents from me.  Since Ayla was home sick, I decided to bring her a single rose home.  Seeing her face light up when she saw it was well worth it.",
        "long_description": "Oh the Love Today is Valentines day, and I have been getting all sorts of love from my family, and it is really amazing. Rhiannon helped the kids create this massive heart out of post it notes that include all the ways that the kids love me. The th..."
    },
    {
        "cover": "/static/gratitude_086-xmas2020.png",
        "title": "Gratitude 086",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_086.md",
        "canonical_url": "https://waylonwalker.com/gratitude_086",
        "cover_image": "https:waylonwalker.com/gratitude_086.png",
        "date": "2019-02-15 00:00:00+00:00",
        "description": "Getting out of the house The morning is early as I open the door and am greated with the fresh skif of snow. The perfec",
        "published": false,
        "content": "#### Getting out of the house\n\nThe morning is early as I open the door and am greated with the fresh skif of snow.  The perfect amount to go frolicing in.  Not too much to make it difficult to walk, but enough to cover everything in sight.  In the Afternoon Wyatt and I mustered up the courage to brave our way through some nearby trails.  The adventure was exciting as we have not yet ventured these trails much since our move here.  The trail we chose approached a nearby stream.  We watched as the glassy smooth stream cut through the shear white snow, ran through the fluffy off white catails, and into the frozen lake.  We continued to walk onto a park, where we had a long snowball fight in which I stood back and through snowballs at wyatt as he ran through the park.  Wyatt won of course as it was nearly impossible to hit him as he dodged in and out of the equipment, and I would lose one point for each and every miss.  Soon thereafter the sun was quickly setting and it was time to hit the trail home.",
        "long_description": "Getting out of the house The morning is early as I open the door and am greated with the fresh skif of snow. The perfect amount to go frolicing in. Not too much to make it difficult to walk, but enough to cover everything in sight. In the Afternoo..."
    },
    {
        "cover": "/static/gratitude_087-xmas2020.png",
        "title": "Gratitude 087",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_087.md",
        "canonical_url": "https://waylonwalker.com/gratitude_087",
        "cover_image": "https:waylonwalker.com/gratitude_087.png",
        "date": "2019-02-16 00:00:00+00:00",
        "description": "Community Lateley I have found myself inside of a few niche communities becoming very well respected for my opinion. I",
        "published": false,
        "content": "#### Community\n\nLateley I have found myself inside of a few niche communities becoming very well respected for my opinion.  I rememver back a few years as I started getting more and more in to programming, I joined these communities within my company.  I came in knowing very little and obsorbing all that I could.  I would seek out the advice of others when my google searches left me lost.  Over the years I absorbed quite a bit of this internal knowlege base and a heap of knowlege from open sources.  As the years have gone by many of the folks I looked up to are gone or absent from the community.  I am finding others seeking my attention more and more.  It is really an amazing feeling of respect when folks not only seek out your help, but respond back hours later with a big thank you and a check out the latest version that includes your ideas.  I am also very grateful for those who have helped along the way, I cannot thank them enough, and owe my getting started on the path I am on to them.",
        "long_description": "Community Lateley I have found myself inside of a few niche communities becoming very well respected for my opinion. I rememver back a few years as I started getting more and more in to programming, I joined these communities within my company. I c..."
    },
    {
        "cover": "/static/gratitude_088-xmas2020.png",
        "title": "Gratitude 088",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_088.md",
        "canonical_url": "https://waylonwalker.com/gratitude_088",
        "cover_image": "https:waylonwalker.com/gratitude_088.png",
        "date": "2019-02-17 00:00:00+00:00",
        "description": "Helping each other It's been a bit of a rough go in our family. Above the normal advanced someone or several of us have",
        "published": false,
        "content": "#### Helping each other\n\nIt's been a bit of a rough go in our family.  Above the normal advanced someone or several of us have been sick nearly all winter.  Rhiannon has seen the worst of the struggle with a very long running congestion.  Through all of this we are here to support each other.  The mental toll of being sick and tending to others who are sick takes a lot out of each of us.  We are still able to work together, pick each other up and keep going. Some days are harder than others, some days we do not feel at our best be we still find the strength to help the others through.  Yesterday Rhiannon helped me through a very rough time.  I am so grateful for her abilitiy to dig into the menal stuff and help out.  This is something that I find very hard to do.  She is great at it.  She is rally able to help me and the kids when we are feeling overwhelmed.",
        "long_description": "Helping each other It's been a bit of a rough go in our family. Above the normal advanced someone or several of us have been sick nearly all winter. Rhiannon has seen the worst of the struggle with a very long running congestion. Through all of th..."
    },
    {
        "cover": "/static/gratitude_089-xmas2020.png",
        "title": "Gratitude 089",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_089.md",
        "canonical_url": "https://waylonwalker.com/gratitude_089",
        "cover_image": "https:waylonwalker.com/gratitude_089.png",
        "date": "2019-02-24 00:00:00+00:00",
        "description": "Keeping Busy Lately has seemed incredibly busy. I feel like I just dont quite have enough time to the things done that",
        "published": false,
        "content": "#### Keeping Busy\n\n\nLately has seemed incredibly busy.  I feel like I just dont quite have enough time to the things done that I want to get done. Key word to remember is want.  I am extremely grateful that my opinion is valued so much that it keeps me this busy.  I am gratful that the things that **need** to get done, do get done.  I am grateful that I am still able to get **some** of the things that I **want** to get done each day.  Each day is a new one, with exciting challenges along the way.  It's what keeps life exciting.",
        "long_description": "Keeping Busy Lately has seemed incredibly busy. I feel like I just dont quite have enough time to the things done that I want to get done. Key word to remember is want. I am extremely grateful that my opinion is valued so much that it keeps me this..."
    },
    {
        "cover": "/static/gratitude_090-xmas2020.png",
        "title": "Gratitude 090",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude_090.md",
        "canonical_url": "https://waylonwalker.com/gratitude_090",
        "cover_image": "https:waylonwalker.com/gratitude_090.png",
        "date": "2019-02-25 00:00:00+00:00",
        "description": "Back to School Kiddos are all back in school, and doing better. Wyatt is still running a bit slower than his normal 110",
        "published": false,
        "content": "#### Back to School\n\nKiddos are all back in school, and doing better.  Wyatt is still running a bit slower than his normal 110% energetic self, but is hanging in there.  I am grateful that we are back on track with a regular schedule and we are all able to do our own things that we need to throughout the day.  I really enjoy being able to help everyone while they are down, but it really wears on me as everyone stacks up their down days back to back.  It felt good to have some quiet time to get some work done and feel productive.",
        "long_description": "Back to School Kiddos are all back in school, and doing better. Wyatt is still running a bit slower than his normal 110% energetic self, but is hanging in there. I am grateful that we are back on track with a regular schedule and we are all able to..."
    },
    {
        "cover": "/static/forest.jpg",
        "title": "Forestry.io",
        "tags": [
            "webdev"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/forestry-io.md",
        "canonical_url": "https://waylonwalker.com/forestry-io",
        "cover_image": "https:waylonwalker.com/forest.jpg",
        "date": "2019-04-23 08:02:00+00:00",
        "description": "Creating Posts from forestry.io.",
        "published": true,
        "related_post": null,
        "content": "# Testing out forestry.io\n\n## Sorry Netlify CMS\n\n_I still \u2665\ufe0f your product dont be_\n\n_forestry is simple_\n\nI have been playing with the netlify cms for a while now, and it has been a decent experience, but I **really** struggle configuring it.   Forestry is so simple to setup.  My favorite part is that I can code up my gatsby.js site, storing all editable text in markdown, and come back later and add the CMS based on existing documents.\n\n## Configuration is Simple\n\nForestry.io has this amazing feature to create _create based on existing document_ \ud83e\udd2f.  This is great because it sets up the `.yml` config for me without error.  And If I really want to come back later to customize it more I have that option, too.\n\n![](/Screenshot_20190503-165248.jpg)\n\n> By far my favorite feature is _create based on existing document_\n\n## Multi-File Gallery\n\nI have a use case for a photography site where the owner wants to be able to show off sample photos of each type of work she does.  I got it working in the netlify cms, although it was not very user friendly.  Everything was nested in an accordian \ud83d\ude22.\n\n![](/Screenshot_20190507-144948.png)\n\n> Netlify multi image upload\n\nNext I looked into forestry.io.  I pointed forestry.io at the existing git repo, created a template based on an existing document and **BAM**\ud83d\udca5 a nice image grid appeared.\n\n![](/Screenshot_20190507-145044.png)\n\n> Forestry multi image gallery\n\n## Editor\n\nThe forestry.io editor is on point.  I can choose to edit using the WYSIWYG editor and still use markdown syntax!  I can edit in markdown.  I can add images without fat-fingering the path and screwing up the whole post.  Its amazing!\n\n![](/2019-05-09 10-40-11_forestry.io.png)\n\n## Images\n\nImage upload is on point!  Just click the add image button, it pops you into your media library, choose an image, or upload it, and you're off to the races \ud83c\udfc7.\n\n![](/forestry_image_3.gif)\n\n## Im Sold \ud83d\udcb2\n\nAt this point, I am sold. This blog is now written from Forestry, and I love it.  It's great when I am away from my editor to make some progress on the go.  If I decide I dont like it in 6 months, I can move on. All of my content is still in markdown on the git repo.\n\nForestry.io is missing the nice side-by-side preview that netlify cms has, but honestly, I have struggled to set that up, too.  If I am being honest, I just play front end developer on the side, and setting up a CMS is not something that I plan on doing every day.  I am perfectly happy having some gui tools, like forestry.io, setup all of the configuration for me with just a few clicks.\n\n## Bonus\n\nPreview is Nice \ud83d\udc4c.  Without configuring anything except a bash one-liner, I have a preview that is not quite instant, but does kick out my actual site with updated content quickly.",
        "long_description": "Testing out forestry.io Sorry Netlify CMS I still \u2665\ufe0f your product dont be forestry is simple I have been playing with the netlify cms for a while now, and it has been a decent experience, but I really struggle configuring it. Forestry is so simple..."
    },
    {
        "cover": "/static/gratitude-91-xmas2020.png",
        "title": "Gratitude 91",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude-91.md",
        "canonical_url": "https://waylonwalker.com/gratitude-91",
        "cover_image": "https:waylonwalker.com/gratitude-91.png",
        "date": "2019-05-17 00:00:00+00:00",
        "description": "Maintenance Today I am grateful for having our housing maintenance taken care of for us. Our AC went out last night. We",
        "published": false,
        "content": "#### Maintenance\n\nToday I am grateful for having our housing maintenance taken care of for us.  Our AC went out last night. We called them up this morning and they had it fixed by the afternoon.  The relief of not having something else to contend with is ver nice.  I didn't have to waste my time checking the simple things or worry that we are spending their minimum price to flip a breaker.",
        "long_description": "Maintenance Today I am grateful for having our housing maintenance taken care of for us. Our AC went out last night. We called them up this morning and they had it fixed by the afternoon. The relief of not having something else to contend with is v..."
    },
    {
        "cover": "/static/gratitude-093-1-xmas2020.png",
        "title": "Gratitude 094",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude-093-1.md",
        "canonical_url": "https://waylonwalker.com/gratitude-093-1",
        "cover_image": "https:waylonwalker.com/gratitude-093-1.png",
        "date": "2019-05-20 11:57:09+00:00",
        "description": "Let's get outside The weather outside lately has been rainy and dreary, making it difficult for us to get outside much.",
        "published": false,
        "content": "### Let's get outside\n\nThe weather outside lately has been rainy and dreary, making it difficult for us to get outside much.  Yesterday there was a break of great weather.  The kids and I took advantage of the opportunity.  We got outside to go on walks, to parks, and even was able to try to fly a little bit, though it was a bit windy for flying.",
        "long_description": "Let's get outside The weather outside lately has been rainy and dreary, making it difficult for us to get outside much. Yesterday there was a break of great weather. The kids and I took advantage of the opportunity. We got outside to go on walks,..."
    },
    {
        "cover": "/static/gratitude-095-xmas2020.png",
        "title": "Gratitude 095",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/gratitude-095.md",
        "canonical_url": "https://waylonwalker.com/gratitude-095",
        "cover_image": "https:waylonwalker.com/gratitude-095.png",
        "date": "2019-05-21 20:04:40+00:00",
        "description": "Happy Anniversary Its been 8 great years so far. We have grown together so much along the way. I don't think that we c",
        "published": false,
        "content": "#### Happy Anniversary\n\nIts been 8 great years so far.  We have grown together so much along the way.  I don't think that we could have every planned out our path to get where we are today 8 years ago.  We did know one thing, that we would be here together.  We fight whatever challenges come our way together.  We can beat anything as long as we stick together on the same page.  trouble comes as soon as we loose sight  of that and work alone.  Together we have grown so much more than either of us could have done alone. There are challenges that neither of us could have conquered alone.  I cannot imagine myself facing these challenges with anyone else.  I know that we can defeat whatever comes our way in the future, because together we are strong.  I Love you Rhiannon Walker, _Forever and Ever_.",
        "long_description": "Happy Anniversary Its been 8 great years so far. We have grown together so much along the way. I don't think that we could have every planned out our path to get where we are today 8 years ago. We did know one thing, that we would be here together..."
    },
    {
        "cover": "/static/yousef-al-nasser-261164-unsplash.jpg",
        "title": "Realistic Git Workflow",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/realistic-git-workflow.md",
        "canonical_url": "https://waylonwalker.com/realistic-git-workflow",
        "cover_image": "https:waylonwalker.com/yousef-al-nasser-261164-unsplash.jpg",
        "date": "2019-05-27 00:00:00+00:00",
        "description": "My git workflow based on real life.  Its  not always clean and simple.",
        "published": true,
        "time": "T05:00:00Z",
        "content": "# Realistic Git Workflow\n\n_sometimes things get messy_\n\n## The Clean Path\n\n![](/akira-hojo-652732-unsplash.jpg)\n\n**pull \ud83d\udc49 branch \ud83d\udc49 format \ud83d\udc49 work\ud83d\udc49 add \ud83d\udc49 commit \ud83d\udc49 pull \ud83d\udc49 rebase \ud83d\udc49 push**\n\n<iframe src='./clean' height=400 width=800 frameborder=None, >\n\n### Pull\n\nAs complicated as that seems it is pretty straight forward.  When you sit down to work the first thing you do is to **pull** down the teams latest working \"develop\" branch from git.\n\n    git checkout develop\n    git pull\n\n### Branch\n\nNext create a new branch with a name that will remind you of what you are working on.  For your own sanity choose something descriptive. It is easy to get too many similar branches going and forget which branch is which.\n\n    git checkout -b ingest_product_id_table\n\n### Format\n\nIf you know which files in existance that you will be editing before you start work it is a good idea to format them in a commit early on to keep your working commits separate from formatting.  This will make it easier for reviewers to distinguish from your changes and formatting fixes.\n\nIf your team agrees to a consistent formatting logic, sticks to it and always remembers to run the linting/fixing tools you should not have anything to  change.  But thats not what this post is about, its about the real world.  People forget to run linters, some don't care, some may not even be aware of the teams formatting guidelines.  Talk to your team about these things and get on the same page.\n\nI care about formatting, we all should.  We want to put out the best work we can in  our craft.  Realistically though I dont really care about nit picky stuff, I just want things consistant so that it makes things easier to read without me taking the time to swap  out quotes, and fix line spacing. I want a tool to do it for me, and when that tool runs I dont want it mixing in the same commit as my work.\n\n    black .\n    git add .\n    git commit -m \"FIX formatted with black\"\n\n### Work\n\nMake your changes to your code, test them, document them, clean it up, do what you do best.\n\n### add and commit\n\nNext you will need to stage files that have changed for commit, and commit them.  This can be done in stages to make it clear what the progression was to finish the task you were assigned.\n\n**add all files**\n\n        git add .\n\n**add a single file**\n\n    git add \"path/to/myfile.ext\"\n\n**one line commit message**\n\nHere make sure that you create clear messages so that others know.  There are whole posts out there showing how to better write clear commit messages and why you should, check out those posts for more information.\n\n    git commit -m \"FEAT ingested product id table on pipeline\"\n\n**multi-line commit message**\n\nIf you want some more information in your commit message run `git commit` without `-m` and it will pop you into your configured git editor, which is vim by default.\n\n### Super quick vim primer\n\nBy default when you run `git commit` you will pop into a vim editor and may want to throw your keyboard before you figure out exactly how to get out of the damn thing.  First type `i` to insert text.  Type out your commit message. Then hit `esc` followed by `:x`.  This is the most basic things you need, and will get you through a commit message.  Vim is a whole topic on its own.\n\n### Integrate your changes\n\nNow that you have made your changes and commited them its time to integrate them into the codebase so that everyone else can see them.  It is likely that time has gone by, and others have made changes to the codebase since you have, so you will want to pull those down first then switch back to your branch.\n\n    git checkout develop\n    git pull\n    git checkout ingest_product_id_table\n\nNow you have the latest code changes and your work locally.  I prefer to rebase my work with the develop branch, pretending that I started my work after all of the other changes had occurred.  You can choose to merge, but I prefer not to have the extra merge commits in my PR.\n\n    git rebase develop\n\n### push\n\nNow its time to push out to the remote repository and create your PR.\n\n    git push --set-upstream ingest_product_id_table\n\nOpen your repository in your web browser and you should see that you have just pushed to a new branch and a  button to open a Pull Request (PR).\n\n### Your Not Done yet\n\nOpening a PR is not a done deal, it starts the conversation to get your code approved to be merged into the develop or main branch.  Your approver may have an idea to clean it up to make it more readable/maintainable, or something to make it more performant.  Remember that a second set of eyes sometimes has a new set of clarity that you do not as you have seen the work from start to end.  At this point they may request changes, discussion, or choose to accept and merge it in.\n\n## Realistically\n\n_We all hit some pitfalls along the way_\n\n![](/ian-espinosa-177961-unsplash.jpg)\n\nThings get dirty, the clean path is not always the path that is taken, but with git we can clean up our mess and make it look that way.\n\n## I started working from main/develop before branching\n\n_Pitfall #1_\n\nThis is my most common pitfall.  I get really excited to start work and jump right in.  Then when I go to make some commits I see that `main` branch staring me right in the face from my bash prompt.\n\n**stash those changes away**\n\n    git stash\n    git checkout -b feature_branch\n    git stash pop\n\n**want to see what changes you have stashed away**\n\n    git stash list\n\n## I committed to the wrong branch\n\n_Pitfall #2_\n\n**Create a new branch**\n_Solution #1_\n\nIt is common that I just forget to switch from the main/develop branch into my feature branch before starting work. You will first need to look at your `git log` and determine how many commits to go back or a git hash to go back to.\n\n\n**CAUTION** `git reset --hard` will kill changes and you will never get them back if you did not first put them somewhere.  I myself have been burned by this command, there is no recovering from a **hard** reset.\n\n\n    git log\n    # note commit hash or ~n to go back to\n    git branch feature_branch\n    git reset --hard HEAD ~3\n    # or\n    git reset --hard a1b2c4d4\n\n**Move to an Existing Branch**\n\nSometimes when juggling many different features we are in the middle of several branches and forget to switch between them.  If its the case that you already have a `feature_branch` for the feature that you are working on, you can use this solution.\n\n    git status\n    # note current_branch\n    git checkout feature_branch\n    git merge current_branch\n    git reset --hard HEAD ~3\n    # or\n    git reset --hard a1b2c4d4\n\n\n## Another feature was complete before mine\n_pitfall #3_\n\nThis can be a big matter of preference of how to deal with this just google `merge` vs `rebase`.  For this particular pitfall I prefer to **`rebase`**.  When you look at the git log and commit history it will appear as if you made your changes after everyone else made theirs.  I do this to clean up the PR and make it easier for the approver to read.  There will be less merge commits, and less history to try to understand.\n\n**Before pushing to the remote repository**\n\n```bash\ngit fetch --all\n# or\ngit checkout develop\ngit pull\ngit checkout feature_branch\n# then\ngit rebase develop\n```\n\n**if its your first rodeo** or you are unsure how the rebase will go you can create a safty branch.\n\n```bash\ngit branch saftey_feature_branch\ngit fetch --all\ngit rebase develop\ngit branch -D safety_feature_branch # deletes safety_feature_branch\n```",
        "long_description": "Realistic Git Workflow sometimes things get messy The Clean Path pull \ud83d\udc49 branch \ud83d\udc49 format \ud83d\udc49 work\ud83d\udc49 add \ud83d\udc49 commit \ud83d\udc49 pull \ud83d\udc49 rebase \ud83d\udc49 push ### Pull As complicated as that seems it is pretty straight forward. When you sit down to work the first thing yo..."
    },
    {
        "cover": "/static/alt b-xmas2020.png",
        "title": "Keyboard Driven VSCode",
        "tags": [
            "vscode"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/keyboard-driven-vscode.md",
        "canonical_url": "https://waylonwalker.com/keyboard-driven-vscode",
        "cover_image": "https:waylonwalker.com/alt b.png",
        "date": "2019-07-07 05:00:00+00:00",
        "description": "Reimagining my tmux configuration inside of vscode.",
        "published": true,
        "related_post": null,
        "related_post_label": "",
        "content": "> Throw that mouse Away its time to setup some keyboard shortcuts.\n\nThese sortcuts were the baseline for switching from tmux/vim to vscode.  Most folks posts I was able to find gave great tips on replacing vim, but very few have focused on the hackability of tmux.  tmux allows me to rapidly fire up a workspace, create new windows and splits.  Then When I switch tasks I can leave that workspace open and and jump right back in later exactly where I left off.  There is nothing quite like it.  The shortcuts listed here make the transition a bit better. The worst thing I found when using vscode at first was no way to switch between the terminal and editor without the mouse.  This first set of keybindings solve that issue.\n\n> The worst thing I found when using vscode at first was no way to switch between the terminal and editor without the mouse.\n\n## Alt+\\[hjkl\\]\n\n_navigation_\n\n\u2b05 jump to **left** split **alt+h**\n\n\u2b07 jump to **terminal** from editor **alt+j**\n\n\u2b06 jump to **editor** from terminal **alt+k**\n\n\u27a1 jump to **right** split **alt+l**\n\nThis is by var the most useful set of keybindings that I use in vscode and is directly replicated from my tmux configuration.  It allows me to quickly jump up, down, left, right.  Do note that if you use vertical splits it does not work as well as tmux \ud83d\ude22.\n\n![navigating vscode with keyboard shortcuts](/alt \\[hjkl\\].gif \"Alt+[hjkl]\")\n\n``` json\n[\n        {\n            \"key\": \"alt+j\",\n            \"command\": \"workbench.action.terminal.focus\",\n            \"when\": \"editorFocus\"\n        },\n\n        {\n            \"key\": \"alt+k\",\n            \"command\": \"workbench.action.focusFirstEditorGroup\",\n            \"when\": \"terminalFocus\"\n        },\n        {\n            \"key\": \"alt+k\",\n            \"command\": \"workbench.action.focusAboveGroup\",\n            \"when\": \"editorFocus\"\n        },\n        {\n            \"key\": \"alt+l\",\n            \"command\": \"-toggleFindInSelection\",\n            \"when\": \"editorFocus\"\n        },\n        {\n            \"key\": \"alt+l\",\n            \"command\": \"workbench.action.focusNextGroup\",\n            \"when\": \"editorFocus\"\n        },\n        {\n            \"key\": \"alt+h\",\n            \"command\": \"workbench.action.focusPreviousGroup\",\n            \"when\": \"editorFocus\"\n        },\n\n        {\n            \"key\": \"alt+l\",\n            \"command\": \"workbench.action.terminal.focusNextPane\",\n            \"when\": \"terminalFocus\"\n        },\n        {\n            \"key\": \"alt+h\",\n            \"command\": \"workbench.action.terminal.focusPreviousPane\",\n            \"when\": \"terminalFocus\"\n        },\n]\n```\n\n## Alt+b\n\n_toggle bloat_\n\nSince closing the sidebar is assigned to `ctrl+b` I thought that it made most sense to simulate the activity bar with `alt+b`.  There are many times when I just want to get as much out of the way as possible and this little bit does help.\n\n![hiding the activity bar ](/alt b.gif \"Alt+b\")\n\n``` json\n[\n    {\n        \"key\": \"alt+b\",\n        \"command\": \"workbench.action.toggleActivityBarVisibility\",\n        \"when\": \"editorFocus\"\n    },\n]\n```\n\n## Alt+\\[svx\\]\n\n_Split it up_\n\n\ud83d\ude4c Split hoizontally **alt+s**\n\n\ud83c\udf4c Vertically **alt+v**\n\n\ud83d\udca5 Close **alt+x**\n\nThis is another one replicated from tmux for quickly creatiting horizontal (s) and vertical (v) splits.  Once I am done with them I can close them with alt+x.\n\n![Make and destroy splits with ease in vscode.](/alt \\[svx\\].gif \"spliting the editor\")\n\n``` json\n[\n    {\n        \"key\": \"alt+s\",\n        \"command\": \"workbench.action.terminal.split\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"alt+s\",\n        \"command\": \"workbench.action.splitEditor\",\n        \"when\": \"editorFocus\"\n    },\n    {\n        \"key\": \"alt+v\",\n        \"command\": \"workbench.action.splitEditorOrthogonal\",\n        \"when\": \"editorFocus\"\n    },\n    {\n        \"key\": \"alt+x\",\n        \"command\": \"workbench.action.terminal.kill\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"alt+x\",\n        \"command\": \"workbench.action.closeActiveEditor\",\n        \"when\": \"editorFocus\"\n    }\n]\n```\n## Alt+\\[cnp\\]\n\n\ud83e\udd32 **Create** new workspace **alt+c**\n\n\u23ed jump to **next** workspace **alt+n**\n\n\u23ee jump to **previous** workspace **alt+p**\n\nSometimes the terminal window gets a bit cramped inside of splits and you need to use different panes.  I replicated the cnp pattern from tmux here as well.  I can create (c) new panes, then go to the next (n), or previous (p) without leaving the comfort of my keyboard.\n\nI am often using this one when I have a process running that I watch like gatsby, and I need to quickly pop into a new pane to run a git command and back in to gatsby before jumping up to my editor.\n\n![](/alt \\[cnp\\].gif)\n\n``` json\n[\n    {\n        \"key\": \"alt+c\",\n        \"command\": \"workbench.action.terminal.new\",\n        \"when\": \"terminalFocus\"\n    },\n    {\n        \"key\": \"alt+n\",\n        \"command\": \"workbench.action.terminal.focusNext\",\n        \"when\": \"terminalFocus\"\n    },\n\n    {\n        \"key\": \"alt+p\",\n        \"command\": \"workbench.action.terminal.focusPrevious\",\n        \"when\": \"terminalFocus\"\n    },\n]\n```\n\n## Alt+z\n\n\ud83d\uddfb Zoom into terminal **alt+z**\n\nThis last one doesnt work as well as I would like but it sure does get the job done.  It Zooms (z) into the terminal from anywhere in vscode.  I can be in my editor and zoom out of the terminal to make more room, or zoom in to see what happened from my last edit.\n\n![](/alt z.gif)\n\n``` json\n[\n    {\n        \"key\": \"alt+z\",\n        \"command\": \"workbench.action.toggleMaximizedPanel\",\n    },\n]\n```\n\n# Bonus\n\n## Alt+r\n\n\ud83d\uddb1 right click in place\n\nI recently found this one, and find it quite useful to quickly do things like revert selected range, or extract variable without leaving the keyboard.\n\n``` json\n[\n  {\n    \"key\": \"alt+r\",\n    \"command\": \"editor.action.showContextMenu\",\n  },\n]\n```\n![](/static/EIIMiJHWwAAqihV.png)",
        "long_description": "Throw that mouse Away its time to setup some keyboard shortcuts. These sortcuts were the baseline for switching from tmux/vim to vscode. Most folks posts I was able to find gave great tips on replacing vim, but very few have focused on the hackabi..."
    },
    {
        "cover": "/static/hannah-gibbs-BINLgyrG_fI-unsplash.jpg",
        "title": "Bash",
        "tags": [
            "python",
            "cli"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/bash.md",
        "canonical_url": "https://waylonwalker.com/bash",
        "cover_image": "https:waylonwalker.com/hannah-gibbs-BINLgyrG_fI-unsplash.jpg",
        "date": "2019-09-08 05:00:00+00:00",
        "description": "Waylon Walker's Bash Notes",
        "published": true,
        "content": "# Bash Notes\n\nBash is super powerful.\n\n## File System Full\n\n**Show Remaining Space on Drives**\n\n```bash\ndf -h\n```\n\n**show largest files in current directory**\n\n```bash\ndu . -h --max-depth=1\n```\n\n**Move files then symlink them**\n\n``` bash\nmkdir /mnt/mounted_drive\nmv ~/bigdir /mnt/mounted_drive\nln -s /mnt/mounted_drive/bigdir ~/bigdir\n```\n\n## Fuzzy One Liners\n\n```bash\na() {source activate \"$(conda info --envs | fzf | awk '{print $\n```\n\n**edit in vim**\n\n```bash\nvf() { fzf | xargs -r -I % $EDITOR % ;}\n```\n\n**cat a file**\n\n```bash\nvf() { fzf | xargs -r -I % $EDITOR % ;}\n```\n\n**bash execute**\n\n```bash\nbf() { bash \"$(fzf)\" }\n```\n\n**git add**\n\n```bash\ngadd() { git status -s | fzf -m | awk '{print $2}' | xargs git add && git status -s}\n```\n\n**git reset**\n\n```bash\ngreset() { git status -s |  fzf -m | awk '{print $2}' |xargs git reset && git status -s}\n```\n\n**Kill a process**\n\n```bash\nfkill() {kill $(ps aux | fzf | awk '{print($2)}')}\n```\n\n## Finding things\n\n### Files\n\n[fd-find](https://github.com/sharkdp/fd) is amazing for finding files, it even respects your `.gitignore` file \ud83d\ude32.  Install with `apt install fd-find`.\n\n```bash\nfd md\n```\n\n```bash\nag -g python\n```\n\n```bash\nfind . -n \"*.md\"\n```\n\n_++Vanilla Bonus_\n\n### Content\n\n\\** show matching text **\n\n```bash\nag python\n```\n\n```bash\ngrep -iR Python\n```\n\n_++Vanilla Bonus_\n\n\\** show file names only **\n\n```bash\nag -l python\n```\n\n```bash\ngrep -iRl python\n```\n\n_++Vanilla Bonus_\n\n### Recursively Replace text\n\n```bash\nagr() {ag -l \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n```\n\n_++Vanilla Bonus_\n\n```bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n```\n\n**Extending** `**agr**` **or** `**grepr**`\n\nThere are so many options inside of `grep`, `ag`, and `sed` that you could many an enormous amount of these if you really wanted to, but I like to keep it simple.  These cover 90% of my usage.  If I wanted to change something in the second half I would just paste in this command and edit it. More often though I want to limit the input, say only replace word1 to word2 inside of markdown files.\n\n**Limited Scope**\n\n```bash\nfd md | xargs argr python python3\n```\n\n```bash\nfind . -n \"*.md\" | xargs grepr python python3\n```\n\n_++Vanilla Bonus_\n\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/refactor-in-cli/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/caee54c45632d974fe802bdbb34f8b54/630fb/refactor-in-cli-xmas2020.png\" alt=\"article cover for Large Refactor At The Command Line\">\n<div class=\"right\">\n    <h2>Large Refactor At The Command Line</h2>\n    <p class=\"description\">\n    As projects grow patterns that worked early on break and we need to change things to make the project easier to work wit\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n\n> I use these replace commands heavily when doing large refactorings.\n\n### conditionally configure\n\nI like this one when there is not a good cli into config files and I need to replace something like a true to false if the value is in the config and append to the config if its not.\n\n``` bash\ngrepr() {\n    # replaces first string with second string inside file from third argument\n    # example:\n    #   grepr \"allow_conda_downgrades:.*\" \"allow_conda_downgrades: true\" ~/.condarc\n    if grep -xq $1 $3\n    then\n        sed -i \"s|$1|$2|g\" $3\n    else\n        echo \"$2\" >> $3\n    fi\n}\n```\n\n### Watch the time\n\n``` bash\nwatch -n 1 date\n```\n\n_++Vanilla Bonus_\n\n**with figlet**\n\n``` bash\nwatch -n 1 bash -c \"date | figlet\"\n```\n\n### watch a function\n\n``` bash\nrun () {\ndate\naws s3 sync $BUCKET .\n}\nexport -f run\nwatch -n 10 run\n```\n\n### if conda environment does not exist create it\n\n``` bash\nconda info --envs | grep my_env && echo \"my_env environment is installed\" || conda create -n my_env python=3.8 -y\nsource activate my_env\n```\n\n# Rename multiple files\n\nmore info from [linuxize](https://linuxize.com/post/how-to-rename-files-in-linux/)\n\n``` bash\nfor f in *.png; do\n   mv ${f} prefix-${f}\ndone\n```\n\n## convert all files in a directory to unix\n\n``` bash\ndos2unix **/*\n```\n\n## recursively remove all whitespace from .py files\n\n``` bash\nfind **/*.py -type f -exec sed -i 's/ *$//' '{}' ';'\n```\n\n## recursively autopep8\n\n``` python\nfind . -name '*.py' -exec autopep8 --in-place '{}' \\;\n```\n\n## make bash script a runnable command\n\ninclude a shebang\n\n``` bash\n#! /bin/bash\n```\n\nchmod\n\n``` bash\nchmod +x /usr/local/bin/my_script\n```\n\naccept positional input\n\n``` bash\n#! /bin/bash\ninput=$1\necho input\n```\n\n# Using pyp\n\n``` bash\npipx install pyp\n```\n\n## replacement for cut\n\n``` bash\n\u276f python -m http.server 5000 &\n[1] 8574\n\n\u2726 \u276f Serving HTTP on 0.0.0.0 port 5000 (http://0.0.0.0:5000/) ...\n\n\u2726 \u276f ps aux | grep \"python -m http.server\" | grep -v grep | pyp 'line.split()[1]' | xargs kill\n[1]  + terminated  python -m http.server 5000\n```\n\n## replacement for wc\n\n``` bash\nconda info --envs | pyp 'len(lines) - 3 # account for header and base'\n```\n\n## print contents of shell function\n\n``` bash\ndeclare -f <function-name>\n```\n\n## batch rename files\n\n``` bash\nfor f in *.jpeg; do\n    mv -- \"$f\" \"${f%.jpeg}.jpg\"\ndone\n```\n\n## convert markdown files to reveal.js\n\nhttps://github.com/jgm/pandoc/wiki/Using-pandoc-to-produce-reveal.js-slides\ninstall pandoc\n\n``` bash\napt install pandoc\n```\n\nsetup\n\n``` bash\nwget https://github.com/hakimel/reveal.js/archive/master.tar.gz\ntar -xzvf master.tar.gz\nmv reveal.js-master reveal.js\n```\n\nconvert\n\n``` bash\npandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/\n```\n\n## Render Markdown at the command line\n\n[Glow](https://github.com/charmbracelet/glow) is a terminal markdown renderer written in go.  There iis a prebuilt binary that can simply be unzipped and executed to render markdow.\n\n``` bash\nwget https://github.com/charmbracelet/glow/releases/download/v0.2.0/glow_0.2.0_linux_x86_64.tar.gz\ntar -xzf glow_0.2.0_linux_x86_64.tar.gz\nchmod +x glow\nsudo mv glow /usr/bin\n\nglow <filename>\n```\n\n## Autocomplete for click applications\n\nsee the [docs](https://click.palletsprojects.com/en/7.x/bashcomplete/) for more details\n\n## Autocomplete for non click python cli's\n\nshtab [https://github.com/iterative/shtab](https://github.com/iterative/shtab \"https://github.com/iterative/shtab\")\n\n## Ensure functions reset context\n\n\n``` bash\nproject_log() {\n   _dir=$(pwd)\n   _project_log() {\n      cd ~/projects/project\n      git log\n   }\n   _project_log $@ && cd $_dir || cd $_dir\n}\n```",
        "long_description": "Bash Notes Bash is super powerful. File System Full Show Remaining Space on Drives bash df -h show largest files in current directory bash du . -h --max-depth=1 Move files then symlink them bash mkdir /mnt/mounted_drive mv ~/bigdir /mnt/mounted_drive..."
    },
    {
        "cover": "/static/autoreload-ipython-xmas2020.png",
        "title": "Autoreload in Ipython",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/autoreload-ipython.md",
        "canonical_url": "https://waylonwalker.com/autoreload-ipython",
        "cover_image": "https:waylonwalker.com/autoreload-ipython.png",
        "date": "2019-09-08 05:00:00+00:00",
        "description": "Autoreload in python",
        "published": true,
        "related_post": null,
        "content": "# Autoreload in Ipython\n\nI have used `%autoreload` for several years now with great success and \ud83d\udd25 rapid reloads.  It allows me to move super fast when developing libraries and modules.  They have made some great updates this year that allows class modules to be automatically be updated.\n\n## What I like about autoreload\n\n\ud83d\udd25 Blazing Fast\n\n\ud83d\udca5 Keeps me in the comfort of my text editor\n\n\ud83d\udc4f Allows me to use Jupyter when I need\n\n\ud83d\udc5f Extremely Reliable\n\nOne of the biggest benefits that I find is that it shortens the distance between my module/library code and test code inside of a terminal/notebook.  Now I primarily use jupyter notebooks for the presentation aspect.  I develop code from the comfort of my editor with all of the tools I have setup, and run the functions in a notebook to get the output.  From there I might do some aggregations or plots, but the \ud83e\udd69 meat of development is done outside of jupyter.\n\n> Now I primarily use jupyter notebooks for the presentation aspect.\n\n## Enabling Autoreload\n\n\ud83d\udcd0 _config_\n\nThis is a short script that I use to setup ipython so that it automatically reloads modules.  This allows me to use a separate terminal and editor, and keep data in memory while developing functions.\n\n```bash\nipython profile create\n```\n\nThen edit the created file `~/.ipython/profile_default/ipython_config.py`.\n\n```python\nc.InteractiveShellApp.extensions = ['autoreload']\nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")')\n```\n\n## According to the docs\n\n[autoreload caveates](https://ipython.org/ipython-doc/3/config/extensions/autoreload.html#caveats \"IPython caveats\")\n\n> Some of the known remaining caveats are:\n>\n> Replacing code objects does not always succeed: changing a @property in a class to an ordinary method or a method to a member variable can cause problems (but in old objects only).\n> Functions that are removed (eg. via monkey-patching) from a module before it is reloaded are not upgraded.\n> C extension modules cannot be reloaded, and so cannot be autoreloaded.\n\n## So what can gets updated??\n\n\ud83e\udd32 _Nearly everything..._\n\n* new/updated functions\n* new/updated functions\n* new/updated class methods\n* new/updated class attributes\n\n## What does not get updated\n\n\ud83d\udd04 _needs restart_\n\n**config** files that are side loaded with modules typically do not get updated in my experience, and I tend to restart the session.\n\n**init** class methods do not get reran, but the session does not need to be reloaded.  The class instance will just need to be re-instanciated.\n\n## Testing out the capabilities\n\n\ud83d\udca8 _Watch_ it go\n\nHere is a gif of me taking autoreload out for a test drive.  When creating the session test_autoreload.py does not even exist. From there new functions, classes, attributes, and methods are added in the file and all live reload into ipython.\n\n![](/test_autoreload4.gif)\n_for more gifs like these follow me on twitter_ [_@waylonwalker_](https://twitter.com/_WaylonWalker)\n\n## What About Jupyter Notebooks????\n\n\ud83d\udca5 _Exactly the Same_\n\nSince jupyter uses ipython in be background Jupyter will use the same `ipython_config.py` file to have autoreload enabled by default.\n\n![](/test_autoreload_jupyter.gif)\n_for more gifs like these follow me on twitter_ [_@waylonwalker_](https://twitter.com/_WaylonWalker)\n\n## Go use it now\n\nTake the splash into rapid development of python functions with minimal distance between your modules/library and your ipython/jupyter session.",
        "long_description": "Autoreload in Ipython I have used %autoreload for several years now with great success and \ud83d\udd25 rapid reloads. It allows me to move super fast when developing libraries and modules. They have made some great updates this year that allows class modules..."
    },
    {
        "cover": "/static/erwan-hesry-elayN_YscVg-unsplash.jpg",
        "title": "Background Tasks in Python for Data Science",
        "tags": [
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/python-data-science-background.md",
        "canonical_url": "https://waylonwalker.com/python-data-science-background",
        "cover_image": "https:waylonwalker.com/erwan-hesry-elayN_YscVg-unsplash.jpg",
        "date": "2019-09-10 05:00:00+00:00",
        "description": "This post is intended as an extension/update from [background tasks in python](https://waylonwalker.com/background-1/). I started using `background` the week that Kenneth Reitz released it.  It takes away so much boilerplate from running background tasks that I use it in more places than I probably should. After taking a look at that post today, I wanted to put a better data science example in here to help folks get started.",
        "published": true,
        "related_post": null,
        "related_post_label": "",
        "content": "This post is intended as an extension/update from [background tasks in python](https://waylonwalker.com/background-1/).  I started using `background` the week that Kenneth Reitz released it.  It takes away so much boilerplate from running background tasks that I use it in more places than I probably should. After taking a look at that post today, I wanted to put a better data science example in here to help folks get started.\n\n> I use it in more places than I probably should\n\nBefore we get into it, I want to make a shout out to Kenneth Reitz for making this so easy.  Kenneth is a python God for all that he has given to the community in so many ways, especially with his ideas in building stupid simple api's for very complicated things.\n\n## Installation\n\n### install via pip\n\n    pip install background\n\n### install via github\n\nI believe one of the later pr's to the project fixes the way arguments are passed in.  I generally clone the repo or copy the module directly into my project.\n\n**clone it**\n\n    git clone https://github.com/ParthS007/background.git\n    cd background\n    python setup.py install\n\n**copy the module**\n\n    curl https://raw.githubusercontent.com/ParthS007/background/master/background.py > background.py\n\n## \ud83d\udc0c The Slow Function\n\nImagine that this function is a big one!  This function is fairly realistic as it takes in some input and returns a DataFrame.  This is what a good half of my fuctions do in data science.  The internals of this function generally will include a sql query, load from s3 or a data catalog, an aggregation from another DataFrame.  In general it should do one simple thing.\n\n**Feel Free to copy this \"boilerplate\"**\n\n``` python\nimport background\nfrom time import sleep\nimport pandas as pd\n\n@background.task\ndef long_func(i):\n    \"\"\"\n    Simulates fetching data from a service\n    and returning a pandas DataFrame.\n\n    \"\"\"\n    sleep(10)\n    return pd.DataFrame({'number_squared': [i**2]})\n```\n\n## Calling the Slow Function\n\n_it's the future calling \ud83e\udd19_\n\nIf we were to call this function 10 times it would take 100s.  Not bad for a dumb example, but detrimental when this gets scaled up\ud83d\udca5.  We want to utilize all of our available resources to reduce our development time and get moving on our project.\n\nCalling `long_func` will return a future object.  This object has a number of methods that you can read about in the [cpython docs](https://docs.python.org/3/library/concurrent.futures.html#future-objects).  The main one we are interested in is `result`.  I typically call these functions many times and put them into a list object so that I can track their progress and get their results.  If you needed to map inputs back to the result use a dictionary.\n\n``` python\n%time futures = [long_func(i) for i in range(10)]\n\nCPU times: user 319 \u00b5s, sys: 197 \u00b5s, total: 516 \u00b5s\nWall time: 212 \u00b5s\n```\n\n## Do something with those `results()`\n\nSimply running the function completes in no time! This is because the future objects that are returned are non blocking and will run in a background task using the `ProcessPoolExecutor`.  To get the result back out we need to call the `result` method on the future object.`result` is a blocking function that will not realease until the function has completed.\n\n``` python\n%%time\nfutures = [long_func(i) for i in range(10)]\npd.concat([future.result() for future in futures])\n\nCPU times: user 5.38 ms, sys: 3.53 ms, total: 8.9 ms\nWall time: 10 s\n```\n\nNote that this example completed in `10s`, the time it took for only one run, not all 10! \ud83d\ude0e\n\n## n\n\n\ud83d\ude2b _crank it up_\n\nBy default the number of parallel processes wil be equal to the number of cpu threads on your machine. To increase the number of parallel processes (`max_workers`) set increase `background.n`.\n\n``` python\nbackground.n = 100\n```\n\n# Is it possible to overruse @background.task?\n\nI use this essentially anywhere that I cannot vectorize a python operation and push the compute down into those fast \ud83d\udca8 c extended libraries like numpy, and the operation takes more than a few minutes.  Nearly every big network request I make gets broken down into chunks and multithreaded.  Let me know... is is possible to overruse `@background.task`? Let me know your thoughts [@_WaylonWalker](https://twitter.com/_WaylonWalker).\n\n# Repl.It\n\nPlay with the code here!  Try different values of background.n and n_runs.\n\n<iframe height=\"800px\" width=\"100%\" src=\"https://repl.it/@WaylonWalker/TestRepl?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>",
        "long_description": "This post is intended as an extension/update from background tasks in python. I started using background the week that Kenneth Reitz released it. It takes away so much boilerplate from running background tasks that I use it in more places than I pr..."
    },
    {
        "cover": "/static/andrew-spencer-Ricopz7JkbE-unsplash.jpg",
        "title": "Clean up Your Data Science with Named Tuples",
        "tags": [
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/named-tuples-data-science.md",
        "canonical_url": "https://waylonwalker.com/named-tuples-data-science",
        "cover_image": "https:waylonwalker.com/andrew-spencer-Ricopz7JkbE-unsplash.jpg",
        "date": "2019-09-11 00:00:00+00:00",
        "description": null,
        "published": true,
        "related_post": null,
        "time": "T05:00:00Z",
        "content": "If you are a regular listener of [TalkPython](https://talkpython.fm) or PythonBytes you have hear Michael Kennedy talk about Named Tuples many times, but what are they and how do they fit into my data science workflow.\n\n## Example\n\nAs you graduate your scripts into modules and libraries you might start to notice that you need to pass a lot of data around to all of the functions that you have created. For example if you are running some analysis utilizing `sales`, `inventory`, and `pricing` data.  You may need to calculate total revenue, inventory on hand.  You may need to pass these data sets into various models to drive production or pricing based on predicted volumes.\n\n## Load data\n\nHere we setup functions that can load data from the sales database.  Assume that we also have similar functions to `get_inventory` and `get_pricing`.\n\n``` python\ndef get_engine():\n    engine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')\n\ndef get_sales():\n    '''\n    gets sales history from the sales database\n    '''\n    engine = get_engine()\n    with engine.connect() as con:\n        sql = '''select * from sales.history'''\n        df = pd.read_sql(sql, con)\n    engine.dispose()\n    return df\n\ndef get_inventory():\n    ...\n\ndef get_pricing():\n    ...\n```\n\n### Create Metrics\n\nHere we create our first function to calculate some metrics.  There are likely many of these functions that repeat a similar pattern.  They use similar data and have their own custom logic for calculations and joins.\n\n``` python\ndef calculate_total_revenue(sales, pricing):\n    \"\"\"calculates the total sales revenue for all of company XYZ\"\"\"\n    sales = sales.join(pricing.set_index('sku'), on='sku')\n    sales['revenue'] = sales['qty'] * sales['price']\n    return sales['revenue'].sum()\n\ndef calculate_inventory_sale_ratio(sales, inventory, pricing):\n    ...\n\ndef calculate_inventory_sale_ratio(inventory, sales):\n    ...\n```\n\nFurthermore these functions will need to be called somewhere, this might be in a `make_report()` function that puts this data into an html template to be sent out to stakeholders, or to be served on a website. Notice how we have the same data showing up time and time again.  And sometimes we even ask for it in a different order \ud83d\ude32.It is important to recognize this early in the project before this gets our of hand.\n\n```python\ndef make_report():\n    \"\"\"Makes stakeholder report for company XYZ\"\"\"\n    sales = get_sales()\n    inventory = get_inventory()\n    pricing = get_pricing()\n\n    revenue = calculate_total_revenue(sales, pricing)\n    sales_ratio = inventory_sale_ratio(sales, inventory, pricing)\n    inventory_sale_ratio(inventory, sales)\n```\n\n### getting out of hand\n\nAlong the way our features, models, and out supervisors have all had their own needs and we have added new datasets, and several flags. This is the point at which anxiety starts creeping in.  We start spending a lot of time double checking the order of each call to make sure that we dont make a mistake.  And when someone else touches this model, we know what it looks like and cant help but think, \"Oh God I hope they didn't screw up that horrid module!\"\n\n``` python\ndef calculate_total_revenue(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    sales = (sales\n                .join(pricing.set_index('sku'), on='sku')\n                .join(inventory.set_index('sku'), on='sku')\n            )\n    sales['revenue'] = sales['qty'] * sales['price']\n    sales  = sales.query(f'price > {min_price}')\n    sales  = sales.query(f'sale_date > {min_date}')\n    sales  = sales.query(f'sale_date < {end_date}')\n    return sales['revenue'].sum()\n\ndef calculate_inventory_sale_ratio(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef calculate_inventory_sale_ratio(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef model_new_prices(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef model_production(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    ...\n\ndef completely_custom_metric_for_steve(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):\n    \"\"\"Steve has been here 30 years and doesnt trust our metrics unless he can validate against the old metrics\"\"\"\n    ...\n```\n\nIt gets even crazier when you start calling all of these functions! Note that we have a common theme of the same data getting passed into\n\n``` python\ndef make_report(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000', is_for_steve=False):\n    \"\"\"Makes stakeholder report for company XYZ\"\"\"\n    sales = get_sales()\n    inventory = get_inventory()\n    pricing = get_pricing()\n\n    revenue = calculate_total_revenue(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    sales_ratio = sales_ratio = inventory_sale_ratio(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    inventory_sale_ratio = inventory_sale_ratio(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    predicted_prices = model_new_prices(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    predicted_production_rates = model_production_rate(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n    completely_custom_metric_for_steve(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')\n\n    # render report\n    ...\n```\n\n### This code Stinks\n\n\u231a _Time for refactoring_\n\nWhile our code started out good it has grown stinky over time.  It will works fine, but it could be better and more enjoyable to work with.  What we have here is a code smell called `data clump`.  This is a group of data that always appears together.  It would be appropriate to formally group this data together.  One way to do this in python is to use nametuples.  It is a very simple technique that allows us to define a data structure that contains a specific set of attributes that we can access using `.attribute_name`.  Replacing this `data clump` with a formal group of data will allow us to reduce the number of arguments in all of our functions. Add new attributes easily. And not rely on positional arguments.  This code will be easier to maintain, read, and write.\n\n> What we have here is a code smell called `data clump`\n\n**create a namedtuple**\n\n```python\nfrom collections import namedtuple\n\nModelData = namedtuple('modin_data', 'sales pricing inventory stored_at min_price start_date end_date')\n```\n\n**use the namedtuple**\n\n```python\ndata = ModelData(\n    sales=get_sales(),\n    pricing=get_pricing(),\n    inventory=get_inventory(),\n    stored_at='LAX'\n    min_price=100\n    start_date = datetime.today() - datetime.timedelta(days=30)\n    end_date = datetime.today()\n    )\n```\n\n**refactor functions**\nNow that we have a clean data object how do we use it.  Simple, we pass in one data object, then access each attribute with the dot operator. These functions are now much cleaner to call and read.  Here I have chosen a poor name for our `data`, but in a real scenario you may have multple `namedtuples`.\n\n``` python\ndef calculate_total_revenue(data):\n    sales = (data.sales\n                .join(data.pricing.set_index('sku'), on='sku')\n                .join(data.inventory.set_index('sku'), on='sku')\n            )\n    sales['revenue'] = sales['qty'] * sales['price']\n    sales  = sales.query(f'price > {data.min_price}')\n    sales  = sales.query(f'sale_date > {data.min_date}')\n    sales  = sales.query(f'sale_date < {data.end_date}')\n    return sales['revenue'].sum()\n\n...\n```\n\n**call the function**\n\nNow that all of the data is store in a single object it is really easy to call each of our functions using one data instance.\n\n``` python\ndef make_report(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000', is_for_steve=False):\n    \"\"\"Makes stakeholder report for company XYZ\"\"\"\n    data = ModelData(stored_at=stored_at, min_price=min_price, start_date=start_date, end_date=end_date)\n\n    revenue = calculate_total_revenue(data)\n    sales_ratio = sales_ratio = inventory_sale_ratio(data)\n    inventory_sale_ratio = inventory_sale_ratio(data)\n    predicted_prices = model_new_prices(data)\n    predicted_production_rates = model_production_rate(data)\n    completely_custom_metric_for_steve(data)\n\n    # render report\n    ...\n```\n\n### \ud83e\uddf9 Clean up your data science\n\nNamed Tuples are a great way to clean up your data science code and reduce `Data Clumps`.  Anytime you have multiple data sets that almost always get used together `namedtuple`s are a great way to clean up your code, make it more readable and more maintainable.  If you find that you also have functions that are tightly coupled to this data you might want to consider using a `class` instead of a `namedtuple`, but that is for another article.",
        "long_description": "If you are a regular listener of TalkPython or PythonBytes you have hear Michael Kennedy talk about Named Tuples many times, but what are they and how do they fit into my data science workflow. Example As you graduate your scripts into modules and li..."
    },
    {
        "cover": "/static/photo-1448387473223-5c37445527e7.jpg",
        "title": "Quick Progress Bars in python using TQDM",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/quick-progress-bars-in-python-using-tqdm.md",
        "canonical_url": "https://waylonwalker.com/quick-progress-bars-in-python-using-tqdm",
        "cover_image": "https:waylonwalker.com/photo-1448387473223-5c37445527e7.jpg",
        "date": "2019-09-18 05:00:00+00:00",
        "description": "Quick Progress Bars in python using TQDM",
        "published": true,
        "related_post": null,
        "related_post_label": "",
        "content": "tqdm is one of my favorite general purpose utility libraries in python.  It allows me to see progress of multipart processes as they happen.  I really like this for when I am developing something that takes some amount of time and I am unsure of performance.  It allows me to be patient when the process is going well and will finish in sufficient time, and allows me to \ud83d\udca5 kill it and find a way to make it perform better if it will not finish in sufficient time.\n\n![](/tqdm2.gif)\n\n> for more gifs like these follow me on twitter\n[@waylonwalker](https://twitter.com/_WaylonWalker)\n\n**Add a simple Progress bar!**\n```python\nfrom tqdm import tqdm\nfrom time import sleep\n\nfor i in tqdm(range(10)):\n\tsleep(1)\n```\n\n**convenience**\n\nTQDM also has a convenience function called trange that wraps the range function with a tqdm progress bar automatically.\n\n```python\nfrom tqdm import trange\nfrom time import sleep\n\nfor i in trange(range(10)):\n\tsleep(1)\n```\n\n\n**notebook support**\n\nThere is also notebook support.  If you are bouncing between ipython and jupyter I recomend importing from the auto module.\n\n```python\nfrom tqdm.auto import tqdm\nfrom time import sleep\n\nfor i in tqdm(range(10)):\n\tsleep(1)\n```\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/autoreload-ipython/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/de227ffcb7da2e5c1170a8434163bec9/630fb/autoreload-ipython-xmas2020.png\" alt=\"article cover for Autoreload in Ipython\">\n<div class=\"right\">\n    <h2>Autoreload in Ipython</h2>\n    <p class=\"description\">\n    Autoreload in python\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> If you are using notebooks you should enable ipython autoreload \ud83d\udc46",
        "long_description": "tqdm is one of my favorite general purpose utility libraries in python. It allows me to see progress of multipart processes as they happen. I really like this for when I am developing something that takes some amount of time and I am unsure of perf..."
    },
    {
        "cover": "/static/jonny-hayes-W1r5FAraSA0-unsplash.jpg",
        "title": "Making good documentation in python",
        "tags": [],
        "status": "",
        "templateKey": "blog-post",
        "path": "../../src/pages/making-good-documentation-in-python.md",
        "canonical_url": "https://waylonwalker.com/making-good-documentation-in-python",
        "cover_image": "https:waylonwalker.com/jonny-hayes-W1r5FAraSA0-unsplash.jpg",
        "date": "2019-09-22 05:00:00+00:00",
        "description": "Tools Sphinx Portray I just started using portray and it is amazingly simple to use! Methodology",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "# Tools\n\n## Sphinx\n\n## Portray\n\nI just started using portray and it is amazingly simple to use!\n\n# Methodology",
        "long_description": "Tools Sphinx Portray I just started using portray and it is amazingly simple to use! Methodology..."
    },
    {
        "cover": "/static/joshua-newton-RPUI6gtn49g-unsplash.jpg",
        "title": "Pyspark",
        "tags": [],
        "status": "",
        "templateKey": "blog-post",
        "path": "../../src/pages/pyspark.md",
        "canonical_url": "https://waylonwalker.com/pyspark",
        "cover_image": "https:waylonwalker.com/joshua-newton-RPUI6gtn49g-unsplash.jpg",
        "date": "2019-09-22 05:00:00+00:00",
        "description": "I have been using pyspark since March 2019, here are my thoughts.",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "I have been using pyspark since March 2019, here are my thoughts.",
        "long_description": "I have been using pyspark since March 2019, here are my thoughts...."
    },
    {
        "cover": "/static/steve-richey-enTun1g_5b4-unsplash.jpg",
        "title": "Amazon Web Services",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/amazon-web-services.md",
        "canonical_url": "https://waylonwalker.com/amazon-web-services",
        "cover_image": "https:waylonwalker.com/steve-richey-enTun1g_5b4-unsplash.jpg",
        "date": "2019-09-22 05:00:00+00:00",
        "description": "I started using aws in March 2019. Here are some of my notes. aws-cli ec-2 SageMaker S3",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I started using aws in March 2019.  Here are some of my notes.\n\n# aws-cli\n\n# ec-2\n\n# SageMaker\n\n# S3",
        "long_description": "I started using aws in March 2019. Here are some of my notes. aws-cli ec-2 SageMaker S3..."
    },
    {
        "cover": "/static/steve-halama-kfwQvL6niR8-unsplash.jpg",
        "title": "Digital Ocean",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/digital-ocean.md",
        "canonical_url": "https://waylonwalker.com/digital-ocean",
        "cover_image": "https:waylonwalker.com/steve-halama-kfwQvL6niR8-unsplash.jpg",
        "date": "2019-09-22 05:00:00+00:00",
        "description": "I love digital ocean for it's simplicity and its commitment to open source.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I love digital ocean for it's **simplicity** and its commitment to open source.",
        "long_description": "I love digital ocean for it's simplicity and its commitment to open source...."
    },
    {
        "cover": "/static/the-good-old-days-xmas2020.png",
        "title": "The Good Old Days",
        "tags": [],
        "status": "draft",
        "templateKey": "gratitude",
        "path": "../../src/pages/gratitude/the-good-old-days.md",
        "canonical_url": "https://waylonwalker.com/the-good-old-days",
        "cover_image": "https:waylonwalker.com/the-good-old-days.png",
        "date": "2019-09-22 16:55:19+00:00",
        "description": "When I think of the good old days, you are the first person to come to mind. Back in those days I was up before the sun",
        "published": false,
        "content": "When I think of the good old days, you are the first person to come to mind.  Back in those days I was up before the sun every day... No Excuses.  I remember I would start asking to go to your house almost immediately when I woke up on weekends that I knew you had at your dad's.  Mom usually held me back until at least 10 AM before I was allowed to start knocking on the door.  At that point I would jump on my bike for the 1/4 mile trek down the gravel road, usually to find out that you were not quite up yet.  From there I would keep stopping by every 30 minutes until you were ready to play.  Which could only be in 30 minute increments... Do you remember that?  We had 30 minute curfew's to that we were allowed to play at each others house. At which point we would just ask to go play at the others house.\n\nI remember playing in the mudhole in front of my house chasing the tiniest frogs imaginable, to look behind and you had lost your boots completely stuck in the mud ready to loose your things.  I was full outdoors man back in those days.  Wanted to be just like dad.  Spending all of my free time riding my bike and chasing some sort of animal.  I would go back to help and get myself stuck.  By the end of it I'm sure we both had gone head first in the mud trying to get out!  At this point we were probably told that it was time to stop playing together for the day as we were both a complete wreck.  I'm sure that I was angry that I made it through on my own fine, only to get messy trying to help you.  In reality It was just about impossible to get through that mudhole if you weren't the first one through it.\n\nYears later our bikes turned to mopeds, three-wheelers, and go carts.  I have nearly forgotten about the go-carts by this point.  I remember that you always had this big BA oddessy, and It was all I could do to keep up on the grasshopper.  I remember desperately trying to keep up one day coming from our soon to be motocross track to Mark's house when I hit big hole sideways and went rolling.  I had no helmet on our anything.  I am pretty sure that I hurt myself pretty good, but I was too tough to let that stop me.  Besides that I was probably too proud of my amazing go-carting skills to even admit that I would have crashed.   By the time I caught up I just played it off like I needed a break.  Which would be completely obvious because there was nothing that made me want to take a break from riding back in those days.",
        "long_description": "When I think of the good old days, you are the first person to come to mind. Back in those days I was up before the sun every day... No Excuses. I remember I would start asking to go to your house almost immediately when I woke up on weekends that..."
    },
    {
        "cover": "/static/nathan-dumlao-eksqjXTLpak-unsplash.jpg",
        "title": "Filtering Pandas",
        "tags": [
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/filtering-pandas.md",
        "canonical_url": "https://waylonwalker.com/filtering-pandas",
        "cover_image": "https:waylonwalker.com/nathan-dumlao-eksqjXTLpak-unsplash.jpg",
        "date": "2019-09-24 05:00:00+00:00",
        "description": "Filtering pandas DataFrames many different ways.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## query\n\nGood for method chaining, i.e. adding more methods or filters without assigning a new variable.\n\n```python\n# is\nskus.query('AVAILABILITY == \" AVAILABLE\"')\n# is not\nskus.query('AVAILABILITY != \" AVAILABLE\"')\n```\n\n## masking\n\ngeneral purpose, this is probably the most common method you see in training/examples\n\n```python\n# is\nskus[skus['AVAILABILITY'] == 'AVAILABLE']\n# is not\nskus[~skus['AVAILABILITY'] == 'AVAILABLE']\n```\n\n## isin\n\ncapable of including multiple strings to include\n\n    # is in\n    df[df.AVAILABILITY.isin(['AVAILABLE', 'AVL'])]\n    # is not in\n    df[~df.AVAILABILITY.isin(['AVAILABLE', 'AVL'])]\n\n## contains\n\nGood For partial matches\n\n    # contains\n    df[df.AVAILABILITY.str.contains('AVA')]\n    # not contains\n    df[~df.AVAILABILITY.str.contains('AVA')]\n\n## MASKS\n\nanything that we put inside of square brackets can be set as a variable then passed in.\n\n    service_mask = skus['AVAILABILITY'] == 'AVAILABLE'\n    name_mask = skus['NAME'] == 'Dell chromebook 11'\n\n### Operators\n\n& - and\n\\~ - not\n| - or\n\n### AVAILABLE and NAME\n\n    df[service_mask & name_mask]\n\n### AVAILABLE or NAME\n\n    df[service_mask | name_mask]\n\n### AVAILABLE and not NAME\n\n    df[service_mask & ~name_mask]",
        "long_description": "query Good for method chaining, i.e. adding more methods or filters without assigning a new variable. ```python is skus.query('AVAILABILITY == \" AVAILABLE\"') is not skus.query('AVAILABILITY != \" AVAILABLE\"') ``` masking general purpose, this is proba..."
    },
    {
        "cover": "/static/andrew-neel-_71nlAn-2YA-unsplash.jpg",
        "title": "Custom Python Exceptions",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/custom-python-exceptions.md",
        "canonical_url": "https://waylonwalker.com/custom-python-exceptions",
        "cover_image": "https:waylonwalker.com/andrew-neel-_71nlAn-2YA-unsplash.jpg",
        "date": "2019-09-25 05:00:00+00:00",
        "description": "Custom Python Exceptions",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## Custom Exceptions\n\n```\nclass ProjectNameError(NameError):\n    pass\n\n\nclass UserNameError(NameError):\n    pass\n\n\nclass CondaEnvironmentError(RuntimeError):\n    pass\n\n\nclass BucketNotDefinedError(NameError):\n    pass\n\n```",
        "long_description": "Custom Exceptions ``` class ProjectNameError(NameError): pass class UserNameError(NameError): pass class CondaEnvironmentError(RuntimeError): pass class BucketNotDefinedError(NameError): pass ```..."
    },
    {
        "cover": "/static/just-use-pathlib-xmas2020.png",
        "title": "Just Use Pathlib",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/just-use-pathlib.md",
        "canonical_url": "https://waylonwalker.com/just-use-pathlib",
        "cover_image": "https:waylonwalker.com/just-use-pathlib.png",
        "date": "2019-09-26 05:00:00+00:00",
        "description": "Pathlib is an amazing cross-platform path tool.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Pathlib is an amazing cross-platform path tool.\n\n## Import\n\n```python\nfrom pathlib import Path\n```\n\n## Create path object\n\n**Current Directory**\n\n```python\ncwd = Path('.').absolute()\n```\n\n**Users Home Directory**\n\n```python\nhome = Path.home()\n```\n\n**module directory**\n\n```python\nmodule_path = Path(__file__)\n```\n\n**Others**\nLet's create a path relative to our current module.\n\n```python\ndata_path = Path(__file__) / 'data'\n```\n\n## Check if files exist\n\n## Make Directories\n\n```python\ndata_path.mkdir(parents=True, exists_ok=True)\n```\n\n## rename files\n\n```python\nPath(data_path /'example.csv').rename('real.csv')\n```\n\n## List files\n\n## Glob Files\n\n```python\ndata_path.glob('*.csv')\n```\n\n**recursively**\n\n```python\ndata_path.rglob('*.csv')\n```\n\n## Write\n\n```python\nPath(data_path / 'meta.txt').write_text(f'created on {datetime.datetime.today()})\n```",
        "long_description": "Pathlib is an amazing cross-platform path tool. Import python from pathlib import Path Create path object Current Directory python cwd = Path('.').absolute() Users Home Directory python home = Path.home() module directory python module_path = Path(__..."
    },
    {
        "cover": "/static/jayden-yoon-19DxK0IG-hQ-unsplash.jpg",
        "title": "Debugging Python",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/debugging-python.md",
        "canonical_url": "https://waylonwalker.com/debugging-python",
        "cover_image": "https:waylonwalker.com/jayden-yoon-19DxK0IG-hQ-unsplash.jpg",
        "date": "2019-10-01 05:00:00+00:00",
        "description": "Debugging Python",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## Using pdb",
        "long_description": "Using pdb..."
    },
    {
        "cover": "/static/packages-to-investigate-xmas2020.png",
        "title": "Packages to Investigate",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/packages-to-investigate.md",
        "canonical_url": "https://waylonwalker.com/packages-to-investigate",
        "cover_image": "https:waylonwalker.com/packages-to-investigate.png",
        "date": "2019-10-14 05:00:00+00:00",
        "description": "jmespath Tabnine Bulwark |-|-| |github: |https://github.com/zaxr/bulwark| I definitely want to try this out with kedro",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "* jmespath\n* Tabnine\n\n# Bulwark\n\n|-|-|\n|github: |[https://github.com/zaxr/bulwark](https://github.com/zaxr/bulwark)|\n\nI definitely want to try this out with kedro.\n\nBulwark is a package for convenient property-based testing of pandas dataframes, supported for Python 3.5+.\n\n## Example\n\n        import bulwark.decorators as dc\n\n        @dc.IsShape((-1, 10))\n        @dc.IsMonotonic(strict=True)\n        @dc.HasNoNans()\n        def compute(df):\n            # complex operations to determine result\n            ...\n        return result_df",
        "long_description": "jmespath Tabnine Bulwark |-|-| |github: |https://github.com/zaxr/bulwark| I definitely want to try this out with kedro. Bulwark is a package for convenient property-based testing of pandas dataframes, supported for Python 3.5+. Example import b..."
    },
    {
        "cover": "/static/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e74756d626c61636b6c6162732f6b6564726f2f6d61737465722f696d672f6b6564726f5f62616e6e65722e6a7067.jpg",
        "title": "Kedro",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro.md",
        "canonical_url": "https://waylonwalker.com/kedro",
        "cover_image": "https:waylonwalker.com/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e74756d626c61636b6c6162732f6b6564726f2f6d61737465722f696d672f6b6564726f5f62616e6e65722e6a7067.jpg",
        "date": "2019-11-02 05:00:00+00:00",
        "description": "My Notes about using kedro",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "# [#kedrotips](https://twitter.com/search?q=%23kedrotips&f=live)\n\nI am tweeting out most of these snippets as I add them, you can find them all here [#kedrotips](https://twitter.com/search?q=%23kedrotips).\n\n# \ud83d\udde3 Heads up\n\nBelow are some quick snippets/notes for when using kedro to build data pipelines. So far I am just compiling snippets. Eventually I will create several posts on kedro. These are mostly things that I use In my everyday with kedro. Some are a bit more essoteric. Some are helpful when writing production code, some are useful more usefule for exploration.\n\n## \ud83d\udcda Catalog\n\n![catalogs](/jesse-orrico-h6xNSDlgciU-unsplash.jpg)\n_Photo by jesse orrico on Unsplash_\n\n### CSVLocalDataSet\n\n**python**\n\n``` python\nimport pandas as pd\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\n\ndata_set = CSVLocalDataSet(filepath=\"test.csv\",\n                                 load_args=None,\n                                 save_args={\"index\": False})\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n```\n\n**yaml**\n\n``` yaml\ntest_data:\n   type: CSVLocalDataset\n   filepath: test.csv\n   load_args: None\n   save_args:\n      index: False\n```\n\n## CSVHTTPDataSet\n\n``` python\ncities = CSVHTTPDataSet(\n    fileurl=\"https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv\",\n    auth=None,\n    load_args=None)\n\niris = iris_data_set.load()\n```\n\n``` yaml\ncities:\n   type: CSVHTTPDataSet\n    fileurl: https://people.sc.fsu.edu/~jburkardt/data/csv/cities.csv\n    auth: None\n    load_args: None\n```\n\n## HDFLocalDataSet\n\n``` python\nimport pandas as pd\nfrom kedro.io import HDFLocalDataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\niris_data_set = HDFLocalDataSet(filepath=\"iris.hdf\",\n                           key=\"test_hdf_key\",\n                           load_args=None,\n                           save_args=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n```\n\n``` yaml\ncars:\n   type: HDFLocalDataSet\n   filepath: test.hdf\n   key: test_hdf_key\n```\n\n## HDFS3LocalDataSet\n\n``` python\nimport pandas as pd\nfrom kedro.io import HDFS3DataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\niris_data_set = HDFS3DataSet(filepath=\"iris.hdf\",\n                        bucket_name=\"bucket-us-west-1\",\n                        key=\"test_hdf_key\",\n                        load_args=None,\n                        save_args=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n```\n\n``` yaml\ncars:\n   type: HDFS3DataSet\n   filepath: cars.hdf\n   bucket_name: bucket-us-west-1\n   key: test_hdf_key\n```\n\n## JSONLocalDataSet\n\n``` python\nimport pandas as pd\nfrom kedro.io import JSONLocalDataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\ncars = JSONLocalDataSet(filepath=\"iris.json\",\n                        load_args=None,\n                        save_args=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n```\n\n``` yaml\ncars:\n   type: JSONLocalDataSet\n   filepath: iris.json\n```\n\n## ParquetLocalDataSet\n\n``` python\nimport pandas as pd\nfrom kedro.io import ParquetLocalDataSet\n\niris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')\n\niris_data_set = ParquetLocalDataSet('iris',\n                           engine='auto',\n                           load_args=None,\n                           save_args=None,\n                           version=None)\n\niris_data_set.save(iris)\nreloaded_iris = iris_data_set.load()\n```\n\n``` yaml\ncars:\n   type: JSONLocalDataSet\n   filepath: cars\n```\n\nPickleS3DataSet\n\nSQLTableDataSet\n\nSQLQueryDataSet\n\nTextLocalDataSet\n\nExcelLocalDataSet\n\n## \u23f3 Loading Data\n\n![loading data](/battlecreek-coffee-roasters-eg6OUchGCsw-unsplash.jpg)\n_Photo by Battlecreek Coffee Roasters on Unsplash_\n\n### Simple Loading\n\n``` python\ndf = catalog.load('cars')\n```\n\n### list all datasets\n\n``` python\ncatalog.list()\n```\n\n### Saving Data\n\n``` python\ncatalog.save('cars', cars)\n```\n\n### \ud83d\udd0d Finding data\n\n**simple keyword search**\n\n``` python\nquery = 'raw'\n[data for data in catalog.list() if query in data]\n```\n\n_see on_ [_#kedrotips_](https://twitter.com/_WaylonWalker/status/1197130980659732480?s=20)\n\n**multi keyword serch**\n\n``` python\nquery = 'raw sales'\ndata_sets = catalog.list()\nfor word in query.split():\n\tdata_sets = [\n       data\n       for data in data_sets\n       if query in data\n       ]\n```\n\n_see on_ [_#kedrotips_](https://twitter.com/_WaylonWalker/status/1197528461587419139?s=20)\n\n**\ud83d\udc12 monkey patch it**\n\n``` python\ndef query(*search_terms):\n     data_sets = catalog.list()\n     for search in search_terms:\n         data_sets = [\n         data\n         for data in data_sets\n         if search in data\n         ]\n     return data_sets\n\ncatalog.query = query\n```\n\n_see on [#kedrotips](https://twitter.com/_WaylonWalker/status/1197855759507300352?s=20)\n\n### \ud83e\udd19 YOLO\n\n_You Only Load Once_\n\n**simple**\n\n``` python\ndata = [catalog.load(d)\n        for d in\n        catalog.query('c_pri', 'cars')\n        ]\n```\n\n**more refined**\n\n``` python\ndata = {\n   d: catalog.load(d)\n   for d in catalog.query('c_pri', 'cars')\n   }\n```\n\n**\ud83c\udf77 refined like a fine wine**\n\n``` python\nfrom types import SimpleNamespace\ndata = SimpleNamespace**{\n   d: catalog.load(d)\n   for d in catalog.query('c_pri', 'cars')\n   })\n```\n\n**\ud83e\uddc0 Make it a function**\n_getting funcy_\n\n``` python\nfrom types import SimpleNamespace\n\ndef yolo(*search_terms):\n   \"\"\"you only load once\n   using query method from previous tip\"\"\"\n   data = SimpleNamespace(**{\n       d: catalog.load(d)\n   for d in catalog.query(*search_terms)\n    })\n    return data\n\nall_pri = yolo('c_pri')\n```\n\n**\ud83d\udc12 monkey patch it**\n\n``` python\nfrom functools import partial\n\ncatalog.yolo = yolo\ncatalog.yolo.__doc__ = \"you only load once\"\n\nall_pri = catalog.yolo('c_pri')\n```\n\n\n### adding catalogs together\n\n``` python\nfrom kedro.io import DataCatalog\nDataCatalog({**cat1.__dict__['_data_sets'], **cat2.__dict__['_data_sets']})\n```\n## \ud83d\udee2 Building pipelines\n\n![building pipelines](/roman-pentin-T5QT2bmiD4E-unsplash.jpg)\n_Photo by roman pentin on Unsplash_\n\n### \ud83d\udccd Creating Nodes\n\n``` python\nfrom kedro.pipeline import node\nnode = node(lambda x: x.dropna(), inputs='raw_cars', outputs='int_cars')\n```\n\n``` python\nfrom kedro.pipeline import node\n\ndef drop_columns(df, *columns):\n   for column in columns:\n      df = df.drop(columns=column)\n   return df\n\nnode = node(\n   lambda x: drop_columns(x, 'vs', 'am', 'gear', 'carb'),\n   inputs='int_cars',\n   outputs='pri_cars'\n   )\n```\n\n### \ud83d\udee2 Creating a pipeline\n\n### Don't be so verbose\n\nCreate similar nodes dynamically\n\n``` python\ndef halve_dataframe(data: pd.DataFrame) -> List[pd.DataFrame]:\n   \"\"\" splits a dataframe in half \"\"\"\n    return np.array_split(data, 2)\n\nnodes = []\ndatasets = [\n   'cars', 'trucks', 'boats', 'motorcycles', 'planes',\n   'ships', 'busses', 'trains', 'subways'\n   ]\n\n# creates a pipeline node for every dataset in the datasets list\nfor dataset in datasets\n   nodes.append(\n       node(halve_dataframe,\n            'e_modin_{dataset}',\n            ['train_{dataset}', 'test_{dataset}']),\n   )\n```\n\n## \ud83c\udfc3\u200d\u2642\ufe0f Running Pipelines\n\n![running pipelines](/rodion-kutsaev-xNdPWGJ6UCQ-unsplash.jpg)\n_Photo by Rodion Kutsaev on Unsplash_\n\n**\ud83d\udd16 filter by tags**\n\n``` python\nnodes = pipeline.only_nodes_with_tags('cars')\n```\n\n_see on_ [_#kedrotips_](https://twitter.com/_WaylonWalker/status/1195319044808888321?s=20)\n\n**filter by node**\n\n``` python\nnodes = pipeline.only_nodes('b_int_cars')\n```\n\n_see on [#kedrotips](https://twitter.com/_WaylonWalker/status/1196406204479737856?s=20)\n\n**filter nodes like**\n\n``` python\nquery_string = 'cars'\nnodes = [\n   node.name\n   for node in pipeline.nodes\n   if query_string in node.name\n   ]\npipeline.only_nodes(*nodes)\n```\n\n_see on_ [_#kedrotips_](https://twitter.com/_WaylonWalker/status/1196813895228428288?s=20)\n\n**only nodes with tags** _or_\n\n``` python\nnodes = pipeline.only_nodes_with_tags('cars', 'trains')\n```\n\n**only nodes with tags** _and_\n\n``` python\nraw_nodes = pipeline.only_nodes_with_tags('raw')\ncar_nodes = pipeline.only_nodes_with_tags('cars')\nraw_car_nodes = raw_nodes & car_nodes\n```\n\n``` python\nraw_nodes = (\n   pipeline\n   .only_nodes_with_tags('raw')\n   .only_nodes_with_tags('cars')\n   )\n```\n\n**add pipelines**\n\n``` python\ncar_nodes = pipeline.only_nodes_with_tags('cars')\ntrain_nodes = pipeline.only_nodes_with_tags('trains')\ntransportation_nodes = car_nodes + train_nodes\n```\n\n**ensure nodes are attached**\n\n``` python\ncars_attached = len(\n   pipeline\n   .only_nodes_with_tags('cars')\n   .grouped_nodes\n   ) == 1\n```\n\n### \ud83c\udf82 Pipeline Decorators\n\n[example - log_time](https://kedro.readthedocs.io/en/latest/_modules/kedro/pipeline/decorators.html#log_time)\n\n``` python\nfrom kedro.pipeline.decorators import log_time, mem_profile\npipeline.decorate(log_running_time)\n```\n\n## Pipeline IO\n\n`pipleine.all_inputs()` and `pipeline.all_outputs()` return sets of pipeline inputs and outputs and you can do set operations on them.  This is particularly useful to find the upper and lower edges of your pipeline or subset of pipeline.  The pipeline object here is any `kedro` pipeline including a filtered subset.\n\n### Find all raw data\n\n``` python\npipeline.all_inputs() - pipeline.all_outputs()\n```\n\n### Find all final data\n\n``` python\npipeline.all_outputs() - pipeline.all_inputs()\n```\n\n### Find all nodes that do not raw\n\nThis one is probably one that is pushing the limits of what I would do in a list comprehension that I use in prod or even put into a text editor, but I commonly use ipython for my adhoc work and keeping it all in one line is very handy.  Complex list comprehensions kinda start becoming like regex in a way that they are really easy to write and really hard to read.  I don't think this one quite hits that point but its getting close.\n\nI find this one super useful to help me either move data beween environments, or avoid unnecessary database calls.\n\n``` python\nraw_inputs = pipeline.all_inputs() - pipeline.all_outputs()\nraw_nodes = [node for node in pipeline.nodes if [i for i in raw_inputs if i in set(node.inputs)] != []]\n```",
        "long_description": "#kedrotips I am tweeting out most of these snippets as I add them, you can find them all here #kedrotips. \ud83d\udde3 Heads up Below are some quick snippets/notes for when using kedro to build data pipelines. So far I am just compiling snippets. Eventually I w..."
    },
    {
        "cover": "/static/jp-valery-6W9G5G2WXGY-unsplash.jpg",
        "title": "Building Cli apps in Python",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/building-cli-apps-in-python.md",
        "canonical_url": "https://waylonwalker.com/building-cli-apps-in-python",
        "cover_image": "https:waylonwalker.com/jp-valery-6W9G5G2WXGY-unsplash.jpg",
        "date": "2019-11-11 06:00:00+00:00",
        "description": "learning about building cli apps in python",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## Packages\n\n## [Click](https://click.palletsprojects.com/en/7.x/ \"Click\")\n\n### Inputs\n\nClick primarily takes two forms of inputs Options and arguments.  I think of options as keyword argument and arguments as regular positional arguments.\n\n#### Option\n\n* typically aliased with a shorthand ('-v', '--verbose')\n\n---\n\n**From the [Docs](https://click.palletsprojects.com/en/7.x/options/)\n\nTo get the Python argument name, the chosen name is converted to lower case, up to two dashes are removed as the prefix, and other dashes are converted to underscores.\n\n``` python\n@click.command()\n@click.option('-s', '--string-to-echo')\ndef echo(string_to_echo):\n    click.echo(string_to_echo)\n```\n\n``` python\n@click.command()\n@click.option('-s', '--string-to-echo', 'string')\ndef echo(string):\n    click.echo(string)\n```\n\n---\n\n#### Argument\n\n* positional\n* required\n* no help text supplied by click\n\n## [Yaspin](https://pypi.org/project/yaspin/ \"Yaspin\")\n\n![Yaspin Gif](https://warehouse-camo.cmh1.psfhosted.org/1bf73e6062750b03a63648f4cab5147b82e4be97/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706176646d79742f79617370696e2f6d61737465722f676966732f64656d6f2e676966)\n\n## [Click Help Colors](https://github.com/click-contrib/click-help-colors)\n\n## ![Click Help Colors Example](https://raw.githubusercontent.com/r-m-n/click-help-colors/master/examples/1.png)\n\n## [Colorama](https://github.com/tartley/colorama \"colorama\")\n\n[Colorama Example](https://github.com/tartley/colorama/raw/master/screenshots/ubuntu-demo.png)\n\n### [Click DidYouMean](https://github.com/click-contrib/click-didyoumean)",
        "long_description": "Packages Click Inputs Click primarily takes two forms of inputs Options and arguments. I think of options as keyword argument and arguments as regular positional arguments. Option typically aliased with a shorthand ('-v', '--verbose') **From the..."
    },
    {
        "cover": "/static/cobro-mEr7U5yfYt8-unsplash.jpg",
        "title": "What DataScientists Should Know About S3",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/s3-datascience.md",
        "canonical_url": "https://waylonwalker.com/s3-datascience",
        "cover_image": "https:waylonwalker.com/cobro-mEr7U5yfYt8-unsplash.jpg",
        "date": "2019-12-15 06:00:00+00:00",
        "description": "What DataScientists Should Know About S3",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e74756d626c61636b6c6162732f6b6564726f2f6d61737465722f696d672f6b6564726f5f62616e6e65722e6a7067.jpg",
        "title": "SqlAlchemy Models",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/sqlalchemy-models.md",
        "canonical_url": "https://waylonwalker.com/sqlalchemy-models",
        "cover_image": "https:waylonwalker.com/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e74756d626c61636b6c6162732f6b6564726f2f6d61737465722f696d672f6b6564726f5f62616e6e65722e6a7067.jpg",
        "date": "2019-12-21 05:00:00+00:00",
        "description": "My Notes about using sqlalchemy models",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "# Make a connection\n\n```python\nfrom sqlalchemy import create_engine\ndef get_engine():\n    return create_engine(\"sqlite:///mode_examples.sqlite\")\n```\n\n\n# Make a session\n\n``` python\nfrom sqlalchemy.orm import sessionmaker\ndef get_session():\n    con = get_engine()\n    Base.bind = con\n    Base.metadata.create_all()\n    Session = sessionmaker(bind=con)\n    session = Session()\n    return session\n```\n\n# Make a Base Class\n\n``` python\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\nBase.metadata.bind = get_engine()\n```\n\n# Make your First Model\n\n``` python\nclass User(Base):\n    __tablename__ = \"users\"\n    username = Column('username', Text())\n    firstname = Column('firstname', Text())\n    lastname = Column('lastname', Text())\n```\n\n# Make your own Base Class to inherit From\n\n``` python\nclass MyBaseHelper:\n    def to_dict(self):\n        return {k: v for k, v in self.__dict__.items() if k[0] != \"_\"}\n\n    def update(self, **attrs):\n        for key, value in attrs.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n```\n\n# Use the Custom Base Class\n\n``` python\nclass User(Base, MyBaseHelper):\n    __tablename__ = \"users\"\n    username = Column('username', Text())\n    firstname = Column('firstname', Text())\n    lastname = Column('lastname', Text())\n```",
        "long_description": "Make a connection python from sqlalchemy import create_engine def get_engine(): return create_engine(\"sqlite:///mode_examples.sqlite\") Make a session python from sqlalchemy.orm import sessionmaker def get_session(): con = get_engine() Bas..."
    },
    {
        "cover": "./flex-xmas2020.png",
        "title": "Conda Build",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/condabuild.md",
        "canonical_url": "https://waylonwalker.com/condabuild",
        "cover_image": "https:waylonwalker.com/./flex.png",
        "date": "2020-01-01 00:00:00+00:00",
        "description": "none",
        "published": false,
        "summary": "setting up conda build",
        "content": "# Conda Build\n\n## Install Conda Build\n``` bash\nconda update conda\nconda install conda-build\n```",
        "long_description": "Conda Build Install Conda Build bash conda update conda conda install conda-build..."
    },
    {
        "cover": "/static/keep-location-list-closed-xmas2020.png",
        "title": "Keep Location List Closed",
        "tags": [
            "vim"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/keep-location-list-closed.md",
        "canonical_url": "https://waylonwalker.com/keep-location-list-closed",
        "cover_image": "https:waylonwalker.com/keep-location-list-closed.png",
        "date": "2020-01-01 00:00:00+00:00",
        "description": "Vim's (neovim in my case) location list can provide some very useful information while developing. Mine gives me inform",
        "published": true,
        "content": "Vim's (neovim in my case) location list can provide some very useful information while developing.  Mine gives me information about linting and type checking errors with fairly little config.  Generally, it sits nicely at the bottom of the screen and barely affects me.  Other times, especially while zoomed way in during a presentation, it just gets in the way.\n\n![location list eats the screen](https://waylonwalker.com/location-list-eats-screen.png)\n\n> Location List eating up the screen while I am zoomed in and trying to live code\n\n## Toggling the location list\n\nThrough some google search I found the culprit was syntastic.  It has an `auto_loc_list` feature.  We can turn it off by setting\n`syntastic_auto_loc_list=0`.\n\n``` vim\nlet syntastic_auto_loc_list=0\n```\n\n## Keybindings\n\nI want to keep the location list open automatically most of the time, but when I don't want it to keep opening it's generally detrimental.  Trying to live code while the location list keeps taking up the whole screen is not cool.\n\n\nFirst, create a function that will toggle both the location list and syntactic together.\n\n``` vim\nlet s:syntastic_auto_loc_list = 0\nfunction! s:ToggleLocationList()\n    if s:syntastic_auto_loc_list == 1\n        let s:syntastic_auto_loc_list = 0\n        let syntastic_auto_loc_list = 0\n        :lclose\n    else\n        let s:syntastic_auto_loc_list = 1\n        let syntastic_auto_loc_list = 1\n        :lopen\n    endif\nendfunction\n```\n\nThis binding will allow me to use `gtl` from normal mode to toggle the location list.\n\n``` vim\n:command! ToggleLocationList :call s:ToggleLocationList()\nnnoremap gtl :ToggleLocationList<CR>\n```\n\nI am starting a set of **toggle** keymaps under the `gt` keybinding, this one is the second one after a keybinding made to toggle paste mode.",
        "long_description": "Vim's (neovim in my case) location list can provide some very useful information while developing. Mine gives me information about linting and type checking errors with fairly little config. Generally, it sits nicely at the bottom of the screen and..."
    },
    {
        "cover": "/static/max-larochelle-uu-Jw5SunYI-unsplash.jpg",
        "title": "Supercharge Zsh Startup",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/supercharge-zsh-startup.md",
        "canonical_url": "https://waylonwalker.com/supercharge-zsh-startup",
        "cover_image": "https:waylonwalker.com/max-larochelle-uu-Jw5SunYI-unsplash.jpg",
        "date": "2020-01-03 06:00:00+00:00",
        "description": "I have been using oh-my-zsh successfully for about 2 years now. But lately my startup time has been really bothersome. It has grown to the point where it was taking about **5.5s** to startup a shell!  This is ok if I am going to spend some time in here for awhile and do some work that benefits from all of the autocompletions, plugins, and shortcuts that oh-my-zsh brings.  But to only jump in to run a handful of commands is infuriating.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "> Photo by [Max LaRochelle](https://unsplash.com/@maxlarochelle?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/lightning?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nI have been using oh-my-zsh successfully for about 2 years now. But lately my startup time has been really bothersome. It has grown to the point where it was taking about **5.5s** to startup a shell!  This is ok if I am going to spend some time in here for awhile and do some work that benefits from all of the autocompletions, plugins, and shortcuts that oh-my-zsh brings.  But to only jump in to run a handful of commands is infuriating.\n\n### \ud83d\udcd1 My Setup\n\nI believe the real issue is io speed on wsl.  I have some remote servers with similar configs that are 10x faster or more, loading in 100s of milliseconds rather than seconds.  Sourcing all of the individual plugin files are just too much for it.\n\n## \ud83d\udca8 How Fast can it be\n\n> Quick side note: your zsh config is controled by your \\~/.zshrc file.  This file can source other files, load plugins, or run literally anything.\n\nTime the **initial** time\n\n``` bash\ntime zsh -c exit\n```\n\nMove your **\\~/.zshrc** config file.\n\n``` bash\nmv ~/.zshrc ~/.zshrc-back\n```\n\nTime the fastest startup possible with nothing in your **\\~/.zshrc** config file.\n\n``` bash\ntime zsh -c exit\n```\n\nMove your **\\~/.zshrc** back\n\n``` bash\nmv ~/.zshrc-back ~/.zshrc\n```\n\n## \ud83d\udd75\ufe0f\u200d\u2642\ufe0fProfile your startup time\n\nIt is possible to profile your zsh startup time by adding `zmodload zsh/zprof` to the start of your `~/.zshrc` file and `zprof` at the end.  This was unsuccessfull for me.  I ended up just backing up `~/.zshrc` file, then deleting half of it to see where the hot spots were.  I found that two places that were really hot for me.  One I was inadvertantly setting git and npm settings everytime that didnt need to be set everytime.  That was an easy 2s gain.  Another easy 3s gain was removing oh-my-zsh.\n\n``` bash\n# ~/.zshrc\nzmodload zsh/zprof\n...\n..\n.\nzprof\n```\n\n## \ud83d\ude2dBut I really like oh-my-zsh\n\nwithout all the bells and whistle that oh-my-zsh provided zsh became lightning fast to load, but incredibly boring.  It was also very painful to manually type out everything that it autocompleted or aliased all the time.  Next I headed down a path to get all of that functionality back without sacrificing load time.\n\n> Without oh-my-zsh, zsh became incredibly boring.\n\n## \ud83d\udd0c Plugin Managers\n\n![](/static/steve-johnson-ZUabNmumOcA-unsplash.jpg)\n\n> Photo by [Steve Johnson](https://unsplash.com/@steve_j?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/plug?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\n* oh-my-zsh\n* zplugin\n* zgen\n\nThere are a number of plugin managers for zsh, I tried each of the ones listed above, but found that as I approached a nice setup that I liked the load time would creep up **above the 2s** **mark** each time. I would turn certain plugins on and off, try different plugin managers, before realizing that I had spent enough time on this problem and it was going to be time to settle on fast startup or functionality.\n\n## \u2696 Finding Balance\n\n_Semi-lazy loading_\n\n![](/static/jeppe-hove-jensen-b3eaH1hguOA-unsplash.jpg)\n\n> Photo by Jeppe Hove Jensen on [Unsplash](https://unsplash.com/s/photos/balance?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nAfter struggling to get all of the features I wanted with a fast load time, I decided to only load what I needed upon startup.  Next I created a simple alias that loads in zgen and all of the plugins I want. By doing this I get two main benefits.  Obviously I get a faster starup time by loading less.  I got my startup time down to about 0.25s.\n\n``` bash\n# ~/.zshrc\np () {\nzgen load zsh-users/zsh-autosuggestions\n....\n..\n.\n}\n```\n\n### \u26a1 Fast Loading\n\nI really like the fast startup time, because sometimes I am only loading up zsh to run a handful of commands that dont need much in the way of plugins\n\n**simple commands that need \ud83d\udca8 blazing start speed**\n\n_any single easy to type command, these are my common commands that I will open a terminal in my editor and just need to run quick._\n\n* vim\n* git add . && git commit && git push\n* sh my_script.sh\n* make build\n* bake build\n* pytest\n* gatsby develop\n* npm i\n* npm update\n* pip install\n* ipython\n\nThe second benefit was that I can continue typing while plugins are loading.\n\n![](/static/type-while-loading-plugins.gif)\n\n## >Prompt\n\nAfter removing oh-my-zsh the first thing that I missed was the themes that it provided.  I went through a number of them and the one that seemed to have the smallest effect on performance and everything I needed was [starship](https://starship.rs/).  It's a really fast prompt written in rust.  The biggest thing that I needed to have that other prompts were misssing was conda environments.  I live much of my work life running python from various conda environments and it is crutial that I can see what environment I am in at all times.\n\n![](/static/2020-01-04 12-36-31_Cortana.png)\n\n## \ud83d\udcb0 Bonus\n\nI applied the same logic to neovim and achieved similar results.  Again it just had too many plugins loading on startup for simple tasks.  I ended up taking a shortcut and load any heavy plugins upon NerdTreeToggle.  I dont really use NERDTree that much, but when I do its for more than just a quick edit.\n\n``` bash\n# ~/.config/nvim/init.vim\n...\nPlug 'valloric/youcompleteme', {'do': './install.py', 'on': 'NERDTreeToggle'}\n...\n```",
        "long_description": "Photo by Max LaRochelle on Unsplash I have been using oh-my-zsh successfully for about 2 years now. But lately my startup time has been really bothersome. It has grown to the point where it was taking about 5.5s to startup a shell! This is ok if I..."
    },
    {
        "cover": "/static/david-travis-aVvZJC0ynBQ-unsplash.jpg",
        "title": "What is something that you recently learned that you wish you would have learned or understood earlier?",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/learn-early.md",
        "canonical_url": "https://waylonwalker.com/learn-early",
        "cover_image": "https:waylonwalker.com/david-travis-aVvZJC0ynBQ-unsplash.jpg",
        "date": "2020-01-10 06:00:00+00:00",
        "description": "What is something that you recently learned that you wish you would have learned or understood earlier?",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Cover Photo I call **gaining clarity** by [David Travis](https://unsplash.com/@dtravisphd?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/clarity?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\n***\n\nMine is the python debugger. I was a long holdout thinking that print statements were sufficient. That was untill I started having errors crop up in functions that took minutes to run. The thing that I most notably wish I would have known about is post_mortem.\n\n# Example\n\n    [ins] In [4]: def repeater(msg, repeats=1):\n             ...:     \"repeats messages {repeats} number of times\"\n             ...:     print(f'{msg}\\n' * repeats)\n\n    [ins] In [5]: repeater('hi', 3)\n    hi\n    hi\n    hi\n\n    [ins] In [6]: repeater('hi', 'a')\n    ---------------------------------------------------------------------------\n    TypeError                                 Traceback (most recent call last)\n    <ipython-input-6-0ec595774c81> in <module>\n    ----> 1 repeater('hi', 'a')\n\n    <ipython-input-4-530890de75cd> in repeater(msg, repeats)\n          1 def repeater(msg, repeats=1):\n          2     \"repeats messages {repeats} number of times\"\n    ----> 3     print(f'{msg}\\n' * repeats)\n          4\n\n# Debug with iPython/Jupyter\n\n    %debug\n\n# Vanilla Debug\n\n    import pdb\n    import sys\n\n    pdb.post_mortem(sys.last_traceback)\n\n# More\n\nFor more information about the debugger checkout the real python article. [https://realpython.com/python-debugging-pdb/](https://realpython.com/python-debugging-pdb/ \"https://realpython.com/python-debugging-pdb/\")\n\nAlso keep a bookmark of the table of pdb commands from the article [https://realpython.com/python-debugging-pdb/#essential-pdb-commands](https://realpython.com/python-debugging-pdb/#essential-pdb-commands \"https://realpython.com/python-debugging-pdb/#essential-pdb-commands\")\n\n# Debug Session\n\n[![debug session](https://res.cloudinary.com/practicaldev/image/fetch/s--ShQ3NN06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1tnri6wdwimwk7i83cvg.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ShQ3NN06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1tnri6wdwimwk7i83cvg.png)",
        "long_description": "Cover Photo I call gaining clarity by David Travis on Unsplash Mine is the python debugger. I was a long holdout thinking that print statements were sufficient. That was untill I started having errors crop up in functions that took minutes to run. T..."
    },
    {
        "cover": "/static/gatsby-rss-feed-xmas2020.png",
        "title": "RSS feed for your Gatsby Site",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/gatsby-rss-feed.md",
        "canonical_url": "https://waylonwalker.com/gatsby-rss-feed",
        "cover_image": "https:waylonwalker.com/gatsby-rss-feed.png",
        "date": "2020-01-21 13:58:59+00:00",
        "description": "Add an rss feed to your Gatsby Site",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "Adding an rss feed to your gatsby js site is super simple.\n\nhttps://www.gatsbyjs.org/packages/gatsby-plugin-feed/\n\n\n## Install\n\n``` bash\nnpm install --save gatsby-plugin-feed\n```\n\n## How to use\n``` javascript\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              return allMarkdownRemark.edges.map(edge => {\n                return Object.assign({}, edge.node.frontmatter, {\n                  description: edge.node.excerpt,\n                  date: edge.node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + edge.node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + edge.node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": edge.node.html }],\n                })\n              })\n            },\n            query: `\n              {\n                allMarkdownRemark(\n                  sort: { order: DESC, fields: [frontmatter___date] },\n                ) {\n                  edges {\n                    node {\n                      excerpt\n                      html\n                      fields { slug }\n                      frontmatter {\n                        title\n                        date\n                      }\n                    }\n                  }\n                }\n              }\n            `,\n            output: \"/rss.xml\",\n            title: \"Your Site's RSS Feed\",\n            // optional configuration to insert feed reference in pages:\n            // if `string` is used, it will be used to create RegExp and then test if pathname of\n            // current page satisfied this regular expression;\n            // if not provided or `undefined`, all pages will have feed reference inserted\n            match: \"^/blog/\",\n            // optional configuration to specify external rss feed, such as feedburner\n            link: \"https://feeds.feedburner.com/gatsby/blog\",\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n## My updated graphql query\n\n\n``` graphql\n{\n\tallMarkdownRemark(\n\t\tsort: { order: DESC, fields: [frontmatter___date] }\n\t\tfilter: {\n\t\t\tfrontmatter: {\n\t\t\t\ttemplateKey: { in: [\"blog-post\"] }\n\t\t\t\tstatus: { in: [\"published\"] }\n\t\t\t}\n\t\t}\n\t) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\texcerpt\n\t\t\t\trawMarkdownBody\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\tdate\n\t\t\t\t\tcover {\n\t\t\t\t\t\trelativePath\n\t\t\t\t\t}\n\t\t\t\t\ttwitter_cover {\n\t\t\t\t\t\trelativePath\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```",
        "long_description": "Adding an rss feed to your gatsby js site is super simple. https://www.gatsbyjs.org/packages/gatsby-plugin-feed/ Install bash npm install --save gatsby-plugin-feed How to use javascript // In your gatsby-config.js module.exports = { plugins: [..."
    },
    {
        "cover": "/static/2020-01-26 16-43-59_Start-xmas2020.png",
        "title": "cmd.exe tips",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/cmd-exe-tips.md",
        "canonical_url": "https://waylonwalker.com/cmd-exe-tips",
        "cover_image": "https:waylonwalker.com/2020-01-26 16-43-59_Start.png",
        "date": "2020-01-23 15:18:45+00:00",
        "description": "cmd.exe tips",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I spend a lot of my time at the terminal for my daily work, mostly in Linux or wsl.  One big reason for using wsl over cmd.exe is the ease of walking through history that fzf provides.  This week we had a windows bug in a cli and I was stuck in vanilla cmd.exe \ud83d\ude2d\n\n## > Cmder\n\n![](/main.png)\n\nFirst off if you are stuck using cmd.exe, do yourself a favor and get cmder.  It makes life just a bit easier.  It is super confugurable and comes with several power ups that make it a bit more enjoyable than cmd.exe.\n\n## History\n\n**F7** - Scroll through history\n\n**F8** - Search history based\n\n## Example\n\n![](/cmd_exe_history_2.gif)\n\n## .bat\n\nThe next simple technique is to save your commands into a .bat file. Any valid command ran with cmd.exe can be saved into a bat file and called again later by running it in the terminal.\n\n**save your command**\n\nuse f7/f8 to get your command back add `> filename.bat` at the end, hit the home key and add echo to the front.  **Do not** wrap with quotes.  This is not bash.\n\n``` bash\necho python cmd_example.py > cmd_example.bat\n```\n\n**>> append**\n\n``` bash\necho python cmd_example2.py >> cmd_example.bat\n```\n\n## type not cat\n\nTo ensure that you got the command right... and didn't forget that you were in cmd.exe instead of bash and add quotes. you will want to see the file contents. For this reach for **type** not **cat**.\n\n``` bash\ntype cmd_example.bat\n```\n\n**results**\n``` bash\npython cmd_example.py\npython cmd_example2.py\n```\n\n## Your quick tips\n\nlet me know what quick cmd.exe tips you have.\n\n[![tweet your tip](/2020-01-27 06-32-34_Microsoft Text Input Application.png \"tweet your tip\")](https://twitter.com/intent/tweet?text=@waylonwalker%20my%20favorite%20cmd.exe%20tip%20is%20...%20https%3A//waylonwalker.com/blog/cmd-exe-tips/ \"tweet your tip\")",
        "long_description": "I spend a lot of my time at the terminal for my daily work, mostly in Linux or wsl. One big reason for using wsl over cmd.exe is the ease of walking through history that fzf provides. This week we had a windows bug in a cli and I was stuck in vanil..."
    },
    {
        "cover": "/static/URL shortener-xmas2020.png",
        "title": "Personal URL shortener with Netlify Redirects",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/personal-url-shortener.md",
        "canonical_url": "https://waylonwalker.com/personal-url-shortener",
        "cover_image": "https:waylonwalker.com/URL shortener.png",
        "date": "2020-01-29 06:00:00+00:00",
        "description": "Personal URL shortener with Netlify Redirects",
        "published": true,
        "related_post": null,
        "related_post_label": "Check out this related post",
        "content": "Photo by [Ozark Drones](https://unsplash.com/@ozarkdrones?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/uturn?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nI love using URL shorteners to easily share links without hitting character limits, but they loose their meaning. Services like bit.ly will save my links for me so that I can find them, but I would rather them to be easy to remember. [https://bit.ly/2ruLwQz](https://bit.ly/2ruLwQz \"https://bit.ly/2ruLwQz\") does not roll of the tongue so well.\n\n# 301 \ud83e\udd38\u200d\u2640\ufe0f\n\nI recently discovered a really cool feature of netlify that I have always looked past, `_redirects`. It is so simple cool and powerful, every netlify site should do this!\n\n# But how \ud83e\udd37\u200d\u2640\ufe0f\n\nsimply add a `_redirects` file to the root of your your published site with the following format. The trick I found with my gatsby site was that it needed to be in my static directory `/static/_redirects`, not root. Next you just put space separated links on separate lines. #'s can be used for comments.\n\n``` markdown\n# netlify redirects\n# from_url to_url\n\n# Short-Blog\n\n/blog/scli         /blog/simple-click/\n/blog/cmdt         /blog/cmd-exe-tips/\n.\n.\n.\n\n\n# splats\n\n/b*             /blog/:splat\n/n*             /notes/:splat\n\n\n# External\n\n/twitter        https://twitter.com/_WaylonWalker\n/github         https://github.com/WaylonWalker\n/devto          https://dev.to/waylonwalker/\n```\n\n# \ud83d\ude4c Share those short links\n\nNow with shorter links we have more space for our content without needing to use a service like bit.ly that makes our links unreadable.\n\n![url shortener](/static/URL shortener.png)",
        "long_description": "Photo by Ozark Drones on Unsplash I love using URL shorteners to easily share links without hitting character limits, but they loose their meaning. Services like bit.ly will save my links for me so that I can find them, but I would rather them to be..."
    },
    {
        "cover": "/static/2020-02-02 09-40-45_Start-xmas2020.png",
        "title": "simple click",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/simple-click.md",
        "canonical_url": "https://waylonwalker.com/simple-click",
        "category": "",
        "cover_image": "https:waylonwalker.com/2020-02-02 09-40-45_Start.png",
        "date": "2020-01-29 06:00:00+00:00",
        "description": "Add helpful cli to your python libraries... All of them!",
        "published": true,
        "related_post_label": "Check out this related post",
        "slug": "",
        "summary": "",
        "content": "cli tools are super handy and easy to add to your python libraries to supercharge them. Even if your library is not a cli tool there are a number of things that a cli can do to your library.\n\n# Example Ideas\n\nThings a cli can do to enhance your library.\n\n\ud83c\udd9a print version\n\ud83d\udd76 print readme\n\ud83d\udcdd print changelog\n\ud83d\udcc3 print config\n\u270f change config\n\ud83d\udc69\u200d\ud83c\udf93 run a tutorial\n\ud83c\udfd7 scaffold a project with cookiecutter\n\n# \ud83d\uddb1 [Click](https://click.palletsprojects.com/)\n\n[Click](https://click.palletsprojects.com/) is the most popular python cli tool framework for python. There are others, some old, some new comers that make take the crown. For now [Click](https://click.palletsprojects.com/) is the gold standard if you want to make a powerful cli quickly. If you are dependency conscious and dont need a lot of tooling, use [argparse](https://docs.python.org/3/library/argparse.html).\n\n# Project Structure\n\n    .\n    \u251c\u2500\u2500 setup.py\n    \u2514\u2500\u2500 simple_click\n        \u251c\u2500\u2500 cli.py\n        \u2514\u2500\u2500 __init__.py\n\n# \u276f cli.py\n\n``` python\n    # simple_click/cli.py\n    import click\n\n    __version__ = \"1.0.0\"\n\n    @click.group()\n    def cli():\n       pass\n\n    @cli.command()\n    def version():\n        \"\"\"prints project version\"\"\"\n        click.echo(__version__)\n\n\n    if __name__ == '__main__':\n        cli()\n```\n\n# \u2728 **init**.py\n\nFor our simple_click library `__init__.py__` can be left empty. It is here purely to signify that simple_click is a library. It is likely that you will import other modules here that need to reside at the top level of your library api, your cli does not need to be at the top of of your api.\n\n``` python\n    # __init__.py\n```\n\n# \ud83d\udeaa Entry Points\n\nEntry points are the magic that make python cli tools available as their own command without having python before it or the file extension.\n\n``` python\n    # setup.py\n\n    from setuptools import setup, find_packages\n\n    # this is the \ud83e\udd69 meat of this snippet\n    # simple_click is the command name\n    # = simple_click is the library name\n    # .cli is the cli.py file\n    # :cli is the cli function\n    #\n    # the second item is a shorthand alias to the main command\n\n    entry_points = [\n       \"simple_click = simple_click.cli:cli\",\n       \"scli         = simple_click.cli:cli\",\n    ]\n\n\n    setup(\n        name='simple_click',\n        version='1.0.0',\n        url='https://github.com/mypackage.git',\n        packages=find_packages(),\n        entry_points={\"console_scripts\": entry_points},\n\n    )\n```\n\n# \ud83d\udd76 See it in action\n\n[![See it in action](https://res.cloudinary.com/practicaldev/image/fetch/s--RiG3kZsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zrhvj5yjzyk63np91g9.gif \"See it in action\")](https://res.cloudinary.com/practicaldev/image/fetch/s--RiG3kZsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zrhvj5yjzyk63np91g9.gif)\n\n# \ud83d\udce2 Discuss\n\nWhat do You wish more python libraries included in their cli?  [Tweet it @_waylonwalker](https://twitter.com/intent/tweet?text=@_waylonwalker%20More%20libraries%20should%20...%0A%0Awaylonwalker.com/b/scli)\n\n![Tweet it @_waylonwalker](https://twitter.com/intent/tweet?text=@_waylonwalker%20More%20libraries%20should%20...%0A%0Awaylonwalker.com/b/scli)",
        "long_description": "cli tools are super handy and easy to add to your python libraries to supercharge them. Even if your library is not a cli tool there are a number of things that a cli can do to your library. Example Ideas Things a cli can do to enhance your library...."
    },
    {
        "cover": "/static/photo-1464802686167-b939a6910659.jpg",
        "title": "Out of Space",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/out-of-space.md",
        "canonical_url": "https://waylonwalker.com/out-of-space",
        "cover_image": "https:waylonwalker.com/photo-1464802686167-b939a6910659.jpg",
        "date": "2020-02-01 06:00:00+00:00",
        "description": "Out of Space! How to remove 65 conda environments in one command.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This morning I logged into my machine and was nearly out of space\n\n* 64GB miniconda3!\n* 5GB conda cache\n* 4GM pip cache\n* 34GB docker\n\n## Find it\n\n[![Looking for big files when the weeds are too tall](https://res.cloudinary.com/practicaldev/image/fetch/s--0LE2KZJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/je7pxcagfs7m23p98kck.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--0LE2KZJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/je7pxcagfs7m23p98kck.jpg)\n\n> Photo by [Simon Migaj](https://unsplash.com/@simonmigaj?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/find?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\n\nThese are the commands that I often use to reclaim space.  Its so easy to fill up small vm's in the cloud, or in my case today let your dev machine go way too long without a good cleanup.\n\n### Show Remaining Space on Drives\n\nThis shows us where to start and gives a baseline of how much space we have reclaimed.\n\n``` bash\ndf -h\n```\n\n\n### show largest files in current directory\n\nNext keep drilling into directories that are big and running this command to see whats big inside of it.  When you find somethign that you are willing to part with `rm -rf <directory>` it and check `df -h` to see if you have enough reclaimed yet.\n\n``` bash\ndu . -h --max-depth=1\n```\n\nHonestly I rarely bother unless the directory is in the GB's of space.  A super simple filter for that is to just grep for G.\n\n``` bash\ndu . -h --max-depth=1 | grep G\n```\n\n\n## conda\n\n### How Many?\n\nAs a first baseline lets see how many enviroments we are starting with. I started with 71. Yeah I have had this machine for 2 years, and dont regularly remove them.\n\n``` bash\nconda info --envs | tail -n +2 | wc -l\n```\n\n\n\nbash\n\n### Lets batch it out!\n\nWe are devs here surely we can automate this issue! The following four lines will generate a list of existing conda environments, edit them with vim, remove the remaining ones, then remove the text file we created to remove from.\n\nMake sure that you only keep names of environments that you want to **remove** in `conda_envs_to_remove.txt` and delete the environment names you want to keep.\n\n``` bash\nconda info --envs | tail -n +2 | cut -d ' ' -f1 > conda_envs_to_remove.txt\nvim conda_envs_to_remove.txt\ncat ~/.conda_envs_remove | tr '\\n' '\\0' | xargs -l -0 conda remove --all -y -n\nrm conda_envs_to_remove.txt\n```\n\n### \ud83d\udcdd Side note\n\nWhen I am creating one of these complicated bash pipelines including xargs I generally print out the command first and make sure that it does what I want. The following command will test the above script before doing dangerous things!\n\n``` bash\ncat ~/.conda_envs_remove | tr '\\n' '\\0' | xargs -l -0 echo \"conda remove --all -y -n \"\n```\n\n## Cache\n\nIf your feeling really strained for space, you can `rm -rf ~/.cache`. Personally I like the improved speed of installing everything... obviously I install a lot of new environments.\n\n## Docker\n\n[![Alt Text](https://res.cloudinary.com/practicaldev/image/fetch/s--W4NWBxYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olcef3lh31dtrwa51u7g.jpg)](https://res.cloudinary.com/practicaldev/image/fetch/s--W4NWBxYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olcef3lh31dtrwa51u7g.jpg)\n\n> Photo by [Henry Be](https://unsplash.com/@henry_be?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/dark-fire?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nFor more information read this article, [https://docs.docker.com/config/pruning/](https://docs.docker.com/config/pruning/ \"https://docs.docker.com/config/pruning/\"). I have all of the images that I want pushed remotely so I just dumped everything with the following command.\n\n``` bash\ndocker system prune\ndocker system prune --volumes\n```\n\nRunning these two sets of commands cleared up about **70GB** of space for me with very little effort on my behalf. I hope others find the first command helpful to batch remove many conda environments at once.",
        "long_description": "This morning I logged into my machine and was nearly out of space 64GB miniconda3! 5GB conda cache 4GM pip cache 34GB docker Find it Photo by Simon Migaj on Unsplash These are the commands that I often use to reclaim space. Its so easy to fill..."
    },
    {
        "cover": "/static/2020-02-02 09-40-45_Start-xmas2020.png",
        "title": "simple click 2",
        "tags": [
            "python"
        ],
        "status": "false",
        "templateKey": "blog-post",
        "path": "../../src/pages/simple-click-2.md",
        "canonical_url": "https://waylonwalker.com/simple-click-2",
        "cover_image": "https:waylonwalker.com/2020-02-02 09-40-45_Start.png",
        "date": "2020-02-03 06:00:00+00:00",
        "description": "",
        "published": false,
        "related_post": null,
        "related_post_label": "Check out this related post",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/ship-faster-xmas2020.png",
        "title": "git push without setting upstream",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-push-without-setting-upstream.md",
        "canonical_url": "https://waylonwalker.com/git-push-without-setting-upstream",
        "cover_image": "https:waylonwalker.com/ship-faster.png",
        "date": "2020-02-04 12:18:00+00:00",
        "description": "git config --global push.default current",
        "published": true,
        "related_post": null,
        "related_post_label": "Check out this related post",
        "content": "Finally after years of hand typing out a full `git push --upstream my\\_really\\_long\\_and\\_descriptive\\_branch\\_name` I foudn there is a setting to automatcally push to the current branch. More realisitically I just did a `git push` let git yell at me, and copying the suggestion.\n\n``` bash\ngit config --global push.default current\n```\n\nThis one setting will now `git push` to the current branch without yelling at you that your upstream does not match your current branch.",
        "long_description": "Finally after years of hand typing out a full git push --upstream my\\_really\\_long\\_and\\_descriptive\\_branch\\_name I foudn there is a setting to automatcally push to the current branch. More realisitically I just did a git push let git yell at me, an..."
    },
    {
        "cover": "/static/should-i-switch-to-zeit-now-xmas2020.png",
        "title": "Should I switch to Zeit Now",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/should-i-switch-to-zeit-now.md",
        "canonical_url": "https://waylonwalker.com/should-i-switch-to-zeit-now",
        "cover_image": "https:waylonwalker.com/should-i-switch-to-zeit-now.png",
        "date": "2020-02-06 22:38:00+00:00",
        "description": "Should I switch to Zeit Now.  Netlify build times are starting to creep in.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "# Netlify\n\nI have happily had my personal site [waylonwalker.com](https://waylonwalker.com) hosted on netlify for nearly 2 years now.  In fact I have hosted about a dozen different toy projects to play with on there, 4 of which have gone far enough to get a custom domain name.  They are fast to deploy and consistently do so on every `git push` to main.\n\n\n## Zeit\n\nI have recently started playing with zeit again.  I really like their cli tool, its dead simple and makes sense.  I tried the netlify one early on and dont think I really gave it much of a chance. I was able to backup a site we were modifying by saving everything locally (literally control+s) and running `now` in the command line.\n\nWhile I was on the site I realized that when switching to gatsby v2 I had deployed it to now.sh while testing, before cutting over to the updated one on netlify.  It has been building every version since without issue!\n\n> It has been building every version since without issue!\n\n## What I am using\n\n* gatsby\n* forestry.io\n\nI am using gatsby to build my site, and I do use forestry.io as a cms to be able to edit/manage posts online.  I think forestry is part of my problem in that it has added extra builds.  Every time I upload an image or save a post, even a draft, it pushes to production.\n\n\n## Why Switch\n\nThis is just a side hobby for me.  I do not make any $$ off of it, and I do not want to pay for anything I do not have to.  As I am stepping up my blogging I have already hit 50% of my build quota only 1 week into the month on netlify.  I really like what netlify is doing for the JAMstack community, but I would rather build everything locally and push to GHPages for this project than have to pay for it.\n\n## What Are your suggestions\n\nDo you use Zeit?\n\nWhere do you host your gatsby.js site?",
        "long_description": "Netlify I have happily had my personal site waylonwalker.com hosted on netlify for nearly 2 years now. In fact I have hosted about a dozen different toy projects to play with on there, 4 of which have gone far enough to get a custom domain name. Th..."
    },
    {
        "cover": "/static/automate-deploy-frontend-xmas2020.png",
        "title": "automate your deploys",
        "tags": [],
        "status": "false",
        "templateKey": "blog-post",
        "path": "../../src/pages/automate-your-deploys.md",
        "canonical_url": "https://waylonwalker.com/automate-your-deploys",
        "cover_image": "https:waylonwalker.com/automate-deploy-frontend.png",
        "date": "2020-02-07 12:08:00+00:00",
        "description": "",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "",
        "long_description": "..."
    },
    {
        "cover": "/static/fix-styled-components-xmas2020.png",
        "title": "I finally fixed my Styled-Components in gatsby.js",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/fix-styled-components-in-gatsby.md",
        "canonical_url": "https://waylonwalker.com/fix-styled-components-in-gatsby",
        "cover_image": "https:waylonwalker.com/fix-styled-components.png",
        "date": "2020-02-08 15:07:00+00:00",
        "description": "I finally fixed my Styled-Components in gatsby.js",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I am starting a redesign of my website.  I have started cross posting to [dev.to](https://dev.to) more regularly.  With that I have been making more detailed cover images at the recommended `1000x420`.  These images get cut off on my own site, which is a bit ridiculous to have my own content not look right on my own site.  But before we start a heavy redesign I have a small issue that has plagued the site for at least a year!\n\n> I have a small issue that has plagued the site for at least a year!\n\nI have been using styled components in my gatsby.js site for about a year now.  And it has been plagued by styled-components not being in the ssr causing some jank in the styles being loaded.  You can see it in the lighthouse performance report below.  It generally loads super quick, and is only caused on first load.  Anything using the gatsby `<Link/>` component typically is fine and unaffected by the issue.\n\n## The fix\n\nThe fix was so simple it was only 2 lines total. One to install `gatsby-plugin-styled-components` and one to use it.\n\n``` bash\nnpm i gatsby-plugin-styled-components\n```\n\n``` json\nplugins: [\n   'gatsby-plugin-styled-components',\n]\n```\n\n## Before\n\n![](/2020-02-06 15-27-45_Start.png)\n\n## After\n\n![](/2020-02-07 17-20-31_Start.png)\n\n## Why did it take so long to Fix?\n\nThe real issue here was that I really didn't understand the problem as I described it above until I found the fix. It really did seem random that at odd times the styles would seem to vanish.  Sometimes never fully rehydrating at all.  Well actually I had fixed some production sites at work with it, but had no idea why it worked and therefore could not remember how I had fixed it, and google searched yielded no help.\n\n![](/the-moment-i-realized-the-true-problem-1.png)\n\nAfter re-watching Wes Bos's Advanced react course where he describes how to fix this issue for `next.js` sites it became clear that the problem was not random at all.  It was that they do not get statically rendered and are only on the page after react is re-hydrated.  The moment I realized the **true** problem I knew how to google it and quickly found there was a plugin for this.",
        "long_description": "I am starting a redesign of my website. I have started cross posting to dev.to more regularly. With that I have been making more detailed cover images at the recommended 1000x420. These images get cut off on my own site, which is a bit ridiculous..."
    },
    {
        "cover": "/static/serverless-things-to-investigate-xmas2020.png",
        "title": "Serverless things to investigate",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/serverless-things-to-investigate.md",
        "canonical_url": "https://waylonwalker.com/serverless-things-to-investigate",
        "cover_image": "https:waylonwalker.com/serverless-things-to-investigate.png",
        "date": "2020-02-10 15:00:00+00:00",
        "description": "Social Automation Zappier Free only one step is free can take rss to social Automate.io * Form submission https://getf",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## Social Automation\n\n### Zappier\n\n* Free\n* only one step is free\n* can take rss to social\n\n### Automate.io\n\n*\n\n## Form submission\n\n[https://getform.io/forms](https://getform.io/forms \"https://getform.io/forms\")\n\nFree to get started\n\n[https://formkeep.com/pricing](https://formkeep.com/pricing \"https://formkeep.com/pricing\")\n\nFree 7 day trial $4.99 cheapest after",
        "long_description": "Social Automation Zappier Free only one step is free can take rss to social Automate.io * Form submission https://getform.io/forms Free to get started https://formkeep.com/pricing Free 7 day trial $4.99 cheapest after..."
    },
    {
        "cover": "/static/react-headroom-xmas2020.png",
        "title": "I just added react-headroom to my site",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/react-headroom.md",
        "canonical_url": "https://waylonwalker.com/react-headroom",
        "cover_image": "https:waylonwalker.com/react-headroom.png",
        "date": "2020-02-11 12:57:00+00:00",
        "description": "It was so easy to get a professional looking navbar with just 3 lines of code.  This thing is so usable on mobile.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "It was so easy to get a professional looking navbar with just 3 lines of code.  This package seriously is so usable on mobile it is rediculous.  I found this package from [day 4](https://www.gatsbyjs.org/blog/100days/react-component/?utm_campaign=100%20Days%20of%20Gatsby&utm_source=hs_email&utm_medium=email&utm_content=82376619&_hsenc=p2ANqtz-_DBh1A1A-GEy2TujddXq_H1de5wGZ_X6jIqB2wv_PE7QgUk40pfi64jbSVHv-S3bfzKZOQywtoTuup2aeO0o_KpeiF8w&_hsmi=82376619) of the 100 days of gatsby challenge.  It is by the wonderful man who brought us gatsbyjs Kyle Mathews, so you know its gotta be good.\n\n## install react-headroom\n\ninstallation is easy\n\n``` bash\nnpm i react-headroom\n```\n\n## Import Headroom\n\nThere was no instructions for es6 style imports that are common with gatsbyjs sites like mine, but it was intuitive to figure out.\n\n``` js\nimport Headroom from 'react-headroom'\n```\n\n## Using Headroom\n\nSimply wrap your existing content, Nav in my case, with the `<Headroom />` component and your off to the races.  The content will pop back into view when you scroll past then back up.\n\n``` html\n<Headroom>\n   <-- Your content goes here -->\n</Headroom>\n```\n\n## See it in action\n\nI think this simple package completely changes the ux of your site on mobile.  You can get that sticky nav out of the way, but its still right there with just a little bit of a scroll up.\n\n![showing it in action on waylonwalker.com](https://waylonwalker.com/react-headroom-b.gif)\n\n> Here it is on [waylonwalker.com](https://waylonwalker.com)\n\n## Configurable\n\n`react-headroom` is configurable, but I did not find it necessary.  I really like the simplicity that it brought by just adding the `<Headroom\\>` component.\n\n![react-headroom docs](https://waylonwalker.com/react-headroom-docs.png)\n\n## Links\n\nCheck out the relavant links for more details.\n\n**GitHub**: https://github.com/KyleAMathews/react-headroom\n**Demo Site**: https://kyleamathews.github.io/react-headroom/\n**Docs**: https://kyleamathews.github.io/react-headroom/",
        "long_description": "It was so easy to get a professional looking navbar with just 3 lines of code. This package seriously is so usable on mobile it is rediculous. I found this package from day 4 of the 100 days of gatsby challenge. It is by the wonderful man who brou..."
    },
    {
        "cover": "/static/2020-rebrand-xmas2020.png",
        "title": "2020 waylonwalker.com rebrand",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/2020-rebrand.md",
        "canonical_url": "https://waylonwalker.com/2020-rebrand",
        "cover_image": "https:waylonwalker.com/2020-rebrand.png",
        "date": "2020-02-17 13:02:00+00:00",
        "description": "I documented the story of my 2020 waylonwalker.com redesign on my blog.  This post walks through the tools and inspiration for the card design.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Moving into 2020 I have been really leaning on using purple as my theme color everywhere more and more.   Its time for an update to my personal site, not just because it feels plain, not just because the cover art I am using for dev.to doesn't fit my current card layout, but because I feel **inspired** and I **want** to.\n\n## Starting point\n\n![This is what we are working with.](/2020-02-10 12-17-43_Start.png)\n\nThis is what we are working with.  It has been my card design for at least a year now.  Its not bad but, its a bit play, doesnt fit my new cover art style, and that date is not working over top of the cover art text.\n\n* plain\n* cover art does not fit\n* I am not digging the date on cover art that also has text\n\n## Colors\n\nI have been really into using a deep purple lately.  It is a neutral color that does not get enough respect, i.e. it's not used as frequently and kinda stands out when used.\n\n### How I pick colors\n\nI am really bad at picking colors that go well together so for this I punt to utilizing others who have a better eye for this.  I commonly used the [instant-eyedropper](https://instant-eyedropper.com/ \"instant-eyedropper website\") desktop app to pick colors out of my text editor theme or colors that [canva](https://canva.com \"Canva\") recommends.  Really just find soemthing that seems to match up with your taste, goes well with a color that you want to highlight or anything that inspires you.\n\n![](/how-i-pick-colors.gif)\n\n### Tweaking colors\n\nOnce I get a couple of colors working well together its very common that I need to tweak them slightly.  Generally I hold the hue and change only the saturation and lightness.  It would probably make more sense for me to use hsla, but for some reason I always end up with a messy pallet trying to use numbers.  I typically just google color picker and use the one built into google search.  There are probably ones built into vscode now, but I have been doing this for years now.\n\n![](/how-i-adjust-colors.gif)\n\n## Gradient editor\n\nI heavily used [cssgradient.io/](https://cssgradient.io/ \"https://cssgradient.io/\") to tweak in all of the very subtle gradients it was very common for me to put the same color on both sides and slightly pulling the color a bit darker or lighter until I liked the look.\n\n![](/how-i-create-gradients.gif)\n\n### Matching Gradients\n\nI had a couple of places that needed to but up gradients against each other seemlessly.  I am sure there are better ways to do it.  I would likerally take instant eyedropper, get the color right on the border, then plug that into cssgradient.io.\n\n## Progress\n\nSo far I have swapped out my card colors, and some of the text colors.  I also moved the date off of the cover image as I have been putting text on my cover images since starting to cross post to dev.to.  I did not like how they clashed and moved the text.   I also swapped over from gatsby fixed and gatsby fluid to make sure that the cover art always fits the card correctly.\n\n![](/2020-02-15 09-36-31_Start.png)\n\n## Feeling Inspired\n\nHaving gradients everywhere has been becoming very popular again.  Not the heavy highly saturated gradients from 00's presentation software. Gentle barely noticeable gradients, and soft gradients that flow smoothly from one color to the next.  So many splash screens and logos include these now.\n\nI have been really inspired by the **sick** lighting that has been hot on youtube and twitch lately.  As I was gearing up to re-design my cards I saw this post by [@chrisbiscardi](https://twitter.com/chrisbiscardi \"@chrisbiscardi on twitter\") and knew right then that I needed to do a similar lighting effect on my redesign!  This was literally my jumping off point at which I started the re-design.\n\n![](/inspiration-for-new-post-card-2020-Chris-Biscardi.png)\n\n### Shadows\n\nFor this step I did not use any tooling, though I found some that could have been helpful later.  I literally just started stacking up different colors of box shadow, pulling a big blur, shifting them around, and adjusting the color opacity until everything looks just right.  Again I went really subtle here, comparing back to Chris's backdrop I am a bit more subtle than even that.\n\n``` css\nbox-shadow:\n   -8rem -6rem 8rem -6rem rgba(253, 221, 88, .2),\n   4rem 0 8rem rgba(88, 82, 185, .3),\n   .2rem .2rem 1rem rgba(0, 0, 0, .2);\n```\n\n## Complete format\n\n![](/new-post-card-2020.png)\n\n## A few days too late\n\nA few days later I saw this thread of tweets by [@sarah_edo](https://twitter.com/sarah_edo) and [@swyx](https://twitter.com/swyx) and realized that this style is called **neomorphism**.  There are some sweet tools referenced here, check the![](/static/2020-rebrand-1.png)m out if you are going for this design style.\n\n[![](/2020-02-15 11-05-55_Microsoft Text Input Application.png)](https://twitter.com/sarah_edo/status/1227694049118679040?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1227694049118679040&ref_url=http%3A%2F%2F127.0.0.1%3A5500%2Findex.html \"neomorphism.io tweet from Sarah Drasner\")\n\n[![](/2020-02-15 11-06-16_Start.png)](https://twitter.com/swyx/status/1227697956587032576 \"follow up list of resources from Shawn swyx Wang\")\n\n# Tool Links\n\nLinks to all of the tools referenced in this article.\n\n[https://instant-eyedropper.com/](https://instant-eyedropper.com/ \"instant-eyedropper\")\n\n[cssgradient.io/](https://cssgradient.io/ \"https://cssgradient.io/\")\n\n[https://neumorphism.io/](https://neumorphism.io/ \"https://neumorphism.io/\")\n\n[https://github.com/sw-yx/spark-joy/blob/master/README.md#pure-css-tricks](https://github.com/sw-yx/spark-joy/blob/master/README.md#pure-css-tricks \"https://github.com/sw-yx/spark-joy/blob/master/README.md#pure-css-tricks\")\n\n[card.surge.sh](https://t.co/EFSSIiSrFj?amp=1 \"https://card.surge.sh/\")\n\n[brumm.af/shadows](https://t.co/0yyw6wMuGO?amp=1 \"https://brumm.af/shadows\")\n\n[components.ai/box-shadows](https://t.co/tQ9NijDzUI?amp=1 \"https://components.ai/box-shadows\")\n\n\n# Shameless \ud83d\udd0c\n\nI just started a newsletter [Join Here](https://waylonwalker.com/newsletter/ \"https://waylonwalker.com/newsletter/\") and lets start the discussion.  I want to know about my audience and what they want to hear about from me.",
        "long_description": "Moving into 2020 I have been really leaning on using purple as my theme color everywhere more and more. Its time for an update to my personal site, not just because it feels plain, not just because the cover art I am using for dev.to doesn't fit my..."
    },
    {
        "cover": "/static/dev.to-xmas2020.png",
        "title": "Don\u2019t waste your time learning everything",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/don-t-waste-your-time-learning-everything.md",
        "canonical_url": "https://waylonwalker.com/don-t-waste-your-time-learning-everything",
        "cover_image": "https:waylonwalker.com/dev.to.png",
        "date": "2020-02-19 06:00:00+00:00",
        "description": "Stick to what you know, and learn a little bit of something new every day.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "> # \"Don\u2019t waste your time learning everything.\"\n\n![](https://waylonwalker.com/dont-waste-your-time-learning-everythign-post.png)\n\n> Inspired by this [linkedIn post](https://www.linkedin.com/posts/activity-6633818327070326784--Ksl)\n\nI felt that this comment was very powerful. Here are my 2 cents.\n\n## Be Productive\n\nStick to what you know, and learn a little bit of something new every day. If what you know is how to use Excel like a boss, don't fee ashamed that you are missing something. Be proud and use what you know.\n\n## Don't Stagnate\n\nTake small steps enhance what you know now with something new that you get you closer to where you want to be. If you need something that sci-py offers learn how to load in data and use that part. If your sick of waiting for IT to pull data out of the database so you can use it, learn that.\n\n## Dont Overwhelm Yourself\n\nIf you try to drop everything you know now and jump whole hog into these new flashy things its not going to work. Learn what you need to know.  New things crop up very often.  They will come and go.  Some things will get traction, some will never get much traction past an impressive hello world example.\n\n## Keep your finger on new tech\n\nIts important to keep your finger on the state of technology, but dont Overwhelm yourself learning every new thing that comes out.  Make silly hello world examples in these new things and walk away.  When its time to implement something new into a real project you will be ready and understand how to do it.  If that thing dies its good that you didn't waste a lot of time on it, but chances are it inspired the thing that actually takes off.  Then you will have some understanding of what the next thing is doing ahead of everyone else who missed out on the original.\n\n## I'll leave you with this inspirational video by Kitze\n\n[![](https://waylonwalker.com/2020-02-16 09-57-03_Microsoft Text Input Application.png)](https://www.youtube.com/watch?v=_kVxXV0TQ7M)\n\n[Navigating the hype-driven frontend development world without going insane - KITZE](https://www.youtube.com/watch?v=_kVxXV0TQ7M)",
        "long_description": "\"Don\u2019t waste your time learning everything.\" Inspired by this linkedIn post I felt that this comment was very powerful. Here are my 2 cents. Be Productive Stick to what you know, and learn a little bit of something new every day. If what you kno..."
    },
    {
        "cover": "/static/what-is-refactoring-xmas2020.png",
        "title": "What is Refactoring",
        "tags": [],
        "status": "false",
        "templateKey": "blog-post",
        "path": "../../src/pages/what-is-refactoring.md",
        "canonical_url": "https://waylonwalker.com/what-is-refactoring",
        "cover_image": "https:waylonwalker.com/what-is-refactoring.png",
        "date": "2020-02-20 22:06:00+00:00",
        "description": "Make the change easy Make the easy change Martin Fowler When to refactor",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "Make the change easy\n\nMake the easy change\n\nMartin Fowler\n\nWhen to refactor",
        "long_description": "Make the change easy Make the easy change Martin Fowler When to refactor..."
    },
    {
        "cover": "/static/custom-scrollbar-wtih-gatsbyjs.jpg",
        "title": "Custom Scrollbar Design",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/custom-scrollbar-design.md",
        "canonical_url": "https://waylonwalker.com/custom-scrollbar-design",
        "cover_image": "https:waylonwalker.com/custom-scrollbar-wtih-gatsbyjs.jpg",
        "date": "2020-02-21 12:11:00+00:00",
        "description": "Getting a custom scrollbar on your site makes it stand out a bit compared to the very plain stock one that are on most sites.  This is how I set mine up on my gatsby site.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Inspired by Wes Bos's new [uses.tech](https://uses.tech) I wanted a custom scrollbar on my personal site.  I had tried to do it in the past, but gave up after it was not working.\n\n## Looking at the Source\n\nSince [uses.tech](https://uses.tech) is open source I jumped on github, searched for scroll and found this [layout.js](https://github.com/wesbos/awesome-uses/blob/124bdd64345bc64eb84879929f0e57cbb8752e34/src/components/layout.js#L74).\n\n## Copy it to my own component\n\nMy first step was to take his css and copy it into a styled component for my entire layout, but it failed.  I do not fully understand why.  None of the custom style came through at all.  If you know please leave me a comment.\n\n![](https://waylonwalker.com/why-wont-you-work.jpg)\n\nI suspect for some reason it has to do with attatching to the html element inside of a styled-component.  I think wes was able to get around this by using `createGlobalStyle`.  But I was still using much of the default gatsby template, so I did not have a `createGlobalStyle` element, but I did have a layout.css.\n\n## scroll.css\n\nI added `scroll.css` to my static directory, then imported it into `gatsby-browser.js` in order to get it loaded onto the page.\n\n``` css\n /* static/scroll.css */\n\nbody::-webkit-scrollbar {\n    width: 1rem;\n  }\n\n  html {\n    scroll-behavior: smooth;\n    scrollbar-width: thin;\n    scrollbar-color: #5651B7;\n  }\n\n  body::-webkit-scrollbar-track {\n    background: #392E3D;\n  }\n\n  body::-webkit-scrollbar-thumb {\n    background-color: #5651B7 ;\n    border-radius: .5rem;\n    background: rgb(112,107,208);\n    background: linear-gradient(180deg, rgba(112,107,208,1) 0%, rgba(86,81,183,1) 100%);\n    border: 1px solid rgba(86,81,183,.5);\n  }\n```\n\n``` javascript\n// gatsby-browser.js\nimport './static/scroll.css\n```\n\n## It works\n\n It was a bit finicky for me to find the right place to put everything, but this is the final result.  I found out that you can have a gradient on your `scrollbar-thumb`, but the `scrollbar-track` cannot, it also cannot be transparent.  I picked a color that matched my background the best for most use cases, but when the screen gets really narrow a line starts to appear.\n\n![My final result](/static/custom-scrollbar-with-css.gif \"my final result, an example give of the final result live on waylonwalker.com\")\n\n> My final result\n\n## Resources\n\nuses.tech layout.js: [layout.js](https://github.com/wesbos/awesome-uses/blob/124bdd64345bc64eb84879929f0e57cbb8752e34/src/components/layout.js#L74)\n\ncss-trick article: [scrollbar](https://css-tricks.com/almanac/properties/s/scrollbar/ \"css tricks scrollbar article\")",
        "long_description": "Inspired by Wes Bos's new uses.tech I wanted a custom scrollbar on my personal site. I had tried to do it in the past, but gave up after it was not working. Looking at the Source Since uses.tech is open source I jumped on github, searched for scroll..."
    },
    {
        "cover": "/static/productive-one-on-one-xmas2020.png",
        "title": "Productive one on one",
        "tags": [],
        "status": "false",
        "templateKey": "blog-post",
        "path": "../../src/pages/productive-one-on-one.md",
        "canonical_url": "https://waylonwalker.com/productive-one-on-one",
        "cover_image": "https:waylonwalker.com/productive-one-on-one.png",
        "date": "2020-02-24 12:53:00+00:00",
        "description": "Inspired by https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "![](/static/Screenshot_20200221-114202.png)Inspired by [https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones](https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones \"https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones\")",
        "long_description": "Inspired by https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones..."
    },
    {
        "cover": "/static/long-variable-names-are-good-xmas2020.png",
        "title": "Long variable names are good",
        "tags": [],
        "status": "false",
        "templateKey": "blog-post",
        "path": "../../src/pages/long-variable-names-are-good.md",
        "canonical_url": "https://waylonwalker.com/long-variable-names-are-good",
        "cover_image": "https:waylonwalker.com/long-variable-names-are-good.png",
        "date": "2020-02-24 06:00:00+00:00",
        "description": "\ud83c\udff7\ufe0f Long variable names are a good thing. Self documenting code is more important than poorly documented code. Simply a",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "\ud83c\udff7\ufe0f Long variable names are a good thing.  Self documenting code is more important than poorly documented code.  Simply adding a few characters to your variable names can go a long ways.\n\n## Containers are plural\n\n## Aliases are welcome\n\nScope is important",
        "long_description": "\ud83c\udff7\ufe0f Long variable names are a good thing. Self documenting code is more important than poorly documented code. Simply adding a few characters to your variable names can go a long ways. Containers are plural Aliases are welcome Scope is important..."
    },
    {
        "cover": "/static/what-is-kedro-xmas2020.png",
        "title": "What is Kedro",
        "tags": [
            "kedro"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/what-is-kedro.md",
        "canonical_url": "https://waylonwalker.com/what-is-kedro",
        "cover_image": "https:waylonwalker.com/what-is-kedro.png",
        "date": "2020-02-24 12:48:00+00:00",
        "description": "Kedro is an open source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to setup your own python library for data pipelining.  It includes really great ways to manipulate `catalogs` and `pipelines`.  This article will cover the 10K view of kedro, future articles will dive deper into each one.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "[kedro](https://kedro.readthedocs.io) is an open-source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to set up your own python library for data pipelining.  It includes great ways to manipulate `catalogs` and `pipelines`.  This article will cover the 10K view of [kedro](https://kedro.readthedocs.io), future articles will dive deeper into each one.\n\n<!-- {% slideshare DAZrqvJmuUUfFF %} -->\n\n\n## Libraries\n\nCurrently, [kedro](https://kedro.readthedocs.io) is broken down into 3 different libraries.\n\n\ud83d\udc8e [kedro](https://kedro.readthedocs.io)\n\n\ud83d\udcc9 [kedro-viz](https://github.com/quantumblacklabs/kedro-viz)\n\n\ud83c\udfd7 [kedro-docker](https://github.com/quantumblacklabs/kedro-docker)\n\n## [kedro](https://kedro.readthedocs.io)\n\n![kedro logo](https://waylonwalker.com/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e74756d626c61636b6c6162732f6b6564726f2f6d61737465722f696d672f6b6564726f5f62616e6e65722e6a7067.jpg)\n\n\n[kedro](https://kedro.readthedocs.io) is the core of the ecosystem.  It provides the docs, getting started, `kedro new` templates, and the core library including the catalog and pipeline.\n\n### Catalog\n\n![catalogs](https://dev-to-uploads.s3.amazonaws.com/i/trzfj86dbq0ronis26x1.jpg)\n\nInside this core library is a data catalog object.  This allows you to specify attributes about your data, then load and save it without ever writing a single line of read/write code, which can become very cumbersome.  Older versions would load this into the io variable, currently it loads into the catalog.  The power of the catalog is that it allows you to read and write data by just referencing its name.  Typically this is done inside of a YAML file, but can be done in python.\n\nHere is an example of a CSV dataset stored locally\n\n``` yaml\n# Example 1: Loads a local csv file\nbikes:\n  type: CSVLocalDataSet\n  filepath: \"data/01_raw/bikes.csv\"\n```\n\nThis dataset can be loaded by name\n\n``` python\ncatalog.load('bikes')\n```\n\nThough it's not typical practice it is possible to save data to a catalog entry ad-hoc.  Typically the pipeline is used to run functions and save data for you.\n\n``` python\nimport pandas as pd\nbikes_df = pd.DataFrame({...<bikes_data>...})\ncatalog.datasets.bikes.save(bikes_df)\n```\n\n### Pipeline\n\n![building pipelines](https://waylonwalker.com/roman-pentin-T5QT2bmiD4E-unsplash.jpg)\n\nThe pipeline object is the brains of [kedro](https://kedro.readthedocs.io).  When working with [kedro](https://kedro.readthedocs.io) you simply define functions that take in data as arguments, manipulate it, and return a new dataset.  The pipeline will decide what order to execute these functions ini based on their dependencies.  It will then work with the catalog to load the data from the catalog pass it to your function, the save the returned data in the catalog.\n\nHere is an example pipeline from the docs.\n\n``` python\nimport pandas as pd\nimport numpy as np\nfrom kedro.pipeline import Pipeline\nfrom kedro.pipeline import node\n\ndef clean_data(cars: pd.DataFrame,\n               boats: pd.DataFrame) -> Dict[str, pd.DataFrame]:\n    return dict(cars_df=cars.dropna(), boats_df=boats.dropna())\n\ndef halve_dataframe(data: pd.DataFrame) -> List[pd.DataFrame]:\n    return np.array_split(data, 2)\n\nnodes = [\n    node(clean_data,\n         inputs=['cars2017', 'boats2017'],\n         outputs=dict(cars_df='clean_cars2017',\n                      boats_df='clean_boats2017')),\n    node(halve_dataframe,\n         'clean_cars2017',\n         ['train_cars2017', 'test_cars2017']),\n    node(halve_dataframe,\n         dict(data='clean_boats2017'),\n         ['train_boats2017', 'test_boats2017'])\n]\n\npipeline = Pipeline(nodes)\n```\n\n## [kedro-viz](https://github.com/quantumblacklabs/kedro-viz)\n\n[kedro-viz](https://github.com/quantumblacklabs/kedro-viz) is a priceless component to the [kedro](https://kedro.readthedocs.io) ecosystem.  It gives you x-ray vision into your project.  You can see exactly how data flows through your pipeline.  Since it is fully automated it is always up to date and never lies to you.  [kedro-viz](https://github.com/quantumblacklabs/kedro-viz) is an integral part of my daily debugging and refactoring toolbelt.\n\nStarting the viz from the command line is super easy\n\n``` bash\ncd my-kedro-project\nkedro viz\n```\n\n![](https://waylonwalker.com/pipeline_visualisation.png)\n\n## [kedro-docker](https://github.com/quantumblacklabs/kedro-docker)\n\n[kedro-docker](https://github.com/quantumblacklabs/kedro-docker) is a simple way to set up your project for production.  It provides a few simple cli commands\n\n``` bash\ncd my-kedro-project\nkedro docker build\nkedro docker run\n```\n\n## Other resources\n\nThe [kedro docs](https://kedro.readthedocs.io/) have a ton of great resources.  They are searchable, but can be a bit of an overwhelming amount of data.\n\nI keep adding to my [kedro notes](https://waylonwalker.com/notes/kedro/) as I find new and interesting things.\n\nI tweet out most of those snippets as I add them, you can find them all here [#kedrotips](https://twitter.com/search?q=%23kedrotips).\n\n## More to come\n\nI am planning to do more articles like this, you can stay up to date with them by following me on [dev.to](https://dev.to/waylonwalker), subscribing to my [rss feed](https://waylonwalker.com/rss.xml), or subscribe to my [newsletter](https://waylonwalker.com/newsletter)",
        "long_description": "kedro is an open-source data pipeline framework. It provides guardrails to set your project up right from the start without needing to know deeply how to set up your own python library for data pipelining. It includes great ways to manipulate catal..."
    },
    {
        "cover": "/static/do-you-hoist-xmas2020.png",
        "title": "Do You Hoist",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/do-you-hoist.md",
        "canonical_url": "https://waylonwalker.com/do-you-hoist",
        "cover_image": "https:waylonwalker.com/do-you-hoist.png",
        "date": "2020-02-25 12:52:00+00:00",
        "description": "Do you have any use cases that you use hoising?  Why?  It seems like a really cool feature in any language that uses it, but I dont really notice it in use.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I am working through Wes Bos's [beginnerjavascript.com/](https://beginnerjavascript.com/) I just hit module 18 on hoisting.  It's something that I always knew was there, Its not something I typically see used or use myself.\n\n# Do you Hoist?\n\nDo you have any use cases that you use hoising?  Why?  It seems like a really cool feature in any language that uses it, but I dont really notice it in use.\n\n# What is Hoising\n\nThere are many articles that cover this in far more depth, but its the idea that variable declarations and functions are defined before they are executed.  This means that it doesnt matter if you call a function before or after it is defined.\n\n\n# Hoisting\n\n``` javascript\n\nconsole.log(`Hello ${getUser()}`)\n\nfunction getUser() {\n  return 'Waylon'\n}\n```\n\nRunning this code will log out \"Waylon\"\n\n# What about variable hoisting\n\nI am most familiar with python which does not variable hoist so this one kinda confused me at first.  It only hoists the variable declaration not the value of the variable.  It defines whether the variable is going to be `var`, `let`, or `const` and sets it to undefined.\n\n> It only hoists the variable declaration not the value of the variable.\n\n``` javascript\nconsole.log('name: ', name)\nconsole.log('firstName: ', firstName)\n\nconst name = \"Waylon\"\n```\n\nThis code will log out `name: undefined` followed by an `Uncaught ReferenceError: firstName is not defined` since `name` has been decalared and `firstName` has not been decalred.\n\n# I don't Hoist\n\nReally it feels weird to call function definitions before using them.  I really dont have a better reason.  It just feels more natural to do so.\n\n# Is hoisting more readable?\n\nI kinda like the idea of putting the \ud83e\udd69 meat of the file up at the top so that someone reading it will see the good stuff first, then can optionally dig into the weeds if they need to.\n\n# I started a newsletter\n\nI recently started a newsletter, [join in](https://waylonwalker.com/newsletter) and let me know what you want to hear about.",
        "long_description": "I am working through Wes Bos's beginnerjavascript.com/ I just hit module 18 on hoisting. It's something that I always knew was there, Its not something I typically see used or use myself. Do you Hoist? Do you have any use cases that you use hoising?..."
    },
    {
        "cover": "/static/16-xmas2020.png",
        "title": "What is YOUR Advice for New Data Scientists",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/data-scientist-advice.md",
        "canonical_url": "https://waylonwalker.com/data-scientist-advice",
        "cover_image": "https:waylonwalker.com/16.png",
        "date": "2020-02-26 12:55:00+00:00",
        "description": "What is YOUR Advice for New Data Scientists",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "* Learn the business\n* Learn Git\n* Your code does not need to be amazing\n* Keep Learning\n\n# Learn Git\n\nYou dont have to start out as a git wizard with the cleanest possible commit history.  At first dont let yourself get too wrapped up in it, the most important part is that you make commits.  You will find needs for more advanced stuff later.\n\n\n``` bash\ngit add .\ngit commit -m \"FEAT added new function to calculate revenue by product family\"\ngit push\n```\n\nGet comfortable with this, then learn how to `branch`, `rebase`, `stash`, etc...\n\n\n# Your code does not need to be amazing\n\nGet the job done.  Keep it in small bite size pieces.  Make readable function definitions and variable names.  You will thank yourself for naming things well later.  Readability counts more than performance in most cases of data science.  If it gets the job done try not to over worry about things like performance.  A few extra seconds to clean a dataset or build a model is not worth hours of your time.  As you go you will have cases that performance is more critical and you will learn what to do from the start to avoid them.",
        "long_description": "Learn the business Learn Git Your code does not need to be amazing Keep Learning Learn Git You dont have to start out as a git wizard with the cleanest possible commit history. At first dont let yourself get too wrapped up in it, the most importan..."
    },
    {
        "cover": "/static/create-new-kedro-project-xmas2020.png",
        "title": "Create New Kedro Project",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/create-new-kedro-project.md",
        "canonical_url": "https://waylonwalker.com/create-new-kedro-project",
        "cover_image": "https:waylonwalker.com/create-new-kedro-project.png",
        "date": "2020-03-02 12:09:00+00:00",
        "description": "Getting up and going with a brand new [kedro](https://kedro.readthedocs.io) project is super simple, thanks to the help of the `kedro new` command.  The ability to add an example pipeline from the start makes it that much easier to get going and have a template to follow for your own projects.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This is a quickstart to getting a new [kedro](https://kedro.readthedocs.io) pipeline up and running.  After this article you should be able to understand how to get started with [kedro](https://kedro.readthedocs.io).  You can learn more about this [Hello World Example](https://kedro.readthedocs.io/en/stable/02_getting_started/04_hello_world.html) in the [docs](https://kedro.readthedocs.io/en/stable/02_getting_started/04_hello_world.html)\n\n\ud83e\uddf9 Install [Kedro](https://kedro.readthedocs.io)\n\n\ud83d\udee2 Create the Example Pipeline\n\n\ud83d\udca8 Run the example\n\n\ud83d\udcc9 Show the pipeline visualization\n\n## Create a Virtual Environment\n\nI use conda to control my virtual environments and will create a new environment called `kedro_iris` with the following command.  **note** the latest compatible version of python is 3.7.\n\n**EDIT**: as of kedro 0.16.0 kedro supports up to 3.8\n\n``` bash\nconda create -n kedro_iris python=3.8 -y\n```\n\n![](https://waylonwalker.com/conda-create-kedro-iris.gif)\n\nOptions\n\n## Activate your conda environment\n\nI try to keep my base environment as clean as possible.  I have ran into too many issues installing things in the base environment.  Almost always its some dependency that starts causing issues making it even harder to realize where its coming from as I never even installed it in base.\n\n``` bash\nsource activate kedro_iris\n```\n\n## Install [Kedro](https://kedro.readthedocs.io)\n\nCurrently `kedro==0.15.5` is available on pypi and can be pip installed.\n\n**EDIT** kedro is up to [![PyPI version](https://badge.fury.io/py/kedro.svg)](https://pypi.org/project/kedro/)\n\n``` bash\npip install kedro\n```\n\n## Make sure you are in the directory that you want your project in\n\n``` bash\ncd /mnt/c/temp\n```\n\n## Create a new [Kedro](https://kedro.readthedocs.io) project\n\n``` bash\nkedro new\ncd kedro-iris\ngit init\nkedro install\n```\n\n![](https://waylonwalker.com/kedro-new-iris.gif)\n\n## Run the pipeline\n\nThis will tell kedro to run your pipeline.  It will look at all of your nodes and determine the correct execution order for you, then run each one of them.  You can do this from a python script, python terminal session, or from the [kedro](https://kedro.readthedocs.io) cli.\n\n> \u2728 It will look at all of your nodes and determine the correct execution order for you\n\nLets run from the cli while in the same directory as kedro-iris\n\n``` bash\nkedro run\n```\n\n![](https://waylonwalker.com/kedro-new-iris.gif)\n\n## Viz\n\n[kedro-viz](https://github.com/quantumblacklabs/kedro-viz) is a priceless feature of [kedro](https://kedro.readthedocs.io).  It's like x-ray vision into your pipeline.  I can't imagine working without it after having it over the past year.  Unlike traditional documentation [kedro-viz](https://github.com/quantumblacklabs/kedro-viz) cannot lie to you.  It will help guarantee your changes line up properly, plan out adding nodes, and identify dependencies of deprecating nodes.\n\n> Unlike traditional documentation [kedro-viz](https://github.com/quantumblacklabs/kedro-viz) cannot lie to you.\n\n## Install [kedro-viz](https://github.com/quantumblacklabs/kedro-viz)\n\n[kedro-viz](https://github.com/quantumblacklabs/kedro-viz) is also on pypi and can be installed just like any other python package with `pip`.\n\n```bash\npip install kedro-viz\n```\n\n## Visualize the pipeline\n\n[kedro-viz](https://github.com/quantumblacklabs/kedro-viz) is ran from the command line in the same directory as your kedro project.  There are ways to store your pipeline data as json, then load them from outside your project, but we will follow the standard practice for now.\n\n``` bash\nkedro viz\n```\n\n![](https://waylonwalker.com/kedro-viz-iris.gif)\n\n## \ud83c\udfd7 Docker\n\nThere is another package that makes creating docker images from kedro projects super simple [kedro-docker](https://github.com/quantumblacklabs/kedro-docker).\n\nIf you dont already have docker installed on your machine, feel free to skip this section.\n\n### install [kedro-docker](https://github.com/quantumblacklabs/kedro-docker)\n\n``` bash\npip install kedro-docker\n```\n\n### build the image\n\n``` bash\nkedro docker build\n```\n\n### run the image\n\n``` bash\nkedro docker run\n```\n\n## Simple Huh\n\nGetting up and going with a brand new [kedro](https://kedro.readthedocs.io) project is super simple, thanks to the help of the `kedro new` command.  The ability to add an example pipeline from the start makes it that much easier to get going and have a template to follow for your own projects.\n\n## Recap\n\n``` bash\nconda create -n kedro_iris python=3.7 -y\nsource activate kedro_iris\npip install kedro\ncd /mnt/c/temp\nkedro new\n# give it a project name Kedro Iris\n# accept default package name kedro_iris\n# addept default directory name kedro-iris\n# yes for an example pipeline\ncd kedro-iris\ngit init\ngit add .\ngit commit -m \"initialized new kedro project\"\nkedro install\nkedro run\npip install kedro-viz\nkedro viz\npip install kedro-docker\nkedro docker build\nkedro docker run\n```\n\n## Other resources\n\nThe [kedro docs](https://kedro.readthedocs.io/) have a ton of great resources.  They are searchable, but can be a bit of an overwhelming amount of data.\n\nI keep adding to my [kedro notes](https://waylonwalker.com/notes/kedro/) as I find new and interesting things.\n\nI tweet out most of those snippets as I add them, you can find them all here [#kedrotips](https://twitter.com/search?q=%23kedrotips).\n\n## More to come\n\nI am planning to do more articles like this, you can stay up to date with them by following me on [dev.to](https://dev.to/waylonwalker), subscribing to my [rss feed](https://waylonwalker.com/rss.xml), or subscribe to my [newsletter](https://waylonwalker.com/newsletter)",
        "long_description": "This is a quickstart to getting a new kedro pipeline up and running. After this article you should be able to understand how to get started with kedro. You can learn more about this Hello World Example in the docs \ud83e\uddf9 Install Kedro \ud83d\udee2 Create the Examp..."
    },
    {
        "cover": "/static/git-diff-branches-xmas2020.png",
        "title": "Today I learned `git diff feature..main`",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-diff-branches.md",
        "canonical_url": "https://waylonwalker.com/git-diff-branches",
        "cover_image": "https:waylonwalker.com/git-diff-branches.png",
        "date": "2020-03-03 11:58:00+00:00",
        "description": "Sometimes we get a little `git add . && git commit -m \"WIP\"` happy and mistakenly commit something that we just cant figure out.  This is a good way to figure out what the heck has changed on the current branch compared to any other branch.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Today I learned how to diff between two branches.\n\n```\ngit diff feature..main\n```\n\nSometimes we get a little `git add . && git commit -m \"WIP\"` happy and mistakenly commit something that we just can't figure out. This is a good way to figure out what the heck has changed on the current branch compared to any other branch.\n\n## Example\n\nLet's create a new directory, initialize git and toss some content into a readme.\n\n``` bash\nmkdir git-diff\ngit init\necho \"hello there\" > readme.md\ngit add . && git commit -m \"hello there\"\ncat readme.md\n```\n\nAfter all of that, we have a git repository on our local machine with a single file `readme.md` that contains the following.\n\n``` bash\nhello there\n```\n\n##  Create a branch and \u270d edit\n\nLet's checkout a new branch called Waylon and change the word `there` to `Waylon` in our `readme.md` file, then diff it.\n\n``` bash\ngit checkout -b Waylon\necho \"hello Waylon\" > readme.md\ngit add . && git commit -m \"hello Waylon\"\ngit diff\n```\n\n``` diff\n- hello there\n+ hello waylon\n```\n\nAt this point we have one commit.  Things are really straightforward, and our diff will be the same between the last commit and the main branch since.  Let's make another commit by adding the date.\n\n``` bash\necho \"hello waylon\\n\\n$(date)\" > readme.md\ncat readme.md\ngit diff\n```\n\n``` diff\nhello Waylon\n+\n+ Fri 13 Mar 2020 04:23:21 PM DST\n```\n\ud83d\udc46 At this point, our diff doesn't tell us the whole story between our current state and main, only between our current state and our last commit.  Let's commit our changes and compare our branch to main.\n\n``` bash\ngit add . && git commit -m \"add date\"\ngit diff main..waylon\n```\n\n``` diff\n- hello there\n+ hello Waylon\n+\n+ Fri 13 Mar 2020 03:43:21 PM DST\n```\n\n## Git is powerful\n\nI learn small tricks like this often with git.  Many times I forget about it and have to come back to re-learn. Sharing my thoughts gives me a better chance of remembering.",
        "long_description": "Today I learned how to diff between two branches. git diff feature..main Sometimes we get a little git add . && git commit -m \"WIP\" happy and mistakenly commit something that we just can't figure out. This is a good way to figure out what the heck ha..."
    },
    {
        "cover": "/static/practice-your-craft-xmas2020.png",
        "title": "Practice your craft",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/practice-your-craft.md",
        "canonical_url": "https://waylonwalker.com/practice-your-craft",
        "cover_image": "https:waylonwalker.com/practice-your-craft.png",
        "date": "2020-03-04 06:00:00+00:00",
        "description": "Show up For Practice how I practice What Works for You",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "## Show up For Practice\n\n## how I practice\n\n## What Works for You",
        "long_description": "Show up For Practice how I practice What Works for You..."
    },
    {
        "cover": "/static/what-are-github-actions-xmas2020.png",
        "title": "What Are GitHub Actions",
        "tags": [
            "actions"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/what-are-github-actions.md",
        "canonical_url": "https://waylonwalker.com/what-are-github-actions",
        "cover_image": "https:waylonwalker.com/what-are-github-actions.png",
        "date": "2020-03-16 05:00:00+00:00",
        "description": "GitHub actions are an amazing tool that allows us to run code based on triggers inside of our repo.  Their is a large and growing community of actions inside the marketplace to use with very little effort.  Best of all they are free for public repositories, and private repos have a very generous free tier.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "<style>\nh2 img { width: 100%; box-shadow: .5rem .5rem 3rem #141F2D, -.5rem -.5rem 3rem rgba(255,255,255,.1);}\nimg{ max-width: 100% !important;}\n</style>\n\nI have been diving deep into Github actions for about a month now and they are wicked good!  They allow you to run any sort of arbitrary code based on events in your repo, webhooks, or schedules.  They are very reasonably priced.  The interface that GitHub hs developed for them is top-notch!  It's so good I have done 90% of my editing of them right from github.com.\n\n## TLDR\n\n> some interaction to your repository **triggers** code to run.\n\n\n## ![Online Editor](https://waylonwalker.com/gh-actions-header-online-editor.png)\n\n\nThe online editor for actions is pretty amazing.  When creating a new workflow it automatically sets up a new blank workflow or a workflow from the marketplace for you in your `.github/workflows` directory.  This is all it takes to get an action running, a `yaml` or `yml` file in the `.github/workflows` directory.\n\n\n![github actions online editor](https://waylonwalker.com/gh-actions-editor.png \"github actions online editor\")\n\nThe editor does a great job of detecting syntax errors, misplaced keys.  It also does a great job at autocompletion.  As you type it will suggest keys that are accepted by the workflow syntax.  There is an embedded side pannel with docs and the marketplace to the right.\n\n\n## ![Event Triggering](https://waylonwalker.com/gh-actions-header-event-triggering.png)\n\n\nsee this article from GitHub for a full set of details: [https://help.github.com/en/actions/reference/events-that-trigger-workflows](https://help.github.com/en/actions/reference/events-that-trigger-workflows \"https://help.github.com/en/actions/reference/events-that-trigger-workflows\")\n\nYou can trigger actions to run based on about any interaction with the repo that you can imagine, push, PR, webhooks, follows, create a branch, delete a branch, deployment, fork, wiki, issues, comments, labels, milestones, just check out the GitHub article for the full list.\n\n\n### ![push/pr](https://waylonwalker.com/gh-actions-header-push-pr.png)\n\nThe most common and default trigger you will come across is the `on push`.  This means that on every push/pull_request the given action will run.  This is typically at the start of the file and will trigger the workflow for the whole file.\n\n``` yaml\n# Trigger the workflow on push or pull request\non: [push, pull_request]\n```\n\nYou can also filter to only run on specific branches.  You probably only want to run your release workflow on the main branch, but want linting and testing on all branches.\n\n``` yaml\npush:\n  branches:\n   - main\npull_request:\n  branches:\n    - main\n\n```\n### ![schedule](https://waylonwalker.com/gh-actions-header-schedule.png)\n\nIt is also possible to set up your workflows to run on a schedule.  I have set a few of these up myself to do things such as updating/auditing npm dependencies and checking if the site is up.\n\n``` yaml\non:\n  schedule:\n    # * is a special character in YAML so you have to quote this string\n    - cron:  '*/15 * * * *'\n```\n\n### ![watch](https://waylonwalker.com/gh-actions-header-watch.png)\n\nOne issue that I have with GitHub actions is that there really isn't a good way to manually run workflows.  A workaround I found is that you can run a workflow when the repo is starred.\n\n``` yaml\non:\n  watch:\n    types: [ started ]\n```\n\nIf you have a public repo with some traction, you might want to avoid this hack, but if you did want to use it on a repo that may potentially get some stars randomly make sure that you filter to only your stars.\n\n``` yaml\non:\n  watch:\n    types: [ started ]\n\njobs:\n  run-on-star:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2728 you starred your own repo\n        if: github.actor == 'WaylonWalker'\n```\n\n\n## ![Free for public repositories](https://waylonwalker.com/gh-actions-header-free.png)\n\nGitHub offers quite a generous free tier to get you started.\n\n![gh-actions-free-tier](https://waylonwalker.com/gh-actions-free-tier.png \"github actions free tier\")\n\nI think that GitHub's pricing just shows its commitment to the open-source.  Any public repo has unlimited build minutes!  I believe this goes for not only Linux actions, but  the more expensive windows and mac actions as well.\n\n![github actions free for public repos](https://waylonwalker.com/gh-actions-free--for-public.png \"GitHub actions free for public repos\")\n\n\n## ![Secrets](https://waylonwalker.com/gh-actions-header-secrets.png)\n\nYou will find that a lot of actions need things such as a GitHub personal access token.  You may even be hitting a third party API such as twitter or Gmail that require an API key.  These are things that need to be kept secret **DO NOT** put these as raw text inside your action.  The first tutorial I followed to deploy to GitHub pages did this \ud83e\udd26\u200d\u2642\ufe0f and I followed.\n\n\n![github built-in secret store](https://waylonwalker.com/gh-actions-built-in-secret-store.png \"GitHub built-in secret store\")\n\nGitHub offers a wonderful secrets manager.  From your repository go to settings > secrets.  You can just add settings/secrets to the URL of your repo to get there as well.  From there add a new secret.  Now your secret is accessible by secret key using `${{ secrets.<your-key> }}` from anywhere in your workflows `yml` file.\n\nGitHub has done an amazing job at hiding these secrets.  Anywhere that I have seen try to echo these secrets out into the console or anywhere just shows ***.  I am not sure if you can 100% rely on this, but they appear to have done a good job with it.\n\n## ![Live Logs](https://waylonwalker.com/gh-actions-header-live-logs.png)\n\nOne great feature of actions is the live logs.  As you are developing them it is likely that you are anxiously watching them with anticipation.  Watching those logs go, and turn green is a great experience.\n\n![github actions live logs](https://waylonwalker.com/gh-actions-live-logs.png \"github actions live logs\")\n\n\n\n## ![Marketplace](https://waylonwalker.com/gh-actions-header-marketplace.png)\n\nAs with all things open source, much of the power of actions comes through the community and in actions case the marketplace.  Reusable actions can be deployed to the github marketplace.  Here they can be found from search, starred, and example workflows can be copied in one click.\n\n![github actions marketplace](https://waylonwalker.com/gh-actions-marketplace.png \"github actions marketplace\")\n\nI find that many times while I can write all of the code necessary in a shell script to do most of what I need, there is already an action in the marketplace that takes care of everything for me.  In fact there are usually several to choose from.\n\n\n\n# #Discuss\n\n* What Actions are you excited about?\n* Are you using actions today?\n* What struggles have you encountered with actions?\n* Do you like these silly image headers I used? Do they kill A11y? I attempted to use good alt text to counter.",
        "long_description": "I have been diving deep into Github actions for about a month now and they are wicked good! They allow you to run any sort of arbitrary code based on events in your repo, webhooks, or schedules. They are very reasonably priced. The interface that..."
    },
    {
        "cover": "/static/github-actions-syntax-xmas2020.png",
        "title": "GitHub Actions Syntax",
        "tags": [
            "actions"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/github-actions-syntax.md",
        "canonical_url": "https://waylonwalker.com/github-actions-syntax",
        "cover_image": "https:waylonwalker.com/github-actions-syntax.png",
        "date": "2020-03-16 05:00:00+00:00",
        "description": "GitHub actions use YAML to configure your workflows.  What gets ran, When it runs, What it runs on.  Let's discuss YAML and the structure needed for GitHub actions.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "<style>\nh2 img { width: 100%; box-shadow: .5rem .5rem 3rem #141F2D, -.5rem -.5rem 3rem rgba(255,255,255,.1);}\nimg{ max-width: 100% !important;}\n</style>\n\nGithub actions are written in configuration files using the YAML syntax.  YAML is a superset of JSON.  Most YAML can be expressed inline with JSON syntax.  Similar to python YAML is whitespace driven by whitespace rather than brackets tags.  The argument for using YAML for configuration files such as actions is that it is more human-readable and editable.  It's much easier to see the whitespace layout than it is to get closing brackets correct.  For actions, I believe this is mostly true.  I don't see any use case to get past 3-5 indents, which is completely manageable.\n\n> Can I just say that I learned more than I realized about YAML by writing this article\n\n## ![Arrays and Objects](https://waylonwalker.com/gh-actions-syntax-headers/1.png)\n\nIn YAML or JSON, the most basic containers for data are **arrays**, a 1D list of things, and **objects**, for key-value pairs.\n\n### ![Arrays](https://waylonwalker.com/gh-actions-syntax-h3/1.png)\n\nThe start of an array container is signified with a leading `-`.  This is probably one of the big things I didn't understand about YAML before writing this post, but hats off to the GitHub actions editor as it took care of a lot of my misunderstanding for me.\n\n``` YAML\n- one\n- two\n- three\n```\n\n``` json\n['one', 'two', 'three']\n```\n\n\n### ![Objects](https://waylonwalker.com/gh-actions-syntax-h3/2.png)\n\nObjects are just `{key: \"value\"}` pairs without any `-` before them.  I find that objects make \ud83d\udcaf sense to me.  Unlike arrays, they feel very intuitive.\n\n\n``` YAML\nname: one\nwho: me\n```\n\n``` json\n{'name': 'one', 'who': 'me'}\n```\n\n## ![Example Combining arrays and objects](https://waylonwalker.com/gh-actions-syntax-headers/2.png)\n\n\n\nLet's start writing something that looks a bit more like a GitHub action.  GitHub actions are built from an object containing name, on, jobs.  Where jobs is a list of jobs, that contain a list of steps.  Simple actions will only need a single job, but commonly a list of steps.\n\n#### ![Shortlist of GitHub action keys](https://waylonwalker.com/gh-actions-syntax-h3/4.png)\n\nThese are the keys, with their parents, that I found most useful.  You can find a complete list on [workflow-syntax-for-github-actions](https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions).\n\n* name\n* on\n\t* push\n    * pull_request\n    * schedule\n    * watch\n* env\n* jobs\n\t* name\n    * needs\n    * env\n    * if\n    * steps\n\n### ![Combining arrays and objects](https://waylonwalker.com/gh-actions-syntax-h3/5.png)\n\n\nHere is a very small example that contains an object with one key, `jobs`.  That `jobs` object contains one job called `build` that contains a list of `steps`.  Notice the `-` before each step, and how each `step` repeats the same object keys.\n\n```yaml\njobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n        - name: step-one\n          uses: checkout\n        - name: step-two\n          uses: test\n        - name: step-three\n          uses: package\n```\n``` json\n{\n  \"jobs\": {\n    \"build\": {\n      \"runs-on\": \"ubuntu-latest\",\n      \"steps\": [\n        {\n          \"name\": \"step-one\",\n          \"uses\": \"checkout\"\n        },\n        {\n          \"name\": \"step-two\",\n          \"uses\": \"test\"\n        },\n        {\n          \"name\": \"step-three\",\n          \"uses\": \"package\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n## ![Multiline Strings](https://waylonwalker.com/gh-actions-syntax-headers/3.png)\n\n\nMultiline strings are super important in GitHub actions.  You will likely use the `|` to preserve newlines for shell scripts most commonly but may also have some raw text fields that need to be concatenated without a newline character using the `>` operator.\n\n* | preserves newlines\n* > folds newlines\n\n``` YAML\npreserved: |\n    cd my-dir\n    ls\n    mv public ../\nfolded: >\n    This is some long text\n    that I do not want on\n    one line, but it is\n    really a one-liner\n```\n\n``` JSON\n{\n    \"preserved\": \"cd my-dir\\nls\\nmv public ../\\n\",\n    \"folded\": \"This is some long text that I do not want on one line, but it is  really\n   a one-liner\"\n}\n```\n## ![Anchors are not supported](https://waylonwalker.com/gh-actions-syntax-headers/4.png)\n\n\nYAML has this amazing feature for reducing repetative content called anchors.  You can save part of your configuration as a reusable variable in other sections.  I see this being really cool if you had separate jobs that all needed similar steps.  Look for this improvement in the future, for now just be aware that it is part of the YAML syntax.\n\nSee support ticket \ud83d\udc49 [Support-for-YAML-anchors](https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/m-p/30336)\n\n``` YAML\nsecrets: &secrets\n    github-pat: ${{ gh-pat }}\n    gmail-pass: ${{ gmail-pass }}\n\njobs:\n    build:\n        - name: step-one\n          uses: checkout\n          <<: *secrets\n        - name: step-two\n          uses: test\n          <<: *secrets\n        - name: step-three\n          uses: package\n          <<: *secrets\n```\n\nNotice how the nice clean YAML syntax gets exploded with much more data in the JSON format.\n\n``` json\n{\n    \"secrets\": {\n        \"github-pat\": \"${{ gh-pat }}\",\n        \"gmail-pass\": \"${{ gmail-pass }}\"\n    },\n    \"jobs\": {\n        \"build\": [\n            {\n                \"github-pat\": \"${{ gh-pat }}\",\n                \"gmail-pass\": \"${{ gmail-pass }}\",\n                \"name\": \"step-one\",\n                \"uses\": \"checkout\"\n            },\n            {\n                \"github-pat\": \"${{ gh-pat }}\",\n                \"gmail-pass\": \"${{ gmail-pass }}\",\n                \"name\": \"step-two\",\n                \"uses\": \"test\"\n            },\n            {\n                \"github-pat\": \"${{ gh-pat }}\",\n                \"gmail-pass\": \"${{ gmail-pass }}\",\n                \"name\": \"step-three\",\n                \"uses\": \"package\"\n            }\n        ]\n    }\n}\n```\n\n## ![Writing an Action](https://waylonwalker.com/gh-actions-syntax-headers/5.png)\n\n\nWith a basic understanding of YAML you can probably go to your repo and click actions > new workflow > setup my own workflow right from the ui, and create your own.  Or read through the official syntax docs for deeper information [workflow-syntax-for-github-actions](https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions). Let's finsh off with a really simple action, the default one from GitHub.\n\n### ![Important first step](https://waylonwalker.com/gh-actions-syntax-h3/6.png)\n\nIt is important to know that when running an action you will likely need access to your code in order to lint, test, build, package, whatever you want to do with it.  Your first step for any action requiring code from your repo is to `checkout` your repo.\n\n```yaml\n steps:\n # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n - uses: actions/checkout@v\n```\n### ![Default example](https://waylonwalker.com/gh-actions-syntax-h3/7.png)\n\nThis example runs a workflow called `CI` on ubuntu on every push or PR to the main branch.  Within the build job it does a checkout of the repo, then runs two shell steps.\n\n``` YAML\n# This is a basic workflow to help you get started with Actions\n\nname: CI\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the main branch\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n    - uses: actions/checkout@v2\n\n    # Runs a single command using the runners shell\n    - name: Run a one-line script\n      run: echo Hello, world!\n\n    # Runs a set of commands using the runners shell\n    - name: Run a multi-line script\n      run: |\n        echo Add other actions to build,\n        echo test, and deploy your project.\n\n```",
        "long_description": "Github actions are written in configuration files using the YAML syntax. YAML is a superset of JSON. Most YAML can be expressed inline with JSON syntax. Similar to python YAML is whitespace driven by whitespace rather than brackets tags. The arg..."
    },
    {
        "cover": "/static/send-email-with-github-actions-xmas2020.png",
        "title": "Send Emails with GitHub Actions",
        "tags": [
            "actions"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/send-email-with-github-actions.md",
        "canonical_url": "https://waylonwalker.com/send-email-with-github-actions",
        "cover_image": "https:waylonwalker.com/send-email-with-github-actions.png",
        "date": "2020-03-31 03:39:00+00:00",
        "description": "One useful action that you can utilize no matter what content your repo has is sending email.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Here is one useful thing that you can do with GitHub actions no matter what language you use, send email.  You might want to know right away when your ci passes.  You might want to give your team a nice pat on the back when a new release is deployed.  There might be subscribers wanting to see the latest release notes in their inbox as soon as the latest version is deployed.  Whatever it is, its pretty easy to do with an action right out of the actions marketplace.\n\n## Mail on Star\n\nHere is a silly example that sends an email to yourself anytime someone stars your repo.\n\n``` yaml\nname: Mail on Star\n\non:\n  watch:\n    types: [ started ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"email\"\n  email:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: \u2728 Send email, you star\n        uses: dawidd6/action-send-mail@v1.3.0\n        with:\n          server_address: smtp.gmail.com\n          server_port: 465\n          username: quadmx08\n          password: ${{ secrets.GMAIL_PASS }}\n          subject: Your a star \u2728\n          body: ${{ github.actor }} just starred your mail-on-star repo!!! ${{ github.repository }}\n          to: ${{ secrets.GMAIL_ADDRESS }}\n          from: ${{ secrets.GMAIL_ADDRESS }}\n```",
        "long_description": "Here is one useful thing that you can do with GitHub actions no matter what language you use, send email. You might want to know right away when your ci passes. You might want to give your team a nice pat on the back when a new release is deployed...."
    },
    {
        "cover": "/static/career questions for data folks (2)-xmas2020.png",
        "title": "Variables names don't need their type",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/variable-names-don-t-need-their-type.md",
        "canonical_url": "https://waylonwalker.com/variable-names-don-t-need-their-type",
        "cover_image": "https:waylonwalker.com/career questions for data folks (2).png",
        "date": "2020-04-08 11:03:00+00:00",
        "description": "So often I see a variables `type()` inside of its name and it hurts me a little inside.  Tell me I'm right or prove me wrong below.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "So often I see a variables `type()` inside of its name and it hurts me a little inside.  Tell me I'm right or prove me wrong below.\n\n## Examples\n\nPandas `DataFrames` are probably the worst offender that I see\n\n``` python\n# bad\nsales_df = get_sales()\n\n# good\nsales = get_sales()\n```\n\nSometimes vanilla structures too!\n\n``` python\n# bad\nitems_list = ['sneakers', 'pencils', 'paper', ]\n\n# good\nitems = ['sneakers', 'pencils', 'paper', ]\n```\n\n## Edge Cases?\n\nIt's so common when you need to get inside a data structure in a special way that itsn't provided by the library.... I am not exactly sure of a good way around it.\n\n``` python\n# bad ??\nsales = get_sales()\nsales_dict = sales.to_dict()\n\n# good\n\ud83e\udd37\u200d\u2640\ufe0f\n```\n\n## Containers are plural\n\nAlways name your containers plural, so that naming while iterating is simple.\n\n``` python\nprices = {}\nitems = ['sneakers', 'pencils', 'paper', ]\nfor item in items:\n   prices[item] = get_price(item)\n```\n\nBefore I start fights \ud83e\udd4a in code review, am I inline here or just being pedantic?",
        "long_description": "So often I see a variables type() inside of its name and it hurts me a little inside. Tell me I'm right or prove me wrong below. Examples Pandas DataFrames are probably the worst offender that I see ``` python bad sales_df = get_sales() good sales =..."
    },
    {
        "cover": "/static/four-github-actions-python-xmas2020.png",
        "title": "Four Github Actions for Python",
        "tags": [
            "actions"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/four-github-actions-python.md",
        "canonical_url": "https://waylonwalker.com/four-github-actions-python",
        "cover_image": "https:waylonwalker.com/four-github-actions-python.png",
        "date": "2020-04-13 06:23:00+00:00",
        "description": "If you are developing python packages and using GitHub here are four actions that you can use today to automate your release workflow.  Since python tools generally have such a simple cli I have opted to use the cli for most of these, that way I know exactly what is happening and have more control over it if I need.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "<style>\nh2 img { width: 100%; box-shadow: .5rem .5rem 3rem #141F2D, -.5rem -.5rem 3rem rgba(255,255,255,.1);}\nimg{ max-width: 100% !important;}\n</style>\n\nIf you are developing python packages and using GitHub here are four actions that you can use today to automate your release workflow.  Since python tools generally have such a simple cli I have opted to use the cli for most of these, that way I know exactly what is happening and have more control over it if I need.\n\n* Lint\n* Test\n* Package\n* Upload to PyPi\n\n## ![Lint With flake8](https://waylonwalker.com/gh-actions-python-headers/1.png)\n\nflake8 is pythons quintessential linting tool to ensure that your code is up to the standards that you have set for the project, and to help prevent hidden bugs.  I am a heavy user of `black` and `isort` as well, but for ci flake8 is typically considered the gold standard. `black` and `isort` will help you automate many fixes suggested by flake8.\n\n``` yaml\n    - name: Lint with flake8\n      run: |\n        pip install flake8 isort black\n        # stop the build if there are Python syntax errors or undefined names\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n```\n\n## ![Testing with pytest](https://waylonwalker.com/gh-actions-python-headers/2.png)\n\npytest is such an amazing project, definitely one to check out and start using if you are not already doing so.\n\n``` yaml\n    - name: Test with pytest\n      run: |\n         pip install pytest\n         pytest\n```\n\n## ![Building with setuptools](https://waylonwalker.com/gh-actions-python-headers/3.png)\n\nI am still using the older, less hipster, setuptools to build my projects.  Primarily because I am used to to, partly because things such as editable installs are not possible with the newer build tools, and I am a **HEAVY** user of editable installs.\n\n```\n    - name: build\n      run: |\n        pip install wheel\n        python setup.py sdist bdist_wheel\n```\n\n## ![Publishing to pypi](https://waylonwalker.com/gh-actions-python-headers/4.png)\n\nHere I am going to use an amazing action from the GitHub marketplace by @webKnjaZ.  It is super simple.  First you need to log into your [pypi.org](https://pypi.org) account, go to account settings, enable 2FA, and add a Token, then paste that toke into a secret inside your repos settings.  Next just drop the name of that secret into the password field of the action and you are off.\n\n**note**: I did put a check in to make sure that push event comes from main.\n\n\n``` yaml\n    - name: pypi-publish\n      if: github.ref == 'refs/heads/main'\n      uses: pypa/gh-action-pypi-publish@v1.1.0\n      with:\n        # PyPI user\n        # Password for your PyPI user or an access token\n        password: ${{ secrets.pypi_password }}\n        # The repository URL to use\n        # repository_url: # optional\n        # The target directory for distribution\n        # packages_dir: # optional, default is dist\n```\n\n\n## That's my four top python actions\n\nThese are the easiest and most basic four actions that every python project on GitHub should have.  Now that actions are available for free on any public repo there is no reason not to use GitHub Actions for any new project.",
        "long_description": "If you are developing python packages and using GitHub here are four actions that you can use today to automate your release workflow. Since python tools generally have such a simple cli I have opted to use the cli for most of these, that way I kno..."
    },
    {
        "cover": "/static/python-deepwatch-xmas2020.png",
        "title": "python-deepwatch",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/python-deepwatch.md",
        "canonical_url": "https://waylonwalker.com/python-deepwatch",
        "cover_image": "https:waylonwalker.com/python-deepwatch.png",
        "date": "2020-04-27 05:00:00+00:00",
        "description": "Is it possible to deep watch a single python function for changes? Shallow Watch keeping track of a python functions has",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Is it possible to deep watch a single python function for changes?\n\n## Shallow Watch\n\nkeeping track of a python functions hash is quite simple.  There is a`__hash__` method attached to every python function.  Calling it will return a hash of the function. If the function changes the hash will change.\n\n``` python\n[ins] In [1]: def test():\n         ...:     return \"hello\"\n\n[ins] In [2]: test.__hash__()\nOut[2]: 8760526380347\n\n[ins] In [3]: test.__hash__()\nOut[3]: 8760526380347\n\n[ins] In [4]: def test():\n         ...:     return \"hello world\"\n\n[ins] In [5]: test.__hash__()\nOut[5]: 8760525617988\n\n[ins] In [6]: def test():\n         ...:     return \"hello\"\n\n[ins] In [7]: test.__hash__()\nOut[7]: 8760526380491\n```\n\nUsing hashlib provides a consistent hash.\n\n``` python\nimport inspect\nimport hashlib\ndef test():\n\treturn \"hello\"\n\n[ins] In [17]: m.update(inspect.getsource(test).encode())\n\n[ins] In [18]: m\nOut[18]: <sha256 HASH object @ 0x7f7b7b70fde0>\n\n[ins] In [19]: m.hexdigest()\nOut[19]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'\n\n[ins] In [20]: m.update(inspect.getsource(test).encode())\n\n[ins] In [21]: m.hexdigest()\nOut[21]: '93638f2c944f34a9069af9242657b7de556fcc63742f4c27c4c8deedeb976a5f'\n\n[ins] In [22]: m = hashlib.sha256()\n\n[ins] In [23]: m.update(inspect.getsource(test).encode())\n\n[ins] In [24]: m.update(inspect.getsource(test).encode())\n\n[ins] In [25]: m = hashlib.sha256()\n\n[ins] In [26]: m.update(inspect.getsource(test).encode())\n\n[ins] In [27]: m.hexdigest()\nOut[27]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'\n\n[ins] In [28]: def test():\n          ...:     return \"hello world\"\n\n[ins] In [29]: m = hashlib.sha256()\n\n[ins] In [30]: m.update(inspect.getsource(test).encode())\n\n[ins] In [31]: m.hexdigest()\nOut[31]: '121fa3a3f295d49d4609505bc5e96d8b6a8ed3b496e4f3dc6c0ead73bef4e3c7'\n\n[ins] In [32]: def test():\n          ...:     return \"hello\"\n\n[ins] In [33]: m = hashlib.sha256()\n\n[ins] In [34]: m.update(inspect.getsource(test).encode())\n\n[ins] In [35]: m.hexdigest()\nOut[35]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'\n```\nNow we have a consistent way to hash function code.\n\n## Deep hashing\n\n\n### Find dependencies\n\nsetup a function in a module with a dependency\n``` python\n       \u2502 File: one.py\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1   \u2502 def one():\n   2   \u2502     return 1\n   3   \u2502\n   4   \u2502 def two():\n   5   \u2502     return one() + one()\n```\n\n``` python\n>>> import one\n>>> one.one.__code__.co_names\n()\n>>> one.two.__code__.co_names\n('one', )\n```\n\n## Create Generic module importer by filepath\n\n``` python\nimport importlib\nimport importlib.util\nimport os\n\ndef _import(path: Path, directory: Path, verbose: bool = False):\n    \"\"\"dynamically imports module given a path\"\"\"\n    cwd = os.getcwd()\n    os.chdir(directory)\n    name = path.name\n    # path = str(path).replace(str(directory) + \"/\", \"\")\n    path = _make_path_relative(path, directory)\n    try:\n        spec = importlib.util.spec_from_file_location(name, path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n    except (ModuleNotFoundError, ValueError):\n        module = _use_importmodule(\n            str(path).replace(os.sep, \".\").replace(\".py\", \"\"), verbose=verbose\n        )\n    os.chdir(cwd)\n\n    return module\n\n\ndef _use_importmodule(path: Path, verbose: bool = False):\n    \"\"\"\n    relative imports do not work well with importlib.util.spec_from_file_location,\n    and require a sys.path.append to be imported correctly.  For this reason\n    importlib.import_module is the second option.\n    \"\"\"\n\n    # Not sure if this is needed, but it was never hit in a test\n    # if path[0] == \".\":\n    #     path = path[1:]\n\n    sys.path.append(os.getcwd())\n    mod = importlib.import_module(path)\n    sys.path.pop()  # clean up path, do not permananatly change users path\n    return mod\n\n```\n\n### get code of dependency\n\nthe inspect module can tell us the filename of our current module.\n\n``` python\nimport inspect\nmodule_path = inspect.getfile(one.one)\nmodule = _import(module_path)\n```\n\nnow we can hash the dependency\n\n``` python\nnested_function = eval(f'module.{one.two.__code__.co_names[0]}\"\n```",
        "long_description": "Is it possible to deep watch a single python function for changes? Shallow Watch keeping track of a python functions hash is quite simple. There is a__hash__ method attached to every python function. Calling it will return a hash of the function. I..."
    },
    {
        "cover": "/static/bind-dynamic-lambdas-xmas2020.png",
        "title": "TIL: Bind arguments to dynamically generated lambdas in python",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/bind-dynamic-lambdas.md",
        "canonical_url": "https://waylonwalker.com/bind-dynamic-lambdas",
        "cover_image": "https:waylonwalker.com/bind-dynamic-lambdas.png",
        "date": "2020-04-27 12:13:00+00:00",
        "description": "This past week I had a really weird bug in my [kedro](https://kedro.readthedocs.io/) pipeline.  For some reason data running through my pipeline was coming out completely made no sense, but if I manually request raw data outside of the pipeline it matched expectations.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This past week I had a really weird bug in my [kedro](https://kedro.readthedocs.io/) pipeline.  For some reason data running through my pipeline was coming out completely made no sense, but if I manually request raw data outside of the pipeline it matched expectations.\n\n**NOTE** While this story is about a kedro pipeline, it can be applied anywhere closures are put into an iterable.\n\n## ![Debugger to the rescue](https://waylonwalker.com/bind-dynamic-lambdas-1.png)\n\nAfter a few days of looking at it off and on, I pinpointed that it was all the way down in the raw layer. Right as data is coming off of the database.  For this I already had existing `sql` files stored and a `read_sql` function to get the data so I opted to just set up the pipeline to utilize the existing code as much as possible, leaning on the [kedro](https://kedro.readthedocs.io/) framework a bit less.\n\nI have dynamically created lists of pipeline nodes many times in the past, but typically I take data from [kedro](https://kedro.readthedocs.io/) input and use it in the lambda.  I prefer the simplicity of using lambdas over `functools.partial`.  It typically looks something like this.\n\n``` python\n# \ud83d\udc4d  I do this all the time\nfrom kedro.pipeline import node\nfrom my_generic_project_lib import clean\n\ndatasets_to_clean = ['sales', 'production', 'inventory']\nnodes = []\nfor dataset in datasets_to_clean:\n   nodes.append(\n      node(\n         func=lambda x: clean(x)\n         inputs = f'raw_{dataset}'\n         outputs=f'int_{dataset}'\n         tags=['int', dataset]\n         name=f'create_int_{dataset}'\n      )\n   )\n```\n\nWhat was different this time is that I needed to pass in the name of the dataset to my read_sql function, not the data loaded in the framework.\n\n``` python\n# \u274c This does not work\nfrom kedro.pipeline import node\nfrom my_generic_project_lib import read_sql\n\ndatasets_to_read = ['sales', 'production', 'inventory']\nnodes = []\nfor dataset in datasets_to_clean:\n   nodes.append(\n      node(\n         func=lambda: read_sql(dataset) # \ud83d\udca5 The major issue\n         inputs = f'dummy'\n         outputs=f'int_{dataset}'\n         tags=['int', dataset]\n         name=f'create_int_{dataset}'\n      )\n   )\n```\n\n## ![Seriously](https://waylonwalker.com/bind-dynamic-lambdas-2.png)\n\nAs I am still oblivious to what has happened I pop in a `breakpoint()` and quickly see that during the first run the dataset passed into `read_sql` was `'inventory'`, in fact, every single one was `'inventory'`.  The lambda is just using the latest value of dataset from outside and has no `local` `dataset` attached to it.\n\n## ![The simple fix ](https://waylonwalker.com/bind-dynamic-lambdas-3.png)\n\n``` python\n# \ud83d\udc4d Much Better\nfrom kedro.pipeline import node\nfrom my_generic_project_lib import read_sql\n\ndatasets_to_read = ['sales', 'production', 'inventory']\nnodes = []\nfor dataset in datasets_to_clean:\n   nodes.append(\n      node(\n         func=lambda dataset=dataset: read_sql(dataset) # dataset is now bound to the lambda \u2728\n         inputs = f'dummy'\n         outputs=f'int_{dataset}'\n         tags=['int', dataset]\n         name=f'create_int_{dataset}'\n      )\n   )\n```\n\n## ![Try it yourself](https://waylonwalker.com/bind-dynamic-lambdas-4.png)\n\nI made a slightly more simple example so that you can try it and play with it yourself, edit it, share it with your friends, laugh at my mistake, whatever you like.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@WaylonWalker/BindDynamicLambdas?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>",
        "long_description": "This past week I had a really weird bug in my kedro pipeline. For some reason data running through my pipeline was coming out completely made no sense, but if I manually request raw data outside of the pipeline it matched expectations. NOTE While th..."
    },
    {
        "cover": "/static/twitter-deepdives-xmas2020.png",
        "title": "Twitter deepdives",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/twitter-deepdives.md",
        "canonical_url": "https://waylonwalker.com/twitter-deepdives",
        "cover_image": "https:waylonwalker.com/twitter-deepdives.png",
        "date": "2020-05-01 05:00:00+00:00",
        "description": "Inspired by Chris Achard My ideas Python List comps Classes Inheritance Background Click Lambdas Kedro Cataloging Cus",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Inspired by Chris Achard\n\n## My ideas\n\n### Python\n\n* List comps\n* Classes\n* Inheritance\n* Background\n* Click\n* Lambdas\n\n### Kedro\n\n* Cataloging\n* Custom datasets\n* Reusable pipelines\n* find-kedro\n\n### Learn kedro in 5 days\n\nEmail course inspired by learn d3 in 5 days\n\n### Mail\n\n* Share your knowledge\n* Practice\n* Practice in public\n* Make practice easy\n* Share your notes\n* Digital Gardening\n* Own your content\n* Build your audience\n* Be nice\n* Have empathy\n* Learn your way\n* Continuous learning",
        "long_description": "Inspired by Chris Achard My ideas Python List comps Classes Inheritance Background Click Lambdas Kedro Cataloging Custom datasets Reusable pipelines find-kedro Learn kedro in 5 days Email course inspired by learn d3 in 5 days Mail Share your kno..."
    },
    {
        "cover": "/static/explicit-vs-implicit-returns-in-javascript-xmas2020.png",
        "title": "Explicit vs Implicit Returns in Javascript",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/explicit-vs-implicit-returns-in-javascript.md",
        "canonical_url": "https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript",
        "cover_image": "https:waylonwalker.com/explicit-vs-implicit-returns-in-javascript.png",
        "date": "2020-05-03 11:55:00+00:00",
        "description": "Often when reading through javascript examples you will find some arrow functions use parentheses `()` while others use braces `{}`.  This key difference is that parentheses will implicitly return the last statement while braces require an explicit return statement.  It is important to understand the difference between them because it is likely that you will find code examples of both and trying to edit code written differently than you're used to may have unintended consequences.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Often when reading through javascript examples you will find some arrow functions use parentheses `()` while others use braces `{}`.  This key difference is that parentheses will implicitly return the last statement while braces require an explicit return statement.  It is important to understand the difference between them because it is likely that you will find code examples of both and trying to edit code written differently than you're used to may have unintended consequences.\n\n## ![Arrow functions](https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-1.png)\n\nArrow functions are one-liner functions in javascript that have two main syntactical ways to create the code block.  with parentheses and braces.  Let's take a look at both ways of creating arrow functions so that when we come accross them in the wild it will all make sense.\n\n## ![implicit returns](https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-2.png)\n\nHere is an example of an arrow function that will implicitly return the last\nstatement without the return keyword.  I believe that these are a bit more restricted\nin that you cannot set variables inside them.  They are a little bit more concise\nand great for **one-liners.**\n\n``` javascript\nconst implicit = thing => (thing)\nundefined\nimplicit('hi')\n\"hi\"\n```\n\n**Note** that the parentheses are not required for this example and not having\nparentheses or braces are implicitly returned as well.\n\n``` javascript\n// same as above\nconst implicit = thing => thing\nundefined\nimplicit('hi')\n\"hi\"\n```\n\n## ![explicit returns](https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-3.png)\n\nIn the following example, the curly braces create an arrow function that must\nexplicitly return anything that you want to return from the function. Since the\nreturn keyword is never used the function returns `undefined` by default.\n\n``` javascript\n// missing return statement\nconst explicit = thing => {thing}\nundefined\nexplicit('hi')\nundefined\n```\n\nIn this example using the return keyword will cause the function to return `thing`\nand behave similarly to our implicit return.\n\n``` javascript\n// same as original\nconst explicit_return = thing => {return thing}\nundefined\nexplicit_return('hi')\n\"hi\"\n```\n\n## ![Multiline arrow functions](https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-4.png)\n\nUntil writing this article I was unaware that you could not have a multiline arrow function with an implicit return statement.  I tried myself and ran into some issues. I also tried to find examples online and could not find one.  If it is possible to write something like below, let me know.\n\n``` javascript\n// more complex example\n// only possible with an explicit return\nconst sayHello = who => {\n    const greeting = 'Hello '\n    const message = greeting + who\n    return message\n    }\nundefined\nsayHello('Waylon')\n\"Hello Waylon\"\n```",
        "long_description": "Often when reading through javascript examples you will find some arrow functions use parentheses () while others use braces {}. This key difference is that parentheses will implicitly return the last statement while braces require an explicit retur..."
    },
    {
        "cover": "/static/find-kedro-1-xmas2020.png",
        "title": "\ud83d\udce2 Announcing find-kedro",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/find-kedro-release.md",
        "canonical_url": "https://waylonwalker.com/find-kedro-release",
        "cover_image": "https:waylonwalker.com/find-kedro-1.png",
        "date": "2020-05-04 11:53:00+00:00",
        "description": "kedro is an amazing project that allows for super-fast prototyping of data pipelines, yet yielding production-ready pipelines. find-kedro enhances this experience by adding a pytest-like node discovery eliminating the need to bubble up pipelines through modules.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "`find-kedro` is a small library to enhance your kedro experience.  It looks through your modules to find kedro pipelines, nodes, and iterables (lists, sets, tuples) of nodes.  It then assembles them into a dictionary of pipelines, each module will create a separate pipeline, and `__default__` being a combination of all pipelines.  This format is compatible with the kedro `_create_pipelines` format.\n\n\n![Python package](https://github.com/WaylonWalker/find-kedro/workflows/Python%20package/badge.svg)\n\n![Test](https://github.com/WaylonWalker/find-kedro/workflows/Test/badge.svg)\n\n[![Build-Docs](https://github.com/WaylonWalker/find-kedro/workflows/Build-Docs/badge.svg?branch=master)](https://find-kedro.waylonwalker.com)\n\n\n## ![Motivation](https://waylonwalker.com/find-kedro-release-1.png)\n\n`kedro` is a \u2728 fantastic project that allows for super-fast prototyping of data pipelines, while yielding production-ready pipelines. `find-kedro` enhances this experience by adding a pytest like node/pipeline discovery eliminating the need to bubble up pipelines through modules.\n\nWhen working on larger pipeline projects, it is advisable to break your project down into different sub-modules which requires knowledge of building python libraries, and knowing how to import each module correctly.  While this is not too difficult, in some cases, it can trip up even the most senior engineers, losing precious feature development time to debugging a library.\n\n## ![Installation](https://waylonwalker.com/find-kedro-release-2.png)\n\n`find-kedro` is deployed to pypi and can easily be `pip` installed.\n\n``` bash\npip install find-kedro\n```\n\n## ![Python Usage](https://waylonwalker.com/find-kedro-release-3.png)\n\nThe recommended usage of `find-kedro` is to implement it directly into your projects `run.py` module\n\n``` python\nfrom kedro.context import KedroContext\nfrom find_kedro import find_kedro\n\nclass ProjectContext(KedroContext):\n    def _get_pipelines(self) -> Pipeline:\n        return find_kedro()\n```\n\n### Creating nodes\n\n`find-kedro` will not execute any functions.  It will simply look for variables that match the `pattern` and identify if they are a `kedro.pipeline.Pipeline`, `kedro.pipeline.nodes.Node`, or a list of `kedro.pipeline.nodes.  Node`'s.  If so, it will collect them into the dictionary of pipelines.\n\nThere are typically **three** ways that pipelines are constructed with `find-kedro`; **lists**, **single-nodes**, and **pipelines**.\n\n#### Lists\n\nAny pattern matched list will be flattened and collected into the pipeline.  Nodes can be created all at once in the list definition.\n\n``` python\n# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\npipeline = [\n    node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n]\n```\n\nIt is also convenient many times to keep the node definition close to the function definition.  Many times I define the list at the top of the file, then append to it as I go.\n\n``` python\n# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\nnodes = []\nnodes.append(\n    node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n)\n```\n\n#### Nodes\n\nAll pattern matched `kedro.pipeline.node.Node` objects will get collected into the pipeline.\n\n``` python\n# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\nsplit_node = node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n```\n\n#### Pipeline\n\nAll pattern matched `kedro.pipeline.Pipeline` objects will get collected into the pipeline.\n\n``` python\n# my-project/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node, Pipeline\nfrom .nodes import split_data\n\nsplit_node = Pipeline(\n    [\n        node(\n            split_data,\n            [\"example_iris_data\", \"params:example_test_data_ratio\"],\n            dict(\n                train_x=\"example_train_x\",\n                train_y=\"example_train_y\",\n                test_x=\"example_test_x\",\n                test_y=\"example_test_y\",\n            ),\n        )\n    ]\n)\n```\n\n\n### Fully Qualified imports\n\nWhen using fully qualified imports `from my_proj.pipelines.data_science.nodes import split_data` instead of\nrelative imports `from .nodes split_data` you will need to make sure that your project is installed, in your current path, or you set the directory\n\n### ![CLI Usage](https://waylonwalker.com/find-kedro-release-4.png)\n\nThe CLI provides a handy interface to search your project for nodes\n\n```\nUsage: find-kedro [OPTIONS]\n\nOptions:\n  --file-patterns TEXT       glob-style file patterns for Python node module\n                             discovery\n\n  --patterns TEXT            prefixes or glob names for Python pipeline, node,\n                             or list object discovery\n\n  -d, --directory DIRECTORY  Path to save the static site to\n  --version                  Prints version and exits\n  -v, --verbose              Prints extra information for debugging\n  --help                     Show this message and exit.\n```\n\nExample ran with a slightly modified default `kedro new` project.\n\n``` bash\n\u276f find-kedro\n{\n  \"__default__\": [\n    \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\",\n    \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\",\n    \"predict([example_model,example_test_x]) -> [example_predictions]\",\n    \"report_accuracy([example_predictions,example_test_y]) -> None\"\n  ],\n  \"src.default_kedro_159.pipelines.data_engineering.pipeline\": [\n    \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\"\n  ],\n  \"src.default_kedro_159.pipelines.data_science.pipeline\": [\n    \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\",\n    \"predict([example_model,example_test_x]) -> [example_predictions]\",\n    \"report_accuracy([example_predictions,example_test_y]) -> None\"\n  ]\n}\n```\n## ![Contributing](https://waylonwalker.com/find-kedro-release-5.png)\n\n**You're Awesome** for considering a contribution!  Contributions are welcome, please check out the [Contributing Guide](https://github.com/WaylonWalker/find-kedro/blob/master/contributing.md) for more information.  Please be a positive member of the community and embrace feedback\n\n## ![Versioning](https://waylonwalker.com/find-kedro-release-6.png)\n\nWe use [SemVer](https://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/WaylonWalker/find-kedro/releases).\n\n\n## ![Authors](https://waylonwalker.com/find-kedro-release-7.png)\n\n[![Waylon Walker](https://avatars1.githubusercontent.com/u/22648375?s=120&v=4)](https://github.com/WaylonWalker) - Waylon Walker - _Original Author_\n\n[![Zain Patel](https://avatars3.githubusercontent.com/u/30357972?s=120&v=4)](https://github.com/mzjp2) - Zain Patel\n\n## ![License](https://waylonwalker.com/find-kedro-release-8.png)\n\nThis project is licensed under the MIT License - see the LICENSE.md file for details",
        "long_description": "find-kedro is a small library to enhance your kedro experience. It looks through your modules to find kedro pipelines, nodes, and iterables (lists, sets, tuples) of nodes. It then assembles them into a dictionary of pipelines, each module will crea..."
    },
    {
        "cover": "/static/maintianing-multiple-git-remotes-xmas2020.png",
        "title": "Maintianing multiple git remotes",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/maintianing-multiple-git-remotes.md",
        "canonical_url": "https://waylonwalker.com/maintianing-multiple-git-remotes",
        "cover_image": "https:waylonwalker.com/maintianing-multiple-git-remotes.png",
        "date": "2020-05-07 11:56:00+00:00",
        "description": "bash git remote -v git remote add gitlab <url> git push gitlab main",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "``` bash\ngit remote -v\ngit remote add gitlab <url>\ngit push gitlab main\n```",
        "long_description": "bash git remote -v git remote add gitlab <url> git push gitlab main..."
    },
    {
        "cover": "/static/kedro-preflight-xmas2020.png",
        "title": "Kedro Preflight",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-preflight.md",
        "canonical_url": "https://waylonwalker.com/kedro-preflight",
        "cover_image": "https:waylonwalker.com/kedro-preflight.png",
        "date": "2020-05-09 15:01:00+00:00",
        "description": "run checks before running the pipeline",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This is a very rough idea for a kedro package to prevent time lost to get partway through a pipeline run only to realize that you dont have access to data or resources.\n\n# Must Haves\n\n* check that inputs exist or are of a type to skip (sql)\n\n# Good to haves\n* check that all input and output databases are accessible with good credentials\n* check for s3 bucket access\n* check for spark install\n\n\n# Implementation\n\n``` python\n@hook_spec\ndef before_pipeline_run(run_params, pipeline, catalog):\n\n```\n\n## run params\n``` json\n{\n  \"run_id\": str\n  \"project_path\": str,\n  \"env\": str,\n  \"kedro_version\": str,\n  \"tags\": Optional[List[str]],\n  \"from_nodes\": Optional[List[str]],\n  \"to_nodes\": Optional[List[str]],\n  \"node_names\": Optional[List[str]],\n  \"from_inputs\": Optional[List[str]],\n  \"load_versions\": Optional[List[str]],\n  \"pipeline_name\": str,\n  \"extra_params\": Optional[Dict[str, Any]]\n}\n```",
        "long_description": "This is a very rough idea for a kedro package to prevent time lost to get partway through a pipeline run only to realize that you dont have access to data or resources. Must Haves check that inputs exist or are of a type to skip (sql) Good to haves..."
    },
    {
        "cover": "/static/kedro-hooks-xmas2020.png",
        "title": "creating the kedro-preflight hook",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/creating-the-kedro-preflight-hook.md",
        "canonical_url": "https://waylonwalker.com/creating-the-kedro-preflight-hook",
        "cover_image": "https:waylonwalker.com/kedro-hooks.png",
        "date": "2020-05-10 07:12:00+00:00",
        "description": "Kedro Hooks Intro - kedro hooks are an exciting upcoming feature of kedro `0.16.0`.  They allow you to hook into `catalog_created`,`pipeline_run`, and `node_run`(nouns). With a `before`, or `after` (adjective).  This really reminds me of reacts lifecycle hooks, that let you hook into various state of react web components.  This is going to make kedro so extendable by the community.  I am super pumped to see what the community is able to do with this ability.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "kedro hooks are an exciting upcoming feature of kedro `0.16.0`.  They allow you to hook into `catalog_created`,`pipeline_run`, and `node_run`(nouns). With a `before`, or `after` (adjective).  This really reminds me of reacts lifecycle hooks, that let you hook into various state of react web components.  This is going to make kedro so extendable by the community.  I am super pumped to see what the community is able to do with this ability.\n\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/what-is-kedro/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/27debd76b7282c6a93060e9eb66ba0b8/630fb/what-is-kedro-xmas2020.png\" alt=\"article cover for What is Kedro\">\n<div class=\"right\">\n    <h2>What is Kedro</h2>\n    <p class=\"description\">\n    Kedro is an open source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to setup your own python library for data pipelining.  It includes really great ways to manipulate `catalogs` and `pipelines`.  This article will cover the 10K view of kedro, future articles will dive deper into each one.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> If you are completely unsure what kedro is be sure to check out my what is kedro post\n\n## Docs\n_a work in progress_\n\nAs this is a part of an upcoming release you will need to look in the `latest` docs, **not** `stable` and you will find a [15_hoooks](https://kedro.readthedocs.io/en/latest/04_user_guide/15_hooks.html?highlight=hooks) page.  As these docs are still in development they are not very complete at this point and do require a bit more existing `kedro` knowledge to understand.  I am sure they will get much better as we approach the realease of hooks.\n\n> This doesn't mean that we can't still install the latest/unstable version and have some fun learning!\n\n## Installation\n_Straight from GitHub_\n\nAs this is part of an upcoming release you will need to get the library straight from github.  Since this is not a stable release of `kedro` I cannot express the importance of using a virtual environment enough.  Trying to install this version in the same place that you are trying to develop a pipeline potentially break your existing working development environment.\n\n``` bash\nconda create -n kedro0160 -y\nconda activate kedro0160 # may also be source activate kedro0160 or activate kedro0160\npip install git+https://github.com/quantumblacklabs/kedro.git\npip install colorama\n```\n\n> **note** the version is still somewhere between `0.15.9` and `0,16.0`.  `kedro.__version__` will still be `0.15.9` and wiill not roll until the official release.\n\n## Create a sample project\n\n> ### Kedro new\n> For more details check out my full post on [kedro new](https://waylonwalker.com/knew)\n\nFor this post I really just want a working pipeline as fast as possible.  For this I am going to use iris pipeline that is generated from the `kedro new` command in the cli.  It's **important** that you answer `y` to create an example pipeline.\n\n> ### Hold On \u270b\n> Did you create a separate environment for this?  Please do.\n\n``` bash\nkedro new\n```\n\nAfter you run the `kedro new` command it will ask a series of questions.  \ud83d\udc47 Here is how I answered them.\n\n``` bash\nProject Name:\n=============\nPlease enter a human readable name for your new project.\nSpaces and punctuation are allowed.\n [New Kedro Project]: Kedro Hooks\nRepository Name:\n================\nPlease enter a directory name for your new project repository.\nAlphanumeric characters, hyphens and underscores are allowed.\nLowercase is recommended.\n [kedro-hooks]:\nPython Package Name:\n====================\nPlease enter a valid Python package name for your project package.\nAlphanumeric characters and underscores are allowed.\nLowercase is recommended. Package name must start with a letter or underscore.\n [kedro_hooks]:\nGenerate Example Pipeline:\n==========================\nDo you want to generate an example pipeline in your project?\nGood for first-time users. (default=N)\n [y/N]: y\nChange directory to the project generated in /mnt/c/temp/kedro-hooks/\nA best-practice setup includes initialising git and creating a virtual environment before running `kedro install` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/\n```\n\n### Install the Project\n\nNext install the project itself and all of its dependencies with the `kedro install` command.\n\n``` bash\ncd kedro-hooks\nkedro install\n```\n\n### \ud83c\udfc3\u200d\u2640\ufe0f Run the pipeline\n\nBefore we start developing any hooks lets make sure everything is setup correctly by running the pipeline with `kedro run`.\n\n``` bash\nkedro run\n```\n## Let's make a hook\n\n_getting to the meat of the post_\n\nNow that we have a project scaffolded up and running we can develop a hook for it.  As far as I can tell hooks can be implemented one of **two ways**.  As a **function** inside of a module, then import that module and pass it into the hooks list, or implemented as a method on a **class**, then the class is passed into the hooks list.  Either method must follow the naming convention with the `@hook_impl` decorator.  Each module/class can implement more than one hook, but not more than one of the same type. One of each kind will be created below.\n\n### Full list of hooks available\n\n> `before_catalog_created`\n>\n> `after_catalog_created`\n>\n> `before_pipeline_run`\n>\n> `after_pipeline_run`\n>\n> `before_node_run`\n>\n> `after_node_run`\n\n## debug_hook (class)\n_quick and dirty_\n\n\nI highly recommend this as your first hook.  It's super easy to make and lets you explore the arguments passed into the hook.  For this one I am going to pop the following class right into `kedro-hooks/src/kedro-hooks/run.py`, remember that I chose `kedro-hooks` as my project name.  Your path might be slightly different.  If you wanted to make a real hook it might make sense to put it in its own module, but for simplicity of your first hook you can put it directly in the same module that it gets implemented.\n\n``` python\nclass debug_hook:\n    @hook_impl\n    def before_pipeline_run(run_params, pipeline, catalog):\n        \"pops into a debugger before pipeline run\"\n        print('I hooked in right before the pipeline run')\n        breakpoint()\n```\n\n\nIt is really that easy to create a kedro hook!  Now lets apply it to our project.  All we need to do is add one line (`hooks = [debug_hook]`) to the existing `ProjectContext` class within `kedro-hooks/src/kedro-hooks/run.py`.  Once we do that our `ProjectContext` will look like this.\n\n``` python\nclass ProjectContext(KedroContext):\n    \"\"\"Users can override the remaining methods from the parent class here,\n    or create new ones (e.g. as required by plugins)\n    \"\"\"\n\n    project_name = \"kedro-hooks\"\n    # `project_version` is the version of kedro used to generate the project\n    project_version = \"0.15.9\"\n    package_name = \"kedro-hooks\"\n\n    hooks = [ debug_hook ] # \ud83d\udc48 This is where you implement the hook\n\n    def _get_pipelines(self) -> Dict[str, Pipeline]:\n        return create_pipelines()\n```\n\nRun it!  While you are in the debugger, explore what the `run_params`, `pipeine`, and `catalog` arguments give you.  This will give you some insight to what to expect when creating your next hook.\n\n\n## preflight hook (module)\n_giving it a bit more flair_\n\nCreate a new file `kedro-hooks/src/kedro-hooks/preflight.py` and place the following content into the file.  This will raise a `DataSetNotFoundError` before wasting time running any of the pipeline.  This could be useful to save some developer time for long running pipelines by warning them that they don't have all of the raw data they need before running.\n\n\n``` python\n# kedro-hooks/src/kedro-hooks/preflight.py\nfrom kedro.hooks import hook_impl\nfrom kedro.io.core import DataSetNotFoundError\nfrom colorama import Fore\nimport textwrap\n\n\n@hook_impl\ndef before_pipeline_run(run_params, pipeline, catalog):\n    missing_input = [i for i in pipeline.inputs() if not getattr(catalog.datasets, i)._exists()]\n    if len(missing_input) != 0:\n        raise DataSetNotFoundError(textwrap.dedent(f'''\n\n    {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015  {Fore.RED}PREFLIGHT ERROR {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n    {Fore.RESET} preflight of pipeline failed due to {Fore.YELLOW}missing datasets\n    {Fore.BLUE} {missing_input}{Fore.RESET}\n    '''))\n```\n\nOnce we are happy with this hook, it can live anywhere.  It can be a module inside our project.  It can be a separate libarary that gets handed out as a back ally wheel, or we can even publish it as its own package to pypi so that anyone can easily pip install it.\n\n### One Step Back\n_a bit of explanation of preflight_\n\nIf you are not familiar, `pipeline.inputs()` gives us all of the edge inputs into the pipeline.  kedro does also have a `pipeline.all_inputs()` that tells us all of the edge and internal pipeline inputs that will be called throughout the pipeline run.  For this hook we are just concerned with the edge inputs as internal inputs will be generated during the run.\n\nAlso each one of the kedro datasets have an `_exists()` method attached to them to check if the dataset exists or not.  For a more robust implementation of `preflight` it would probably be best to ignore `AttributeError`s, i.e the dataset type does not have an implementation of `_exists`.  It would probably also be a good idea to filter for types such as `SQLQueryDataSet`s that assume `_exists` is False by default.\n\n##  Ideas\n\nNow that the juices are flowing what ideas do you have for `kedro` hooks?",
        "long_description": "kedro hooks are an exciting upcoming feature of kedro 0.16.0. They allow you to hook into catalog_created,pipeline_run, and node_run(nouns). With a before, or after (adjective). This really reminds me of reacts lifecycle hooks, that let you hook in..."
    },
    {
        "cover": "/static/ascii-boxes-xmas2020.png",
        "title": "drawing ascii boxes",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/drawing-ascii-boxes.md",
        "canonical_url": "https://waylonwalker.com/drawing-ascii-boxes",
        "cover_image": "https:waylonwalker.com/ascii-boxes.png",
        "date": "2020-05-12 22:05:00+00:00",
        "description": "I always struggle to find a good reference of ascii characters.  This is a compilation of my most wanted ascii characters.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "When creating cli's I often want some nice full-width character.  I find it tough to find them, and when I do half the time it is an image or something that cannot be copied \ud83d\udc7f.\n\nI rarely get very complex with my semi-manual ASCII art.  I can do 98% of what I need with bars and corners.  Using some simple full-width characters can really give your cli a nice clean look.\n\n# Example\n\nI'd say 50% of what I need is just a full-width horizontal bar to give some visual flair or separation.\n\n![](/static/fw-bar-print.png)\n\n# Bars\n\n``` bash\n\u2015 \u237d \u23b8 \u23b9 \u2423 \u2500 \u2501 \u2502 \u2503\n```\n\n# Square Corners\n\n``` bash\n\u250c \u250d \u250e \u250f \u2510 \u2511 \u2512 \u2513 \u2514 \u2515 \u2516 \u2517 \u2518 \u2519 \u251a \u251b\n```\n\n# Round Corners\n\n``` bash\n\u256d \u256e \u256f \u2570 \u2571 \u2572 \u2573\n```\n\n# Harpoons\n\n``` bash\n \u20d1 \u20ec \u20ed \u21bc \u21bd \u21be \u21bf \u21c0 \u21c1 \u21c2 \u21c3 \u21cb \u21cc \u294a \u294b \u294c \u294d \u294e \u294f \u2950 \u2951 \u2952 \u2953 \u2954 \u2955 \u2956 \u2957 \u2958 \u2959 \u295a \u295b \u295c \u295d \u295e \u295f \u2960 \u2961 \u2962 \u2963 \u2964 \u2965 \u2966 \u2967 \u2968 \u2969 \u296a \u296b \u296c \u296d \u296e \u296f\n```\n\n# Double Boxes\n\n``` bash\n\u2550 \u2551 \u2552 \u2553 \u2554 \u2555 \u2556 \u2557 \u2558 \u2559 \u255a \u255b \u255c \u255d \u255e \u255f \u2560 \u2561 \u2562 \u2563 \u2564 \u2565 \u2566 \u2567 \u2568 \u2569 \u256a \u256b \u256c\n```\n\n# Dashed Boxes\n\n``` bash\n\u2504 \u2505 \u2506 \u2507 \u2508 \u2509 \u250a \u250b\u254c \u254d \u254e \u254f\n```\n\n# Connectors\n\n``` bash\n\u251c \u251d \u251e \u251f \u2520 \u2521 \u2522 \u2523 \u2524 \u2525 \u2526 \u2527 \u2528 \u2529 \u252a \u252b \u252c \u252d \u252e \u252f \u2530 \u2531 \u2532 \u2533 \u2534 \u2535 \u2536 \u2537 \u2538 \u2539 \u253a \u253b \u253c \u253d \u253e \u253f \u2540 \u2541 \u2542 \u2543 \u2544 \u2545 \u2546 \u2547 \u2548 \u2549 \u254a \u254b\n```\n\n# Others\n\n``` bash\n\u2610 \u2611 \u2612 \u2acd \u2ace \u2bb9 \u2bbd \u2e86 \u2f0c \u2f10 \u2f15\n```\n\n# Arrows\n\n``` bash\n \u2190 \u2191 \u2192 \u2193 \u2194 \u2195 \u2196 \u2197 \u2198 \u2199 \u219a \u219b \u219c \u219d \u219e \u219f \u21a0 \u21a1 \u21a2 \u21a3 \u21a4 \u21a5 \u21a6 \u21a7 \u21a8 \u21a9 \u21aa \u21ab \u21ac \u21ad \u21ae \u21af \u21b0 \u21b1 \u21b2 \u21b3 \u21b4 \u21b5 \u21b6 \u21b7 \u21b8 \u21b9 \u21ba \u21bb \u21c4 \u21c5 \u21c6 \u21c7 \u21c8 \u21c9 \u21ca \u21cd \u21ce \u21cf \u21d0 \u21d1 \u21d2 \u21d3 \u21d4 \u21d5 \u21d6 \u21d7 \u21d8 \u21d9 \u21da \u21db \u21dc \u21dd \u21de \u21df \u21e0 \u21e1 \u21e2 \u21e3 \u21e4 \u21e5 \u21e6 \u21e7 \u21e8 \u21e9 \u21ea\n```\n\n# Rounded Box\n\n``` bash\n\u256d\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u256e\n\u2502                  \u2502\n\u2502                  \u2502\n\u2502                  \u2502\n\u2570\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u256f\n```\n\n# Resources\n\nAs I was putting this together I stumbled accross a good site to find ascii characters and copy them.\n[Unicode Full-Width Characters](!\\[\\](/static/ascii-boxes.png)https://xahlee.info/comp/unicode_full-width_chars.html)",
        "long_description": "When creating cli's I often want some nice full-width character. I find it tough to find them, and when I do half the time it is an image or something that cannot be copied \ud83d\udc7f. I rarely get very complex with my semi-manual ASCII art. I can do 98% of..."
    },
    {
        "cover": "/static/interrogate-python-xmas2020.png",
        "title": "Interrogate is a pretty awesome, brand new, cli for Python packages",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/interrogate.md",
        "canonical_url": "https://waylonwalker.com/interrogate",
        "cover_image": "https:waylonwalker.com/interrogate-python.png",
        "date": "2020-05-15 03:00:00+00:00",
        "description": "dead simple docstring coverage for your python project",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "As usual while listening to [python bytes 181](https://pythonbytes.fm/episodes/show/181/it-s-time-to-interrogate-your-python-code) I heard of a tool that I had to try out right away!\n\nThis thing is \ud83d\udd25 hot off the press folks, we're talking the first release only 3 weeks ago. Its something that the python community needed years ago, and it belongs in your CI **today**. I had tried several tools that tried to do docstring coverage in the past but they were a bit cumbersome and were quickly forgotten about. Not interrogate, its dead simple!\n\n> Nothing I have tried has come close to being this good\n\n## Interrogate\n\nIt runs documentation coverage for your python project. It allows you to set the minimum amount of docstring coverage for your project and has some great setup instructions right in the readme.\n\n## Install it\n\nInterrogate is on pypi so it is super simple to install with `pip`\n\n```\npip install interrogate\n```\n\n## run it\n\nThis is the best part, its super easy to run right from the command line! Just call it, and give it a path to run.\n\n```\ninterrogate -v <path>\n```\n\n## \ud83d\ude32 I have some work to do\n\nOne of my new open source packages [find-kedro](https://find-kedro.waylonwalker.com/) only hit 71%.\n\n```\ninterrogate find-kedro -v\n```\n\n![verbose interrogate on find-kedro](https://waylonwalker.com/interrogate-python-v.png)\n\nPersonally I really like the **double verbose** output that gives you the names of everything missing a docstring and the line they occur on.\n\n```\ninterrogate find-kedro -vv\n```\n\n![double verbose interrogate on find-kedro](https://waylonwalker.com/interrogate-python-vv.png)\n\n## Give it a \u2b50\nEvery project this amazing deserves a big ol \u2b50 on GitHub! Go over to [econchick/interrogate](https://github.com/econchick/interrogate) and give it a one... it deserves it! While you are there check out the **wicked** good readme. It has great examples of how to run it from your command line, as a pre-commit hook, in your ci, with your code, or pyproject.toml.\n\n> While you are there check out the **wicked** good readme!",
        "long_description": "As usual while listening to python bytes 181 I heard of a tool that I had to try out right away! This thing is \ud83d\udd25 hot off the press folks, we're talking the first release only 3 weeks ago. Its something that the python community needed years ago, and..."
    },
    {
        "cover": "/static/create-custom-kedro-dataset-xmas2020.png",
        "title": "Create Custom Kedro Dataset",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/create-custom-kedro-dataset.md",
        "canonical_url": "https://waylonwalker.com/create-custom-kedro-dataset",
        "cover_image": "https:waylonwalker.com/create-custom-kedro-dataset.png",
        "date": "2020-05-15 05:00:00+00:00",
        "description": "Kedro provides an efficient way to build out data catalogs with their yaml api.  It allows you to be very declaritive about loading and saving your data.  For the most part you just need to tell Kedro what connector to use and its filepath.  When running Kedro takes care of all of the read/write, you just reference the catalog key.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Kedro provides an efficient way to build out data catalogs with their yaml api.  It allows you to be very declaritive about loading and saving your data.  For the most part you just need to tell Kedro what connector to use and its filepath.  When running Kedro takes care of all of the read/write, you just reference the catalog key.\n\n## But what is happening behind the scenes\n\nUnder the hood there is an `AbstractDataSet` that each connector inherits from.  It sets up a lot of the behind the scenes structure for us so that we dont have to.  For the most part kedro has connectors for about anything that you want to load, csv, parquet, sql, json, from about anywhere, http, s3, localfile system are just some of the examples.\n\nHere is a DataSet implementation from their docs.  Here you can see the barebones example straight from the docs.  Parameters from the yaml catalog will get passed in\n\n``` python\nfrom pathlib import Path\n\nimport pandas as pd\n\nfrom kedro.io import AbstractDataSet\n\n\nclass MyOwnDataSet(AbstractDataSet):\n    def __init__(self, param1, param2, filepath, version):\n        super().__init__(Path(filepath), version)\n        self._param1 = param1\n        self._param2 = param2\n\n    def _load(self) -> pd.DataFrame:\n        load_path = self._get_load_path()\n        return pd.read_csv(load_path)\n\n    def _save(self, df: pd.DataFrame) -> None:\n        save_path = self._get_save_path()\n        df.to_csv(save_path)\n\n \tdef _exists(self) -> bool:\n        path = self._get_load_path()\n        return path.is_file()\n\n    def _describe(self):\n        return dict(version=self._version, param1=self._param1, param2=self._param2)\n```",
        "long_description": "Kedro provides an efficient way to build out data catalogs with their yaml api. It allows you to be very declaritive about loading and saving your data. For the most part you just need to tell Kedro what connector to use and its filepath. When run..."
    },
    {
        "cover": "/static/adding-google-fonts-to-a-gatsbyjs-site-xmas2020.png",
        "title": "Adding google fonts to a gatsbyjs site",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/adding-google-fonts-to-a-gatsbyjs-site.md",
        "canonical_url": "https://waylonwalker.com/adding-google-fonts-to-a-gatsbyjs-site",
        "cover_image": "https:waylonwalker.com/adding-google-fonts-to-a-gatsbyjs-site.png",
        "date": "2020-05-17 05:00:00+00:00",
        "description": "https://stackoverflow.com/questions/47488440/how-do-i-add-google-fonts-to-a-gatsby-site",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "[stack overflow link](https://stackoverflow.com/questions/47488440/how-do-i-add-google-fonts-to-a-gatsby-site)",
        "long_description": "stack overflow link..."
    },
    {
        "cover": "/static/four-github-actions-website-xmas2020.png",
        "title": "Four github actions for your website",
        "tags": [
            "actions"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/four-github-actions-website.md",
        "canonical_url": "https://waylonwalker.com/four-github-actions-website",
        "cover_image": "https:waylonwalker.com/four-github-actions-website.png",
        "date": "2020-05-18 13:02:00+00:00",
        "description": "GitHub actions can give you confidence that your site is up and running, with the latests JavaScript packages, does not have broken links, and can even take screenshots of what your website looks like on different screen sizes and operating systems.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "GitHub's actions are a new GitHub feature that will trigger GitHub to spin up a virtual machine and run some tasks with some special access to your repo. It can interact with comments/issues, it can clone your repo, You can explicitly pass in secrets so that it can commit back to the repo or deploy to another service. The environment may be a Linux, windows, or even a mac machine. I believe this is wildly incredible for the open-source community, putting these tools in the same place that we are already collaborating is so convenient.\n\n## What can they do for my personal website? \ud83e\udd14\n\nGitHub actions can give you confidence that your site is up and running, with the latest JavaScript packages, does not have broken links, and can even take screenshots of what your website looks like on different screen sizes and operating systems.\n\n- periodically check that the website is up\n- update npm\n- url checker\n- screenshot website\n\n\n## [srt32/uptime](https://github.com/srt32/uptime)\n\n[srt32/uptime](https://github.com/srt32/uptime) is an action that you can run on any public website. I run this one several times every day and it gives me confidence that my various sites are still up and running. It ensures that my build didn't break something, nothing is wrong with my hosting provider, or my DNS.\n\n``` yaml\nname: check if site is up\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  ping_site:\n    runs-on: ubuntu-latest\n    name: Ping the site\n    steps:\n    - name: Check the site\n      id: hello\n      uses: srt32/uptime@master\n      with:\n        url-to-hit: \"https://waylonwalker.com/\"\n        expected-statuses: \"200,301\"\n```\n\n## [taichi/actions-package-update](https://github.com/taichi/actions-package-update)\n\nHere is another one to make sure that your package.json does not get too far out of date, or have any vulnerabilities. [taichi/actions-package-update](https://github.com/taichi/actions-package-update) will submit a PR back to your repo with any updated dependencies. Since it submits it as a pr, your tests triggered by PRs should also run. giving you confidence that you are ready to update.\n\n<p style='text-align: center'>\n<img src='https://github.com/taichi/actions-package-update/raw/master/docs/actions-package-update.png' style='width:600px; max-width:80%; margin: auto;' alt='image of a PR submitted by actions-package-update'/>\n</p>\n\nExample to update `package.json` every Wednesday night at midnight.\n\n``` yaml\non:\n  schedule:\n  - cron: 0 0 * * 3\nname: Update\njobs:\n  package-update:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: set remote url\n      run: git remote set-url --push origin https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n    - name: package-update\n      uses: taichi/actions-package-update@master\n      env:\n        AUTHOR_EMAIL: john@example.com\n        AUTHOR_NAME: john\n        EXECUTE: \"true\"\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        LOG_LEVEL: debug\n      with:\n        args: -u --packageFile package.json --loglevel verbose\n```\n\n## [urlstechie/urlchecker-action](https://github.com/urlstechie/urlchecker-action)\n\n[urlstechie/urlchecker-action](https://github.com/urlstechie/urlchecker-action) is an action to collect and check URLs in a project and report on broken links. This is another one to give yourself some confidence that you are not linking out to a broken site, and can give you a heads up before you have frustrated users.\n\n``` yaml\nname: Check URLs\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: urls-checker\n      uses: urlstechie/urlchecker-action@0.2.1\n      with:\n        # A subfolder or path to navigate to in the present or cloned repository\n        subfolder: docs\n\n        # A comma-separated list of file types to cover in the URL checks\n        file_types: .md,.py,.rst\n\n        # Choose whether to include file with no URLs in the prints.\n        print_all: false\n\n        # The timeout seconds to provide to requests, defaults to 5 seconds\n        timeout: 5\n\n        # How many times to retry a failed request (each is logged, defaults to 1)\n        retry_count: 3\n\n        # A comma separated links to exclude during URL checks\n        white_listed_urls: https://github.com/SuperKogito/URLs-checker/issues/1,https://github.com/SuperKogito/URLs-checker/issues/2\n\n        # A comma separated patterns to exclude during URL checks\n        white_listed_patterns: https://github.com/SuperKogito/Voice-based-gender-recognition/issues\n\n        # choose if the force pass or not\n        force_pass : true\n```\n\n## [swinton/screenshot-website](https://github.com/swinton/screenshot-website)\n\n[swinton/screenshot-website](https://github.com/swinton/screenshot-website) will take a screenshot of your website. It can even run a matrix of sizes and os's to check how your site looks on various systems.\n\n``` yaml\nname: screenshot-website\non:\n  schedule:\n    - cron: '0 0 0 * *'\n\njobs:\n  screenshot:\n    name: Screenshot\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        width: [1200, 992, 768, 600]\n    runs-on: ${{ matrix.os }}\n\n    steps:\n\n    - name: Screenshot Website\n      uses: swinton/screenshot-website@v1.x\n      with:\n        source: https://waylonwalker.com/\n        destination: screenshot-${{ matrix.os }}-${{ matrix.width }}.png\n        width: ${{ matrix.width }}\n```",
        "long_description": "GitHub's actions are a new GitHub feature that will trigger GitHub to spin up a virtual machine and run some tasks with some special access to your repo. It can interact with comments/issues, it can clone your repo, You can explicitly pass in secrets..."
    },
    {
        "cover": "/static/thank-you-xmas2020.png",
        "title": "Thanks For Subscribing",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/thank-you.md",
        "canonical_url": "https://waylonwalker.com/thank-you",
        "cover_image": "https:waylonwalker.com/thank-you.png",
        "date": "2020-05-20 10:00:00+00:00",
        "description": "You're awesome! Thanks for subscribing to my newsletter.",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "<meta name='og:article:modified_time' content='2020-06-23T14:53:23Z'/>\n\n# \u2728 You're Awesome\n\nThank you so much for subscribing to my newsletter.  It's still early days, please let me know what you want to hear about, I would love to get the conversation started!\n\nMy hope is that you find some wicked sweet content here and stay tuned for more, but if you dont like it you can opt-out at any time.\n\n## What to expect\n\n* Weekly inspirational message based on my experiences breaking into the industry\n* monthly-ish message about what is going on new posts, life, updates\n* Future annouce premium content ( let me know what you think it should be )",
        "long_description": "\u2728 You're Awesome Thank you so much for subscribing to my newsletter. It's still early days, please let me know what you want to hear about, I would love to get the conversation started! My hope is that you find some wicked sweet content here and st..."
    },
    {
        "cover": "/static/dev-to-comments-from-url-xmas2020.png",
        "title": "How to get Dev Comments from an article Url",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/devto-comments-from-url.md",
        "canonical_url": "https://waylonwalker.com/devto-comments-from-url",
        "cover_image": "https:waylonwalker.com/dev-to-comments-from-url.png",
        "date": "2020-05-20 10:00:00+00:00",
        "description": "I want to incorporate some of the wonderful comments, \ud83d\udc95, \ud83e\udd84, and \ud83d\udd16's that I have been getting on dev.to on my website.  I have dabbled once or twice with no avail this time I am taking notes on my journey, so follow along and let's get there together.  By the end of this post, I will have a way to get comments from posts on the client-side thanks to the wonderfully open dev.to API.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I want to incorporate some of the wonderful comments, \ud83d\udc95, \ud83e\udd84, and \ud83d\udd16's that I have been getting on **dev.to** on my website.  I have dabbled once or twice with no avail this time I am taking notes on my journey, so follow along and let's get there together.  By the end of this post, I will have a way to get comments from posts on the client-side thanks to the wonderfully open dev.to API.\n\n## The API\n\ndev.to has an open API that allows us to easily get comments as HTML.  They have their API hosted at [https://docs.dev.to/api/#tag/comments](https://docs.dev.to/api/#tag/comments), let's take a look at it.\n\n![](https://waylonwalker.com/dev-to-api-comments.png)\n\nHere we can see that going to [https://dev.to/api/comments?a_id=270180](https://dev.to/api/comments?a_id=270180) returns us some json, that contains an array of comments.\n\n``` json\n[\n  {body_html: '<the comment rendered as html>',\n   user: {<an array with quite a bit of information about the commenting user>},\n   children: [<an array of child comment objects>]\n   <other stuff we don't care about>\n  },\n  <more comments>\n  ]\n```\n\n## What the heck is that a_id\n\nThat is an `article_id`.  Though a bit of searching I found that it occurs in at least four places on every page as a data attribute.  Using chrome dev tools I found a good place to \"query\" it from.\n\n![](https://waylonwalker.com/dev-to-article-id.png)\n\nWith this knowledge, we can fetch the contents of an article and pull the `articleId` from it.\n\n``` javascript\n    async function getDevToAId(url) {\n        // Gets the articleId of a dev.to article\n        const root = 'https://dev.to/'\n        if (!url.includes(root)) {\n            url = root + url\n        }\n        let domparser = new DOMParser()\n        const html = await fetch(url).then(r => r.text())\n        const doc = domparser.parseFromString(html, 'text/html')\n        const articleId = doc.querySelector('#article-body').dataset.articleId\n        return articleId\n    }\n```\n\n**note**  I do check to see if a full URL or slug was given, if it was just the slug I tack on `https://dev.to/` before fetching.\n\n## Now the comments\n\nThe main event is here, what you all have waited for, and it's by far the easiest part.\n\n``` javascript\n    async function getDevToComments(url) {\n        const articleId = await getDevToAId(url)\n        const response = await fetch(`https://dev.to/api/comments?a_id=${articleId}`)\n        const comments = await response.json()\n        return comments\n    }\n```\n\nThe hardest part of this was figuring out what the `a_id` was and how I was going to get it from some more commonly known information about my articles, the URL, or the slug\n\n## Try it out\n\n**F12** pop open your console right in dev tools of this post and try it out.\n\n![](https://waylonwalker.com/dev-to-comments-in-devtools.png)",
        "long_description": "I want to incorporate some of the wonderful comments, \ud83d\udc95, \ud83e\udd84, and \ud83d\udd16's that I have been getting on dev.to on my website. I have dabbled once or twice with no avail this time I am taking notes on my journey, so follow along and let's get there together...."
    },
    {
        "cover": "/static/brainstorming-kedro-hooks-xmas2020.png",
        "title": "Brainstorming Kedro Hooks",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/brainstorming-kedro-hooks.md",
        "canonical_url": "https://waylonwalker.com/brainstorming-kedro-hooks",
        "cover_image": "https:waylonwalker.com/brainstorming-kedro-hooks.png",
        "date": "2020-05-22 22:02:00+00:00",
        "description": "This post is a \ud83e\udde0 branstorming work in progress, I will likely use it as a storage location/brain dump of hook ideas.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This post is a \ud83e\udde0 branstorming work in progress.\n\n> ### What is Kedro \ud83e\udd14\n>\n> If you are completely unsure what kedro is be sure to check out my [what is kedro](https://waylonwalker.com/wike) post\n\n## after_catalog_created\n\n* filepath replacer\n* bucket replacer\n\n## before_pipeline_run\n\n* preflight\n* check that data exists\n* run `kedro_static_viz`\n* run mypy\n* run interrogate\n* run flake8\n\n## after_pipeline_run\n\n* Great Expectations\n* send email\n* send slack\n\n## before_node_run\n\n## after_node_run\n\n* Great Expectations\n* save stats/meta data\n*\n\n## Execution Order\n\nhooks are executed in reverse order of the hooks list.\n\nhooks with `tryfirst` will be moved to the end of the list\nhooks with `trylast` will be moved to the end of the list\n\n1. after_catalog_created\n2. before_pipeline_run\n\n* args\n  * run_params = run_params = {'run_id': '2020-05-23T15.24.23.958Z', 'project_path': '/mnt/c/temp/kedro0160', 'env': 'local', 'kedro_version': '0.15.9', 'tags': (), 'from_nodes': \\[\\], 'to_nodes': \\[\\], 'node_names': (), 'from_inputs': \\[\\], 'load_versions': {}, 'pipeline_name': None, 'extra_params': {}, 'git_sha': None}\n  * pipeline\n  * catalog\n\n1. before_node_run\n2. after_node_run\n3.\n\n## When does data get saved???\n\n* before or after node hook?\n\n## ??Unsure??\n\n* does before  catalog load have access to parameters?\n  * Yes\n*\n\n### \\[steel toes\\](https://github.com/waylonwalker/steel-toes/)6\n\n_I was way too excited about this one and already created it_\n\n_prevents pain from stepping on your teammates toes_\n\nKedro is so amazing at promoting collaboration between team members.  Each team member can check out the code, branch, and start work on their own section of the pipeline.  Issues can arrise if the team members section of the pipeline happen to cross.  Breaking changes happen, BREAKS during development happen and can completely kill a teammates workflow.\n\n* is there a way to prevent toe stepping?\n* try to load `filepath_<branch>`\n* if load fails try `filepath`\n* save data to `filepath_<branch>`\n\n**how**\n\n* on after_catalog_load check for existing \"branch\" data\n* if \"branch\" data exists load that\n* otherwise keep default\n*\n\n### Run only nodes that have changed\n\n* store a deephash of functions code\n* store a hash of the inputs\n* if neither code or inputs changed run function, otherwise skip.\n  * How could a hook choose to skip the node?\n\n## Static viz hook\n\nBefore pipeline run\n\n* make site\n* Set node status to queued\n\nBefore node run\n\n* Set running status\n\nAfter node run\n\n* Set running status\n\nOn pipeline error\n\n* Set run status\n\nOn node error\n\n* Set error status\n\nAfter pipeline run\n\n* Set complete status\n\nAfter node run\n\n* set complete",
        "long_description": "This post is a \ud83e\udde0 branstorming work in progress. What is Kedro \ud83e\udd14 If you are completely unsure what kedro is be sure to check out my what is kedro post after_catalog_created filepath replacer bucket replacer before_pipeline_run preflight check tha..."
    },
    {
        "cover": "/static/gatsby-scripts-with-onload-xmas2020.png",
        "title": "Gatsby Scripts with onload",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/gatsby-scripts-with-onload.md",
        "canonical_url": "https://waylonwalker.com/gatsby-scripts-with-onload",
        "cover_image": "https:waylonwalker.com/gatsby-scripts-with-onload.png",
        "date": "2020-05-22 05:00:00+00:00",
        "description": "This might be useful https://github.com/nfl/react-helmet/issues/146 https://github.com/gatsbyjs/gatsby/issues/13136",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This might be useful\n\n[https://github.com/nfl/react-helmet/issues/146](https://github.com/nfl/react-helmet/issues/146 \"https://github.com/nfl/react-helmet/issues/146\")\n\n[https://github.com/gatsbyjs/gatsby/issues/13136](https://github.com/gatsbyjs/gatsby/issues/13136 \"https://github.com/gatsbyjs/gatsby/issues/13136\")",
        "long_description": "This might be useful https://github.com/nfl/react-helmet/issues/146 https://github.com/gatsbyjs/gatsby/issues/13136..."
    },
    {
        "cover": "/static/configurable-kedro-hooks-xmas2020.png",
        "title": "Create Configurable Kedro Hooks",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-class-hooks.md",
        "canonical_url": "https://waylonwalker.com/kedro-class-hooks",
        "cover_image": "https:waylonwalker.com/configurable-kedro-hooks.png",
        "date": "2020-05-23 05:00:00+00:00",
        "description": "There are two main ways to create kedro hooks, with modules and classes.  Each one still uses the same verbiage as the function/method names.  Class hooks seem a bit special as they give you a way to configure them so that they are a bit more generally useful.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "There are two main ways to create kedro hooks, with modules and classes.  Each one still uses the same verbiage as the function/method names.\n\nClass hooks seem a bit special as they give you a way to configure them so that they are a bit more generally useful.\n\n> ### What is Kedro \ud83e\udd14\n>\n> If you are completely unsure what kedro is be sure to check out my [what is kedro](https://waylonwalker.com/wike) post\n\n## Installation\n\n.create a new environment manager of choice.  Here I will use `conda`. Then we will install `kedro` from pypi.\n\n``` bash\nconda create -n kedro_class_hooks -y\nconda activate kedro_class_hooks # may also be source activate kedro_class_hooks or activate kedro_class_hooks\npip install kedro\n```\n\n## Create a sample project\n\n> ### Kedro new\n>\n> For more details check out my full post on [kedro new](https://waylonwalker.com/knew)\n\nFor this post I really just want a working pipeline as fast as possible.  For this I am going to use iris pipeline that is generated from the `kedro new` command in the cli.  It's **important** that you answer `y` to create an example pipeline.\n\n> ### Hold On \u270b\n>\n> Did you create a separate environment for this?  Please do.\n\n``` bash\nkedro new\n```\n\nAfter you run the `kedro new` command it will ask a series of questions.  \ud83d\udc47 Here is how I answered them.\n\n``` bash\nProject Name:\n=============\nPlease enter a human readable name for your new project.\nSpaces and punctuation are allowed.\n [New Kedro Project]: Kedro Class Hooks\nRepository Name:\n================\nPlease enter a directory name for your new project repository.\nAlphanumeric characters, hyphens and underscores are allowed.\nLowercase is recommended.\n [kedro-class-hooks]:\nPython Package Name:\n====================\nPlease enter a valid Python package name for your project package.\nAlphanumeric characters and underscores are allowed.\nLowercase is recommended. Package name must start with a letter or underscore.\n [kedro_class_hooks]:\nGenerate Example Pipeline:\n==========================\nDo you want to generate an example pipeline in your project?\nGood for first-time users. (default=N)\n [y/N]: y\nChange directory to the project generated in /mnt/c/temp/kedro-hooks/\nA best-practice setup includes initialising git and creating a virtual environment before running `kedro install` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/\n```\n\n### Install the Project\n\nNext install the project itself and all of its dependencies with the `kedro install` command.\n\n``` bash\ncd kedro-hooks\nkedro install\n```\n\n### \ud83c\udfc3\u200d\u2640\ufe0f Run the pipeline\n\nBefore we start developing any hooks lets make sure everything is set up correctly by running the pipeline with `kedro run`.\n\n``` bash\nkedro run\n```\n\n## class hook without `self`\n\nA kedro class-based hook is a class with methods using the kedro lifecycle names, decorated with `@hook_impl`, If we create a class-based kedro hook without `self` in the method calls, we simply pass the hook class itself into the hooks list. And we are off.  Kedro will call each method as it hits that point in its lifecycle.  It will pass any of the possible arguments, see arguments below.  Each method has a different set of possible arguments.  You don't need to ask for all of them, but I did here so that you could see them.\n\n``` python\nfrom kedro.framework.hooks import hook_impl\n\nclass debug_hook:\n    \"\"\"debugs all kedro hook points\"\"\"\n\n\t@staticmethod\n    @hook_impl\n    def before_pipeline_run(run_params, pipeline, catalog):\n        \"pops into a debugger before pipeline run\"\n        print('I hooked in right before the pipeline run')\n        if self.should_before_pipeline_run:\n            breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def after_pipeline_run(run_params, pipeline, catalog):\n        \"pops into a debugger after pipeline run\"\n        print('I hooked in right after the pipeline run')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def on_pipeline_error(error, run_params, pipeline, catalog):\n        \"pops into a debugger on pipeline error\"\n        print('I hooked into the pipeline during an error')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def after_catalog_created(catalog, conf_catalog, conf_creds, feed_dict, save_version, load_versions, run_id):\n        \"pops into a debugger after catalog created\"\n        print('I hooked in right after the catalog created')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def before_node_run(node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger before node run\"\n        print('I hooked in right before the node run')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def after_node_run(node, catalog, inputs, outputs, is_async, run_id):\n        \"pops into a debugger after node run\"\n        print('I hooked in right after the node run')\n        breakpoint()\n\n\t@staticmethod\n    @hook_impl\n    def on_node_error(error, node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger on node error\"\n        print('I hooked into the node during an error')\n        breakpoint()\n```\n\n#### Implement the hook object\n\nWith this version of the hook it gets added to the `ProjectContext` as the class itself, not an instance.\n\n``` python\nclass ProjectContext(KedroContext):\n    \"\"\"Users can override the remaining methods from the parent class here,\n    or create new ones (e.g. as required by plugins)\n    \"\"\"\n\n    project_name = \"kedro_class_hooks\"\n    # `project_version` is the version of kedro used to generate the project\n    project_version = \"0.16.1\"\n    package_name = \"kedro_class_hooks\"\n\n    hooks = [\n        debug_hook\n    ]\n```\n\n## Generalizing debug_hook\n\nIf we want to generalize the debug hook and make it a bit more re-usable across all of our projects, we can include the `self` argument, on each method and a `__init__` method in which we can configure our hook.  This will make the hook configurable.  We can now create an instance of the `debug_hook` class, and tell it which lifecycle points should trigger the debugger.\n\n``` python\n\"\"\" Kedro Debug Hook module \"\"\"\nfrom kedro.framework.hooks import hook_impl\n\nclass debug_hook:\n    \"\"\" Kedro Debug Hook\n\n    Opens a debugger at any hook-able point of your kedro projects lifecycle.\n    debug_hook is applied by adding it to the pipeline and setting the desired\n    debug points to true.\n\n    Examples:\n\n        >>> hooks = [debug_hook(should_debug_all=True)]\n        >>> hooks = [debug_hook(should_debug_before_pipeline_run=True)]\n\n    Args:\n        should_debug_all (bool): overrides all points Defaults to False\n        should_debug_before_pipeline_run (bool): opens a debugger\n            before_pipeline_run if True Defaults to False\n        should_debug_after_pipeline_run (bool): opens a debugger\n            after_pipeline_run if True Defaults to False\n        should_debug_on_pipeline_error (bool): opens a debugger\n            on_pipeline_error if True Defaults to False\n        should_debug_before_node_run (bool): opens a debugger\n            before_node_run if True Defaults to False\n        should_debug_after_node_run (bool): opens a debugger\n            after_node_run if True Defaults to False\n        should_debug_on_node_error (bool): opens a debugger\n            on_node_error if True Defaults to False\n        should_debug_after_catalog_created (bool): opens a debugger\n            after_catalog_created if True Defaults to False\n\n    \"\"\"\n    def __init__(\n        self,\n        should_debug_all=False,\n        should_debug_before_pipeline_run=False,\n        should_debug_after_pipeline_run=False,\n        should_debug_on_pipeline_error=False,\n        should_debug_before_node_run=False,\n        should_debug_after_node_run=False,\n        should_debug_on_node_error=False,\n        should_debug_after_catalog_created=False,\n    ):\n        self.should_debug_before_pipeline_run = (\n            should_debug_before_pipeline_run or should_debug_all\n        )\n        self.should_debug_after_pipeline_run = (\n            should_debug_after_pipeline_run or should_debug_all\n        )\n        self.should_debug_on_pipeline_error = (\n            should_debug_on_pipeline_error or should_debug_all\n        )\n        self.should_debug_before_node_run = (\n            should_debug_before_node_run or should_debug_all\n        )\n        self.should_debug_after_node_run = (\n            should_debug_after_node_run or should_debug_all\n        )\n        self.should_debug_on_node_error = should_debug_on_node_error or should_debug_all\n        self.should_debug_after_catalog_created = (\n            should_debug_after_catalog_created or should_debug_all\n        )\n\n    @hook_impl\n    def before_pipeline_run(self, run_params, pipeline, catalog):\n        \"pops into a debugger before pipeline run\"\n        if self.should_debug_before_pipeline_run:\n            breakpoint()\n\n    @hook_impl\n    def after_pipeline_run(self, run_params, pipeline, catalog):\n        \"pops into a debugger after pipeline run\"\n        if self.should_debug_after_pipeline_run:\n            breakpoint()\n\n    @hook_impl\n    def on_pipeline_error(self, error, run_params, pipeline, catalog):\n        \"pops into a debugger on pipeline error\"\n        if self.should_debug_on_pipeline_error:\n            breakpoint()\n\n    @hook_impl\n    def after_catalog_created(\n        self,\n        catalog,\n        conf_catalog,\n        conf_creds,\n        feed_dict,\n        save_version,\n        load_versions,\n        run_id,\n    ):\n        \"pops into a debugger after catalog created\"\n        if self.should_debug_after_catalog_created:\n            breakpoint()\n\n    @hook_impl\n    def before_node_run(self, node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger before node run\"\n        if self.should_debug_before_node_run:\n            breakpoint()\n\n    @hook_impl\n    def after_node_run(self, node, catalog, inputs, outputs, is_async, run_id):\n        \"pops into a debugger after node run\"\n        if self.should_debug_after_node_run:\n            breakpoint()\n\n    @hook_impl\n    def on_node_error(self, error, node, catalog, inputs, is_async, run_id):\n        \"pops into a debugger on node error\"\n        if self.should_debug_on_node_error:\n            breakpoint()\n```\n\n#### implement the hook instance\n\nWhen `self` is used in the method calls we must pass an instance of the `debug_hook` into the hooks list, not the class itself.\n\n``` python\nclass ProjectContext(KedroContext):\n    \"\"\"Users can override the remaining methods from the parent class here,\n    or create new ones (e.g. as required by plugins)\n    \"\"\"\n\n    project_name = \"kedro_class_hooks\"\n    # `project_version` is the version of kedro used to generate the project\n    project_version = \"0.16.1\"\n    package_name = \"kedro_class_hooks\"\n\n    hooks = [debug_hook(should_debug_all=True)]\n```\n\n## Final thoughts\n\nHooks are an amazing addition to the kedro framework that will allow the community to make big changes to how their kedro project gets ran without needing to change kedro itself.  Using a hook class with self can make them so much more configurable, and reusable across different projects without a lot of extra code. Personally I still really like the module method that we used in [kedro-preflight](https://waylonwalker.com/creating-the-kedro-preflight-hook/).",
        "long_description": "There are two main ways to create kedro hooks, with modules and classes. Each one still uses the same verbiage as the function/method names. Class hooks seem a bit special as they give you a way to configure them so that they are a bit more generall..."
    },
    {
        "cover": "/static/001-xmas2020.png",
        "title": "",
        "tags": [
            "python",
            "kedro"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/001.md",
        "afterImage": "/kedro-logo.png",
        "canonical_url": "https://waylonwalker.com/001",
        "cover_image": "https:waylonwalker.com/001.png",
        "date": "2020-05-26 12:48:00+00:00",
        "description": "practice building pipelines with #kedro today ``` bash conda create -n learning-kedro-1 python=3.8 -y conda activate lea",
        "published": false,
        "content": "**practice** building pipelines with _#kedro_ today\n``` bash\nconda create -n learning-kedro-1 python=3.8 -y\nconda activate learning-kedro-1\npip install kedro kedro-viz\nkedro new\n# make sure to answer yes to adding example data your first time\n```",
        "long_description": "practice building pipelines with #kedro today ``` bash conda create -n learning-kedro-1 python=3.8 -y conda activate learning-kedro-1 pip install kedro kedro-viz kedro new make sure to answer yes to adding example data your first time ```..."
    },
    {
        "cover": "/static/kedro-static-viz-0-3-0-xmas2020.png",
        "title": "Kedro Static Viz 0.3.0 is out with Hooks Support",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-static-viz-0-3-0.md",
        "canonical_url": "https://waylonwalker.com/kedro-static-viz-0-3-0",
        "cover_image": "https:waylonwalker.com/kedro--viz-0-3-0.png",
        "date": "2020-05-28 05:00:00+00:00",
        "description": "kedro-static-viz is out with support for the newly released hooks feature.  This means that you can have `kedro-static-viz` automatically deploy a full gatsby site `before_pipeline_run` keeping your visualization always up to date.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "[kedro-static-viz](https://github.com/WaylonWalker/kedro-static-viz) is out with support for the newly released hooks feature.  This means that you can have `kedro-static-viz` automatically deploy a full gatsby site `before_pipeline_run` keeping your visualization always up to date.\n\n\n\nEven though it is a static site there is no functionality lost.  The only thing that's missing is the flask server.  With [kedro-static-viz](https://github.com/WaylonWalker/kedro-static-viz) you can deploy your visualization to a number of static hosting providers such as GitHub pages free of charge with wicked fast performance\n\n## \u26a1 It's Fast\n\nEven though it's built on gatsbyjs the full site builds in under 2s even on slower hardware.  This is because the site is already pre-rendered and stripped of any excess.  It's zipped up right into the python package and is typically used with the cli, but now can be used with python, or as a hook as well.\n\n> ### What is [kedro-viz](https://github.com/quantumblacklabs/kedro-viz) \ud83e\udd14\n\nKedro viz is a fantastic kedro plugin that allows you to visualize your data pipeline.  Kedro allows you to quickly build production-ready pipelines where you just configure a catalog, then toss python functions into a big pile.  Kedro figures out the order everything needs ran in for you, allows you to run a datasets dependencies or dependents only.  [kedro-viz](https://github.com/quantumblacklabs/kedro-viz) gives you a great way to see this ordering visually.\n\n![a visualization of a kedro data pipeline featuring data and functions flowing together.](https://waylonwalker.com/pipeline_visualisation-1.png \"kedro visualization\")\n\n> kedro visualization from the projects readme\n\n## Check out a live running example\n\nUsing the power of GitHub actions the I have built a kedro iris pipeline visualization that can be found on [https://static-viz.kedro.dev/](https://static-viz.kedro.dev/)\n\n## Itching to get started with kedro\n\nYou can be up and running in a matter of minutes if you already have python running on your machine.\n\nMake a virtual environment with your environment manager of choice.\n\n``` python\nconda create -n kedro-practice python=3.8 -y\nconda activate kedro-practice\n```\n\nInstall kedro. Then create a new project with their awesome cli template built on cookiecutter. Make sure to answer `y` to get a prebuilt example pipeline with data.\n\n    pip install kedro kedro-static-viz\n    kedro new\n\n## Vizualize your pipeline with the cli \u303d\n\nFor local use when you already have the full project `kedro viz` is a great tool to use, but this is an article about kedro-static-viz.\n\n``` python\nkedro-static-viz static-viz\n```\n\nSince we used `kedro-static-viz` you will have a new directory called `public` that you can host on any static web hosting service, like GitHub pages or Netlify.\n\n## Ready to try out the new hooks feature \ud83d\ude4b\u200d\u2640\ufe0f\n\nOpen up your `<project>/src/run.py` and add the hook to your `ProjectContext` class.  Next time you run your pipeline you will have an updated pipeline.\n\n``` python\nfrom kedro_static_viz.hooks import StaticViz\n\nclass ProjectContext(KedroContext):\n   project_name = \"kedro0160\"\n   project_version = \"0.16.1\"\n   package_name = \"kedro0160\"\n   hooks = [ StaticViz() ]\n```\n\n## Now Run that pipeline \ud83c\udfc3\u200d\u2640\ufe0f\n\nRun your pipeline and enjoy that fresh kedro viz each and every time you run your pipeline.\n\n``` bash\nkedro run\n```\n\n## Want to make your own hooks \ud83c\udfa3\n\nCheck out some of my other articles on building kedro hooks.\n\n[![creating customizable kedro hooks](https://waylonwalker.com/configurable-kedro-hooks.png)](https://waylonwalker.com/kedro-class-hooks/)\n\n[![creating the kedro preflight hook](https://waylonwalker.com/kedro-hooks.png)](https://waylonwalker.com/creating-the-kedro-preflight-hook/)\n\nCheck out the example \ud83d\udc49 [https://static-viz.kedro.dev/](https://static-viz.kedro.dev/)",
        "long_description": "kedro-static-viz is out with support for the newly released hooks feature. This means that you can have kedro-static-viz automatically deploy a full gatsby site before_pipeline_run keeping your visualization always up to date. Even though it is a st..."
    },
    {
        "cover": "/static/003-xmas2020.png",
        "title": "",
        "tags": [
            "kedro"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/003.md",
        "afterImage": "/static/kedro-logo.png",
        "canonical_url": "https://waylonwalker.com/003",
        "cover_image": "https:waylonwalker.com/003.png",
        "date": "2020-05-31 04:37:25+00:00",
        "description": "\ud83d\udd25 #kedrotips hooks can be created using modules ``` kedro-hooks/src/kedro-hooks/preflight.py from kedro.hooks import hoo",
        "published": false,
        "content": "\ud83d\udd25 #kedrotips hooks can be created using modules\n\n\n```\n# kedro-hooks/src/kedro-hooks/preflight.py\nfrom kedro.hooks import hook_impl\nfrom kedro.io.core import DataSetNotFoundError\nfrom colorama import Fore\nimport textwrap\n\n\n@hook_impl\ndef before_pipeline_run(run_params, pipeline, catalog):\n    missing_input = [i for i in pipeline.inputs() if not getattr(catalog.datasets, i)._exists()]\n    if len(missing_input) != 0:\n        raise DataSetNotFoundError(textwrap.dedent(f'''\n\n    {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015  {Fore.RED}PREFLIGHT ERROR {Fore.LIGHTBLACK_EX}\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n    {Fore.RESET} preflight of pipeline failed due to {Fore.YELLOW}missing datasets\n    {Fore.BLUE} {missing_input}{Fore.RESET}\n    '''))\n```",
        "long_description": "\ud83d\udd25 #kedrotips hooks can be created using modules ``` kedro-hooks/src/kedro-hooks/preflight.py from kedro.hooks import hook_impl from kedro.io.core import DataSetNotFoundError from colorama import Fore import textwrap @hook_impl def before_pipeline_run..."
    },
    {
        "cover": "/static/004-xmas2020.png",
        "title": "",
        "tags": [
            "kedro"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/004.md",
        "afterImage": "/static/kedro-logo.png",
        "canonical_url": "https://waylonwalker.com/004",
        "cover_image": "https:waylonwalker.com/004.png",
        "date": "2020-05-31 19:22:07+00:00",
        "description": "\ud83d\udd25 #kedrotips use find-kedro to assembly your pipelines ``` python from kedro.context import KedroContext from find_kedro",
        "published": false,
        "content": "\ud83d\udd25 #kedrotips use find-kedro to assembly your pipelines\n\n\n``` python\nfrom kedro.context import KedroContext\nfrom find_kedro import find_kedro\n\nclass ProjectContext(KedroContext):\n    def _get_pipelines(self) -> Pipeline:\n        return find_kedro()\n```",
        "long_description": "\ud83d\udd25 #kedrotips use find-kedro to assembly your pipelines ``` python from kedro.context import KedroContext from find_kedro import find_kedro class ProjectContext(KedroContext): def _get_pipelines(self) -> Pipeline: return find_kedro() ```..."
    },
    {
        "cover": "/static/building-kedro-dev-xmas2020.png",
        "title": "Building kedro.dev",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/building-kedro-dev.md",
        "canonical_url": "https://waylonwalker.com/building-kedro-dev",
        "cover_image": "https:waylonwalker.com/building-kedro-dev.png",
        "date": "2020-06-05 05:00:00+00:00",
        "description": "This is my journey to building up the community page.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Follow along the Journey as I build out [kedro.dev](https://kedro.dev).\n\n## Building a Community\n\nI have really enjoyed my own personal journey as I have started to build all of my data pipeline projects with the kedro framework.  I want to start building a place to share resources with the community.  I want to see this community grow and flourish.  They say in front end web development if you are not using a framework you end up building one.  That's exactly what I was doing before I started using kedro.  I want to build out a set of resources that this community can learn from and start to use the framework at their own pace without needing to develop their own from scratch.\n\n## research\n\nLooking into the front end frameworks to see how they welcome their community.  Much of my inspiration is from them, bringing lessons learned to data.\n\n### pages\n\n* banner\n* nav\n\t* docs -> readthedocs\n    * tutorial -> kedro-examples\n    * blog -> medium\n    * community\n    \t* support\n        * team\n        * courses\n        * examples\n        * meetups\n        * conferences\n        * articles\n        * podcasts\n        * videos\n        * external resources\n\t* search\n* examples\n* footer\n* sponsors\n* newsletter\n* copyright\n*\n\n### components\n\n* edit this page\n* scrolling toc\n\n## Stack Overflow Api\n\nfetch last 5 posts.\n\n```\nhttps://api.stackexchange.com/2.2/questions?order=desc&sort=activity&site=stackoverflow&tagged=kedro&pagesize=5\n```\n\n## DEV.to api\n\nfetch last 5 posts\n\n```\nhttps://dev.to/api/articles?tag=kedro&per_page=5&page=1\n```",
        "long_description": "Follow along the Journey as I build out kedro.dev. Building a Community I have really enjoyed my own personal journey as I have started to build all of my data pipeline projects with the kedro framework. I want to start building a place to share res..."
    },
    {
        "cover": "/static/pre-commit-is-awesome-xmas2020.png",
        "title": "pre-commit is awesome",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/pre-commit-is-awesome.md",
        "canonical_url": "https://waylonwalker.com/pre-commit-is-awesome",
        "cover_image": "https:waylonwalker.com/pre-commit-is-awesome.png",
        "date": "2020-06-05 05:00:00+00:00",
        "description": "I recently discovered the \u2728 awesomeness that is pre-commit. I steered away from it for so long because it seemed like a big daunting thing to set up, but really it's easy. It will automatically run checks for you. In some cases, it will even automatically fix them for you. Out of the box, it will do things like automatically trim extra whitespace, fix file endings, and ensure file sizes are not too large for git.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I recently discovered the \u2728 awesomeness that is pre-commit. I steered away from it for so long because it seemed like a big daunting thing to set up, but really it's easy. It will automatically run checks for you. In some cases, it will even automatically fix them for you. Out of the box, it will do things like automatically trim extra whitespace, fix file endings, and ensure file sizes are not too large for git.\n\n## Quickstart\n\nIt comes with a `sample-config` that is pretty general purpose and use for just about any project in git.\n\n``` bash\npip instal pre-commit\npre-commit sample-config > .pre-commit-config.yaml\npre-commit install\ngit add .\ngit commit -m \"added pre-commit\"\n```\n\n## Cloned Repo\n\nOnce someone has created the `.pre-commit-config.yaml` everyone on the team will want to be running it for consistency's sake. (make sure everyone agrees with the config you have chosen first). Simply install the existing config.\n\n``` bash\npip install pre-commit\ngit clone <repo>\npre-commit install\ngit add .\ngit commit -m \"added pre-commit\"\n```\n\n## sample-config\n\nThe sample configuration does some really basic, file ending, trailing-whitespace fixing. And checks for files too large for git. This one saved me when I tried to commit linux `rpm` once \ud83e\udd26\u200d\u2640\ufe0f.\n\n``` yaml\n# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.4.0\n    hooks:\n    - id: trailing-whitespace\n    - id: end-of-file-fixer\n    - id: check-yaml\n    - id: check-added-large-files\n```\n\n## Adding some extras from pre-commit themselves\n\nHere I have added a couple of extra ones form pre-commit\n\n``` yaml\n    - id: check-case-conflict # Check for files that would conflict in case-insensitive filesystems\n    - id: check-merge-conflict # Check for files that contain merge conflict strings.\n    - id: debug-statements # Check for debugger imports and py37+ `breakpoint()` calls in python source.\n    - id: requirements-txt-fixer # Sorts entries in requirements.txt\n    - id: forbid-new-submodules # Check for git submodules\n    - id: flake8 # runs python flake8\n```\n\nThe submodules one is big. I have seen several folks trying to learn git for the first time mistakenly start nesting all of their projects underneath each other and eventually losing a lot of work. Trying to learn the command line and git all at once can be really confusing.\n\n## skip pre-commit\n\nSo you have a big codebase and you are trying to get pre-commit ready, but you just need your changes in.\n\n``` yaml\ngit commit -m \"commiting wihout pre-commit\" --no-verify\n```\n\n## manually run pre-commit\n\nIf you have an existing repo and want to run pre-commit on everything, since it was pre-existing, you can do that manually.\n\n``` yaml\npre-commit run --all-files\n```\n\n## So pre-commit changed some files\n\nSince `pre-commit` only runs against staged files, but makes changes to the local files you need to add them.\n\nHere is a git status after committing with some trailing whitespace issues.\n\n``` bash\n\u276f git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        modified: README.md\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified: README.md\n```\n\n`pre-commit` will keep yelling at you about `trailing whitespace` until you add the files.\n\n``` bash\ngit add README.md\n```\n\n## Community Developed plugins\n\n_give me more_\n\nThese almost make it **too** easy. Sharing your process to get up and running without `pre-commit` can involve a lot of instructions. Installing several different tools, then running them manually, probably forgetting to do so sometimes. These will automatically install and only run scoped to the files that have changed, not on the whole repo.\n\n### isort\n\n``` yaml\n- repo: https://github.com/asottile/seed-isort-config\nrev: v2.1.1\nhooks:\n    - id: seed-isort-config\n- repo: https://github.com/pre-commit/mirrors-isort\nrev: v4.3.21\nhooks:\n    - id: isort\n```\n\n### .isort.cfg\n\nIn order to get isort to play nicely with black, I found great success with the following config placed in the root of the repo at `.isort.cfg`. Without these settings, I found that you commits will consistently fail checks because `isort` and `black` are fighting each other.\n\n``` toml\n[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n```\n\n### .flake8\n\nJust as with `isort` flake8 tends to complain about a few things that black does. To get them to play nicely together place this file in the root of the repo at `.flake8`.\n\n``` toml\n# taken from black\n# added E231 as is conflicts with black formatting\n[flake8]\nignore = E203, E266, E501, W503, E231, F541\nmax-line-length = 88\nmax-complexity = 18\nselect = B,C,E,F,W,T4,B9\n```\n\n### black\n\nBlack is an amazing CLI tool the python community has been blessed with. It was developed by python core dev Lukasz Langa after deep research of real python projects. It will autoformat your project and will check that the AST before and after remains the same ensuring that the code will run exactly the same. It only makes it more readable. I keep black installed and set to run on save. Many times I will bang out some sloppy code with long lines or poor indentation hit save and let black take care of the easy work.\n\n``` yaml\n- repo: https://github.com/asottile/blacken-docs\n    rev: v1.7.0\n    hooks:\n        - id: blacken-docs\n        - additional_dependencies: [black]\n- repo: https://github.com/psf/black\n    rev: 19.3b0\n    hooks:\n        - id: black\n```\n\n### mypy\n\nI have recently fallen in love with mypy. It has saved me from shipping some bugs that would not have been caught with tests, even with 100% coverage. I don't have 100% coverage across every possible type entered.\n\n``` yaml\n    - repo: https://github.com/pre-commit/mirrors-mypy\n      rev: v0.720\n      hooks:\n          - id: mypy\n            exclude: tests/\n```\n\n## Your own plugin\n\nSometimes you have a CLI tool that you want to run, but there is no plugin. No worries, you can install manually set the repo to local, and add an entry for your CLI command to run.\n\n``` yaml\n    - repo: local\n      hooks:\n          - id: interrogate\n   \t\t  name: \"Interrogate docstring coverage check\"\n          types: [file, python]\n          entry: interrogate -f 100 -vv\n```\n\n***\n\nI have been writing short snippets about my mentality breaking into the tech/data industry in my newsletter, \ud83d\udc47 check it out and lets get the conversation started.\n\n[![Sign up for my Newsletter](https://waylonwalker.com/waylon-walker-newsletter.png)](https://waylonwalker.com/newsletter)",
        "long_description": "I recently discovered the \u2728 awesomeness that is pre-commit. I steered away from it for so long because it seemed like a big daunting thing to set up, but really it's easy. It will automatically run checks for you. In some cases, it will even automati..."
    },
    {
        "cover": "/static/007-xmas2020.png",
        "title": "",
        "tags": [],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/007.md",
        "afterImage": "/static/isort_logo.png",
        "canonical_url": "https://waylonwalker.com/007",
        "cover_image": "https:waylonwalker.com/007.png",
        "date": "2020-06-06 18:18:11+00:00",
        "description": "Get isort and black to cooperate bash [settings] multi_line_output=3 include_trailing_comma=True force_grid_wrap=0 use_p",
        "published": false,
        "content": "Get **isort** and **black** to _cooperate_\n\n``` bash\n[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n```\n\nstore this in `.isort.cfg`",
        "long_description": "Get isort and black to cooperate bash [settings] multi_line_output=3 include_trailing_comma=True force_grid_wrap=0 use_parentheses=True line_length=88 store this in .isort.cfg..."
    },
    {
        "cover": "/static/005-xmas2020.png",
        "title": "",
        "tags": [
            "git",
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/005.md",
        "afterImage": "/static/git-icon-1788c.png",
        "canonical_url": "https://waylonwalker.com/005",
        "cover_image": "https:waylonwalker.com/005.png",
        "date": "2020-06-06 18:12:10+00:00",
        "description": "pre-commit setup is simple bash pip instal pre-commit pre-commit sample-config > .pre-commit-config.yaml pre-commit inst",
        "published": false,
        "content": "**pre-commit** setup is _simple_\n\n``` bash\npip instal pre-commit\npre-commit sample-config > .pre-commit-config.yaml\npre-commit install\ngit add .\ngit commit -m \"added pre-commit\"\n```\n\n**Try** it yourself",
        "long_description": "pre-commit setup is simple bash pip instal pre-commit pre-commit sample-config > .pre-commit-config.yaml pre-commit install git add . git commit -m \"added pre-commit\" Try it yourself..."
    },
    {
        "cover": "/static/006-xmas2020.png",
        "title": "",
        "tags": [
            "git",
            "python",
            "cli"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/006.md",
        "afterImage": "/static/git-icon-1788c.png",
        "canonical_url": "https://waylonwalker.com/006",
        "cover_image": "https:waylonwalker.com/006.png",
        "date": "2020-06-06 18:14:14+00:00",
        "description": "Setup pre-commit for isort yaml - repo: https://github.com/asottile/seed-isort-config rev: v2.1.1 hooks:",
        "published": false,
        "content": "Setup **pre-commit** for _isort_\n\n``` yaml\n  - repo: https://github.com/asottile/seed-isort-config\n    rev: v2.1.1\n    hooks:\n      - id: seed-isort-config\n  - repo: https://github.com/pre-commit/mirrors-isort\n    rev: v4.3.21\n    hooks:\n      - id: isort\n```\n\n_includes automatic_ .isort-config",
        "long_description": "Setup pre-commit for isort yaml - repo: https://github.com/asottile/seed-isort-config rev: v2.1.1 hooks: - id: seed-isort-config - repo: https://github.com/pre-commit/mirrors-isort rev: v4.3.21 hooks: - id: isort inclu..."
    },
    {
        "cover": "/static/008-xmas2020.png",
        "title": "",
        "tags": [
            "git"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/008.md",
        "afterImage": "/static/git-icon-1788c.png",
        "canonical_url": "https://waylonwalker.com/008",
        "cover_image": "https:waylonwalker.com/008.png",
        "date": "2020-06-07 01:58:03+00:00",
        "description": "compare feature branch to main with git cli bash git diff main..feature",
        "published": false,
        "content": "compare _feature_ branch to _main_ with **git** cli\n\n``` bash\ngit diff main..feature\n```",
        "long_description": "compare feature branch to main with git cli bash git diff main..feature..."
    },
    {
        "cover": "/static/009-xmas2020.png",
        "title": "",
        "tags": [
            "data",
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/009.md",
        "afterImage": "/static/python.png",
        "canonical_url": "https://waylonwalker.com/009",
        "cover_image": "https:waylonwalker.com/009.png",
        "date": "2020-06-07 02:02:58+00:00",
        "description": "Combine a directory of csv's with pandas ``` python import pandas as pd from pathlib import Path csvs = Path.glob('raw/*",
        "published": false,
        "content": "Combine a directory of _csv's_ with **pandas**\n\n``` python\nimport pandas as pd\nfrom pathlib import Path\n\ncsvs = Path.glob('raw/*.csv')\ncsvs_combined = pd.concat(csvs)\ncsvs_combined.to_csv('processed/combined.csv')\n```",
        "long_description": "Combine a directory of csv's with pandas ``` python import pandas as pd from pathlib import Path csvs = Path.glob('raw/*.csv') csvs_combined = pd.concat(csvs) csvs_combined.to_csv('processed/combined.csv') ```..."
    },
    {
        "cover": "/static/010-xmas2020.png",
        "title": "",
        "tags": [
            "data",
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/010.md",
        "afterImage": "/static/python.png",
        "canonical_url": "https://waylonwalker.com/010",
        "cover_image": "https:waylonwalker.com/010.png",
        "date": "2020-06-07 02:07:13+00:00",
        "description": "load remote data with pandas python import pandas as pd cars_url = 'waylonwalker.com/cars.csv' cars = pd.read_csv(cars_u",
        "published": false,
        "content": "load remote _data_ with **pandas**\n\n``` python\nimport pandas as pd\ncars_url = 'waylonwalker.com/cars.csv'\ncars = pd.read_csv(cars_url)\n```",
        "long_description": "load remote data with pandas python import pandas as pd cars_url = 'waylonwalker.com/cars.csv' cars = pd.read_csv(cars_url)..."
    },
    {
        "cover": "/static/013-xmas2020.png",
        "title": "",
        "tags": [
            "blog"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/013.md",
        "afterImage": "/8bit.png",
        "canonical_url": "https://waylonwalker.com/013",
        "cover_image": "https:waylonwalker.com/013.png",
        "date": "2020-06-07 02:12:24+00:00",
        "description": "Blog consistently Even if you think a topic has been blogged to death There is one thing they are all missing.... Your",
        "published": false,
        "content": "# Blog consistently\n\nEven if you _think_ a topic has been blogged to death\n\n> There is one thing they are _all_ missing....\n\n**Your unique perspective**",
        "long_description": "Blog consistently Even if you think a topic has been blogged to death There is one thing they are all missing.... Your unique perspective..."
    },
    {
        "cover": "/static/011-xmas2020.png",
        "title": "",
        "tags": [
            "data",
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/011.md",
        "afterImage": "/static/python.png",
        "canonical_url": "https://waylonwalker.com/011",
        "cover_image": "https:waylonwalker.com/011.png",
        "date": "2020-06-07 02:09:58+00:00",
        "description": "Load data from database into pandas ``` python import pandas as pd from sqlalchemy import create engine engine = create_",
        "published": false,
        "content": "Load _data_ from database into **pandas**\n\n``` python\nimport pandas as pd\nfrom sqlalchemy import create engine\n\nengine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')\n\nsql = 'select * from inventory'\n\nwith engine.connect() as connection:\n    inventory = pd.read_sql(sql, con)\nengine.dispose()\n\n```",
        "long_description": "Load data from database into pandas ``` python import pandas as pd from sqlalchemy import create engine engine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase') sql = 'select * from inventory' with engine.connect() as connection:..."
    },
    {
        "cover": "/static/012-xmas2020.png",
        "title": "",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/012.md",
        "afterImage": "/static/python.png",
        "canonical_url": "https://waylonwalker.com/012",
        "cover_image": "https:waylonwalker.com/012.png",
        "date": "2020-06-07 02:12:24+00:00",
        "description": "autoreload your imports in ipython for \u26a1 fast development python c.InteractiveShellApp.extensions = ['autoreload'] c.Int",
        "published": false,
        "content": "**autoreload** your imports in ipython for \u26a1 fast development\n\n``` python\nc.InteractiveShellApp.extensions = ['autoreload']\nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")')\n```\n\ud83d\udc46 add this to your `~/.ipython/profile_default/ipython_config.py.`",
        "long_description": "autoreload your imports in ipython for \u26a1 fast development python c.InteractiveShellApp.extensions = ['autoreload'] c.InteractiveShellApp.exec_lines = ['%autoreload 2'] c.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipy..."
    },
    {
        "cover": "/static/python-args-kwargs-xmas2020.png",
        "title": "understanding python *args and **kwargs",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/python-args-kwargs.md",
        "canonical_url": "https://waylonwalker.com/python-args-kwargs",
        "cover_image": "https:waylonwalker.com/python-args-kwargs.png",
        "date": "2020-06-10 05:00:00+00:00",
        "description": "Python `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "<style>\n/* h2 {display: block;} */\nh2>img { margin: auto; width: 100%;}\n</style>\n\nPython `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.\n\n\n\n## *args are for lists\n\n*args are some magical syntax that will collect function arguments into a list, or unpack a list into individual arguments.\n\n## ![recieving *args](https://waylonwalker.com/args-kwargs/1.png \"sending *args collects all arguments into a list inside of the function\")\n\nWhen recieving variables as a `*<varname>`, commonly `*args`, the arguments get **packed** into an ordered list.\n\n> Never add *args to your function definition (almost never)\n\nGenerally I find `*args` poor naming and it only drives confusion to the user looking at your function trying to decide what exactly it does.  Here I have chosen the name `printrows` since we are printing each item as a row.\n\n``` python\ndef printer(*printrows: str) -> None:\n  for i, row in enumerate(printrows):\n    print(i, row)\n```\n\n``` python\n>>> printer('eggs', 'spam', 'ham')\n0 eggs\n1 spam\n2 ham\n```\n\n## Be Aware of AntiPatterns\n\nIf your `*args` collection is distictly different things, then make them separate variables.  Using `*args` as a crutch can lead to a really confusing api for your users, even yourself.\n\n## \u274c\n\nHere `*args` is confusing as we are a bit unsure of what to pass to `get_user_data`, or which order it needs to be in without reading the code.\n\n``` python\ndef get_user_data(*args):\n  \"does stuff given a users GitHub and DevTo username\"\n  github = reuqests.get(f'https://api.github.com/users/{args[0]}')\n  devto = requests.get(f'https://dev.to/api/users/by_username?url={args[1]}')\n  ...\n```\n\n## \u2714\n\nHere the function signature makes it clear what `get_user_data` expects.  Users will not have to read your docstring or worse your source code to understand it each time the reference it.\n\n``` python\ndef get_user_data(github_username, devto_username):\n  \"does stuff given a users GitHub and DevTo username\"\n  github = reuqests.get(f'https://api.github.com/users/{github_username}')\n  devto = requests.get(f'https://dev.to/api/users/by_username?url={devto_username}')\n  ...\n```\n\n## ![sending *args](https://waylonwalker.com/args-kwargs/2.png \"sending *args unpacks a list into individual arguments to be used in the function\")\n\nInversely we can send a list of things as individual arguments by **unpacking** them into the function call.\n\n``` python\n>>> things_to_print = ['eggs', 'spam', 'ham']\n>>> printer(*things_to_print)\n0 eggs\n1 spam\n2 ham\n```\n\n---\n\n## **kwargs are for dictionaries\n\nJust like `*args` being for lists, `**kwargs` are for dictionaries.  When packing them up inside of a function. The argument name passed in becomes the key, then invers happens when unpacking, the key becomes the argument for the function.\n\n## ![recieving **kwargs](https://waylonwalker.com/args-kwargs/3.png)\n\nHere is a function accepting `**printrows` as it's only input. Any keyword argument that you pass into the function will get packed into a dictionary.\n\n``` python\ndef printer(**printrows: str) -> None:\n  for key in printrows:\n    print(key, printrows[key])\n```\n\n``` python\n>>> printer(breakfast='eggs', lunch='spam', dinner='ham')\nbreakfast eggs\nlunch spam\ndinner ham\n```\n\nAny arguments passed in will throw a `TypeError`, since this `printer` does not accept any positional arguments.\n\n``` python\n>>>printer('one')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-2-f03e96cb5e14> in <module>\n----> 1 printer(\"one\")\n\nTypeError: printer() takes 0 positional arguments but 1 was given\n```\n\n## Avoid Anti-Patterns\n\nJust as above, if your items are clearly separate things, make them separate things and do not use `**kwargs`.  `**kwargs` are great when you have collections of things that all get treated exactly the sam, if they get treated differently, or you are expecting certain keys to always exist it will be very confusing to your users what they need to pass in.\n\n## ![sending **kwargs](https://waylonwalker.com/args-kwargs/4.png)\n\nSending `**kwargs` is quite useful.  Especially when combining various libraries together.  Often times you can coerse objects into a dictionary, often with something like `.to_dict()`, then pass that whole dictionary to another function.  This makes gluing different libraries together a breeze at times.\n\n\n``` python\n>>> things_to_print = {breakfast:'eggs', lunch:'spam', dinner:'ham'}\n>>> printer(**things_to_print)\nbreakfast eggs\nlunch spam\ndinner ham\n```\n\n---\n\nI setup a repl.it with these examples so that you can quickly jump in, run it, break it, fix it, add breakpoints and really get a feel for them yourself. Check it out \ud83d\udc49 [https://repl.it/@WaylonWalker/args#main.py](https://repl.it/@WaylonWalker/args#main.py)\n\n---\n\nI hope this helps you understand `*args` and `**kwargs` just a bit more.  They can be quite handy to greatly simplify repetative code, expecially if we already have the data setup in the right data structure.",
        "long_description": "Python *args and **kwargs are super useful tools, that when used properly can make you code much simpler and easier to maintain. Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Be..."
    },
    {
        "cover": "/static/gracefully-redirect-xmas2020.png",
        "title": "Refactoring your blog urls",
        "tags": [
            "webdev",
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/gracefully-redirect.md",
        "canonical_url": "https://waylonwalker.com/gracefully-redirect",
        "cover_image": "https:waylonwalker.com/gracefully-redirect.png",
        "date": "2020-06-11 05:00:00+00:00",
        "description": "I just did a quick refactoring of my JAMStack blog urls.  Some didn't fit with my style, some had `_` that I wanted to switch to `-`, and others were rediculously long.  I've been using forestry as my CMS, I write many of my posts there, and sometimes it picks some crazy file names (based on my titles).  It was time to refactor.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I just did a quick refactoring of my JAMStack blog urls.  Some didn't fit with\nmy style, some had `_` that I wanted to switch to `-`, and others were\nrediculously long.  I've been using forestry as my CMS, I write many of my\nposts there, and sometimes it picks some crazy file names (based on my titles).\nIt was time to refactor.\n\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/refactor-in-cli/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/caee54c45632d974fe802bdbb34f8b54/630fb/refactor-in-cli-xmas2020.png\" alt=\"article cover for Large Refactor At The Command Line\">\n<div class=\"right\">\n    <h2>Large Refactor At The Command Line</h2>\n    <p class=\"description\">\n    As projects grow patterns that worked early on break and we need to change things to make the project easier to work wit\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> When refactorings similar to this get really big I often need to do some\n> project wide find an replace, I usually do this right from the command line.\n\n## \ud83d\udd8a Rename posts _change the filename_\n\nMy post urls are based on the file name of my markdown file, so I can simply go\nthrough my filesystem and rename anything I want.  From here its probably best\nto only commit the addition of the new file name, until the redirects clear,\nbut these are all low traffic posts for me so I just commited both at once.\n\n> Safely redirect without breaking links\n\n## _redirects \u2934 _/redirects_\n\nI am hosted on netlify, which automatically puts very \u26a1 performant redirects\non the edge based on a `/_redirects` route on your site.  So I added a redirect\nfrom the old route to the new route there.\n\n## rename long posts\n\n``` bash \n/blog/i-finally-fixed-my-styled-components-in-gatsby-js\n/blog/fix-styled-components-in-gatsby\n/blog/interrogate-is-a-pretty-awesome-brand-new-cli-for-python-packages\n/blog/interrogate\n```\n\n## pedantic \ud83e\udd14 _probably_\n\nThis is probably being a bit pedantic.  Realistically my urls were probably ok.\nThese posts probably aren't going to be topping the google search charts\nanyways, but I wanted to do it without killing off any links that I may have\nhappened to post somewhere.",
        "long_description": "I just did a quick refactoring of my JAMStack blog urls. Some didn't fit with my style, some had _ that I wanted to switch to -, and others were rediculously long. I've been using forestry as my CMS, I write many of my posts there, and sometimes it..."
    },
    {
        "cover": "/static/master-no-more-xmas2020.png",
        "title": "Master No More",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/master-no-more.md",
        "canonical_url": "https://waylonwalker.com/master-no-more",
        "cover_image": "https:waylonwalker.com/master-no-more.png",
        "date": "2020-06-11 05:00:00+00:00",
        "description": "It's been a long time coming.  We use some very harsh language within tech so much sometimes that we become numb to it.  It's time to do my very small part in this movement and purge this language from my active repos starting with this blog right here.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "It's been a long time coming.  We use some very harsh language within tech so much sometimes that we become numb to it.  It's time to do my very small part in this movement and purge this language from my active repos starting with this blog right here.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/refactor-in-cli/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/caee54c45632d974fe802bdbb34f8b54/630fb/refactor-in-cli-xmas2020.png\" alt=\"article cover for Large Refactor At The Command Line\">\n<div class=\"right\">\n    <h2>Large Refactor At The Command Line</h2>\n    <p class=\"description\">\n    As projects grow patterns that worked early on break and we need to change things to make the project easier to work wit\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> this post follows my method of refactoring code bases from the command line,\n> read more about that in this article.\n\n## c-s-f\n\nFirst off browsing through the content of my blog I found many references to master.  I cannot completely whole-sale find and replace each one of them, because some of them are links that I do not own.  Any set of instructions got upgraded from `master` to `main`\n\n\n``` diff\n-  git checkout master\n+  git checkout main\n```\n\nThere were countless cases of examples like this to comb through, but it feels good to have them purged of old language.\n\n\n## rename routes\n\n\nFollowing yesterdays post, I am going to rename my markdown files\n\n> /static/_redirects\n\n### shorteners\n\n``` diff\n- /gdfm              /blog/today-i-learned-git-diff-feature-master/\n- /blog/gdfm         /blog/today-i-learned-git-diff-feature-master/\n+ /gdfm              /blog/today-i-learned-git-diff-feature-main/\n+ /blog/gdfm         /blog/today-i-learned-git-diff-feature-main/\n```\n\n### redirect posts\n\n``` diff\n+ # master -> main\n+\n+ /blog/today-i-learned-git-diff-feature-master/   /blog/git-diff-feature-main/\n```\n\n### redirect external links to repo\n\n``` diff\n- /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/master/static/_redirects\n+ /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/main/static/_redirects\n```\n\nMore info on refactoring your blog routes with netlify here.\n\n[![gracefully redirect cover image](https://waylonwalker.com/gracefully-redirect.png)](https://waylonwalker.com/gracefully-redirect/)\n\n\n## _\"Edit This post\"_ Links\n\nI literally just added _\"edit this post\"_ links to my rss feed and my blog feed.  This was a simple find and replace inside of my blog template and `gatsby-config.js`\n\n## Don't Forget about CI\n\nIf you have build/deploy processes that specifically run on master or not on master dont forget to change those to main.  I did everything in a single commit and as soon as I pushed to main it started deploying gloriously.\n\n``` diff\nname: \ud83c\udf31 Deploy site\n\non:\n  push:\n    branches:\n-      - master\n+      - main\n```\n\n## Now the fun part\n_removing **master** completely_\n\nI mostly just followed this [post by Scott Hanselman](https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx).\n\n``` bash\ngit branch -m master main\ngit push -u origin main\n```\n\nThen from GitHub go to settings>default branch> select main and accept the risk involved.\n\nAfter your default is set to main, you have no use for master in your life anymore, time to purge it completely once and for all.  Go to <repo>/branches and trash it.\n\n![delete master](https://waylonwalker.com/delete-master.png)\n\n\n## Stop the Bleeding\n\n\nI like how Scott included this nice alias for starting from main from the beginning.\n\n``` bash\ngit config --global alias.new '!git init && git symbolic-ref HEAD refs/heads/main'\n```\n\n## See the Full Diff\n\nIf you happen to want to see the full diff of my change you can see it [here](https://github.com/WaylonWalker/waylonwalkerv2/commit/4bd26ba8faaf7c72e01cc4946d989e3284302cd0).",
        "long_description": "It's been a long time coming. We use some very harsh language within tech so much sometimes that we become numb to it. It's time to do my very small part in this movement and purge this language from my active repos starting with this blog right he..."
    },
    {
        "cover": "/static/waylon-walker-newsletter-xmas2020.png",
        "title": "Newsletter 3",
        "tags": [
            "newsletter"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/newsletter/AUG2020.md",
        "canonical_url": "https://waylonwalker.com/AUG2020",
        "cover_image": "https:waylonwalker.com/waylon-walker-newsletter.png",
        "date": "2020-06-11 05:00:00+00:00",
        "description": null,
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "It's been quite a busy Month and a half since my last official newsletter With about 14 individual posts going live since then.  I pushed hard over the past two weeks and just made a lot of content about things that I actually do.  Many of these were things that I know quite well and were quite quick to write.  I really enjoyed putting them out there and seeing all of the comments and feedback roll in.\n\n## Highlights\n\n### [Integration testing with Python, TestProject.io, and GitHub Actions](https://waylonwalker.com/testproject-io-py-actions/)\n\nI learned the most from this post.  It's been awhile since I had done any testing with selenium and I wanted to brush up on those skills for some upcoming work.  I chose to test my own website, run it on github actions and use TestProject for reporting.\n\n### [Creating Reusable Bash Scripts](https://waylonwalker.com/reusable-bash/)\n\nI've been writing a ton of bash scripts lately.  In this article I write down a few of the things that I have recently learned to make my scripts just a bit better.\n\n### [\ud83e\udd13 What's on your GitHub Profile](https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3)\n\nGitHub profiles were released recently and I asked on DEV.to \"Whats on your GitHub Profile\".  This was a discussion that turned out some incredible response.  There are so many great profiles posted in the discussion section.  Check them out for inspiration on yours.\n\n### [\ud83d\udd25 How to crush amazing posts on DEV](https://dev.to/waylonwalker/how-to-crush-amazing-posts-on-dev-4cgh)\n\nThis post was super fun to write.  It's specifically for writing DEV.to posts, but is generally useful to any medium length content that sits between a tweet and a book.  I definitly learned a few things during research and in the discussion.  I have picked up a few tricks that make my posts a bit easier to scan and get a bit better engagement than having a wall of text.\n\n## Recent Posts\n\n* [Creating Reusable Bash Scripts](https://waylonwalker.com/reusable-bash/)\n\n    Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.\n\n* [Three things to Automate with Python using Pandas](https://waylonwalker.com/3-things-to-automate-with-python/)\n\n    Here are three things that I see my non programming counterparts doing every single day. These really sum up so much of what folks do within an office.\n\n* [Installing miniconda on linux (from the command line)](https://waylonwalker.com/install-miniconda/)\n\n    Installing miniconda from only the command line can be a bit of an intimidating task your first time. Lets walk through how to do it.\n\n* [Review of the git-auto-commit-action](https://waylonwalker.com/git-auto-commit-action-review/)\n\n    It's a really cool GitHub action that will automatically commit files changed during the action. I was using this to render a new readme based on a template.\n\n* [Black Tech Pipeline](https://waylonwalker.com/pariss-athena-on-black-tech-pipeline/)\n\n    I was particularly inspired by @chantastic episode 103 of the react podcast with @ParissAthena. They spoke about the black tech pipeline as well as Diversity, Equity, and Inclusion. Pariss is quite an inspiration. She has done so much work to create a better place for POC in tech. I like that not only is she helping them get jobs but acting as a mentor for their first few months on the job to make sure that they are able to find their place and fit in.\n\n* [What's New in Kedro 0.16.4](https://waylonwalker.com/whats-new-in-kedro-0164/)\n\n    If we take a look at the release notes I see one **major** feature improvement on the list, auto-discovery of hooks.\n\n* [Integration testing with Python, TestProject.io, and GitHub Actions](https://waylonwalker.com/testproject-io-py-actions/)\n\n    As I continue to build out https://waylonwalker.com/ I sometimes run into some errors that are not caught becuase I do not have good testing implemented. I want to explore some integration testing options using GitHub actions.\n\n* [\ud83d\udd25 How to crush amazing posts on DEV](https://waylonwalker.com/crush-dev-to-posts/)\n\n    Here are a few of my top tips to help make dev.to posts more readable, and drive better engagement.\n\n* [\ud83d\udc0d Practice Python Online](https://waylonwalker.com/practice-python-online/)\n\n    When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try the out for myself to really understand.\n\n* [Edit On GitHub](https://waylonwalker.com/edit-on-github/)\n\n    I recently added a button to my blog, and subsequently my posts on [DEV.to](https://dev.to/waylonwalker). It's the best thing that I have done for it in a while.\n\n* [Why use a cms](https://waylonwalker.com/why-use-cms/)\n\n    When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its html or markdown for front end content, or even hardcoding parameters in our backend languages like python, or node.js.\n\n* [\ud83d\udc0d Parsing RSS feeds with Python](https://waylonwalker.com/parsing-rss-python/)\n\n    I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us. I am starting by learning how to parse feeds with python, and without much previous knowledge it proved to be much easier than anticipated thanks to the `feedparser` library.\n\n* [\ud83d\ude4b\u200d\u2642\ufe0f Can Anyone Explain Twitter Cards to me?](https://waylonwalker.com/explain-twitter-cards/)\n\n    Can someone explain how or why twitter cards render differently from device to device? I do understand that twitter cards a built from meta tags, the full list can be found in their\n\n* [\ud83e\udd13 What's on your GitHub Profile](https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3)\n\n    Comment on the DEV.to thread to show off what is on your GitHub profile.",
        "long_description": "It's been quite a busy Month and a half since my last official newsletter With about 14 individual posts going live since then. I pushed hard over the past two weeks and just made a lot of content about things that I actually do. Many of these were..."
    },
    {
        "cover": "/static/014-xmas2020.png",
        "title": "",
        "tags": [
            "git"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/014.md",
        "afterImage": "/static/git-icon-1788c.png",
        "canonical_url": "https://waylonwalker.com/014",
        "cover_image": "https:waylonwalker.com/014.png",
        "date": "2020-06-12 02:12:24+00:00",
        "description": "Rename your Master Branch bash git branch -m master main git push -u origin main",
        "published": false,
        "content": "# Rename your Master Branch\n\n``` bash\ngit branch -m master main\ngit push -u origin main\n```",
        "long_description": "Rename your Master Branch bash git branch -m master main git push -u origin main..."
    },
    {
        "cover": "/static/016-xmas2020.png",
        "title": "",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/016.md",
        "afterImage": "/python.png",
        "canonical_url": "https://waylonwalker.com/016",
        "cover_image": "https:waylonwalker.com/016.png",
        "date": "2020-06-14 02:16:24+00:00",
        "description": "Recieving **kwargs ``` python def funnc(**kwargs): print(kwargs) # kwargs are a dictionary! func(one='a', two='b'",
        "published": false,
        "content": "## Recieving `**kwargs`\n\n``` python\ndef funnc(**kwargs):\n    print(kwargs) # kwargs are a dictionary!\n\n>>> func(one='a', two='b')\n{'one': 'a', 'two': 'b'}\n```",
        "long_description": "Recieving **kwargs ``` python def funnc(**kwargs): print(kwargs) # kwargs are a dictionary! func(one='a', two='b') {'one': 'a', 'two': 'b'} ```..."
    },
    {
        "cover": "/static/018-xmas2020.png",
        "title": "",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/018.md",
        "afterImage": "/python.png",
        "canonical_url": "https://waylonwalker.com/018",
        "cover_image": "https:waylonwalker.com/018.png",
        "date": "2020-06-14 02:16:24+00:00",
        "description": "Sending **kwargs ``` python def func(**kwargs): print(kwargs) # kwargs are a dictionary! func(**{'one':'a', 'two'",
        "published": false,
        "content": "## Sending `**kwargs`\n\n``` python\ndef func(**kwargs):\n    print(kwargs) # kwargs are a dictionary!\n\n>>> func(**{'one':'a', 'two':'b')\n{'one': 'a', 'two': 'b'}\n```",
        "long_description": "Sending **kwargs ``` python def func(**kwargs): print(kwargs) # kwargs are a dictionary! func(**{'one':'a', 'two':'b') {'one': 'a', 'two': 'b'} ```..."
    },
    {
        "cover": "/static/017-xmas2020.png",
        "title": "",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/017.md",
        "afterImage": "/python.png",
        "canonical_url": "https://waylonwalker.com/017",
        "cover_image": "https:waylonwalker.com/017.png",
        "date": "2020-06-14 02:18:24+00:00",
        "description": "Sending *args ``` python def func(one, two): print(f'two is {two}') func(*['a', 'b']) two is b ``` order matte",
        "published": false,
        "content": "## Sending `*args`\n\n``` python\ndef func(one, two):\n    print(f'two is {two}')\n\n\n>>> func(*['a', 'b'])\ntwo is b\n```\n\n**order matters**",
        "long_description": "Sending *args ``` python def func(one, two): print(f'two is {two}') func(*['a', 'b']) two is b ``` order matters..."
    },
    {
        "cover": "/static/015-xmas2020.png",
        "title": "",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/015.md",
        "afterImage": "/python.png",
        "canonical_url": "https://waylonwalker.com/015",
        "cover_image": "https:waylonwalker.com/015.png",
        "date": "2020-06-14 02:12:24+00:00",
        "description": "Recieving *args ``` python def funnc(*args): print(args) # args are a list! func('a', 'b', 'c') ['a', 'b', 'c'] `",
        "published": false,
        "content": "## Recieving `*args`\n\n``` python\ndef funnc(*args):\n    print(args) # args are a list!\n\n>>> func('a', 'b', 'c')\n['a', 'b', 'c']\n```\n\n**order matters**",
        "long_description": "Recieving *args ``` python def funnc(*args): print(args) # args are a list! func('a', 'b', 'c') ['a', 'b', 'c'] ``` order matters..."
    },
    {
        "cover": "/static/eight-years-cat-xmas2020.png",
        "title": "My first eight years as a working professional.",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/eight-years-cat.md",
        "canonical_url": "https://waylonwalker.com/eight-years-cat",
        "cover_image": "https:waylonwalker.com/eight-years-cat.png",
        "date": "2020-06-19 05:00:00+00:00",
        "description": "This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.\n\n## Keep Learning\n\nMy initial career plans were down a completely different path. I have been very flexible in taking on a new career path. I have been eager to learn new things and respond to life changes that I never would have imagined.\n\n## Life Changes\n\nVery severe chronic health issues from my family restricted my ability to travel to the facilities I served as a Mechanical Engineer. I was able to stay strong and make it work. But in the meantime, I was learning new skills that enabled me to be more effective remotely.\n\n## I was scared.\n\nIt was in these times that I found a love for data, and taking action from insights I found with data. I learned how to use python to enable me to be more effective. I did this primarily from hospital waiting rooms and many overnight stays. This gave my mind a break from some of the really difficult things in life but also catapulted my career in a new direction.\n\n\n\ud83d\udd3c Be flexible\n\n\ud83d\udd3c Always be open and ready for change\n\n\ud83d\udd3c Never stop learning\n\n\ud83d\udd3c Keep a positive attitude\n\n\ud83d\udd3c Be kind to others\n\n---\n\nThis was originally posted on my LinkedIn, if you enjoy it please connect with me and give the post a \ud83d\udc4d\n\n<iframe src=\"https://www.linkedin.com/embed/feed/update/urn:li:share:6679445409351393280\" height=\"813\" width=\"504\" frameborder=\"0\" allowfullscreen=\"\" title=\"Embedded post\"></iframe>",
        "long_description": "This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning. Keep Learning My initial career plans we..."
    },
    {
        "cover": "/static/kedro-inputs-xmas2020.png",
        "title": "How Kedro handles your inputs",
        "tags": [
            "kedro",
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-inputs.md",
        "canonical_url": "https://waylonwalker.com/kedro-inputs",
        "cover_image": "https:waylonwalker.com/kedro-inputs.png",
        "date": "2020-06-19 03:00:00+00:00",
        "description": "Passing inputs into kedro is a key concept. Understanding how it accepts a single catalog key as input is quite trivial that easily makes sense, but passing a list or dictionary of catalog entries can be a bit confusing.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Passing inputs into kedro is a key concept.  Understanding how it accepts a single catalog key as input is quite trivial that easily makes sense, but passing a list or dictionary of catalog entries can be a bit confusing.\n\n## *args/**args review\n\nCheck out this post for a review of how `*args` `**kwargs` work in python.\n\n[![python args and kwargs](https://waylonwalker.com/python-args-kwargs.png)](https://waylonwalker.com/python-args-kwargs)\n> [python args and kwargs](https://waylonwalker.com/python-args-kwargs) article by [@_waylonwalker](https://twitter.com/_WaylonWalker)\n\n## All Kedro inputs are catalog Entries\n\nWhen kedro runs your pipeline it uses the catalog to imperatively load your data, meaning that you don't tell kedro how to load your data, you tell it where your data is and what type it is.  These catalog entries are like a `key-value` store.  You just need to give the key when setting up a node.\n\n## Single Inputs\n\nThese are fairly straightforward to understand.  In the example below when `kedro` runs the pipeline it will load the input from the catalog, then pass that input to the func, then save the returned value to the output catalog entry.\n\n``` python\nfrom kedro.pipeline import node\n\ndef create_int_sales(sales):\n    \"cleans up raw sales data\"\n    ...\n    return cleaned_sales\n\nmy_node = node(\n    func=create_int_sales,\n    inputs='raw_sales',\n    output='int_sales',\n    )\n```\n\n---\n\n## List of inputs\n\nLet's look at an example node that combines more than one dataset. When kedro has sees a list of catalog entries it will load up each catalog entry sequentially then pass them in order to the `create_sales_report` function.\n\n``` python\nfrom kedro.pipeline import node\n\ndef create_sales_report(sales, products):\n    \"adds product metadata to the sales data\"\n    ...\n\n\nmy_node = node(\n    func=create_sales_report,\n    inputs=['pri_sales', 'pri_products'],\n    output='sales_report',\n    )\n```\n\n## simulating pipeline run using 2 inputs\n\nHere We can simulate what kedro does during the pipeline run by using `*args`.\n\n``` python\n# inputs you gave kedro\ninputs=['pri_sales', 'pri_products']\n# load data\ninput_data = [catalog.load(entry) for entry in  inputs]\n# run the node\nsales_report = create_sales_report(*input_data)\n# save the data to the output\ncatalog.datasets.sales_report.save(sales_report)\n```\n\n## More generalizable functions\n\nWe can also use `*args` to make our functions a little bit more generalizable. The first that\ncomes to my mind is a unioner. The second\n\n``` python\ndef unioner(*dfs: pd.DataFrame): -> pd.DataFrame\n    pd.concat(dfs)\n```\n\nNow we can pass any number of DataFrames into our kedro node to get unioned together, but\ndo we really need a function for a one-liner... No we can use an inline function for this case.\n\n``` python\nmy_node = node(\n    func=lambda *dfs: pd.concat(dfs),\n    input=['sales_2017', 'sales_2018'],\n    output='sales',\n)\n```\n\n## `*args` scares the crap out of me!\n\nIt's great for the `unioner` example where its a collection of similar things where order\ndoes not matter.  But for the `create_sales_report` function.  Those are distinctly different\ninputs.  If someone does some refactoring and changes the order in one place or another it's\ngoing to turn into a bad day real fast.\n\n## **kwargs are a bit better\n\nLet's refactor the `create_sales_report` before someone tries to ruin our day.  We can easily\ndo this by passing a dictionary (keys are the argument name, values are the catalog key)\nof arguments to kedro instead of a list.\n\n``` python\nfrom kedro.pipeline import node\n\ndef create_sales_report(sales, products):\n    \"adds product metadata to the sales data\"\n    ...\n\nmy_node = node(\n    func=create_sales_report,\n    inputs={'sales': 'pri_sales', 'products': 'pri_products'},\n    output='sales_report',\n    )\n```\n\nNow if someone tries to refactor the order of arguments we are safe!\n\n## Simulating the pipeline run with `**kwargs`\n\nPretty much the same as before, except with `**kwargs` and `dictionaries` keeping us a bit\nsafer.\n\n``` python\n# inputs you gave kedro\ninputs={'sales': 'pri_sales', 'products': 'pri_products'},\n# load data\ninput_data = {arg: catalog.load(entry) for arg, entry in inputs.items()}\n# run the node\nsales_report = create_sales_report(**input_data)\n# save the data to the output\ncatalog.datasets.sales_report.save(sales_report)\n```\n\n## Stay Safe\n\nKedro inputs are quite easy to understand if you already have a grasp of `*args` and `**kwargs`\nand if you don't it is still fairly intuitive to pick up.  Stay on the safe side, if your\ncollection of inputs are clearly different things, use a dictionary for safety.",
        "long_description": "Passing inputs into kedro is a key concept. Understanding how it accepts a single catalog key as input is quite trivial that easily makes sense, but passing a list or dictionary of catalog entries can be a bit confusing. args/*args review Check out..."
    },
    {
        "cover": "/static/023-xmas2020.png",
        "title": "",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/023.md",
        "afterImage": "/vscode.png",
        "canonical_url": "https://waylonwalker.com/023",
        "cover_image": "https:waylonwalker.com/023.png",
        "date": "2020-06-21 02:16:24+00:00",
        "description": "Find and replace Groups in VSCode $1 referrs to the second group (filepath: top)(.*) filepath: s3://bucket/top$1.parquet",
        "published": false,
        "content": "Find and replace Groups in VSCode\n$1 referrs to the second group\n\n```\n(filepath: top)(.*)\nfilepath: s3://bucket/top$1.parquet\n```\n\n``` diff\n- filepath: top/raw/scooters\n+ filepath: s3://bucket/top/raw/scooters.parquet\n```",
        "long_description": "Find and replace Groups in VSCode $1 referrs to the second group (filepath: top)(.*) filepath: s3://bucket/top$1.parquet diff - filepath: top/raw/scooters + filepath: s3://bucket/top/raw/scooters.parquet..."
    },
    {
        "cover": "/static/022-xmas2020.png",
        "title": "",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/022.md",
        "afterImage": "/bash.png",
        "canonical_url": "https://waylonwalker.com/022",
        "cover_image": "https:waylonwalker.com/022.png",
        "date": "2020-06-21 02:16:24+00:00",
        "description": "File System Full \ud83e\udd14 Move files then symlink them with Bash bash mkdir /mnt/mounted_drive mv ~/bigdir /mnt/mounted_drive l",
        "published": false,
        "content": "## File System Full \ud83e\udd14\n\n_Move files then symlink them_\n\n## with **Bash**\n\n``` bash\nmkdir /mnt/mounted_drive\nmv ~/bigdir /mnt/mounted_drive\nln -s /mnt/mounted_drive/bigdir ~/bigdir\n```",
        "long_description": "File System Full \ud83e\udd14 Move files then symlink them with Bash bash mkdir /mnt/mounted_drive mv ~/bigdir /mnt/mounted_drive ln -s /mnt/mounted_drive/bigdir ~/bigdir..."
    },
    {
        "cover": "/static/021-xmas2020.png",
        "title": "",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/021.md",
        "afterImage": "/bash.png",
        "canonical_url": "https://waylonwalker.com/021",
        "cover_image": "https:waylonwalker.com/021.png",
        "date": "2020-06-21 02:16:24+00:00",
        "description": "File System Full \ud83e\udd14 show largest files in current directory with Bash bash du . -h --max-depth=1",
        "published": false,
        "content": "## File System Full \ud83e\udd14\n\n_show largest files in current directory_\n\n## with **Bash**\n\n```bash\ndu . -h --max-depth=1\n```",
        "long_description": "File System Full \ud83e\udd14 show largest files in current directory with Bash bash du . -h --max-depth=1..."
    },
    {
        "cover": "/static/024-xmas2020.png",
        "title": "",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/024.md",
        "afterImage": "/actions.png",
        "canonical_url": "https://waylonwalker.com/024",
        "cover_image": "https:waylonwalker.com/024.png",
        "date": "2020-06-21 02:16:24+00:00",
        "description": "Conditionally run GitHub Actions Steps ``` yaml - uses: dorny/paths-filter@v2.2.0 id: filter with: # inline YA",
        "published": false,
        "content": "Conditionally run GitHub Actions Steps\n\n``` yaml\n- uses: dorny/paths-filter@v2.2.0\n  id: filter\n  with:\n      # inline YAML or path to separate file (e.g.: .github/filters.yaml)\n      filters: |\n      backend:\n          - 'backend/**/*'\n      frontend:\n          - 'frontend/**/*'\n\n# run only if 'backend' files were changed\n- name: backend unit tests\n  if: steps.filter.outputs.backend == 'true'\n  run: ...\n```",
        "long_description": "Conditionally run GitHub Actions Steps ``` yaml - uses: dorny/paths-filter@v2.2.0 id: filter with: # inline YAML or path to separate file (e.g.: .github/filters.yaml) filters: | backend: - 'backend//*' frontend:..."
    },
    {
        "cover": "/static/019-xmas2020.png",
        "title": "",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/019.md",
        "afterImage": "/bash.png",
        "canonical_url": "https://waylonwalker.com/019",
        "cover_image": "https:waylonwalker.com/019.png",
        "date": "2020-06-21 02:16:24+00:00",
        "description": "batch rename files with bash bash for f in *.jpeg; do mv -- \"$f\" \"${f%.jpeg}.jpg\" done",
        "published": false,
        "content": "## batch rename files\n## with **bash**\n\n``` bash\nfor f in *.jpeg; do\n    mv -- \"$f\" \"${f%.jpeg}.jpg\"\ndone\n```",
        "long_description": "batch rename files with bash bash for f in *.jpeg; do mv -- \"$f\" \"${f%.jpeg}.jpg\" done..."
    },
    {
        "cover": "/static/020-xmas2020.png",
        "title": "",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/020.md",
        "afterImage": "/bash.png",
        "canonical_url": "https://waylonwalker.com/020",
        "cover_image": "https:waylonwalker.com/020.png",
        "date": "2020-06-21 02:16:24+00:00",
        "description": "File System Full \ud83e\udd14 Show Remaining Space on Drives with Bash bash df -h",
        "published": false,
        "content": "## File System Full \ud83e\udd14\n\n_Show Remaining Space on Drives_\n\n## with **Bash**\n\n```bash\ndf -h\n```",
        "long_description": "File System Full \ud83e\udd14 Show Remaining Space on Drives with Bash bash df -h..."
    },
    {
        "cover": "/static/kedro-catalog-search-xmas2020.png",
        "title": "How to find things in your kedro catalog",
        "tags": [
            "kedro",
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-catalog-search.md",
        "canonical_url": "https://waylonwalker.com/kedro-catalog-search",
        "cover_image": "https:waylonwalker.com/kedro-catalog-search.png",
        "date": "2020-06-22 03:00:00+00:00",
        "description": "kedro 0.16.2 just dropped last week with a long-awaited feature... catalog search!  I went as far as monkey patching this into each of my projects.  I work jump between a few really big projects that have tons of datasets.  Being able to quickly search for what I need is so useful.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "kedro 0.16.2 just dropped last week with a long-awaited feature... **catalog search**!  I went as far as monkey patching this into each of my projects.  I work jump between a few really big projects that have tons of datasets.  Being able to quickly search for what I need is so useful.\n\n## The Catalog\n\nThe kedro data catalog is a key component to the kedro framework.  It handles all data loading and saving for you.  It is configurable and hackable.  Having all your data connections listed in one place make it so easy to pick your project up and move it to a completely new environment.  That sweet imperative loading style saves so much read/write overhead.  I can load all my data with a single command whether it's in amazon s3, google cloud platform, or a local file.\n\n## Kick start a toy project\n\nJust like with most of these articles, I am going to create a conda environment so that I don't break any existing projects and scaffold up a toy project to learn from.\n\n``` bash\nconda create -n kedro0162 python=3.8 -y\nactivate kedro0162\npip install kedro\nkedro new # call it Kedro 0162 and click-through\ncd kedro-0162\nkedro install\n```\n\nExpect this set of commands to take a few minutes depending on your system, connection speed, and amount of packages already in your local cache.\n\n## Create some catalog\n\nNow the power of the catalog search really starts to shine when your projects grow legs.  You have groups of many datasets containing patterns of data including `layer`, or `source` among other things.\n\n``` bash\nvim conf/base/catalog.yml\n```\n\nIn the catalog, you will see a few lines of instructions followed by\n\n``` yml\nexample_iris_data:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/iris.csv\n```\n\nThis gives us one stored catalog entry called `example_iris_data`, it is a CSV file stored in `data/01_raw/iris.csv`.\n\n\nLet's make up a transportation company that is siloed into three different divisions and it is our job to bring their sales and product metadata into a single report.  This company makes `lifted-trucks`, `primium-scoots`, and `luxy-yahts`.  and we know that we will want `raw`, `int`, `pri` and `modin` layers to start our project so let's scaffold up that catalog real quick.\n\n``` yml\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 lifted-truck \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nraw_lifted_truck_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/sales/lifted-truck.csv\n\nint_lifted_truck_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/sales/lifted-truck.csv\n\npri_lifted_truck_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/lifted-truck.csv\n\nraw_lifted_truck_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/info/lifted-truck.csv\n\nint_lifted_truck_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/info/lifted-truck.csv\n\npri_lifted_truck_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/lifted-truck.csv\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 primium-scoot \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nraw_primium_scoot_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/sales/primium-scoot.csv\n\nint_primium_scoot_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/sales/primium-scoot.csv\n\npri_primium_scoot_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/primium-scoot.csv\n\nraw_primium_scoot_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/info/primium-scoot.csv\n\nint_primium_scoot_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/info/primium-scoot.csv\n\npri_primium_scoot_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/primium-scoot.csv\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 luxy-yaht \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nraw_luxy_yaht_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/sales/luxy-yaht.csv\n\nint_luxy_yaht_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/sales/luxy-yaht.csv\n\npri_luxy_yaht_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/luxy-yaht.csv\n\nraw_luxy_yaht_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/info/luxy-yaht.csv\n\nint_luxy_yaht_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_int/info/luxy-yaht.csv\n\npri_luxy_yaht_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/luxy-yaht.csv\n\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 combined \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\npri_combined_sales:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/sales/combined.csv\n\npri_combined_info:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/combined.csv\n\n# \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 modin \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\n\nmodin_main:\n  type: pandas.CSVDataSet\n  filepath: data/01_pri/info/combined.csv\n\n```\n\n## Some examples of common regex uses\n\n`regex` gets really complicated fast, but these basic examples are very common use cases and will get you a long way without being very complicated.\n\n* `term` - all catalog entries that include `term` in the catalog entry\n* `^term` - all catalog entries that include `term` at the **beginning** of the catalog entry\n* `term$` - all catalog entries that include `term` at the **end** of the catalog entry\n* `term1.*term2` - include anything in between `term1` and `term2`.\n* `term1|term2` - all catalog entries that include `term1` or `term2`\n\n\n## Let's Search this thing\n\nkedro has long included the `catalog.list()` feature that returns a list of all datasets.  Now the `list` command takes in a `regex_search` keyword argument.  By default, it is empty and returns the entire catalog.\n\n\n``` bash\nkedro ipython\n```\n\n## list out all of the luxy-yahts\n\n``` python\n>>> catalog.list('luxy_yaht`)\n['raw_luxy_yaht_sales',\n 'int_luxy_yaht_sales',\n 'pri_luxy_yaht_sales',\n 'raw_luxy_yaht_info',\n 'int_luxy_yaht_info',\n 'pri_luxy_yaht_info']\n ```\n\n## List out data by layer\n\nEasy just search for the layer name.\n\n### raw\n\n``` python\n>>> catalog.list('raw')\n['raw_lifted_truck_sales',\n 'raw_lifted_truck_info',\n 'raw_primium_scoot_sales',\n 'raw_primium_scoot_info',\n 'raw_luxy_yaht_sales',\n 'raw_luxy_yaht_info']\n```\n\n### pri\n\n``` python\n >>> catalog.list('pri')\n['pri_lifted_truck_sales',\n 'pri_lifted_truck_info',\n 'raw_primium_scoot_sales',\n 'int_primium_scoot_sales',\n 'pri_primium_scoot_sales',\n 'raw_primium_scoot_info',\n 'int_primium_scoot_info',\n 'pri_primium_scoot_info',\n 'pri_luxy_yaht_sales',\n 'pri_luxy_yaht_info',\n 'pri_combined_sales',\n 'pri_combined_info']\n```\n\n\ud83d\ude32 We just included every `primium-scoot` dataset!\n\nHere we just encountered our first need for `regex`.  I'll be the first to admit that I am really bad at regex, it's incredibly confusing, becomes read-only with much complexity, but is super powerful and used in a lot of places.\n\n\n## `^term`\n_beginning of catalog entry_\n\nThe `^` regex operator searches for catalog entries that include the search term at the very beginning.\n\n``` python\n >>> catalog.list('^pri')\n['pri_lifted_truck_sales',\n 'pri_lifted_truck_info',\n 'pri_primium_scoot_sales',\n 'pri_primium_scoot_info',\n 'pri_luxy_yaht_sales',\n 'pri_luxy_yaht_info',\n 'pri_combined_sales',\n 'pri_combined_info']\n```\n\n## `term$`\n_end of catalog entry_\n\nThe `$` operator is the opposite of the `^` operator.  It means give me all that matches that occur at the end of the catalog entry.\n\n``` python\n>>> catalog.list('info$')\n['raw_lifted_truck_info',\n 'int_lifted_truck_info',\n 'pri_lifted_truck_info',\n 'raw_primium_scoot_info',\n 'int_primium_scoot_info',\n 'pri_primium_scoot_info',\n 'raw_luxy_yaht_info',\n 'int_luxy_yaht_info',\n 'pri_luxy_yaht_info',\n 'pri_combined_info']\n\n```\n\n\n## `term1.*term2`\n\nThe `.*` operator in regex means give me all the datasets that include the two terms no matter what is between them.  There is also a `.?` to only allow one character between them.  More often than not I really just want the two patterns to exist in the dataset entry.\n\n``` python\n>>> catalog.list('raw.*info$')\n['raw_lifted_truck_info',\n 'raw_primium_scoot_info',\n  'raw_luxy_yaht_info']\n```\n\n## Some real things that we can do with search\n\nLet's look at a few examples beyond the obvious of just searching for the dataset that we want to load.\n\n## Check Raw Data\n\nWhile migrating pipelines between environments it's important to know if your raw datasets are available.  I will argue that you should also consider looking at `pipeline.inputs` as it cannot lie and gives you a true reading of the pipeline inputs.  But another easy check might be to check all the datasets that the Data Engineers have labeled raw.\n\n``` python\n>>> {dataset: catalog.exists(dataset) for dataset in catalog.list('^raw')}\n{'raw_lifted_truck_sales': False,\n 'raw_lifted_truck_info': False,\n 'raw_primium_scoot_sales': False,\n 'raw_primium_scoot_info': False,\n 'raw_luxy_yaht_sales': False,\n 'raw_luxy_yaht_info': False}\n```\n\nSince we just created a dummy catalog the data does not exist in this example.\n\n## Create a new catalog\n\nLet's say that we have someone on the team who is from the land division of our company and they want a simplified catalog readily available that does not include any marine data.\n\nTo do this we will need to reach a bit into the kedro internals for the `DataCatalog` class and utilize a new regex operator `|`.\n\n\n``` python\n>>> from kedro.io import DataCatalog\n>>> land_catalog = DataCatalog(\n    {\n        dataset: getattr(catalog.datasets, dataset)\n        for dataset in catalog.list('truck|scoot')\n        }\n    )\n>>> land_catalog.list()\n['raw_lifted_truck_sales',\n 'int_lifted_truck_sales',\n 'pri_lifted_truck_sales',\n 'raw_lifted_truck_info',\n 'int_lifted_truck_info',\n 'pri_lifted_truck_info',\n 'raw_primium_scoot_sales',\n 'int_primium_scoot_sales',\n 'pri_primium_scoot_sales',\n 'raw_primium_scoot_info',\n 'int_primium_scoot_info',\n 'pri_primium_scoot_info']\n```\n\n## regex recap\n\n* `^term` - beginning\n* `term$` - end\n* `term1.*term2` - anything in between\n* `term1|term2` - or",
        "long_description": "kedro 0.16.2 just dropped last week with a long-awaited feature... catalog search! I went as far as monkey patching this into each of my projects. I work jump between a few really big projects that have tons of datasets. Being able to quickly sear..."
    },
    {
        "cover": "/static/upcoming-posts-xmas2020.png",
        "title": "Upcoming Posts",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/upcoming-posts.md",
        "canonical_url": "https://waylonwalker.com/upcoming-posts",
        "cover_image": "https:waylonwalker.com/upcoming-posts.png",
        "date": "2020-06-27 05:00:00+00:00",
        "description": "My Notes about using kedro",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## \ud83e\udde0\n\n* How I manage Environments\n* My Data Workflow.\n* Daily Schedule\n* desk\n* keeb\n* Material Shell\n* Why blog\n* search with fuse.js\n* Testing a blog with ahrefs\n\n\n* Think like a Senior Dev\n* \n\n\n## Editor\n\n* tmux\n* vim\n* shortcuts\n* gitui\n* fzf\n\n\n\n## Core\n\n* gracefully adopt kedro\n  * catalog - in progress\n  * pipeline\n* kedro\n  * 10 reasons you shouldnt use kedro\n  * 10 reasons to use \n  * filter viz\n  * Steel-toes env\n  * Why framework\n  * How I write pipelines\n  * when I write pipelines\n  * pipeline node templates\n  * Convert a notebooks to pipelines\n  * Testing Pipelines\n* professional python\n  * cookiecutter\n  * flake8\n  * black\n  * mypy\n  * pre-commit\n  * click\n  * pytest\n    * git\n    * parametrize\n    * environment variables\n* My top pandas methods\n* Actions\n  * How I cut my gatsby deployment in half\n* VSCODE update\n  * plugins I use\n  * \n* uses\n\n## python\n\n* [What does if **name** == \u201c**main**\u201d: do?](https://stackoverflow.com/questions/419163/what-does-if-name-main-do)\n* [ternary operators](https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator)\n* [check if file exists](https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-without-exceptions)\n* [calling external commands](https://stackoverflow.com/questions/89228/calling-an-external-command-from-python)\n* [merging dictionaries](https://stackoverflow.com/questions/38987/how-do-i-merge-two-dictionaries-in-a-single-expression-in-python-taking-union-o)\n* zip\n\n## learning\n\n* mdx\n* touch typing\n\n## Newsletter\n\n* Don't jump too early\n* keep a pulse on new things\n* be nice\n* take breaks\n* push at the right time\n* practice\n* optimize the hard things\n* failure\n* dont listen to the haters\n* Just start (make 20 minutes)\n* Mistakes Happen\n* Accountability\n* Giving without Expectations",
        "long_description": "\ud83e\udde0 How I manage Environments My Data Workflow. Daily Schedule desk keeb Material Shell Why blog search with fuse.js Testing a blog with ahrefs Think like a Senior Dev Editor tmux vim shortcuts gitui fzf Core gracefully adopt kedro catalog -..."
    },
    {
        "cover": "/static/graceful-kedro-catalog-xmas2020.png",
        "title": "Gracefully adopt kedro, the catalog",
        "tags": [
            "kedro",
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/graceful-kedro-catalog.md",
        "canonical_url": "https://waylonwalker.com/graceful-kedro-catalog",
        "cover_image": "https:waylonwalker.com/graceful-kedro-catalog.png",
        "date": "2020-06-29 03:00:00+00:00",
        "description": null,
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## Why use kedro catalog?\n\nWhile using the catalog alone will not reap all of the benefits of the framework, it does get you and your project ready for the full framework eventually.  For me the full benefit of the catalog comes when you combine it with the pipeline and dont even touch read/write steps at all.\n\nTaking a step into kedro by adopting the catalog first will give you a way to organize all of your data loads in one place, and stop manually writing read/write code, which can be different for each data and storage type. You just don't need to think about it.\n\n---\n\n* iperitive loading style\n* organizes your data\n* all file locations can be quickly identified\n* can be dropped into kedro later\n\n---\n\n> \"can be dropped into kedro later\"\n> Let's talk a bit more about that\n\n## 2 Ways to Gracefully adopt the catalog\n_How do I get started with the kedro catalog_\n\n* add with the code api\n* load from yaml (**recommended**)\n\n\n## 1. Adding to the catalog with the code api\n_how to use the kedro catalog code api_\n\nIt is possible to keep everything inside of one single file if you want by utilizing the code api, which defines the kedro catalog inside of your script with python.  I personally like this method as it is a bit more scriptable to create many layers of datasets with a for loop.  It can still be carried right into a kedro project, but is not the normal way that other kedro users will be used to seeing.  I'll leave it up to you which technique to use.\n\n\n``` python\nfrom kedro.io import DataCatalog\nfrom kedro.extras.datasets.pandas import CSVDataSet\n\nio = DataCatalog(\n    {\n        \"bikes\": CSVDataSet(filepath=\"../data/01_raw/bikes.csv\"),\n    }\n)\n\n```\n> taken right from the kedro [docs](https://kedro.readthedocs.io/en/stable/04_user_guide/04_data_catalog.html)\n\n\ud83d\udc46 This can be done inside of a single Jupyter cell, and pulled out later.\n\n\n\n## 2. Creating a catalog config file\n\n**recommended**\n\nThis reccommended method it great since it will simply drop right in to a full kedro project if you were ever ready to adopt the framework as a whole.  The downside to gracefully adopting the framework is that you need to have a bit of an understanding of the internals to do it.  When using the framework as a whole it seemlessly takes care of everything for you.\n\n``` yaml\n# conf/base/catalog.yml\n# Example 1: Loads / saves a CSV file from / to a local file system\n\nbikes:\n  type: pandas.CSVDataSet\n  filepath: data/01_raw/bikes.csv\n```\n\n\n``` python\nfrom kedro.config import ConfigLoader\nfrom kedro.io import DataCatalog\n\nconf_loader = ConfLoader(['conf/base'])\nconf_catalog = conf_loader.get('catalog*', 'catalog/**')\ncatalog = DataCatalog.from_config(conf_catalog)\n```\n\n> You can even do this \ud83d\udc46 from a Jupyter notebook\n\nIf you do happen to be in a module deeper into an existing library I tend to leverage the use of the `__file__` magic.  `__file__` is a string containing the location of the current file.  You can initiate a `Path` object from this and roll up the necessary number of directories with the `parents` attribute then into the `conf/base` directory.  I find this more **more robust** as it does not depend on your current working directory.\n\n``` python\nfrom pathlib import Path\nconf_loader = ConfLoader([Path(__file__).parents[1] / 'conf/base'])\nconf_catalog = conf_loader.get(\"catalog*\", \"catalog/**\")\nnew_catalog = DataCatalog.from_config(conf_catalog)\n```\n\n> I find leveraging the `__file__` magic a bit more robust when possible as it does not depend on your current working directory.\n\n## Adhoc adding to an existing kedro catalog\n\nLet's say that you are already using a kedro project, but you are wanting to develop new features entirely in the context of a notebook.  You can easily create a catalog as shown above.  Since the kedro catalog variable is typically `catalog`, we will call it `new_catalog` and add it to the existing `catalog` below.  If you are not quite sure what that `**catalog` syntax is doing check out my article on `**kwargs`.\n\n``` python\ncatalog.add_feed_dict(new_catalog.datasets.__dict__)\n```\n\n[![python args and kwargs](https://waylonwalker.com/python-args-kwargs.png)](https://waylonwalker.com/python-args-kwargs)\n> [python args and kwargs](https://waylonwalker.com/python-args-kwargs) article by [@_waylonwalker](https://twitter.com/_WaylonWalker)\n\nThe framework makes appending\n\n``` python\ncatalog = DataCatalog({**catalog.datasets.__dict__, **new_catalog.datasets.__dict__})\n``\n\n\n\n## One word of caution\n\n\nIf you have any hooks running `after_catalog_created`, they will not be run on the appended catalog entries.",
        "long_description": "Why use kedro catalog? While using the catalog alone will not reap all of the benefits of the framework, it does get you and your project ready for the full framework eventually. For me the full benefit of the catalog comes when you combine it with..."
    },
    {
        "cover": "/static/python-args-kwargs-slides-xmas2020.png",
        "title": "SLIDES - understanding python *args and **kwargs",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/python-args-kwargs-slides.md",
        "canonical_url": "https://waylonwalker.com/python-args-kwargs-slides",
        "cover_image": "https:waylonwalker.com/python-args-kwargs-slides.png",
        "date": "2020-07-02 05:00:00+00:00",
        "description": "Python `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I generally post these as a carousel on LinkedIn based on a full article.  Let mw know what you think of it shown inside of a blog [@_waylonwalker](https://twitter.com/_WaylonWalker).\n\n<iframe src=\"https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:6678285914826911744\" height=\"587\" width=\"504\" frameborder=\"0\" allowfullscreen=\"\" title=\"Embedded post\"></iframe>\n\n\n[![python args and kwargs](https://waylonwalker.com/python-args-kwargs.png)](https://waylonwalker.com/python-args-kwargs)\n> See the full article [here](https://waylonwalker.com/python-args-kwargs)\n\n## Slides\n\n---\n\n![1](/args-kwargs-slide-1.png)\n\n---\n\n![2](/args-kwargs-slide-2.png)\n\n---\n\n![3](/args-kwargs-slide-3.png)\n\n---\n\n![4](/args-kwargs-slide-4.png)\n\n---\n\n![5](/args-kwargs-slide-5.png)\n\n---\n\n![6](/args-kwargs-slide-6.png)\n\n---\n\n![7](/args-kwargs-slide-7.png)\n\n---\n\n![8](/args-kwargs-slide-8.png)\n\n---\n\n![9](/args-kwargs-slide-9.png)\n\n---\n\n![10](/args-kwargs-slide-10.png)",
        "long_description": "I generally post these as a carousel on LinkedIn based on a full article. Let mw know what you think of it shown inside of a blog @_waylonwalker. See the full article here Slides..."
    },
    {
        "cover": "/static/my-github-profile-xmas2020.png",
        "title": "How I Built My GitHub Profile",
        "tags": [
            "webdev",
            "catalytic"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/my-github-profile.md",
        "canonical_url": "https://waylonwalker.com/my-github-profile",
        "cover_image": "https:waylonwalker.com/my-github-profile.png",
        "date": "2020-07-10 03:00:00+00:00",
        "description": null,
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I ran a discussion on dev that collected quite a list of examples in the comment section.  So many great calls to action, animations, memes, and weird tricks.\n\n[![dev.to whats-on-your-github-profile](https://waylonwalker.com/whats-on-your-github-profile.png)](https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3)\n\n\n## My current profile\n\n[![Waylon Walkers GitHub profile](https://waylonwalker.com/github-profile.png)](https://github.com/waylonwalker/)\n\n## social icons\n\nUpload all of your icons to the repo in a directory such as `icons` or `assets`, then link them with a `height` attribute like below.  I used html for mine, not sure if you can set the `height` in markdown.\n\n``` markdown\n<a href=\"https://dev.to/waylonwalker\"><img height=\"30\" src=\"https://raw.githubusercontent.com/WaylonWalker/WaylonWalker/main/icon/dev.png\"></a>&nbsp;&nbsp;\n```\n\n**note** I did add a bit of `&nbsp;` (non-breaking-whitespace) between my icons.  Without adding css this seemed like the simplest way to do it.\n\n## Center\n\nAligning things in the center of the readme is super simple.  I used this trick to align my social icons in the middle.\n\n``` markdown\n<p align='center'>\n ...html\n</p>\n\n```\n\n## right\n\nFor my [latest post](https://waylonwalker.com/latest) I floated it to the right with a little bit of `align='right'` action.\n\n``` markdown\n<p>\n  <a href=\"https://waylonwalker.com/latest\"><img width=\"400\" align='right' src=\"https://waylonwalker.com/latest.png?raw=true\"></a>\n</p>\n```\n\nYou may need to play with where you put this in the document, and the size of elements to get things to flow right.\n\n## redirects\n\nIn order to keep my latest post always up to date on my readme I implemented a netlify redirect to always point to my latest post.  As a digital gardener this helps me keep pointed to a the best one in my opinion.  Any automated way would pick up half finished posts.\n\n```\n# /static/_redirects\n# netlify redirects\n\n# latest post\n/latest            /blog/kedro-catalog-search/\n/latest.png        /kedro-catalog-search.png\n```\n\nNow I can reference both the post and the post cover image.\n\n## summary/details\n\nI also wanted to list out a few of my favorite posts without taking up a ton of space, so I used `details` and `summary` tags so that it would collapse.\n\n\n``` markdown\n<details>\n <summary><strong>other favorite posts</strong></summary>\n <a href=\"https://waylonwalker.com/eight-years-cat/\"><img width=\"400\" src=\"https://waylonwalker.com/eight-years-cat.png?raw=true\"></a>\n <a href=\"https://waylonwalker.com/keyboard-driven-vscode/\"><img width=\"400\" src=\"https://waylonwalker.com/alt%20b.png?raw=true\"></a>\n <a href=\"https://waylonwalker.com/what-are-github-actions/\"><img width=\"400\" src=\"https://waylonwalker.com/what-are-github-actions.png?raw=true\"></a>\n\n</details>\n```\n\nGo ham on your profile, its your own slice of GitHub to completely personalize and speak your brand.  Give a powerfule call to action, share a funny meme, record a wicked cool GIF, its your space.",
        "long_description": "I ran a discussion on dev that collected quite a list of examples in the comment section. So many great calls to action, animations, memes, and weird tricks. My current profile social icons Upload all of your icons to the repo in a directory such..."
    },
    {
        "cover": "/static/explain-twitter-cards-xmas2020.png",
        "title": "\ud83d\ude4b\u200d\u2642\ufe0f Can Anyone Explain Twitter Cards to me?",
        "tags": [
            "blog",
            "twitter"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/explain-twitter-cards.md",
        "canonical_url": "https://waylonwalker.com/explain-twitter-cards",
        "cover_image": "https:waylonwalker.com/explain-twitter-cards.png",
        "date": "2020-07-11 03:00:00+00:00",
        "description": "Can someone explain how or why twitter cards render differently from device to device? I do understand that twitter cards a built from meta tags, the full list can be found in their",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Can someone explain how or why twitter cards render differently from device to device?  I do understand that twitter cards a built from meta tags, the full list can be found in their [docs](https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup)\n\n## Rendered on Mobile\n\nMobile Looks fine.\n\n![rendered card](https://waylonwalker.com/twitter-card-rendered.png)\n\n## Not Rendered on Desktop\n\nOn Desktop it is not picking up the image.\n\n![not rendered card](https://waylonwalker.com/twitter-card-rendered.png)\n\n\n## Twitter Card Validator\n\nThe Validator renders the card correctly.  I tried the official [twitter card validator](https://cards-dev.twitter.com/validator), as well as [heymeta.com](https://www.heymeta.com/url/waylonwalker.com/latest), and [metatags.io](https://metatags.io/).  All look good.\n\n![rendered card with validator](https://waylonwalker.com/twitter-card-rendered.png)\n\n## Can Cards be updated?\n_even with a redirect?_\n\nI tried seting up a pinned tweet that uses a netlify redirect to always keep my latest post up to date.  Again this one looks good in the validator, doesnt render the image on desktop, does render the image on mobile, but does not update.  I have heard that you need to hit the card validator to update cards?  I am not sure if this is true, but for me this is not even upating the card.\n\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">\ud83d\udc4b Hello,<br><br>\u2015\u2015\u2015\u2015\u2015\u2015 I&#39;m Waylon Walker \u2015\u2015\u2015\u2015\u2015\u2015<br><br>I work with data using \ud83d\udc0d <a href=\"https://twitter.com/hashtag/python?src=hash&amp;ref_src=twsrc%5Etfw\">#python</a> and utilize <a href=\"https://twitter.com/hashtag/webdev?src=hash&amp;ref_src=twsrc%5Etfw\">#webdev</a> to \u303dvisualize it.<br><br>\u2015\u2015\u2015\u2015\u2015\u2015<br><br>I write about things on my \ud83c\udf31 digital garden<a href=\"https://t.co/rAvD9iw05g\">https://t.co/rAvD9iw05g</a><br><br>\ud83d\udc68\u200d\ud83d\udcbbSome are cross-posted to <a href=\"https://t.co/oRWk7MgUD5\">https://t.co/oRWk7MgUD5</a><br><br>\u2015\u2015\u2015\u2015\u2015\u2015<br>\ud83d\udc8c<a href=\"https://t.co/PilOTWQ9ub\">https://t.co/PilOTWQ9ub</a></p>&mdash; \ud835\ude86\ud835\ude8a\ud835\udea2\ud835\ude95\ud835\ude98\ud835\ude97 \ud835\ude86\ud835\ude8a\ud835\ude95\ud835\ude94\ud835\ude8e\ud835\ude9b (@_WaylonWalker) <a href=\"https://twitter.com/_WaylonWalker/status/1282000623299371008?ref_src=twsrc%5Etfw\">July 11, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
        "long_description": "Can someone explain how or why twitter cards render differently from device to device? I do understand that twitter cards a built from meta tags, the full list can be found in their docs Rendered on Mobile Mobile Looks fine. Not Rendered on Desktop..."
    },
    {
        "cover": "/static/whats-on-your-github-profile-xmas2020.png",
        "title": "\ud83e\udd13 What's on your GitHub Profile",
        "tags": [
            "discuss"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/whats-on-your-github-profile.md",
        "canonical_url": "https://waylonwalker.com/whats-on-your-github-profile",
        "cover_image": "https:waylonwalker.com/whats-on-your-github-profile.png",
        "date": "2020-07-11 03:00:00+00:00",
        "description": "Comment on the DEV.to thread to show off what is on your GitHub profile.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I ran this post on dev.to and got a great response of great examples, [check it out](https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3).\n\n[![dev.to whats-on-your-github-profile](https://waylonwalker.com/whats-on-your-github-profile.png)](https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3)\n\nThe GitHub profile feature just went live for a subset of users.  Simply creating a repo named after your username, and clicking share to Profile on the sidebar will create a custom profile that shows up just above your pinned projects.\n\nI am still trying to figure out what to put on mine, but this is what I have so far.  I feel like mine is a bit big at the moment, I don't like that my pinned repos end up blow the fold.\n\n[![my github profile](https://dev-to-uploads.s3.amazonaws.com/i/pk1ostnnpn9dmlbs4emv.png)](https://github.com/waylonwalker)\n\n# updated\n\nI tightened mine up and took inspiration from a few others.\n\n[![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/zl9o2kmxoy2c7xv16pbz.png)](https://github.com/waylonwalker)\n\nShare a screenshot and link of yours [on dev](https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3).\n\n# updated again\n\nUpdated with a list of latest Twitter followers, using GitHub actions.\n\n![waylonwalkers GitHub profile](https://dev-to-uploads.s3.amazonaws.com/i/f8fcm9dvvozj4rzh4376.png)",
        "long_description": "I ran this post on dev.to and got a great response of great examples, check it out. The GitHub profile feature just went live for a subset of users. Simply creating a repo named after your username, and clicking share to Profile on the sidebar will..."
    },
    {
        "cover": "/static/reader-xmas2020.png",
        "title": "Reader",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/reader.md",
        "canonical_url": "https://waylonwalker.com/reader",
        "cover_image": "https:waylonwalker.com/reader.png",
        "date": "2020-07-12 05:00:00+00:00",
        "description": "Notes about my reader idea",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "# Inputs\n\nThe input will be a yaml file containing a list of `Items` you want to stay up to date with.  Inside each item will be a url, and weight.\n\n\n``` yaml\nemail:\n    max-entries: 10\n    recipients:\n      - waylon@waylonwalker.com\nmarkdown:\n    max-entries: 100\n    output:\n        - README.md\njson:\n    max-entries: 1000\n    output:\n        - feeds/feed.json\nrss:\n    max-entries: 1000\n    output:\n        - feeds/feed.xml\nhtml:\n    max-entries: 100\n    output:\n        index.html\n\nitems:\n    Waylon Walker:\n    weight: 5\n    url: https://waylonwalker.com/rss.xml\n    @_WaylonWalker:\n    weight: 3\n    twitter: https://twitter.com/_waylonwalker\n    DEV Waylon Walker:\n    weight: 8\n    url: https://dev.to/waylonwalker\n    Stack Overflow Kedro:\n    weight: 5\n    url: https://stackoverflow.com/questions/tagged/kedro\n    Kedro GitHub:\n    weight: 4\n    url: https://github.com/quantumblacklabs/kedro\n    Kedro Pypi\n        weight: 10\n        url: https://pypi.org/project/kedro/\n```\n\n\n# Types\n\n* rss feed (primary source)\n* youtube feed\n* Stack Overflow tags\n* GitHub repo activity\n* pypi release\n* dev.to post\n* Twitter Search # user will need an api key\n\n# Methodology\n\nEach url will be pulled in and parsed into a standard data scructure.  Some items may yield special feaures, a schemaless/nosql datastructure may be best.  Pipeline will decide to how to weight posts based on users weight, recent position on feed, .\n\n```\na_raw (raw plain text / json items) -> b_int (cleaned items) -> c_pri (single feed of items) -> d_fea (weighted feed of items) -> e_out (requested output formats)\n```\n\n## output\n\nPipeline outputs will be email, json, markdown, xml, html.  Each will be able to be configured by the config file (max-entries, output location).\n\n\n## Running\n\nUsers will be able to create their own reader.  Here is a list of possiblilites.  Users will not have the pipeline inside their repo. It will pull the pipeline from a package repo, pypi, dockerhub, GitHub.\n\n* fork a template repo (might be cumbersome to update)\n* use a GitHub action from the Marketplace (easier to update)\n* GH actions will run the pipeline on a schedule",
        "long_description": "Inputs The input will be a yaml file containing a list of Items you want to stay up to date with. Inside each item will be a url, and weight. ``` yaml email: max-entries: 10 recipients: - waylon@waylonwalker.com markdown: max-entri..."
    },
    {
        "cover": "/static/parsing-rss-python-xmas2020.png",
        "title": "\ud83d\udc0d Parsing RSS feeds with Python",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/parsing-rss-python.md",
        "canonical_url": "https://waylonwalker.com/parsing-rss-python",
        "cover_image": "https:waylonwalker.com/parsing-rss-python.png",
        "date": "2020-07-13 03:00:00+00:00",
        "description": "I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us. I am starting by learning how to parse feeds with python, and without much previous knowledge it proved to be much easier than anticipated thanks to the `feedparser` library.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us.  I am starting by learning how to parse feeds with python, and without much previous knowledge, it proved to be much easier than anticipated thanks to the `feedparser` library.\n\n## Install\n\nInstall the feedparser library.\n\n``` bash\nconda create -n reader python=3.8 -y\nsource activate reader\npip install feedparser\n```\n\n## Get the content\n\n```python\nimport feedparser\nfeed = feedparser.parse('https://waylonwalker.com/rss.xml')\n```\n\n## The feed object\n\nThe feed is a feedparser.FeedParserDict.  For all intents and purposes this seems to just behave like a dict with the following `keys()`.\n\n``` python\nfeed.keys()\n['feed', 'entries', 'bozo', 'headers', 'etag', 'href', 'status', 'encoding', 'version', 'namespaces', 'content'])\n```\n\n**feed** has some general information about the rss feed, but the meat of the feed is in **entries**.  The rest of the keys weren't all that useful for me at the moment.\n\n\n## pulling multiple feeds\n\nI grabbed a few popular RSS feeds that I was familiar with to get started.\n\n```python\nurls = ['https://waylonwalker.com/rss',\n        'https://joelhooks.com/rss.xml',\n        'https://swyx.io/rss.xml',\n    ]\nfeeds = [feedparser.parse(url)['entries'] for url in urls]\n```\n\nI checked out the keys, all three had the following keys.  Mine also had the full post under `'content'`, this is because I added an extra `custom_element` for publishing to `dev.to` from an RSS feed.\n\n``` python\nfeeds[1][0].keys()\n>>> dict_keys(['title', 'title_detail', 'summary', 'summary_detail', 'links', 'link', 'id', 'guidislink', 'published'\n, 'published_parsed'])\n```\n\n\n## NOTE: dev.to/feed\n\nI also pulled the [dev.to/feed](https://dev.to/feed).  Since is it setup for more Authors it had a few extra keys.\n\n``` python\nfeedparser.parse('https://dev.to/feed')[0].keys()\n>>> dict_keys(['title', 'title_detail', 'authors', 'author', 'author_detail', 'published', 'published_parsed', 'links\n', 'link', 'id', 'guidislink', 'summary', 'summary_detail', 'tags'])\n```\n\n\n## Combining Feeds\n\nNow that I have a list of feeds, I can create a single feed sorted by date with a list comprehension.  Note I did need to pull in `dateutil.parser` to convert the date strings to datetime objects to be sorted.\n\n``` python\nimport dateutil.parser\n\nfeed = [item for feed in feeds for item in feed]\nfeed.sort(key=lambda x: dateutil.parser.parse(x['published']), reverse=True)\n```\n\n```python\n[ins] In [115]: [{'title': i['title'], 'date': i['published'], 'link': i['link']}  for i in feed[:10]]\n>>>\n[{'title': '\ud83d\ude4b\\u200d\u2642\ufe0f Can Anyone Explain Twitter Cards to me?',\n  'date': 'Sat, 11 Jul 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/explain-twitter-cards/'},\n {'title': 'How I Built My GitHub Profile',\n  'date': 'Fri, 10 Jul 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/my-github-profile/'},\n {'title': 'Lessons and Regrets from My $25000 Launch',\n  'date': 'Fri, 03 Jul 2020 04:06:47 GMT',\n  'link': 'https://swyx.io/writing/coding-career-launch'},\n {'title': 'SLIDES - understanding python *args and **kwargs',\n  'date': 'Thu, 02 Jul 2020 05:00:00 GMT',\n  'link': 'https://waylonwalker.com/python-args-kwargs-slides/'},\n {'title': 'Launching the Coding Career Handbook!',\n  'date': 'Wed, 01 Jul 2020 13:08:37 GMT',\n  'link': 'https://swyx.io/writing/launching-coding-career'},\n {'title': 'Gracefully adopt kedro, the catalog',\n  'date': 'Mon, 29 Jun 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/graceful-kedro-catalog/'},\n {'title': \"\ud83e\udd13 What's on your GitHub Profile\",\n  'date': 'Mon, 29 Jun 2020 03:00:00 GMT',\n  'link': 'https://waylonwalker.com/whats-on-your-github-profile/'},\n {'title': \"Versioned Docs in 30 Seconds with Amplify Console's Branch Subdomains\",\n  'date': 'Fri, 26 Jun 2020 16:34:09 GMT',\n  'link': 'https://swyx.io/writing/amplify-console-branch-subdomains'},\n {'title': \"What's New in React\",\n  'date': 'Wed, 24 Jun 2020 00:00:00 GMT',\n  'link': 'https://swyx.io/speaking/react-whats-new'},\n {'title': 'Coding Careers - Vincit',\n  'date': 'Wed, 24 Jun 2020 00:00:00 GMT',\n  'link': 'https://swyx.io/speaking/coding-careers-vincit'}]\n```\n\n\n## Decentralized Feed\n\nI think the idea of RSS is super cool, and the idea that I can potentially create my own custom platform-agnostic decentralized feed is pretty cool.  I would love to have a google reader like experience back.\n\nThis post was super fun to explore.  I used an external library (`feedparser`) to pull in the feeds, but other than that It was all vanilla python 3.8.  In DataScience we tend to get very `DataFrame` heavy and I miss working with vanilla datatypes sometimes.\n\n## Trying to step up your python game\n\nWhile trying to step up your skills you will need lots of practice.  Its good to have several options to try out ideas quickly.  I often use repl.it, check out this post to see how I use it.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/practice-python-online/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/23d87d1abfcca3cc870dbd47fbdbc34e/630fb/practice-python-online-xmas2020.png\" alt=\"article cover for \ud83d\udc0d Practice Python Online\">\n<div class=\"right\">\n    <h2>\ud83d\udc0d Practice Python Online</h2>\n    <p class=\"description\">\n    When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try the out for myself to really understand.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> Not a sponsor REPL.it is a great way to practice.",
        "long_description": "I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us. I am starting by learning how to parse feeds with python, and without much previous knowledge, it proved to be much easier than ant..."
    },
    {
        "cover": "/static/why-use-cms-xmas2020.png",
        "title": "Why use a cms",
        "tags": [
            "webdev"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/why-use-cms.md",
        "canonical_url": "https://waylonwalker.com/why-use-cms",
        "cover_image": "https:waylonwalker.com/why-use-cms.png",
        "date": "2020-07-14 03:00:00+00:00",
        "description": "When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its html or markdown for front end content, or even hardcoding parameters in our backend languages like python, or node.js.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its HTML or markdown for front end content, or even hardcoding parameters in our backend languages like python, or node.js.\n\n## \ud83e\udd37\u200d\u2640\ufe0f What's wrong with hard coding everything?\n\nHard coding everything right into your code makes it really hard for non-technical collaborators to join. It makes it nearly impossible to hand websites off to clients without needing to come back for routine updates.\n\nThe cms generally come with a rich content editor that feels more like something most folks are used to. There are buttons for changing the font, font-size, adding images, bold, italics, etc.\n\n## Sometimes I don't feel technical\n\nEven when you are developing for a technical audience there is a layer of polish that comes from giving them a nice interface to edit their content in. YouTube doesn't have you manually inserting records into the database to add a comment, or upload a new video, nor would anyone expect you to.\n\n![Edit on GitHub](https://dev-to-uploads.s3.amazonaws.com/i/sgqd23rbbusjpfxqr7bl.PNG)\n\n> I recently added an edit button on my posts that allows me to jump right into edit on GitHub.  I have used this so much, I should have done this long ago!\n\nThere are times when I want to edit my blog on the go from my phone while on the go. I use [forestry.io](https://forestry.io) to do this for the most part. It gives me an image uploader, and a markdown editor to edit this blog right from my phone.\n\n\n![forestry editor](https://waylonwalker.com/2019-05-09 10-40-11_forestry.io.png)\n\n> My Blog on forestry.io\n\n\n## What do they output\n\nThere are a number of different CMS's out there, and I haven't touched most of them. Some write content into a MySQL database while others kick out HTML or markdown to a git repo. I prefer the ones built off of a git repo for my site because I am cheap and I am not making anything from this blog yet, but you might want to check into some of the other options if you plan on handing your site off to a client.\n\n## \ud83e\udd11 pricing\n\nBe aware of the various pricing models. They are priced every which way, per content editor, per site, per number of edits. Some offer free versions. Some are open source but require you to host it somewhere. Before you pick one make sure that you know your requirements.\n\n## CMS's are more norm than I realized\n\nWhen I was first starting into web development, I was completely unaware of the concept of a CMS. I had thought that content needs to be in HTML, or markdown, with a few specific places that users could edit. This may have been the case many years ago, but not anymore. The first time I ever designed a website for someone other than myself I got quite a shock when I realized how many edits they wanted, and how un-appealing markdown is for most.\n\n## Where CMS's fall short \ud83c\udf42\n\nPlease correct me if I am wrong here, I would love to be wrong on this. CMS's are not for developing the whole site. They hold data for content like site title, description, menu items, or blog posts. They don't necessarily give the user a full website designer, with drag and drop, and every widget imaginable. The web developer still needs to implement the site design and data integration.",
        "long_description": "When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its HTML or markdown for front end content, or even hardcoding parameters in our backend languag..."
    },
    {
        "cover": "/static/edit-on-github-xmas2020.png",
        "title": "Edit On GitHub",
        "tags": [
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/edit-on-github.md",
        "canonical_url": "https://waylonwalker.com/edit-on-github",
        "cover_image": "https:waylonwalker.com/edit-on-github.png",
        "date": "2020-07-18 05:00:00+00:00",
        "description": "I recently added a button to my blog, and subsequently my posts on [DEV.to](https://dev.to/waylonwalker).  It's the best thing that I have done for it in a while.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I recently added a button to my blog, and subsequently my posts on [DEV.to](https://dev.to/waylonwalker).  It's the best thing that I have done for it in a while.  It makes it so easy to do quick edits.  \n\n## finding errors\n\nI refer back to my old posts quite a bit, sometimes I find errors in them.  Honestly most of the time its too much effort to load up my editor make the change and `git add` and `git commit`.  It's not much, but when I am referring to my own post generally I am just trying to get something done and don't have time for that.\n\n\n## The slug\n\nThe slug that I am getting from gatsby is formatted as `/blog/this-post/`.  Note the trailing slash and missing file extension, thats where the `${slug.slice(0, -1)}.md` comes in.  \n\n\n## The Full Link\n\n\nGitHub makes it super easy to form a URL that puts you right into edit mode on the exact post you are looking for.  This is format for the URL... you can always figure it out easily by clicking edit on one.\n\n```\nhttps://github.com/<user>/<repo>/edit/<branch>/<filepath>\n```\n\n## The Final Result\n\nWrapping that URL up in a short snippet gave me the following result.\n\n``` jsx\n<p style={{ display: 'flex', justify: 'center', textAlign: 'center', margin: '3rem auto' }}>\n  <span role='img' aria-label=''>\ud83d\udc40</span>\n  see an issue, edit this post on \n  <a \n    href={`https://github.com/WaylonWalker/waylonwalkerv2/edit/main/src/pages${slug.slice(0, -1)}.md`} \n    alt='edit post url' \n    title='edit this post'\n   >\n  <FiGithub /> \n  GitHub\n  </a>\n</p>\n```\n![Edit on GitHub](https://dev-to-uploads.s3.amazonaws.com/i/sgqd23rbbusjpfxqr7bl.PNG)\n\nI know better than hard coding the GitHub url in, but I did it anyway, my personal site gets to be a bit of a rats nest of hotfixes over time.\n\nThis was a super quick change that brought me a lot of value without much effort.  I will probably change up the styling/layout of it in the future. For now I have something that functions, and I can get back to creating content.",
        "long_description": "I recently added a button to my blog, and subsequently my posts on DEV.to. It's the best thing that I have done for it in a while. It makes it so easy to do quick edits. finding errors I refer back to my old posts quite a bit, sometimes I find er..."
    },
    {
        "cover": "/static/how-python-tools-config-xmas2020.png",
        "title": "Refactoring your blog urls",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/how-python-tools-config.md",
        "canonical_url": "https://waylonwalker.com/how-python-tools-config",
        "cover_image": "https:waylonwalker.com/how-python-tools-config.png",
        "date": "2020-07-21 05:00:00+00:00",
        "description": null,
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## mypy\n\nMypy's config parser seems to be one of the most complex.  This is likely in part to it having the largest backwards compatability of all projects that I looked at.\n\n[mypy/config_parser](https://github.com/python/mypy/blob/master/mypy/config_parser.py)\n\n\n## flake8\n\n\n\n[options/config.py](https://github.com/PyCQA/flake8/blob/master/src/flake8/options/config.py)\n\n## black\n\n[black](https://github.com/psf/black/blob/master/src/black/__init__.py#L277-L331)\n\n## portray\n\n* only uses pyproject.toml\n\n[portray/config.py](https://github.com/timothycrosley/portray/blob/master/portray/config.py)\n\n## interrogate\n\n* only uses pyproject.toml",
        "long_description": "mypy Mypy's config parser seems to be one of the most complex. This is likely in part to it having the largest backwards compatability of all projects that I looked at. mypy/config_parser flake8 options/config.py black black portray only uses pypro..."
    },
    {
        "cover": "/static/kedro-catalog-xmas2020.png",
        "title": "Kedro Catalog",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-catalog.md",
        "canonical_url": "https://waylonwalker.com/kedro-catalog",
        "cover_image": "https:waylonwalker.com/kedro-catalog.png",
        "date": "2020-07-24 05:00:00+00:00",
        "description": "I am exploring a kedro catalog meta data hook",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I am exploring a kedro catalog meta data hook, these are some notes about what I am thinking.\n\n## Process\n\n* metadata will be attached to the dataset object under a `.metadata` attribute\n* metadata will be updated `after_node_run`\n* metadata will be empty until a pipeline is ran with the hook on\n* optionally a function to add metadata will be added\n* metadata will be stored in a file next to the `filepath`\n* meta\n\n\n## Problems This Hook Should solve\n\n* what datasets have a columns with `sales` in the name\n* what datasets were updated after last tuesday\n* which pipeline node created this dataset\n* how many rows are in this dataset (without reloading all datasets)\n\n\n## implementation details\n\n* metadata will be attached to each dataset as a dictionary\n* list/dict comprehensions can be used to make queries\n\n## Metadata to Capture\n\ntry pandas method -> try spark -> try dict/list -> none\n\n* column names\n* length\n* Null count\n* created_by node name\n\n\n## Database?\n\nIs there an easy way to create a nosql database in memory from a a list of dictionaries?\n\n* [list-dict-DB](https://pypi.org/project/list-dict-DB/)\n* [dataset](https://dataset.readthedocs.io/en/latest/)\n* [TinyDB](https://tinydb.readthedocs.io/en/latest/)",
        "long_description": "I am exploring a kedro catalog meta data hook, these are some notes about what I am thinking. Process metadata will be attached to the dataset object under a .metadata attribute metadata will be updated after_node_run metadata will be empty until a..."
    },
    {
        "cover": "/static/practice-python-online-xmas2020.png",
        "title": "\ud83d\udc0d Practice Python Online",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/practice-python-online.md",
        "canonical_url": "https://waylonwalker.com/practice-python-online",
        "cover_image": "https:waylonwalker.com/practice-python-online.png",
        "date": "2020-07-25 05:00:00+00:00",
        "description": "When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try the out for myself to really understand.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these, you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try them out for myself to really understand.\n\n## Three online REPLS\n\nHere are three different options that I have used in the past to try out something at some various levels. I am sure there are plenty more, but these are three that I have tried. I am not covering all of them, because It's been a while since I have used one other than [repl.it](https://repl.it)\n\n- [python.org/shell/](https://python.org/shell/)\n- [repl.it](https://repl.it)\n- [pythonanywhere.com](https://pythonanywhere.com)\n\n## repl.it\n\n[repl.it](https://repl.it) has been my go-to place to practice python away from my local machine. It's super quick to spin up a new \"project\" add files, install libraries, and run a script. It's not quite as nice as having all of my personal keyboard shortcuts and extensions, but its the closest thing I have found.\n\n![repl.it example](https://waylonwalker.com/repl-it.gif)\n\n## Show up for Practice\n\nThe best way to learn something new in tech is to get your own fingers on the keyboard and start trying new things. Reading and watching videos is great to start, but to get a deep understanding for yourself you need to get your fingers on the keyboard. Make it easy for yourself and find several options that work well for you. [repl.it](https://repl.it) is one tool that works well for me.",
        "long_description": "When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these, you can try out somethi..."
    },
    {
        "cover": "/static/new-machine-tpio-xmas2020.png",
        "title": "New Machine for developing Tests with TestProject.io",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/new-machine-tpio.md",
        "canonical_url": "https://waylonwalker.com/new-machine-tpio",
        "cover_image": "https:waylonwalker.com/new-machine-tpio.png",
        "date": "2020-07-25 05:00:00+00:00",
        "description": "Today I setup a new machine on Digital Ocean to use with TestProject.io, Here are my installation notes.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Today I setup a new machine on Digital Ocean to use with TestProject.io,  Here are my installation notes.\n\n``` bash\napt update && apt upgrade -y\n\napt install zsh\nchsh zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\ncurl -fsSL https://starship.rs/install.sh | bash\necho 'eval \"$(starship init zsh)\"' >> ~/.zshrc\n\n# python\nsudo apt update\nsudo apt install python3-pip -y\necho 'alias python=python3' >> ~/.zshrc\necho 'alias pip=pip3' >> ~/.zshrc\n\n# pipx\napt install python3-venv\npip install pipx\npipx install black\npipx install shell-functools\npip install ipython\n\n\n# docker\nsudo apt update\nsudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nsudo apt update\nsudo apt install docker-ce\n\n# docker-compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n# configure git\ngit config --global user.name \"Waylon Walker\"\ngit config --global user.email waylon@waylonwalker.com\n\n# fzf\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n\n# forgit\ngit clone https://github.com/wfxr/forgit ~/.forgit\necho \". ~/.forgit/forgit.plugin.zsh\" >> ~/.zshrc\n\n# ag\napt install silversearcher-ag\n\n# bat\napt install bat\necho \"alias cat=batcat\" >> ~/.zshrc\n\n# testproject.io tokens\necho 'export TP_AGENT_ALIAS=\"Digital Ocean Agent\"' >>\" ~/.zshrc\necho \"export TP_AGENT_API_KEY=<your-key> >>\" ~/.zshrc\necho \"export TP_DEV_TOKEN=<your-token> >>\" ~/.zshrc\n\n```\n\n\nenvsubst < .github/ci/docker-compose.yml > docker-compose.yml\n\n``` yaml\n# .github/ci/docker-compose.yml\nversion: \"3.1\"\nservices:\n  testproject-agent:\n    image: testproject/agent:latest\n    container_name: testproject-agent\n    depends_on:\n      - chrome\n      - firefox\n    environment:\n      TP_API_KEY: \"${TP_API_KEY}\"\n      TP_AGENT_ALIAS: \"GitHub Action Agent\"\n      TP_AGENT_TEMP: \"true\"\n      TP_SDK_PORT: \"8686\"\n      CHROME: \"chrome:4444\"\n      CHROME_EXT: \"localhost:5555\"\n      FIREFOX: \"firefox:4444\"\n      FIREFOX_EXT: \"localhost:6666\"\n    ports:\n    - \"8585:8585\"\n    - \"8686:8686\"\n  chrome:\n    image: selenium/standalone-chrome\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"5555:4444\"\n  firefox:\n    image: selenium/standalone-firefox\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"6666:4444\"\n```\n\n\n``` bash\ndocker-compose -f docker-compose.yml\n```",
        "long_description": "Today I setup a new machine on Digital Ocean to use with TestProject.io, Here are my installation notes. ``` bash apt update && apt upgrade -y apt install zsh chsh zsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tool..."
    },
    {
        "cover": "/static/testproject-io-py-actions-xmas2020.png",
        "title": "Integration testing with Python, TestProject.io, and GitHub Actions",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/testproject-io-py-actions.md",
        "canonical_url": "https://waylonwalker.com/testproject-io-py-actions",
        "cover_image": "https:waylonwalker.com/testproject-io-py-actions.png",
        "date": "2020-07-27 05:00:00+00:00",
        "description": "As I continue to build out https://waylonwalker.com/ I sometimes run into some errors that are not caught becuase I do not have good testing implemented. I want to explore some integration testing options using GitHub actions.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "As I continue to build out [waylonwalker.com](https://waylonwalker.com/) I sometimes run into some errors that are not caught because I do not have good testing implemented.  I want to explore some integration testing options using GitHub's actions.\n\nRunning integration tests will not prevent bugs from happening completely, but it will allow me to quickly spot them and rollback.\n\n\n---\n\n## \ud83e\udd14 What to test first?\n\nThe very first thing that comes to my mind is anything that is loaded or ran client-side.  Two things quickly came to mind here.  I run gatsby so most of my content is statically rendered, and it yells at me if something isn't as expected.  For performance reasons I lazy load cards on my blogroll, loading all of the header images gets heavy and kills lighthouse (if anyone actually cares). I am also loading some information from the top open-source libraries that I have created.  To prevent the need to rebuild the whole site to get the latest information I am just using the GitHub API client-side.\n\n\nthings I was looking for from features to test\n\n* client-side interactions\n* external API\n\nfeatures on my blog to consider testing\n\n* lazy-loaded blog cards\n* GitHub Repos\n\n\n## Repo Cards\n\nI chose to start with the GitHub repos as they seemed a bit more straight forward, and it's been a while since I have done any selenium.\n\n<p style='text-align: center'>\n<img src='https://waylonwalker.com/open-source-cards.png' style='width:600px; max-width:80%; margin: auto;' alt='Open Source cards as they look on waylonwalker.com'/>\n</p>\n\n> here is what the GitHub repo cards look like\n\n## TestProject.io\n\nI am trying out [TestProject.io](https://TestProject.io) for the first time on this project.  My experience so far has been top-notch.  There was an existing suite of docker images/files set up to run the TestProject agent in a docker container alongside headless chrome and firefox drivers.  The first thing that you are going to need is a [TP\\_DEV\\_TOKEN ](https://app.TestProject.io/#/integrations/sdk) and [TP\\_API\\_KEY](https://app.TestProject.io/#/integrations/api).  These will give TestProject access to your account so that it can automatically post results to your [dashboard](https://app.TestProject.io/#/reports)\n\n* [TP\\_DEV\\_TOKEN ](https://app.TestProject.io/#/integrations/sdk)\n* [TP\\_API\\_KEY](https://app.TestProject.io/#/integrations/api)\n\n### Put these in secrets in your repo\n\nIn your GitHub repo go to `settings>Secrets`, or append `settings/secrets` to the URL to your repo, and add the tokens.  This will give GitHub safe access to them without them being available to the public, contributors, log files, or anything.\n\n\n<p style='text-align: center'>\n<img src='https://waylonwalker.com/test-waylonwalker-com-secrets.png' style='width:600px; max-width:80%; margin: auto;' alt='Secrets panel in the GitHub Repo'/>\n</p>\n\n\n## Setup Dev\n\nTo expedite development I went ahead and set up development environment that I could log into on Digital Ocean.  This allowed me to get all of my tests working a bit quicker than just running them through GitHub, but being as similar as possible.  This allowed me to learn the ins and outs of setting up TestProject without needing to do a full install every time through Github's actions.\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/notes/new-machine-tpio'>\n  <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/new-machine-tpio-rm.png\"\n    alt=\"Test Project Dev Machine setup notes card\"\n  />\n  </a>\n</p>\n\n> I am not going to go into full dev machine setup here, but you can read my [setup notes](https://waylonwalker.com/notes/new-machine-tpio).\n\n## \ud83d\udc0d Pytest\n_you can see all of the tests ran with pytest on [github](https://github.com/waylonwalker/waylonwalker-com-tests/tree/master/tests)_\n\nI chose to go down the route of using pytest.  I really liked the idea of utilizing fixtures, automatically running my test functions, and utilizing a bit of the pytest reporting capabilities.\n\n**NOTE** per pytest standard practice I named the directory containing tests `tests`.  While this works, TestProject.io uses this director as the default name for the project.  If I were to go back I would either rename the directory to what I want to show up on TestProject.io or configure the project name inside of the config.\n\n\n## conftest.py\n_You can see the [conftest.py](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/conftest.py) live on GitHub._\n\n\npytest automatically imports [conftest.py](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/conftest.py) modules from the same directory that you are working from.  It's common to place fixtures used across multiple files here.  I placed a driver fixture in this module so that as I create more tests it will be available everywhere by default.\n\n> conftest.py stores fixtures for all modules in a directory.\n\n``` python\n# tests/conftest.py\n\nimport time\nimport pytest\nfrom src.TestProject.sdk.drivers import web driver\n\n@pytest.fixture\ndef driver():\n    \"creates a webdriver and loads the homepage\"\n    driver = webdriver.Chrome()\n    driver.get(\"https://waylonwalker.com/\")\n    yield driver\n    driver.quit()\n```\n> Look at the full version of [conftest.py](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/conftest.py)\n\nThe above sample is a bit **simplified**.  I ran into some inconsistencies in the real version and found that some tests had a better pass rate if I added a wait.  I ended up with a `driver` and a `slow_driver` fixture.\n\n## test_repos.py\n\n_see the full [testrepos.py](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/test_repos.py) on GitHub_\n\n\nI have initially set up 3 different tests for the repo cards.  I set a list of repos that I expect to show up in the cards.  These tests are quite easy to do with TestProject.io as it is using selenium and a headless browser to execute javascript under the hood.\n\nIf you are not familiar a **headless browser** runs the engine as your browser without a graphical user interface.  JavaScript gets fully loaded and parsed, and the dom is completely interactive programmatically.\n\n``` python\n\"\"\"\nTest that GitHub repo data dynamically loads the client-side.\n\"\"\"\n\nREPOS = [\n    \"find-kedro\",\n    \"kedro-static-viz\",\n    \"kedro-action\",\n    \"steel-toes\",\n]\n\ndef test_repos_loaded(slow_driver):\n    \"\"\"\n    Test that each repo-name exists as a title in one of the repo cards.\n\n    On waylonwalker.com repo cards have a title with a class of \"repo-name\"\n    \"\"\"\n    repos = slow_driver.find_elements_by_class_name(\"repo-name\")\n    # get innertext from elements\n    header_text = [\n        header.text for header in repos\n    ]\n    for repo in REPOS:\n        assert repo in header_text\n\n\ndef test_repo_description_loaded(slow_driver):\n    \"\"\"\n    Test that each repo has a description longer than 10 characters\n\n    On waylonwalker.com repo cards have a descriptiion with a class of \"repo-description\"\n    \"\"\"\n    repo_elements = slow_driver.find_elements_by_class_name(\"repo\")\n    for el in repo_elements:\n        desc = el.find_element_by_class_name(\"repo-description\")\n        assert len(desc.text) > 10\n\n\ndef test_repo_stars_loaded(slow_driver):\n    \"\"\"\n    Ensure that stars are properly parsed from the API and loaded client-side\n\n    On waylonwalker.com repo cards have a stars element with a class of \"repo-stars\" and\n    is displayed as \"n stars\"\n    \"\"\"\n    repo_elements = slow_driver.find_elements_by_class_name(\"repo\")\n    for el in repo_elements:\n        stars = el.find_element_by_class_name(\"repo-stars\")\n        num_stars, label = stars.text.split()\n        assert int(num_stars) > 0\n        assert label == 'stars'\n```\n\n## Forum\n_[forum.TestProject.io](https://forum.TestProject.io/t/install-agent-inside-github-actions/2334/3)_\n\nBefore jumping into the real action.  I quickly wanted to mention the **amazing** \u2728  discord server that they have going.\n\nI was a bit confused about how to set up TestProject.io inside of actions.  I was with a prompt response linking me to the exact example I needed.  The tests were written in java, but they had set up the docker-compose steps that I needed.\n\n\n---\n\n## GitHub Actions \ud83c\udfac\n\n_[test-waylonwalker-com.yml](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/workflows/test-waylonwalker-com.yml)_\n\nGitHub actions are a continuous integration, continuous delivery service by GitHub that will spin up a VM and run a set of steps upon a number of triggers including push, pull request, and schedule.\n---\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/github-actions-syntax'>\n  <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/github-actions-syntax-rm.png\"\n    alt=\"GitHub Actions Syntax article card\"\n  />\n  </a>\n</p>\n\n> If you're new to actions check out this article on using actions.\n\n---\n\nNow that I have my GitHub repo setup with my [tests](https://github.com/WaylonWalker/waylonwalker-com-tests/tree/master/tests) successfully running in pytest, let's get it running inside of GitHub actions automatically.\n\n``` yaml\nname: Test WaylonWalker.com\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '*/10 * * * *'\n```\n\nYou can see in the section above I have set up to run every time there is a push to or pull request open to main.  I also set a fairly aggressive test schedule to run every **10** **minutes**.  For now, this is just to build confidence in the tests and get more data in the reports to explore.  I will likely turn this down later.\n\n``` yaml\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@main\n    - uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n    - run: pip install -r requirements.txt\n    - name: Run TestProject Agent\n      env:\n        TP_API_KEY: ${{ secrets.TP_API_KEY }} # < Let Secrets handle your keys\n      run: |\n        envsubst < .github/ci/docker-compose.yml > docker-compose.yml\n        cat docker-compose.yml\n        docker-compose -f docker-compose.yml up -d\n    - name: Wait for Agent to Register\n      run: bash .github/ci/wait_for_agent.sh\n    - run: pytest\n      env:\n        TP_DEV_TOKEN: ${{ secrets.TP_DEV_TOKEN }} # < Let Secrets handle your tokens\n        TP_AGENT_URL: http://localhost:8585\n```\n\nIn the test job you can see that we have rendered the [TP\\_API\\_KEY](https://app.TestProject.io/#/integrations/api) into the [docker-compose.yml](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/ci/docker-compose.yml) using `envsubst` file so that TestProject has access to it.  We have also exposed our [TP\\_DEV\\_TOKEN ](https://app.TestProject.io/#/integrations/sdk) to pytest.\n\n\n## docker-compose.yml\n\n_[docker-compose.yml](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/ci/docker-compose.yml)_\n\nThe following [docker-compose.yml](https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/ci/docker-compose.yml) file was graciously contributed by [@vitalybu](https://github.com/vitalybu) in the [testproject-io/java-sdk](https://github.com/testproject-io/java-sdk/blob/master/.github/ci/docker-compose.yml) repo.  It sets up a template with the **`TP_API_KEY`** as a variable for envsubst, headless browsers for chrome and firefox, and the TestProject.io agent.\n\n``` yaml\nversion: \"3.1\"\nservices:\n  testproject-agent:\n    image: testproject/agent:latest\n    container_name: testproject-agent\n    depends_on:\n      - chrome\n      - firefox\n    environment:\n      TP_API_KEY: \"${TP_API_KEY}\"\n      TP_AGENT_TEMP: \"true\"\n      TP_SDK_PORT: \"8686\"\n      CHROME: \"chrome:4444\"\n      CHROME_EXT: \"localhost:5555\"\n      FIREFOX: \"firefox:4444\"\n      FIREFOX_EXT: \"localhost:6666\"\n    ports:\n    - \"8585:8585\"\n    - \"8686:8686\"\n  chrome:\n    image: selenium/standalone-chrome\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"5555:4444\"\n  firefox:\n    image: selenium/standalone-firefox\n    volumes:\n      - /dev/shm:/dev/shm\n    ports:\n    - \"6666:4444\"\n```\n\n## \u231a Waiting for the Agent to register\n_[wait for agent.sh](https://waylonwalker.com/waitforagent.sh)_\n\nI think the most interesting part of the workflow above is how we wait for the agent to register.  The shell script is a bit terse, but it looks for exceeding the `max_attempts` allowed or that the agent has started by using its `/api/status` rest API.  This prevents us from wasting too much time by setting a big wait, or trying to move on too early and running pytest without a running agent.\n\n``` bash\ntrap 'kill $(jobs -p)' EXIT\nattempt_counter=0\nmax_attempts=100\nmkdir -p build/reports/agent\ndocker-compose -f docker-compose.yml logs -f | tee build/reports/agent/log.txt&\nuntil curl -s http://localhost:8585/api/status | jq '.registered' | grep true; do\n    if [ ${attempt_counter} -eq ${max_attempts} ]; then\n    echo \"Agent failed to register. Terminating...\"\n    exit 1\n    fi\n    attempt_counter=$(($attempt_counter+1))\n    echo\n    sleep 1\ndone\n```\n\n\n## TestProject.io Dashboard \u303d\n\nOne one of the coolest features that you get from TestProject.io are the [reports](https://app.testproject.io/#/reports) dashboard.  To me, this felt like a premium feature for **free**.  Here you can see a time-series plot of your tests success rate over time.  It gives you a bit of an ability to slice in, but not a lot.  Some of the filters are pre-canned, like the past 2 days are past 30 days cannot be customized.\n\n<p style='text-align: center'>\n  <img\n    style='width:800px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/tpio-test-repos.png\"\n    alt=\"My Dashboard for test_repos\"\n  />\n</p>\n\n## A single test flow in the dashboard\n\nAs you drill in you can see individual tests that have been run, select them, and see individual reports for each test.  Personally I really like the layout on the side.  It converts the steps ran by the driver into a human-readable _flowchart_, and each step can be opened up to see their values.  It would be nice if it picked up my pytest assertions, but picking up what it did was great.\n\n\n<p style='text-align: center'>\n  <img\n    style='width:350px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/test_repo_stars_loaded.png\"\n    alt=\"driver flow of test_repo_stars_loaded\"\n  />\n</p>\n\n\n## Overall \ud83d\ude04\nThe experience I had setting up TestProject.io to run inside GitHub's actions was great.  It was fairly simple to set up and get running with many of the greatest integration testing tools of today, selenium, chrome, firefox.\n\nNow I am going to turn the test frequency down a bit.\n\n---\n\n## More Actions\n\nIf you're new to actions check out this article on using actions.\n\n<TABLE>\n<TR>\n   <TD>\n      <a href='https://waylonwalker.com/four-github-actions-website'>\n      <img\n         style='margin: auto; float: left'\n         src=\"https://waylonwalker.com/four-github-actions-website-rm.png\"\n         alt=\"GitHub Actions Syntax article card\"\n         />\n      </a>\n   </TD>\n   <TD>\n      <a href='https://waylonwalker.com/four-github-actions-python'>\n      <img\n         style='margin: auto; float: right;'\n         src=\"https://waylonwalker.com/four-github-actions-python-rm.png\"\n         alt=\"GitHub Actions Syntax article card\"\n         />\n      </a>\n   </TD>\n</TR>",
        "long_description": "As I continue to build out waylonwalker.com I sometimes run into some errors that are not caught because I do not have good testing implemented. I want to explore some integration testing options using GitHub's actions. Running integration tests wil..."
    },
    {
        "cover": "/static/026.md-xmas2020.png",
        "title": "026.md",
        "tags": [
            "cli",
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/026.md.md",
        "afterImage": "/static/bash.png",
        "canonical_url": "https://waylonwalker.com/026.md",
        "cover_image": "https:waylonwalker.com/026.md.png",
        "date": "2020-07-28 05:00:00+00:00",
        "description": "Convert Markdown to reveal.js slides setup bash wget https://github.com/hakimel/reveal.js/archive/master.tar.gz tar -xzv",
        "published": false,
        "content": "# Convert **Markdown** to _reveal.js_ slides\n\nsetup\n``` bash\nwget https://github.com/hakimel/reveal.js/archive/master.tar.gz\ntar -xzvf master.tar.gz\nmv reveal.js-master reveal.js\n```\n\nconvert\n``` bash\npandoc -t revealjs -s\\\n   -o myslides.html myslides.md \\\n   -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/\n```",
        "long_description": "Convert Markdown to reveal.js slides setup bash wget https://github.com/hakimel/reveal.js/archive/master.tar.gz tar -xzvf master.tar.gz mv reveal.js-master reveal.js convert bash pandoc -t revealjs -s\\ -o myslides.html myslides.md \\ -V revealjs..."
    },
    {
        "cover": "/static/025.md-xmas2020.png",
        "title": "025.md",
        "tags": [
            "cli",
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/hot_tips/025.md.md",
        "afterImage": "/static/bash.png",
        "canonical_url": "https://waylonwalker.com/025.md",
        "cover_image": "https:waylonwalker.com/025.md.png",
        "date": "2020-07-29 02:16:24+00:00",
        "description": "Convert Markdown to reveal.js slides setup bash wget https://github.com/hakimel/reveal.js/archive/master.tar.gz tar -xzv",
        "published": false,
        "content": "# Convert **Markdown** to __reveal.js__ slides\n\nsetup\n``` bash\nwget https://github.com/hakimel/reveal.js/archive/master.tar.gz\ntar -xzvf master.tar.gz\nmv reveal.js-master reveal.js\n```\n\nconvert\n``` bash\npandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/\n```",
        "long_description": "Convert Markdown to reveal.js slides setup bash wget https://github.com/hakimel/reveal.js/archive/master.tar.gz tar -xzvf master.tar.gz mv reveal.js-master reveal.js convert bash pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=http..."
    },
    {
        "cover": "/static/whats-new-in-kedro-0164-xmas2020.png",
        "title": "What's New in Kedro 0.16.4",
        "tags": [
            "python",
            "kedro"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/whats-new-in-kedro-0164.md",
        "canonical_url": "https://waylonwalker.com/whats-new-in-kedro-0164",
        "cover_image": "https:waylonwalker.com/whats-new-in-kedro-0164.png",
        "date": "2020-08-01 05:00:00+00:00",
        "description": "If we take a look at the release notes I see one **major** feature improvement on the list, auto-discovery of hooks.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "If we take a look at the [release notes](https://github.com/quantumblacklabs/kedro/blob/master/RELEASE.md) I see one **major** feature improvement on the list, auto-discovery of hooks.\n\n``` markdown\n## Major features and improvements\n\n* Enabled auto-discovery of hooks implementations coming from installed plugins.\n```\n\nThis one comes a bit surprising as it was just casually mentioned in [#435](https://github.com/quantumblacklabs/kedro/issues/435)\n\n[![auto enabled plugins mentioned in issue 435](https://waylonwalker.com/kedro-435.png)](https://github.com/quantumblacklabs/kedro/issues/435)\n\n## Think pytest\n\nAs mentioned in [#435](https://github.com/quantumblacklabs/kedro/issues/435) this is the model that pytest uses. Not all plugins automatically start doing things right out of the box but require a CLI argument.\n\n## simplicity\n\nIt feels a bit crazy that simply installing a package will change the way that your pipeline gets executed. I do like that it requires just a bit less reaching into the framework stuff for the average user. Most folks will be able to write in the catalog and nodes without much change to the rest of the project.\n\n## Implementation\n\nReading through the [docs](https://kedro.readthedocs.io/en/stable/07_extend_kedro/05_plugins.html#hooks), they show us that we can make our hooks automatically register by adding a `kedro.hooks` endpoint that points to a _singleton_ instance of our hook.\n\n_from the docs_\n\n``` python\nsetup(\n    ...\n    entry_points={\"kedro.hooks\": [\"plugin_name = plugin_name.plugin:hooks\"]},\n)\n\nimport logging\n\nfrom kedro.framework.hooks import hook_impl\n\nclass MyHooks:\n    @hook_impl\n    def after_catalog_created(self, catalog): # pylint: disable=unused-argument\n        logging.info(\"Reached after_catalog_created hook\")\n\nhooks = MyHooks()\n```\n\n## Careful with the singletons\n\n_hook authors beware_\n\nI will be a bit cautious before installing a plugin that is automatically registered. I know its not a common pattern, but if you were to leverage any part of two kedro projects at the same time, and project-specific data was stored in the instance of the hook it will likely be broken.\n\nAs long as the hook doesn't store data on the instance you will be ok. Hooks like what they have in the examples will be ok. They generally just take some information from the lifecycle arguments and do something at their prescribed lifecycle point.\n\nMany of the hooks I am seeing in the wild are already more complicated and require the hooks author to utilize an ` __init__ ` method and store data on the instance. If you were to do this on two pipelines simultaneously it would break.\n\n## Can my hook be auto-discovered\n\nIf your hook doesn't include a `__init__` method its a fairly easy yes, otherwise be aware of the potential dangers of passing singleton on to your users.\n\n## Use Virtual environments\n\nWhatever virtual environment manager you use, it is more important than ever to make sure you **DO NOT** install plugins in your global environment. Generally, you should always run projects _even toys or tests_ in a **virtual**  **environemnt**.\n\n_I use conda_\n\n``` bash\nconda create -n my-sample-env python=3.8 -y\n```\n\n## Overall\n\nI think this is a really interesting direction for the project to go to. Hooks are still really early. The implementation is good, but I foresee us getting some more functionality that may require us to rely on the ` __init__ ` method a little less.  I think there are going to be some really cool hooks that can leverage the simplicity of auto-discoverability.",
        "long_description": "If we take a look at the release notes I see one major feature improvement on the list, auto-discovery of hooks. ``` markdown Major features and improvements Enabled auto-discovery of hooks implementations coming from installed plugins. ``` This on..."
    },
    {
        "cover": "/static/git-auto-commit-action-review-xmas2020.png",
        "title": "Review of the git-auto-commit-action",
        "tags": [
            "actions"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/git-auto-commit-action-review.md",
        "canonical_url": "https://waylonwalker.com/git-auto-commit-action-review",
        "cover_image": "https:waylonwalker.com/git-auto-commit-action-review.png",
        "date": "2020-08-03 05:00:00+00:00",
        "description": "It's a really cool GitHub action that will automatically commit files changed during the action. I was using this to render a new readme based on a template.",
        "published": true,
        "read_more_cover": "/static/git-auto-commit-action-review-rm.png",
        "related_post_label": "Check out this related post",
        "content": "Check out the repo for [git-auto-commit-action](https://github.com/stefanzweifel/git-auto-commit-action).\n\nIt's a really cool GitHub action that will automatically commit files changed during the action.  I was using this to render a new readme based on a template.\n\nThis has been by far the easiest way to commit back to a repo that I have seen.  Other patterns often require fully setting up the git user and everything.  While it's not all that hard, this action already has all of that covered.\n\nYou must give it a commit message and thats it.  Optionally you can configure a number of things.  Its possible to configure the `commit_user_name`, `commit_user_email`, and `commit_author`.  I often also scope the `file_pattern` to a certain subset of files.\n\n---\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/github-actions-syntax'>\n  <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/github-actions-syntax-rm.png\"\n    alt=\"GitHub Actions Syntax article card\"\n  />\n  </a>\n</p>\n\n> If you're new to actions check out this article on using actions.\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/github-actions-syntax'>\n  <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/github-actions-syntax-rm.png\"\n    alt=\"GitHub Actions Syntax article card\"\n  />\n  </a>\n</p>\n\n> If you're new to actions check out this article on using actions.\n\n---\n\nYou do need to be careful to checkout the repo just a bit different than normal.\n\n\n## Limitations & Gotchas\n_directly from the repo_\n\n### Checkout the correct branch\n\nYou must use `action/checkout@v2` or later versions to checkout the repository. In non-push events, such as pull_request, make sure to specify the ref to checkout:\n\n``` yaml\n- uses: actions/checkout@v2\n  with:\n    ref: ${{ github.head_ref }}\n```\n\nYou have to do this do avoid that the `checkout`-Action clones your repository in a detached state.\n\n## Usage\n_from the repo_\n\n``` yaml\n- uses: stefanzweifel/git-auto-commit-action@v4\n  with:\n    # Required\n    commit_message: Apply automatic changes\n\n    # Optional branch to push to, defaults to the current branch\n    branch: feature-123\n\n    # Optional options appended to `git-commit`\n    # See https://git-scm.com/docs/git-commit for a list of available options\n    commit_options: '--no-verify --signoff'\n\n    # Optional glob pattern of files which should be added to the commit\n    # See the `pathspec`-documentation for git\n    # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203\n    # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec\n    file_pattern: src/*.js tests/*.js\n\n    # Optional local file path to the repository\n    repository: .\n\n    # Optional commit user and author settings\n    commit_user_name: My GitHub Actions Bot\n    commit_user_email: my-github-actions-bot@example.org\n    commit_author: Author <actions@github.com>\n\n    # Optional tag message\n    # Action will create and push a new tag to the remote repository and the defined branch\n    tagging_message: 'v1.0.0'\n\n    # Optional options appended to `git-push`\n    push_options: '--force'\n\n    # Optional: Disable dirty check and always try to create a commit and push\n    skip_dirty_check: true\n\n  ```\n\n## More Actions\n\nIf you're new to actions check out these articles on using actions.\n\n<TABLE>\n  <TR>\n    <TD>\n      <a href='https://waylonwalker.com/four-github-actions-website'>\n      <img\n        style='width:250px; max-width:80%; margin: auto; float: left'\n        src=\"https://waylonwalker.com/four-github-actions-website-rm.png\"\n        alt=\"GitHub Actions Syntax article card\"\n        />\n      </a>\n    </TD>\n    <TD>\n      <a href='https://waylonwalker.com/four-github-actions-python'>\n      <img\n        style='width:250px; max-width:80%; margin: auto; float: right;'\n        src=\"https://waylonwalker.com/four-github-actions-python-rm.png\"\n        alt=\"GitHub Actions Syntax article card\"\n        />\n      </a>\n    </TD>\n  </TR>\n</TABLE>",
        "long_description": "Check out the repo for git-auto-commit-action. It's a really cool GitHub action that will automatically commit files changed during the action. I was using this to render a new readme based on a template. This has been by far the easiest way to comm..."
    },
    {
        "cover": "/static/pariss-athena-on-black-tech-pipeline-xmas2020.png",
        "title": "Black Tech Pipeline",
        "tags": [
            "catalytic"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/pariss-athena-on-black-tech-pipeline.md",
        "canonical_url": "https://waylonwalker.com/pariss-athena-on-black-tech-pipeline",
        "cover_image": "https:waylonwalker.com/pariss-athena-on-black-tech-pipeline.png",
        "date": "2020-08-03 05:00:00+00:00",
        "description": "I was particularly inspired by @chantastic episode 103 of the react podcast with @ParissAthena. They spoke about the black tech pipeline as well as Diversity, Equity, and Inclusion. Pariss is quite an inspiration. She has done so much work to create a better place for POC in tech. I like that not only is she helping them get jobs but acting as a mentor for their first few months on the job to make sure that they are able to find their place and fit in.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "_Based on an episode of react podcast._\n\n\ud83c\udf99 Listen to the full [episode](https://reactpodcast.simplecast.com/episodes/103).\n\n## So Inspirational\n\nI was particularly inspired by [@chantastic](https://twitter.com/chantastic) episode 103 of the react podcast with [@ParissAthena](https://twitter.com/ParissAthena).  They spoke about the black tech pipeline as well as Diversity, Equity, and Inclusion.  Pariss is quite an inspiration.  She has done so much work to create a better place for POC in tech.  I like that not only is she helping them get jobs but acting as a mentor for their first few months on the job to make sure that they are able to find their place and fit in.\n\n## Losing their culture\n\nOne thing that Michael brought up was the feeling he gets when he has other Asian friends to collaborate with at work is just a feeling of fitting in.  All too often he feels like he has to put on this persona of \"Hamburgers and Beer are my favorite thing, like all the time\" just to fit in.\n\n## Growing up in Rural America (me)\n\nI grew up in a very rural part of the United States Dominated by Whites with a prominent Mexican community, there was almost no Asian or Black.  I can't tell you how many times I heard, \"I have this friend John, He's black, but he's not really black.\"  I will say that I was never quite this low, but growing up in a region where this was the norm, I probably wasn't the best ambassador either.\n\nYears later I recall taking some training for work that could not have described the people I grew up with better.  It described rural parts of the United States as completely accepting of any POC as long as they completely leave their culture behind.\n\n---\n\n> \"I have this friend John, He's black, but he's not really black.\"\n\n_I heard this statement far too many times coming from rural United States_\n\n---\n\nThinking a little bit more into this statement I realize that as a culture Rural America was very open to POC, but **not** **at** **all** open to their **culture**.\n\nThis is where a lot of what we were taught in school in the '90s and '00s falls short.  We were so heavily focused on, _\" I don't see color\"_.  We were taught that race was all about color, having friends of color, and treating everyone equally.  But I think that not seeing color puts us in a situation of not really treating everyone equally.  Their color may have been seen as equal, but their culture wasn't.\n\nWe have failed to embrace others the way we would want them to embrace us.\n\n> \"Hamburgers and Beer are my favorite thing, like all the time\"\n\nThis is where I really connected with Michael's statement \"Hamburgers and Beer are my favorite thing, like all the time\".  So often we can look past color, but we completely miss making a real connection with other cultures.\n\n## Welcome Everyone\n\n_Like, really welcome them._\n\nFurther, into the episode, Pariss spoke about being hired into tech and feeling left out of the conversation because she didn't feel like she fit in.  She would hire in with a non-POC on the same day and felt like people would stare at her like a zoo animal while treating the other new hire as a real person.\n\n> people would stare at her like a zoo animal\n\n## Take Action\n\nI know that I do not want to make anyone on my team feel like a zoo animal.  I feel like listening to this episode gave me a bit of perspective into what it might be like to be just a bit different than everyone else.  I really appreciate the both of them for being so open about sharing their experiences.  I will definitely think of ways that I can make any new hire just a bit more welcome next time.\n\n---\n\nFor this post don't follow me on Twitter, don't join my newsletter.\n\nShare the episode with a friend.\n\n[react podcast 103](https://reactpodcast.simplecast.com/episodes/103)\n\nFollow [@ParissAthena](https://twitter.com/ParissAthena)\n\nFollow [@chantastic](https://twitter.com/chantastic)\n\nSign up for the [Black Tech Pipeline Newsletter](https://blacktechpipeline.substack.com/p/coming-soon)\n\n---\n\n## Follow them they are some amazing people.\n\nI have been trying to build out the content in mine.  I later found this is called a shadow newsletter or evergreen newsletter.  I will say that it gets tough to keep up with.  I've been trying to do it weekly, but have definitely had some folks get ahead of my pace, I'll have to figure out how to split the out and resend articles they missed.\n\n-- for yours --\n\nI like the branding that you have put into it, and how it matches yoru cover images elsewhere.\n\nI like how you have included sections of posts from various places that pull me in and make me want to go see more.\n\nyour video to @WellMax81 is amazing, do more of those.\n\n\nOne thing, I am not sure if there is a \"right\" direction with this, but it doesnt give me any new content.  If I were to have been following you everywhere I would have likely seen a lot of this already.  That might make me wonder why I am subscribed over time.",
        "long_description": "Based on an episode of react podcast. \ud83c\udf99 Listen to the full episode. So Inspirational I was particularly inspired by @chantastic episode 103 of the react podcast with @ParissAthena. They spoke about the black tech pipeline as well as Diversity, Equit..."
    },
    {
        "cover": "/static/crush-dev-to-posts-xmas2020.png",
        "title": "How to crush amazing posts on DEV",
        "tags": [
            "catalytic",
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/crush-dev-to-posts.md",
        "canonical_url": "https://waylonwalker.com/crush-dev-to-posts",
        "cover_image": "https:waylonwalker.com/crush-dev-to-posts.png",
        "date": "2020-08-07 05:00:00+00:00",
        "description": "Here are a few of my top tips to help make dev.to posts more readable, and drive better engagement.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "This post was inspired by a comment I left on @dsteenman's  post.\n\n\n{% post dsteenman/how-long-should-a-blogpost-be-2k6n %}\n\nMost of the time I prefer short as I am more likely to read the whole thing.  If its setup as a series I am more likely to work my way through the whole series in a matter of a few sessions.  Just my preference\n\nI will say though there are certain articles that fit well to the long format.  They are articles that folks tend to come back to often as a reference again and again.\n\n## Sections\n\n1. [layout is key](#layout-is-key)\n1. [Break it up](#break-it-up)\n1. [Article types](#article-types)\n1. [superpost](#superpost)\n1. [single post](#single-post)\n1. [series](#series)\n1. [discussion](#discussion)\n1. [Post what you want to read](#post-what-you-want-to-read)\n\n## layout is key\n\nEither way, you go **layout is key**.  You are not **Steven King**, no matter how great of a writer you are, you are unlikely to hold attention like he can.  Most folks reading blogs scan articles first.  I often scan, then read.  If the article is really good or pertains well to me I will read everything, otherwise, I go back and read only the sections of interest.  If there are no discernable sections you lost me.\n\nFor this reason, you need to break up your post, into sections and treat the heading for each one like you would a title of a full post.\n\n### <abbr title=\"Table of Contents\">TOC</abbr>\n\n_Table of Contents_\n\nA lot of folks responded to Danny's post suggesting a table of contents.  For some reason I have never included a <abbr title=\"Table of Contents\">TOC</abbr> in my posts.  It's something I am now considering.  I am really good at changing layout right before, or after, shipping a brand new post.\n\n_semi-auto <abbr title=\"Table of Contents\">TOC</abbr>_\n\nAs I am highly allergic to unnecessary rework and potential mistakes I put together this snippet that generates the <abbr title=\"Table of Contents\">TOC</abbr>automatically, just paste this into your console, and paste the results in your article.\n\n``` javascript\n// pres F12\n// paste this in the console\n// get your auto generated DEV TOC\nconsole.log(\n  [...document.querySelectorAll('.anchor')]\n  .map(a =>\n    `1. [${a.parentElement.innerText}](#${a.href.split('#')[1]})`\n  )\n  .join('\\n')\n)\n```\n\n\n## Break it up\n\nUse headings, images, and blockquotes to break your article up and make it scannable.  I treat each heading as an article title.  It should be engaging and pull the reader in, but not be clickbaity and irritate them when they didn't get what they expected.\n\n> make it scannable! ... treat each heading as an article title\n\n### Markdown\n\nGet Familiar with Markdown. Check out this [cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet) or the reference right in the DEV editor.  This is not an article about markdown, but here are the most common tags you need to break up your article.\n\n``` markdown\n\n# H1\n## H2\n### H3\n... up to H6\n\n* unordered\n* list\n* of\n* things\n\n1. ordered\n1. list\n1. of\n1. things\n\n![Alt text of image](put-link-to-image-here)\n\n**bold**\n_italics_\n~~strikethrough~~\n\n\ud83d\udc47 Horizontal rules are great a making a hard break between sections\n\n---\n\n```\n\nDEV also supports these HTML elements for additional flair, use wisely. Some can make for some really jarring style that really pulls the readers eye to and is hard to focus on the rest.  I'm talking about you `<mark>`.\n\n``` HTML\n<small>small text</small>\n<sup>superscript text</sup>\n<sub>subscript text</sub>\n<mark>highlighted text</mark>\n<abbr title=\"Table of Contents\">TOC</abbr>\n```\n\n### Liquid Tags\n\nWhen Editing a post click the Liquid Tag reference to the right, for a list of everything.  The `post` tag is the retweet of DEV.\n\n``` markdown\n\n{% post helenanders26/sql-series-from-a-to-z-2pk9 %}\n\n{% user helenanders26 %}\n\n{% github forem/forem %}\n\n{% github forem/forem no-readme %}\n\n```\n\n## Article types\n\nAs I can see there are several **article types** on DEV\n\n\n1. [superpost](#superpost)\n1. [single post](#single-post)\n1. [series](#series)\n1. [discussion](#discussion)\n\n## superpost\n\nI think this is what @dsteenman is eluding to with the (+3000) word post.  This is the hardest to pull off in my opinion, but if done right it will land you at the top of the search for a long time, in the top 7, and potentially the top 1 for a given tag.\n\nI used to think that every post needed to be a super post that everyone would rave over.  I have found personally that attempting to do this makes it so I rarely post and way overthink them.  I need to at least make a cutoff time that the post is going to ship.\n\nThis can also be the most frustrating, you have put all of your eggs in one basket.  If you don't title it right, post at the right time, share it at the right time, it might not take off like you had hoped.\n\n{% post helenanders26/sql-series-from-a-to-z-2pk9 %}\n\n@helenanders26 takes the \ud83d\udc51 as the queen of the superpost.  She is the first person who comes to mind when I think of this post type\n\n## single post\n\nYour average post.  There are a lot of great techniques to making the average post great (some added above).  Sometimes they find traction, sometimes they don't.  I don't sweat if they don't.  I like posting shorter content as its achievable for me and my lifestyle.  I can always crosslink them and generate more views/discussion across them.\n\n{% post taillogs/how-to-write-a-good-blog-post-2eom %}\n\n@taillogs has a good article on his process to writing a good post.\n\nFor those struggling to find what to write about, this is a great article from @swyx [learn-in-public-hack](https://www.swyx.io/writing/learn-in-public-hack)\n\n## series\n\nUsing the `series` tag you can break super posts into smaller ones.  This puts fewer of your eggs in the same basket.  I typically start a series when I know that I am going to post about a single topic often, but don't have it all laid out.  I've been told for these to be really successful it needs a bit more pre-thought.\n\nI do notice that I get a bit of engagement back to older posts every time a new one is posted.  so this does help drive engagement by continuously pulling readers in.  I am not sure if its quite as good as a link, or liquid embed.  Keep in mind when doing this the series component will show the first 2 and the last two without clicking.  Make sure that the first two really count, they will likely get the most traffic benefit from the series.\n\n\n{% post waylonwalker/what-are-github-actions-1lhh %}\n\nI personally put a lot of my content into a series.  I don't think through the full series ahead of time very much.  I do it because it helps me organize and retrieve my thoughts.  I find it easier to get back to the post I want to reference if I can find the series it was part of.  I think of it as a tag that no one else can post to.\n\n## discussion\n\nPosts just like this one, where the author leads the discussion with an intriguing question or comment but holds back on their opinion.  The key here is that the author should engage in the discussion, keep the discussion moving, and provide their thoughts here.\n\nSelfishly this is one of my favorite types of posts to make as I learn the most from them.\n\n{% post ben/how-do-you-identify-over-engineering-1oad %}\n\n@ben is the king of the [#discuss](https://dev.to/t/discuss) post.  He is able to get just the right titles that pull people in and generate quite large discussions.\n\n---\n\n## Post what you want to read\n\nAt the end of the day **YOU** are the most important component.  Post what you like to read, post what you are able to write.  If you struggle to wrap your head around concepts in small posts and have a talent at making rockstar super posts do that.  **Do YOU**",
        "long_description": "This post was inspired by a comment I left on @dsteenman's post. {% post dsteenman/how-long-should-a-blogpost-be-2k6n %} Most of the time I prefer short as I am more likely to read the whole thing. If its setup as a series I am more likely to work..."
    },
    {
        "cover": "/static/kedro-basics-xmas2020.png",
        "title": "Kedro Basics",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-basics.md",
        "canonical_url": "https://waylonwalker.com/kedro-basics",
        "cover_image": "https:waylonwalker.com/kedro-basics.png",
        "date": "2020-08-08 05:00:00+00:00",
        "description": "In my upcoming free kedro course, you can learn how to start building pipelines in 5 days.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Learn Kedro in 5 days\n\n## Day 0 Setup\n\n* vm\n* install\n* python\n* editor\n\n## Day 1\n\n* kedro new\n* kedro viz\n\n## Day 2\n\n* catalog\n* filter catalog\n* load data\n* fsspec\n\n## Day 3\n\n* pipeline\n* nodes\n\n## Day 4\n\n\n* filter pipeline\n* run partial pipeline\n\n## Day 5\n\n* kedro docker\n* GitHub Actions\n\n# Advanced Kedro\n\n* hooks\n* custom datasets\n* modular pipelines",
        "long_description": "Learn Kedro in 5 days Day 0 Setup vm install python editor Day 1 kedro new kedro viz Day 2 catalog filter catalog load data fsspec Day 3 pipeline nodes Day 4 filter pipeline run partial pipeline Day 5 kedro docker GitHub Actions Advanced..."
    },
    {
        "cover": "/static/install-miniconda-xmas2020.png",
        "title": "How to Install miniconda on linux (from the command line only)",
        "tags": [
            "bash",
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/install-miniconda.md",
        "canonical_url": "https://waylonwalker.com/install-miniconda",
        "cover_image": "https:waylonwalker.com/install-miniconda.png",
        "date": "2020-08-10 05:00:00+00:00",
        "description": "Installing miniconda from only the command line can be a bit of an intimidating task your first time. Lets walk through how to do it.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "miniconda is a python distribution from continuum. It's a slimmed-down version of their very popular anaconda distribution. It comes with its own environment manager and has eased the install process for many that do not have a way to compile c-extensions. It made it much easier to install the data science stack on windows a few years ago. These days windows are much better than it was back then at compiling c-extensions. I still like its environment manager, which installs to a global directory rather than a local directory for your project.\n\n## Installing miniconda on Linux\n\nInstalling miniconda on Linux can be a bit tricky the first time you do it completely from the terminal. The following snippet will create a directory to install miniconda into, download the latest python 3 based install script for Linux 64 bit, run the install script, delete the install script, then add a conda initialize to your bash or zsh shell. After doing this you can restart your shell and conda will be ready to go.\n\n``` bash\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n```\n\n## Options\n\nThe miniconda.sh script comes with a few basic options.  Most notably we used `-b` to be able to run unattended, which means that all of the agreements are automatically accepted without user prompt.  `-u` updates any existing installation in the directory of install if there is one. `-p` is the directory to install into.\n\n```\nusage: /root/miniconda3/miniconda.sh [options]\n\nInstalls Miniconda3 4.6.14\n\n-b           run install in batch mode (without manual intervention),\n             it is expected the license terms are agreed upon\n-f           no error if install prefix already exists\n-h           print this help message and exit\n-p PREFIX    install prefix, defaults to /root/miniconda3, must not contain spaces.\n-s           skip running pre/post-link/install scripts\n-u           update an existing installation\n-t           run package tests after installation (may install conda-build)\n```\n\n\n## Silent/Logged\n\nA quick and easy way to silence everything or to log it to a file during an automated install is to wrap the script into a bash function, or save it to its own file, and call the file.  I like the function method since I can still copy it right into a terminal, or keep my install script as one single file.\n\n``` bash\ninstall_miniconda () {\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n}\n```\n\n**normal**\n```\ninstall_miniconda\n```\n\n**silent**\n```\ninstall_miniconda > /dev/null 2>&1\n```\n\n**logged**\n```\ninstall_miniconda > miniconda_install.log 2>&1\n```\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/reusable-bash/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/96bd1b466e9e00834d0d7eda8af04b97/630fb/reusable-bash-xmas2020.png\" alt=\"article cover for Creating Reusable Bash Scripts\">\n<div class=\"right\">\n    <h2>Creating Reusable Bash Scripts</h2>\n    <p class=\"description\">\n    Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> This posts covers more ways to write reuable bash scripts\n\n## Cross posted to DEV\n\nCheck out this post and many more on [dev.to/waylonwalker](https://dev.to/waylonwalker/installing-miniconda-on-linux-from-the-command-line-4ad7)",
        "long_description": "miniconda is a python distribution from continuum. It's a slimmed-down version of their very popular anaconda distribution. It comes with its own environment manager and has eased the install process for many that do not have a way to compile c-exten..."
    },
    {
        "cover": "/static/3-things-to-automate-with-python-xmas2020.png",
        "title": "Three things to Automate with Python using Pandas",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/3-things-to-automate-with-python.md",
        "canonical_url": "https://waylonwalker.com/3-things-to-automate-with-python",
        "cover_image": "https:waylonwalker.com/3-things-to-automate-with-python.png",
        "date": "2020-08-11 05:00:00+00:00",
        "description": "Here are three things that I see my non programming counterparts doing every single day.  These really sum up so much of what folks do within an office.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Here are three things that I see my non programming counterparts doing every single day.  These really sum up so much of what folks do within an office.  So many of us dabble in or become power users of spreadsheets without knowing there is an alternative out there that can save us time, automate boring things, and allow us to open up our minds for the part that we add value, Thinking about the data.\n\n## Focus on Value Add Operations\n\nLets face it, stitching together spreadsheets is zero value add by itself, but if you can see something in the data and take action on it, this can be huge value add to your company. Learning just a bit of python will help focus more of your attention on \"value add operations\" and leave the mundane stuff to your computer.\n\n\n## Merge a directory full of spreadsheets into one\n\nI see this one all the time.  One team gets a spreadsheet from another team once per month and they need to stich all the pieces together.  Excel really opens the door for some nasty hidden bugs in your manually stiched together data.  It also takes time out of your day that you dont need to spend.\n\n``` python\nimport pandas as pd\nfrom pathlib import Path\n\nfiles = Path.glob('raw/*.csv')\ncsvs = [pd.read_csv(file) for file in files]\ncsvs_combined = pd.concat(csvs)\ncsvs_combined.to_csv('processed/combined.csv')\n```\n\n## Fetch data from a url\n\nIt might be possible that the other team shares their data on a website.  If you can get access to the data via a url, as in the example below there is no need to go to the website to save the data every week/month, you can have python do that for you.  It's very likely that you will need to combine this with step one in many workflows.  Now your data compiling can be done in one single running of a script.  Your data is still in a format that excel can read and you can stick with a hybrid workflow while you become comfortable in python.\n\nThere is no shame in opening excel to do something in 5 minutes that would take an hour of research to do in python.  If you stick to it though, piece by piece everything will come together.  You will be able to do more in python than you could imagine in excel and you will wonder how you did it without the help of python.\n\n``` python\nimport pandas as pd\n\ncars_url = 'https://www.kaggle.com/abineshkumark/carsdata/download/xrvGk4JtQZJZetxwsCCy%2Fversions%2Fl2HR9tTLKz8MzHMAjBcl%2Ffiles%2Fcars.csv?datasetVersionNumber=1'\ncars = pd.read_csv(cars_url)\n\ncars.to_csv('cars.csv')\n```\n\n## Fetch data from a database\n\nThis one can be a bit trickier, often requires hunting down tables that are undocumented. Getting access, and figuring out the crednetials.  If you can get over that hump though it is likely that you will have access to several data source that you typically use in one place.  From there you can learn how to join them together to create powerful workflows.\n\nSQL can be a very daunting language to learn but if you spend an hour with it you will know enough to at least get the data into python or excel.  You can continue to hone your sql skills and move more of your aggregation/analysis into the database for better performance.  If you are asking for 1M rows for a 10 row report the efficiency gains of doing that aggregation in the database and not sending 1M rows over the wire can be immense.\n\n``` python\nimport pandas as pd\nfrom sqlalchemy import create engine\n\nengine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')\n\nsql = 'select * from inventory'\n\nwith engine.connect() as connection:\n    inventory = pd.read_sql(sql, con)\nengine.dispose()\n\ninventory.to_csv('cars')\n```\n\n## Learning to automate has value\n\nI often see folks joking that developers will spend 10 minutes to automate a 1 minute task that they will only ever do once.  There is definitely a limit to when your time is more valueable just doing the task and moving on, but as you hone your skills you will get much faster.\n\nThings that needed research slowly become intuitive.  Things that used to be brain twisting 50 lines can be an easy to read 12.\n\nSlowly you get better.\n\nThings that were unfeasible become part of your wheelhouse.\n\nGive value to the learning process of automating tasks.",
        "long_description": "Here are three things that I see my non programming counterparts doing every single day. These really sum up so much of what folks do within an office. So many of us dabble in or become power users of spreadsheets without knowing there is an altern..."
    },
    {
        "cover": "/static/reusable-bash-xmas2020.png",
        "title": "Creating Reusable Bash Scripts",
        "tags": [
            "bash",
            "linux"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/reusable-bash.md",
        "canonical_url": "https://waylonwalker.com/reusable-bash",
        "cover_image": "https:waylonwalker.com/reusable-bash.png",
        "date": "2020-08-13 05:00:00+00:00",
        "description": "Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.\n\nI have three techniques that help me write more composable bash scripts.\n\n1. [functions](#functions)\n  * [Arguments](#arguments)\n  * [positional arguments](#positional-arguments)\n  * [All Arguments](#all-arguments)\n1. [Error Handling](#error-handling)\n1. [main script](#main-script)\n\n---\n\n## Functions\n_Break scripts down into reusable components_\n\nFunctions in bash are quite simple. They are something that I wish I would have started using long ago. They make your code much more reusable. I often use them in my aliases as well since they can simplify the process and allow more flexibility.\n\n_<small><mark>syntax</mark></small>_\n\n``` bash\n#!/bin/sh\n# hello_world\nhello_world () {\n    echo \"hello world\"\n}\n```\n\nSource the file to load the function and run it from the terminal.\n\n_<small><mark>run it</mark></small>_\n\n``` bash\nsource hello_world\nhello_world\n```\n\n_<small><mark>outputs</mark></small>_\n\n``` bash\nhello world\n```\n---\n\n## Arguments\n_Make functions a little more flexible_\n\nArguments and options are quite a bit more complex in bash. For now, we will focus on the basics which are not all that bad.\n\n### positional arguments\n_easiest and most common to use_\n\nPositional arguments can be pulled out quite easily using `$1` for the first one, `$2` for the second, and so on.\n\n**note** `$0` is the command that was called. You will see this often used to find the command called to open up your current shell.\n\n_<small><mark>syntax</mark></small>_\n``` bash\n#!/bin/sh\n# hello\nhello () {\n    echo \"hello $1\"\n\n```\n\n_<small><mark>run it</mark></small>_\n\n``` bash\nsource hello\nhello Waylon\n```\n\nNow we have a function that accepts positional arguments and we can call it by passing things into it.\n\n_<small><mark>outputs</mark></small>_\n\n``` bash\nhello Waylon\n```\n\nMore than one argument would be ignored since we are only looking at `$1`.\n\n_<small><mark>run it</mark></small>_\n\n``` bash\nsource hello\nhello Waylon Walker\n```\n\n_<small><mark>outputs</mark></small>_\n\n``` bash\nhello Waylon\n```\n\nJust the same as before since we do not use the second argument.\n\n### All Arguments\n\nBash has another special variable `$@` that stores **all arguments** in one.\n\n_<small><mark>syntax</mark></small>_\n\n``` bash\n#!/bin/sh\n# hello\nhello () {\n    echo \"hello $@\"\n}\n```\n\nJust the same as before.\n\n_<small><mark>run it</mark></small>_\n\n``` bash\nsource hello\nhello Waylon Walker\n```\n\nNow the function will output all arguments that are passed into it since we are using the `$@` variable.\n\n_<small><mark>outputs</mark></small>_\n\n``` bash\nhello Waylon Walker\n```\n\n---\n\n## Error Handling\n_Super powers in a single line_\n\nThe easiest and most common way to handle an error in bash is through the use of the logical operators `&&` (and) and `||` (or).\n\nHere I have a concrete example from earlier today. I was creating a bash script to run a python script from cron. The bash script is there to make sure that we have the python environment, activate it, and run. If it doesn't have it, it should create it.\n\n``` bash{15-19}{numberLines: true}\n# creates the conda environment\ncreate_env() {\n    conda create -n \"$1\" python=3.8\n    conda activate \"$1\"\n    pip install -r requirements.txt\n}\n\n\n# checks if the conda environment exists\nenv_exists() {\nconda info --envs | awk '{print $1}' | tail -n +3 | grep -w \"$1\" > /dev/null\n}\n\n\n# creates the conda environment if it doesn't exist\ncreate_if () {\nenv_exists \"$1\" && echo \"environment exists\" || create_env \"$1\"\n}\n\ncreate_if my_env\n```\n\nIf we look at the `create_if` function, it will check if the environment exists if there is a passing status code `0`, then it will run `echo \"environment exists\"` otherwise it will run `create_env $1`.\n\n**note** Inside of `env_exists` grep will look for whole words if there is a match it will give a status code 0 if it finds a match and not 0 if there is no match.\n\n---\n\n## main script\n\n\\_`if __name__ == \" __main__\"`\\_\n\nThe last thing I want to discuss is making a bash script both runnable and sourceable. This makes it so that you can `source filename.sh` and run each function individually, or `bash filename.sh` to run the script. This is a similar concept to `if __name__ == \" __main__\"` from python.\n\nI did try this from bash and zsh with success. The following is an example that would pass all arguments into a main function.\n\n_<small><mark>syntax</mark></small>_\n\n``` bash\nif [[\"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    main \"$@\"\nfi\n```\n\nExtending the example above that created a python example if necessary we can create the env if necessary, activate the environment, and run the script.\n\n_<small><mark>syntax</mark></small>_\n\n``` bash\nif [[\"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\ncreate_if my_env\nconda activate my_env\npython script.py\nfi\n```\n\nUsing this syntax to run our \"main\" functions will allow us to both runs the script or source the script to utilize the functions that we created.",
        "long_description": "Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integ..."
    },
    {
        "cover": "/static/my-chrome-extensions-xmas2020.png",
        "title": "Chrome Extensions I use",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/chrome-extensions-i-use.md",
        "canonical_url": "https://waylonwalker.com/chrome-extensions-i-use",
        "cover_image": "https:waylonwalker.com/my-chrome-extensions.png",
        "date": "2020-09-13 05:00:00+00:00",
        "description": "There are many useful chrome extensions out there.  I probably have way too many installed, here are four that I am currently using.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "There are many useful chrome extensions out there.  I probably have way too many installed, here are four that I am currently using.\n\nThis post was inspired from Chris over at [daily-dev-tips](https://daily-dev-tips.com/posts/top-10-chrome-extensions-for-developers-%F0%9F%91%80/)\n\n1. [LastPass](#lastpass)\n2. [Stylus](#stylus)\n3. [Vimium](#vimium)\n4. [hypothesis](#hypothesis)\n\n***\n\n## [LastPass](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en)\n\nLove it or hate it passwords are hard to manage.  Everyone needs a password manager to avoid the dreaded password reuse, and to be able to quickly rotate them with a service.  I use lastpass, thus it's browser extension is my most used extension.\n\n[![lastpass](https://waylonwalker.com/chrome-extension-lastpass.png)](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en)\n\n***\n\n## [Stylus](https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?hl=en)\n\nStylus is an extension that allows you to add your own CSS to style pages how you want.  There seems to be a full community of folks that really use this to the nth degree to style all of their commonly used sites somewhat similarly or add dark mode to sites without it.\n\nPersonally I mostly use it to add my favorite syntax highlighting theme to jupyter, **onedark**.  I've long lost the original author, but have posted the CSS I use in this [gist](https://gist.github.com/WaylonWalker/b082bda9c1ce1471ea0c940c836e5714)\n\n[![lastpass](https://waylonwalker.com/chrome-extension-stylus.png)](https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?hl=en)\n\n***\n\n## [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en)\n\nVimium adds vim-like keybindings to chrome.  I don't use it a ton but it comes in handy to fully utilize the keyboard on some sites that aren't well suited to keyboard use.\n\n[![vimium](https://waylonwalker.com/chrome-extension-vimium.png)](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en)\n\n***\n\n## [hypothesis](https://chrome.google.com/webstore/detail/hypothesis-web-pdf-annota/bjfhmglciegochdpefhhlphglcehbmek?hl=en)\n\nHypothesis is a notetaking app that I am trying to get on board with.  I like that they have a REST API to get your notes from. It allows you to take notes or highlight web pages and share them easily.  I am still trying to remember to use this one more.\n\n[![hypothesis](https://waylonwalker.com/chrome-extension-hypothesis.png)](https://chrome.google.com/webstore/detail/hypothesis-web-pdf-annota/bjfhmglciegochdpefhhlphglcehbmek?hl=en)\n\nThese are my most used extensions.  What are yours?",
        "long_description": "There are many useful chrome extensions out there. I probably have way too many installed, here are four that I am currently using. This post was inspired from Chris over at daily-dev-tips LastPass Stylus Vimium hypothesis LastPass Love it or hat..."
    },
    {
        "cover": "/static/strip-trailing-whitespace-from-git-projects-xmas2020.png",
        "title": "Strip Trailing Whitespace from Git projects",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/strip-trailing-whitespace.md",
        "canonical_url": "https://waylonwalker.com/strip-trailing-whitespace",
        "cover_image": "https:waylonwalker.com/strip-trailing-whitespace-from-git-projects.png",
        "date": "2020-09-30 05:00:00+00:00",
        "description": "A common linting error thrown by various linters is for trailing whitespace. I most often use flake8.  Having an automated way to fix linting errors such as trailing whitespace is invaluable.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "A common linting error thrown by various linters is for trailing whitespace.  I most often use flake8.  I generally have \\[pre-commit\\]([https://waylonwalker.com/pre-commit-is-awesome](https://waylonwalker.com/pre-commit-is-awesome \"https://waylonwalker.com/pre-commit-is-awesome\")) hooks setup to strip this, but sometimes I run into situations where I jump into a project without it, and my editor lights up with errors.  A simple fix is to run this one-liner.\n\n## One-Liner to strip whitespace\n\n_<small><mark>bash</mark></small>_\n``` bash\ngit grep -I --name-only -z -e '' | xargs -0 sed -i -e 's/[ \\t]\\+\\(\\r\\?\\)$/\\1/'\n```\n\n\n\n<p style='text-align: center' align='center'>\n<a href='https://waylonwalker.com/pre-commit-is-awesome'>\n  <img\n    style='width:400px; max-width:80%; margin: auto;'\n    width='400'\n    src=\"https://waylonwalker.com/pre-commit-is-awesome.png\"\n    alt=\"pre-commit article\"\n  />\n  </a>\n</p>\n\nread more about pre-commit [here](https://waylonwalker.com/pre-commit-is-awesome).",
        "long_description": "A common linting error thrown by various linters is for trailing whitespace. I most often use flake8. I generally have [pre-commit](https://waylonwalker.com/pre-commit-is-awesome) hooks setup to strip this, but sometimes I run into situations where..."
    },
    {
        "cover": "/static/reset-ipython-xmas2020.png",
        "title": "Reclaim memory usage in Jupyter",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/reset-ipython.md",
        "canonical_url": "https://waylonwalker.com/reset-ipython",
        "cover_image": "https:waylonwalker.com/reset-ipython.png",
        "date": "2020-10-01 05:00:00+00:00",
        "description": "Today we ran into an issue where we had a one-off script that just needed to work, but it was just chewing threw memory like nothing.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Today we ran into an issue where we had a one-off script that just needed to work, but it was just chewing threw memory like nothing.\n\n\n## Pre check the status of memory.\n\nThere are a number of ways that you can check the amount of memory on your system.  The easiest is not necessarily my first go to is free... literally `free`.\n\n_<small><mark>check for free space</mark></small>_\n\n``` bash\n$ free -h\n             total       used       free     shared    buffers     cached\nMem:           15G        15G       150M         0B        59M       8.7G\n```\n\nGenerally my first go to is a bit more graphical, and not available on a stock stystem, but far more useful.... `htop`.  [`htop`](https://htop.dev) is a terminal process explorer that shows cpu usage, mem usage, and running processes.\n\n_<small><mark>htop</mark></small>_\n\n\n``` bash\nsudo apt-get install htop # install it from your package repo\nhtop\n```\n\n![htop in use](https://waylonwalker.com/htop-2.0.png)\n\n## First step throw more swap at it\n\nOften before going through the process of getting a larger instance underneath the notebook you can hobble home with a bit more swap file.  It may not be pretty or fast, but gets the job done in a pinch.\n\n_<small><mark>Check for free disk</mark></small>_\n\n``` bash\n$ du\n\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/asdasd        200G   50G  150G   25% /\n```\n\n> Make sure you check your free disk space first, filling both memory and disk can be bad news\n\n_<small><mark>make a swap file and activate it</mark></small>_\n\n```bash\nSWAPFILE=~/swaps/swap1-50G\nmkdir ~/swaps\nsudo fallocate -l 50G $SWAPFILE\nsudo chmod 600 $SWAPFILE\nsudo mkswap $SWAPFILE\nsudo swapon $SWAPFILE\n```\n\nYou can see the results with either swapon or free.\n\n``` bash\nsudo swapon --show\nfree -h\n```\n\n<p style='text-align: center'>\n<a href='https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-20-04/'>\n  <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/linuxize-how-to-add-swap-space-on-ubuntu-20-04.jpg\"\n    alt=\"How to Add Swap Space on Ubuntu 20.04\"\n  />\n  </a>\n</p>\n\n[linuxize how to add swap space on ubuntu 20.04](https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-20-04/)\n\nMore details on creating swapfiles checkout [linuxize](https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-20-04/).  It is my favorite linux tutorial site!\n\n## Refactor - functions\n_keep big datasets inside functions returning aggregations_\n\n\nSometimes there is a clear quick and simple way to just let the python garbage collector.  Often we pull in large datasets to create features then aggregate them down into smaller datasets that can be then joined into other datasets.  This pattern of pulling in  `big_data`, processing then aggregating can be a simple one.\n\n_<small><mark>let the garbage collector take care of big data</mark></small>_\n\n``` python\ndef process():\n   big_data = get_big_data()\n   smaller_data = <some aggregation>\n   return smaller_data\ndata = process()\n```\n\nIf your notebook is following this type of pattern a simple `del` won't work because ipython adds extra references to your `big_data` that you didnt add.  These are things that enable features like `_`, `__`, `___`, umong others.\n\n## %reset\n\n_check out more on reset from the [ipython docs](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-reset)_\n\nThe last resort I would lean on here is an `ipython` specific feature `%reset` and `%reset_selective`.  These will flush out all user define variables or selecive ones based on a regex respectively.\n\n\nFollowing two example are directly from the [ipython docs](https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-reset)\n\n_<small><mark>%reset</mark></small>_\n\n``` python\nIn [6]: a = 1\n\nIn [7]: a\nOut[7]: 1\n\nIn [8]: 'a' in get_ipython().user_ns\nOut[8]: True\n\nIn [9]: %reset -f\n\nIn [1]: 'a' in get_ipython().user_ns\nOut[1]: False\n\nIn [2]: %reset -f in\nFlushing input history\n\nIn [3]: %reset -f dhist in\nFlushing directory history\nFlushing input history\n```\n\n_<small><mark>%reset_selective</mark></small>_\n\n```\nIn [2]: a=1; b=2; c=3; b1m=4; b2m=5; b3m=6; b4m=7; b2s=8\n\nIn [3]: who_ls\nOut[3]: ['a', 'b', 'b1m', 'b2m', 'b2s', 'b3m', 'b4m', 'c']\n\nIn [4]: %reset_selective -f b[2-3]m\n\nIn [5]: who_ls\nOut[5]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']\n\nIn [6]: %reset_selective -f d\n\nIn [7]: who_ls\nOut[7]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']\n\nIn [8]: %reset_selective -f c\n\nIn [9]: who_ls\nOut[9]: ['a', 'b', 'b1m', 'b2s', 'b4m']\n\nIn [10]: %reset_selective -f b\n\nIn [11]: who_ls\nOut[11]: ['a']\n```\n\n\n## Develop faster utilizing autoreload in ipython\n\nThe above tips will help you reclaim used memory in ipython, but the following tip is one that single handedly is the reason I use Ipython for faster development over anything else.\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/autoreload-ipython'>\n  <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/autoreload-ipython-rm.png\"\n    alt=\"Autoreload in Ipython\"\n  />\n  </a>\n</p>\n\n[autoreload-ipython](https://waylonwalker.com/autoreload-ipython) one of my biggest productivity boosts.",
        "long_description": "Today we ran into an issue where we had a one-off script that just needed to work, but it was just chewing threw memory like nothing. Pre check the status of memory. There are a number of ways that you can check the amount of memory on your system...."
    },
    {
        "cover": "/static/last-n-git-files-xmas2020.png",
        "title": "List the latest files to change in a git repo",
        "tags": [],
        "status": "false",
        "templateKey": "blog-post",
        "path": "../../src/pages/last-n-git-files.md",
        "canonical_url": "https://waylonwalker.com/last-n-git-files",
        "cover_image": "https:waylonwalker.com/last-n-git-files.png",
        "date": "2020-10-08 05:00:00+00:00",
        "description": "bash while read file; do echo $(git log --pretty=format:%ad -n 1 --date=raw -- $file) $file; done < <(git ls-tree -r --n",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "``` bash\nwhile read file; do echo $(git log --pretty=format:%ad -n 1 --date=raw -- $file) $file; done < <(git ls-tree -r --name-only HEAD | grep static/stories) | sort -r | head -n 3 | cut -d \" \" -f 3\n```",
        "long_description": "bash while read file; do echo $(git log --pretty=format:%ad -n 1 --date=raw -- $file) $file; done < <(git ls-tree -r --name-only HEAD | grep static/stories) | sort -r | head -n 3 | cut -d \" \" -f 3..."
    },
    {
        "cover": "/static/designing-kedro-router-xmas2020.png",
        "title": "Designing a \"Router\" for kedro",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/designing-kedro-router.md",
        "canonical_url": "https://waylonwalker.com/designing-kedro-router",
        "cover_image": "https:waylonwalker.com/designing-kedro-router.png",
        "date": "2020-10-08 05:00:00+00:00",
        "description": "I released a router-like plugin for kedro back in April 2020. This was not the first design, the idea actually came from one of the QB folks who taught me kedro nearly a year before.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## nodes_global\n\nI released a router-like plugin for kedro back in April 2020.  This was not the first design, the idea actually came from one of the QB folks who taught me kedro nearly a year before.  We were assembling our pipelines with something called `nodes_global`.  It worked fairly well but did have some issues around being set as a global variable.\n\n_But..._\n\nOne thing in particular that it did not lend itself well to was being able to create a packagable pipeline that I could pip install and append into any of my existing pipelines.  Something I am still trying to work out, maybe I don't need this.  I think I have it working for our internal pipelines and it seems like the way to go, but we don't necessarily end up using it.\n\n_Also..._\n\nWith this pattern all of the nodes needed to be importable by the module containing nodes_global.  I find that this becomes a big hurdle for new pipelines coming from jupyter to overcome and can be most infuriating when their nodes aren't getting ran after they added them.\n\n<p style='text-align: center' align='center'>\n<a href='https://waylonwalker.com/what-is-kedro'>\n  <img\n    style='width:400px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/what-is-kedro.png\"\n    alt=\"What is kedro\"\n    width='400'\n  />\n  </a>\n</p>\n\n> If you are a bit unsure about what kedro is make sure to check out my [what-is-kedro](https://waylonwalker.com/what-is-kedro) article.\n\n\n## @node(inputs='a_raw_cars', outputs='b_int_cars')\nI set off to design something that was flask-like.  Around November I had something working.  You could simply start creating functions. and decorate these functions with a decorator just like with flask.  I even had it setup to autoname the nodes things like `create_b_int_cars`.\n\n_But...._\n\nThis did not lend well to pulling in functions from a library or dynamically creating nodes.  I didn't realize how few nodes I actually make in my pipelines that are a 1:1 relationship between the node and function in real work.  Most examples work this way, but for some reason when I step into a project we end up pulling a lot of functions out of existing libraries, or dynamically creating many datasets from a list of options.\n\n## pytest inspired\n_simplicity_\n\nThe final design ended up being suggested by a colleague of mine who is not using kedro, but is a  brilliant python dev.  The idea was to walk through the project like pytest does looking for modules and variables with a certain pattern (`node`, or `pipeline`).\n\nI have been using this since April and am loving it. It has have very little change since first release.  When I create a new module, that automatically becomes a new pipeline in my `pipelines` dict and all of the variables with the name node get scrapped up and put into a single pipeline.\n\n_Beginner Friendly_\n\nJust like with pytest.  You just start hacking in modules ending with `_nodes.py` with nodes in them and they just appear in your final pipeline.\n\n## How to use it\n\nThe [readme](https://github.com/WaylonWalker/find-kedro) has some great examples.\n\n## Install it\n\n``` python\npip install find-kedro\n```\n\n## Enable it\n\nEnable it by changing one line in your run.py\n\n_<small><mark>run.py</mark></small>_\n\n``` python\nfrom kedro.context import KedroContext\nfrom find_kedro import find_kedro\n\nclass ProjectContext(KedroContext):\n    def _get_pipelines(self) -> Pipeline:\n        return find_kedro()\n```\n\nOr if your using the new `hooks.py` method.  Again no need to import all of your nodes.\n\n_<small><mark>hooks.py</mark></small>_\n\n``` python\nclass ProjectHooks:\n    @hook_impl\n    def register_pipelines(self) -> Dict[str, Pipeline]:\n        \"\"\"Register the project's pipeline.\n        Returns:\n            A mapping from a pipeline name to a ``Pipeline`` object.\n        \"\"\"\n\n        return find_kedro()\n```\n\n## Use it \n\nCheck out the [readme](https://github.com/WaylonWalker/find-kedro) for more examples, but this one is the one that I use and recommend most often.  This method helps keep nodes close to functions that are designed for them.\n\n_<small><mark>my_nodes.py</mark></small>_\n\n``` python\n# my-proj/pipelinies/data_engineering/pipeline\nfrom kedro.pipeline import node\nfrom .nodes import split_data\n\nnodes = []\n\ndef split_data(df: pd.DataFrame, ratio: float) -> Dict[str, pd.DataFrame]:\n   ...\n\nnodes.append(\n    node(\n        split_data,\n        [\"example_iris_data\", \"params:example_test_data_ratio\"],\n        dict(\n            train_x=\"example_train_x\",\n            train_y=\"example_train_y\",\n            test_x=\"example_test_x\",\n            test_y=\"example_test_y\",\n        ),\n    )\n)\n```\n\n\n# Want a simple guide to get started with find kedro\n\n\n<p style='text-align: center' align='center'>\n<a href='https://find.kedro.dev/examples/iris/>\n  <img\n    style='width:400px; max-width:80%; border-radius: '35px'; margin: auto;'\n    width='400'\n    src=\"https://waylonwalker.com/find-kedro-examples-iris.png\"\n    alt=\"Find Kedro Iris example\"\n  />\n  </a>\n</p>\n\nIn [this doc](https://find.kedro.dev/examples/iris/) I transform the kedro iris template to find-kedro.\n\n# Ready to start using kedro\n\nIf you still have not tried out kedro, it's easier than you think. Check out [create-new-kedro-project](https://waylonwalker.com/create-new-kedro-project) to get a project started in just a few minutes.\n\n<p style='text-align: center' align='center'>\n<a href='https://waylonwalker.com/create-new-kedro-project'>\n  <img\n    style='width:400px; max-width:80%; margin: auto;'\n    width='400'\n    src=\"https://waylonwalker.com/create-new-kedro-project.png\"\n    alt=\"Create New Kedro Project\"\n  />\n  </a>\n</p>",
        "long_description": "nodes_global I released a router-like plugin for kedro back in April 2020. This was not the first design, the idea actually came from one of the QB folks who taught me kedro nearly a year before. We were assembling our pipelines with something call..."
    },
    {
        "cover": "/static/avoid-nesting-loops-in-python-xmas2020.png",
        "title": "Avoid Nesting Loops in Python",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/avoid-nesting-loops-in-python.md",
        "canonical_url": "https://waylonwalker.com/avoid-nesting-loops-in-python",
        "cover_image": "https:waylonwalker.com/avoid-nesting-loops-in-python.png",
        "date": "2020-10-11 05:00:00+00:00",
        "description": "Nesting loops inside of each other in python makes for much harder code to understand, it takes more brain power to unde",
        "published": false,
        "related_post_label": "Check out this related post",
        "content": "Nesting loops inside of each other in python makes for much harder code to understand, it takes more brain power to understand, and is thus more error prone than if its avoidable.  One issue with this complexity is that toy examples may make sense, but most real example will grow and become more deeply nested over time.  Avoiding this complexity from the start can help simplify the project in the future.\n\n\n## setup\n\nLets take a pretty simple example where we are using a ficticious library to get some sales data for our transportation company.  The api allows us to fetch teh sales data for one class of vehicle and one region at a time.\n\n``` python\nimport pandas as pd\n\nfrom datastore import get_sales  # ficticious library\n\ncars = ['sedan', 'coupe', 'hatchback']\nregions = ['US', 'CA', 'MX']\n```\n\n## \u274c Nesting Loops\n\nWe have setup to fetch our data with two lists that represent the vehicles and regions that we want to analyze.  We know that we need to make a call to `get_sales` for every vehicle and region so nesting loops is a very common first solution to jump to.\n\n``` python\nsales = pd.DataFrame()\nfor car in cars:\n   for region in regions:\n      new_sales = get_sales(car, region)\n      sales = pd.concat([sales, new_sales])\n```\n\n## itertools.product\n\nPython provides us with the beautiful itertools module that allows us to prepare our inputs for this in a much more susynct manner.  The product function of itertools will give us every combination of any number of iterables\n\n``` python\nimport itertools\nlist(itertools.product(cars, regions))\n```\n\n> note that itertools returns a generator for most if not all functions, list() will turn that into a list that we can see.  This works great for small datasets, but might not be advisable on larger ones.\n\n**output**\n``` python\n[('sedan', 'US'),\n ('sedan', 'CA'),\n ('sedan', 'MX'),\n ('coupe', 'US'),\n ('coupe', 'CA'),\n ('coupe', 'MX'),\n ('hatchback', 'US'),\n ('hatchback', 'CA'),\n ('hatchback', 'MX')]\n```\n\n## itertools.procuct for loop\n\nNow that we have every comination of our two sets of inputs in a single list, we can iterate over that list one time.\n\n``` python\nsales = pd.DataFrame()\nfor car, region in itertools.product(cars, regions):\n   new_sales = get_sales(car, region)\n   sales = pd.concat([sales, new_sales])\n```\n\n## itertools.product list comprehension\n\nThe above follows a python anti-pattern, initialize then edit.  In some cases it might be a bit more readable to do it that way, you can be the judge, but in our simple case we can simply achieve the same results using a list comprehension.\n\n``` python\npd.concat([get_sales(cars, region) for cars, region in itertools.product(cars, regions)])\n```\n## dictionaries\n\n``` python\nsales_args = {\n   'cars': ['sedan', 'coupe', 'hatchback'],\n   'regions': ['US', 'CA', 'MX'],\n}\n\npd.concat([get_sales(*sales_arg) for sales_arg in itertools.product(*sales_args.values())])\n```\n\n``` python\nsales_args = {\n   'cars': ['sedan', 'coupe', 'hatchback'],\n   'regions': ['US', 'CA', 'MX'],\n   'month': ['MAR', 'APR', 'MAY']\n}\n\npd.concat([get_sales(*sales_arg) for sales_arg in product(*sales_args.values())])\n```\n\n---\n\n## Chaining\n_containers of containers_\n\n``` python\nvehicles = {\n\t'cars': ['sedan', 'coupe', 'hatchback'],\n    'trucks': ['light', 'heavy', 'sport', 'offroad'],\n    'van': ['box', 'mini', 'full', ],\n\n}\n```\n\n```\nfor vehicle in vehicles:\n\tfor sub_class in vehicles[vehicle]:\n      new_sales = get_sales(sub_class)\n      new_sales['sub_class'] = sub_class\n      new_sales['vehicle'] = vehicle\n      sales = pd.concat([sales, new_sales])\n```\n\n```\n list(itertools.chain(*[list(itertools.product([k], v)) for k, v in vehicles.items()]))\n```\n\noutput\n```\n[('cars', 'sedan'),\n ('cars', 'coupe'),\n ('cars', 'hatchback'),\n ('trucks', 'light'),\n ('trucks', 'heavy'),\n ('trucks', 'sport'),\n ('trucks', 'offroad'),\n ('van', 'box'),\n ('van', 'mini'),\n ('van', 'full')]\n ```",
        "long_description": "Nesting loops inside of each other in python makes for much harder code to understand, it takes more brain power to understand, and is thus more error prone than if its avoidable. One issue with this complexity is that toy examples may make sense, b..."
    },
    {
        "cover": "/static/fix-git-commit-author-xmas2020.png",
        "title": "Fix git commit author",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/fix-git-commit-author.md",
        "canonical_url": "https://waylonwalker.com/fix-git-commit-author",
        "cover_image": "https:waylonwalker.com/fix-git-commit-author.png",
        "date": "2020-10-17 05:00:00+00:00",
        "description": "I was 20 commits into a hackoberfest PR when I suddenly realized they they all had my work email on them instead of my personal email \ud83d\ude31.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I was 20 commits into a hackoberfest PR when I suddenly realized they they all had my work email on them instead of my personal email \ud83d\ude31.  This is the story of how I corrected my email address on 19 individual commits after already submitting for a PR.\n\n1. [Change the email for this repo](#change-the-email-for-this-repo)\n1. [Prepare for rebasing](#prepare-for-rebasing)\n1. [start the rebase](#start-the-rebase)\n1. [\ud83d\udee0 Fix First wrong Commit](#fix-first-wrong-commit)\n1. [Fix all commits](#fix-all-commits)\n1. [Done](#done)\n1. [ReCap](#recap)\n\n    \n## Change the email for this repo\n\n_stop the bleeding_\n\nBefore anything else set the email correctly!\n\n``` bash\ncd kedro\ngit config user.name \"Waylon Walker\"\ngit config user.email quadmx08@gmail.com\n```\n\n## Prepare for rebasing\n\nFirst thing is to find how many commits back this mistake goes.  I opened up the git log, and saw mine went back 19 commits.  I rolled back 20 just to be sure.\n\n``` bash\n$ git log\n...\ncommit a355926b9d7ec4c05659adaa254beefbdb036332\nAuthor: WaylonWalker <email@work.com>\nDate:   Sat Oct 17 10:28:59 2020 -0500\n\n    give name of function inside incorrect parameters error\n  \ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n```\n\n## start the rebase\n\nNow I start the rebase 20 commits back from HEAD.  THis will pop you into a text file with a list of commits, for this change simply replace all `pick` with `edit`.\n\n``` bash\ngit rebase -i HEAD~20\n```\n\nRun git log to see where we ended up.\n\n``` bash\n$ git log\ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n```\n\nAs expected we ended up on Kiyo's commit. So we can simply move forward without any edits.\n\n``` bash\n$ git rebase --continue\nStopped at e162ca7...  correct function name in tests\nYou can amend the commit now, with\n\n  git commit --amend\n\nOnce you are satisfied with your changes, run\n\n  git rebase --continue\n```\n\n## \ud83d\udee0 Fix First wrong Commit\n\nChecking the log again I an now on my first commit with a mistake.\n\n``` bash\n$ git log\ncommit 95c209a740d6d0340e19a8fc36298cbf874f8bf7 (HEAD)\nAuthor: WaylonWalker <email@work.com>\nDate:   Sat Oct 3 11:59:44 2020 -0500\n\n    correct function name in tests\n\ncommit cde2e8baa3c1c4a9f1da4135258381466b1da40a\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:30:07 2020 -0500\n\n    update tests\n\ncommit a355926b9d7ec4c05659adaa254beefbdb036332\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:28:59 2020 -0500\n\n    give name of function inside incorrect parameters error\n\ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n```\n\nRunning the following command will reset the author on the current commit.\n\n``` bash\ngit commit --amend --reset-author\n```\n\nDouble check with a quick `git log` that the author was fixed.\n\n``` bash\ncommit ccaaa56059ee4554731fa83297ca9e8e387a7592 (HEAD)\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:35:40 2020 -0500\n\n    correct function name in tests\n\ncommit cde2e8baa3c1c4a9f1da4135258381466b1da40a\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:30:07 2020 -0500\n\n    update tests\n\ncommit a355926b9d7ec4c05659adaa254beefbdb036332\nAuthor: Waylon Walker <quadmx08@gmail.com>\nDate:   Sat Oct 17 10:28:59 2020 -0500\n\n    give name of function inside incorrect parameters error\n\ncommit 1756f5d121bd06c459560b2e982e0d7b6879e9ca\nAuthor: Kiyohito Kunii (Kiyo) <8097799+921kiyo@users.noreply.github.com>\nDate:   Fri Oct 2 15:33:09 2020 +0100\n\n    Fix docs reference for registering `pipelines`\n```\n\n## Fix all commits\n\nNow to do this for 18 other commits.  I found that chaining the three commands into a bash one-liner was quite helpful.  I turned off pre-commit hooks with `--no-verify`.  I also turned off the `log` pager by adding `--no-pager`.\n\n``` bash\ngit rebase --continue && \\\ngit commit --amend --reset-author --no-edit --no-verify && \\\ngit --no-pager log -n 3\n```\n\n## Done\n\nThis was quick and easy for 19 commits.  I have tried to loop through changes like this in the past, and it does get a bit hairy.  I find its easier to just setup a one-liner and crank through them one by one.\n\n## A note on changing history...\n\nSince this was done in a rebase it has changed the history of the repo.  This is ok to do only when you are the only person or are in close communication with everyone using the repo.  One thing I have ran into is that if you do this after you submit a PR, but before its completed it duplicates your commits in a merge.  For this particular change I simply closed the first PR and opened a second.  If someone has a better suggestion, I would be glad to know a better way.\n\n## ReCap\n\n``` bash\ncd kedro\ngit config user.name \"Waylon Walker\"\ngit config user.email quadmx08@gmail.com\ngit log\ngit rebase -i HEAD~20\ngit log\ngit rebase --continue\ngit log\ngit rebase --continue && git commit --amend --reset-author --no-edit --no-verify && git --no-pager log -n 3\n```",
        "long_description": "I was 20 commits into a hackoberfest PR when I suddenly realized they they all had my work email on them instead of my personal email \ud83d\ude31. This is the story of how I corrected my email address on 19 individual commits after already submitting for a PR..."
    },
    {
        "cover": "/static/stories_10-10-2020_10-21-2020-xmas2020.png",
        "title": "A brain dump of stories",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/stories_10-10-2020_10-21-2020.md",
        "canonical_url": "https://waylonwalker.com/stories_10-10-2020_10-21-2020",
        "cover_image": "https:waylonwalker.com/stories_10-10-2020_10-21-2020.png",
        "date": "2020-10-21 05:00:00+00:00",
        "description": "I started making stories as kind of a brain dump a few times per day and posting them to LinkedIn.  Here are the last 11 days of stories",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "I started making stories as kind of a brain dump a few times per day and posting them to [LinkedIn](https://www.linkedin.com/in/waylonwalker/(https://www.linkedin.com/in/waylonwalker/).  Here are the last 11 days of stories.\n\n\nI store all the stories on my website with the hopes of doing something with them on my own platform eventually. For now it makes it easy to make these posts.\n\n``` bash\ncd static/stories\nls | xargs -I {} echo '![](https://waylonwalker.com/stories/{})'\n```\n\n## Stories 10-10-2020 - 10-21-2020\n\n[![](https://waylonwalker.com/stories/TIL-kedro-sorts-nodes.png)](https://waylonwalker.com/stories/TIL-kedro-sorts-nodes.png)\n[![](https://waylonwalker.com/stories/disable-base-pip.png)](https://waylonwalker.com/stories/disable-base-pip.png)\n[![](https://waylonwalker.com/stories/discovered-social-cards.png)](https://waylonwalker.com/stories/discovered-social-cards.png)\n[![](https://waylonwalker.com/stories/find-kedro-de1-contributor.png)](https://waylonwalker.com/stories/find-kedro-de1-contributor.png)\n[![](https://waylonwalker.com/stories/hacktoberfest-2020-kedro-538-tests-pass.png)](https://waylonwalker.com/stories/hacktoberfest-2020-kedro-538-tests-pass.png)\n[![](https://waylonwalker.com/stories/itertools.product-cars-regions.png)](https://waylonwalker.com/stories/itertools.product-cars-regions.png)\n[![](https://waylonwalker.com/stories/kedro-run-only-missing.png)](https://waylonwalker.com/stories/kedro-run-only-missing.png)\n[![](https://waylonwalker.com/stories/new-post-designing-kedro-router.png)](https://waylonwalker.com/stories/new-post-designing-kedro-router.png)\n[![](https://waylonwalker.com/stories/power-is-nothing-without-control.png)](https://waylonwalker.com/stories/power-is-nothing-without-control.png)\n[![](https://waylonwalker.com/stories/progress-over-perfection-comment.png)](https://waylonwalker.com/stories/progress-over-perfection-comment.png)\n[![](https://waylonwalker.com/stories/quick-tdb.png)](https://waylonwalker.com/stories/quick-tdb.png)\n[![](https://waylonwalker.com/stories/running-ci-for-hacktoberfest-kedro.png)](https://waylonwalker.com/stories/running-ci-for-hacktoberfest-kedro.png)\n[![](https://waylonwalker.com/stories/three-ds-openings.png)](https://waylonwalker.com/stories/three-ds-openings.png)\n[![](https://waylonwalker.com/stories/use-venv.png)](https://waylonwalker.com/stories/use-venv.png)",
        "long_description": "I started making stories as kind of a brain dump a few times per day and posting them to [LinkedIn](https://www.linkedin.com/in/waylonwalker/(https://www.linkedin.com/in/waylonwalker/). Here are the last 11 days of stories. I store all the stories o..."
    },
    {
        "cover": "/static/whats-new-in-kedro-0166-xmas2020.png",
        "title": "What's New in Kedro 0.16.6",
        "tags": [
            "python",
            "kedro"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/whats-new-in-kedro-0166.md",
        "canonical_url": "https://waylonwalker.com/whats-new-in-kedro-0166",
        "cover_image": "https:waylonwalker.com/whats-new-in-kedro-0166.png",
        "date": "2020-10-25 05:00:00+00:00",
        "description": "This version of kedro releases a new set of supported deployment options and the spaceflights pipeline is officially added as a starter alias.",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "Kedro [0.16.6](https://github.com/quantumblacklabs/kedro/releases) is out! Let's take a look through the release notes\n\n## Deployment Docs\n\nThis is really exciting to see more deployment options coming from the kedro team. It really shows the power of the framework. The power of some of these orchestrations options is incredible.\n\n* [Argo](https://kedro.readthedocs.io/en/stable/10_deployment/04_argo.html)\n* [Prefect](https://kedro.readthedocs.io/en/stable/10_deployment/05_prefect.html)\n* [Kubeflow](https://kedro.readthedocs.io/en/stable/10_deployment/06_kubeflow.html)\n* [Batch](https://kedro.readthedocs.io/en/stable/10_deployment/07_aws_batch.html)\n* [SageMaker](https://kedro.readthedocs.io/en/stable/10_deployment/08_aws_sagemaker.html)\n\nMost of them hinge on a sweet combination of the kedro cli, docker image, and the pipeline knowing your nodes dependencies. \n\nArgo, Prefect, and Kubeflow have an interesting technique where they translate the pipeline and its dependencies from kedro to their language.\n\nBatch uses the aws cli to submit jobs, one node per job, and listen for them to complete. It will submit all nodes with completed dependencies at once, meaning that we can get some massive parallelization.\n\n\nI did a quick and dirty test of one of these by simulating the technique in a bash script and saw a 40 hr pipeline finish in about 1 hour. I am excited to get this working in my production workflow.\n\n## Spaceflight starter\n\nThey have officially added the spaceflights pipeline as a starter. I have not yet had a chance to try this out, but I anticipate this will be a great pipeline to teach from as it is a bit more complex than the iris pipeline. \n\nI tell folks all the time the best way to learn something new like kedro is to **practice, practice, practice**. Having this at their fingertips will give an easy way to fire up a pipeline that is ok to break try out some new ideas and leave it. I see this helping me testing out plugins on more complex pipelines and writing blog posts with examples that readers can more easily follow along with.\n\n- practice\n- testing\n- blog posts\n- tutorials\n\n## Better Error Messages\n\nShameless pug, my PR landed in kedro, but fell off of the release.md in a merge issue. I was frustrated working on large projects when the wrong arguments were passed into a node and it did not give you any information in the Error to figure out where the error was thrown. Now it will at least give the name of the function that caused the error. This was a simple fix as all of the information was already there.\n\n## Overall\n\nLove the progress that the project is seeing and the focus on all of the deployment options.\n\n## Thanks for supporting contributions\n\n[Deepyaman Datta](https://github.com/deepyaman), [Bhavya Merchant](https://github.com/bnmerchant), [Lovkush Agarwal](https://github.com/Lovkush-A), [Varun Krishna S](https://github.com/vhawk19), [Sebastian Bertoli](https://github.com/sebastianbertoli), [noklam](https://github.com/noklam), [Daniel Petti](https://github.com/djpetti), [Waylon Walker](https://github.com/waylonwalker)",
        "long_description": "Kedro 0.16.6 is out! Let's take a look through the release notes Deployment Docs This is really exciting to see more deployment options coming from the kedro team. It really shows the power of the framework. The power of some of these orchestrations..."
    },
    {
        "cover": "/static/reading-list-xmas2020.png",
        "title": "Reading List",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/reading-list.md",
        "canonical_url": "https://waylonwalker.com/reading-list",
        "cover_image": "https:waylonwalker.com/reading-list.png",
        "date": "2020-10-28 05:00:00+00:00",
        "description": "Things to read later",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "STOP LEAVING Browser Tabs open and save them here!\n\n* Jungle Scout - [Kedro Case Study](https://junglescouteng.medium.com/jungle-scout-case-study-kedro-airflow-and-mlflow-use-on-production-code-150d7231d42e)\n* [Kedro Sessions](https://github.com/quantumblacklabs/kedro/commit/b42845e2e9a6d96e395a5a6f75980ef55c24fddc)\n* Julia Evans - [A few things I've learned about email marketing](https://jvns.ca/blog/2020/10/28/a-few-things-i-ve-learned-about-email-marketing/)\n* git course - [katacoda](https://www.katacoda.com/courses/git/1)",
        "long_description": "STOP LEAVING Browser Tabs open and save them here! Jungle Scout - Kedro Case Study Kedro Sessions Julia Evans - A few things I've learned about email marketing git course - katacoda..."
    },
    {
        "cover": "/static/reasons-to-kedro-notes-xmas2020.png",
        "title": "Reasons to Kedro",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/reasons-to-kedro-notes.md",
        "canonical_url": "https://waylonwalker.com/reasons-to-kedro-notes",
        "cover_image": "https:waylonwalker.com/reasons-to-kedro-notes.png",
        "date": "2020-10-31 05:00:00+00:00",
        "description": "Reasons to Kedro collaboration Sharable catalog small nodes over monolithic notebooks catalog easily load anything with",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "## Reasons to Kedro\n\n* collaboration\n  * Sharable catalog\n  * small nodes over monolithic notebooks\n* catalog\n  * easily load anything without needing to run\n  * No need to write read/write code\n* pipeline\n  * No need to keep execution order in your head\n  * easily run a slice of a pipeline\n* plugins\n  * pip install\n  * make your own\n* hooks\n* flexible expandable cli\n\n## Reasons Not to Kedro\n\n* Already utilizing another DAG framework\n* Data is not in a widely supported format\n* Micro short-lived project\n* Large Project / Deadline\n  * Use a lower profile project to learn first\n* Team not willing to change\n* Need minimal dependencies\n* God Project - kedro owns everything??",
        "long_description": "Reasons to Kedro collaboration Sharable catalog small nodes over monolithic notebooks catalog easily load anything without needing to run No need to write read/write code pipeline No need to keep execution order in your head easily run a slice of a..."
    },
    {
        "cover": "/static/reasons-to-kedro-xmas2020.png",
        "title": "reasons-to-kedro",
        "tags": [
            "kedro",
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/reasons-to-kedro.md",
        "canonical_url": "https://waylonwalker.com/reasons-to-kedro",
        "cover_image": "https:waylonwalker.com/reasons-to-kedro.png",
        "date": "2020-11-01 05:00:00+00:00",
        "description": "There are many reasons that you should be using kedro. If you are on a team of Data Scientists/Data Engineers processi",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "<iframe src=\"https://anchor.fm/waylon-walker/embed/episodes/reasons-to-kedro-en6kr3\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\nThere are many reasons that you should be using kedro.  If you are on a team of\nData Scientists/Data Engineers processing DataFrames from many data sources\nshould be considering a pipeline framework.  Kedro is a great option that\nprovides many benefits for teams to collaborate, develop, and deploy data\npipelines\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/what-is-kedro/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/27debd76b7282c6a93060e9eb66ba0b8/630fb/what-is-kedro-xmas2020.png\" alt=\"article cover for What is Kedro\">\n<div class=\"right\">\n    <h2>What is Kedro</h2>\n    <p class=\"description\">\n    Kedro is an open source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to setup your own python library for data pipelining.  It includes really great ways to manipulate `catalogs` and `pipelines`.  This article will cover the 10K view of kedro, future articles will dive deper into each one.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n## Starter Template\n\nKedro makes it super easy to get started with their cli that utilizes\ncookiecutter under the hood.\n\n``` bash\nconda create -n my-new-project -y python=3.8\nkedro new\nkedro install\nkedro run\n```\n\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/create-new-kedro-project/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/499424b4636332a0ca68d4984b83705e/630fb/create-new-kedro-project-xmas2020.png\" alt=\"article cover for Create New Kedro Project\">\n<div class=\"right\">\n    <h2>Create New Kedro Project</h2>\n    <p class=\"description\">\n    Getting up and going with a brand new [kedro](https://kedro.readthedocs.io) project is super simple, thanks to the help of the `kedro new` command.  The ability to add an example pipeline from the start makes it that much easier to get going and have a template to follow for your own projects.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> read more about how to start your first kedro project here\n\n## Collaboration\n\nKedro provides many tools that help teams collaborate on a single codebase.\nWhile writing monolithic scripts it can be easy to pin yourself in a corner\nwhere it is difficult to have multiple people making changes to the\nnotebook/script at the same time.  Kedro helps guide your team to break your\nproject down into small pieces that different members of the team can work on\nin parallel.\n\n### sharable catalog\n\nKedro makes it easy to collaborate with members who aren't even working on the\npipeline.  I often see team members who want to investigate datasets from\ndifferent points in the pipeline.  Kedro makes it really easy for them to load\nit into python.\n\n**for python users**\n\nShare catalog entries with folks doing EDA.\n\n``` python\ncatalog.load('main_table')\n```\n\n**for non-python users**\n\nFor those who may not be using python, we can easily kick out a CSV version of\nthat `main_table` that they can get from s3 or your cloud storage solution of\nchoice.\n\n``` yaml\nmaster_table:\n  type: pandas.CSVDataSet\n  filepath: s3://bucket/data/03_primary/master_table.csv\n  layer: primary\n```\n\n**for the SQL folks**\n\nWe aren't even constrained to those who only use python or excel, we can kick\nout any kind of dataset that python can output.  Kedro even comes with many\nDataSet types out of the box so that we don't have to write any read/write\ncode.\n\n``` yaml\nmaster_table:\n  type: SQLTableDataSet\n  table_name: master_table\n  credentials: postgres\n```\n\n### small nodes over monolithic scripts\n\nAs I said before single notebooks/scripts are really hard to collaborate on.  I\nhave seen Data Engineers sitting idle waiting to get their changes manually\nadded into the master notebook.  When you find yourself in this situation, find\na better solution.  It's time to break things down into individual modules and\nutilize a version control system that can automatically merge changes in.\n\nKedro encourages the use of git version control and storing all node functions\ninside of modules while still making it really easy to load data into a\nnotebook/shell and start trying out new things.\n\n## No More read and write code\n\nAs I said earlier kedro comes with datasets for the most popular output\nformats.  It is also backed by a really amazing library called `fsspec`, this\nlibrary makes the filesystem that you are storing agnostic to how you write to\nit.  This means that the kedro library utilizes `fsspec` under the hood and\nwrites to the file as if it was to disk, but based on the prefix to the file it\nmay actually be writing to the local filesystem, gcp, azure blob, or s3.\n\n**custom DataSets**\n\nIf kedro does not have a `DataSet` for the format that you need to read or\nwrite you can easily create your own custom `DataSet`  all you need to do is\ninherit from `kedro.io.AbstractDataSet` and create methods for `__init__`,\n`_load`, `_save`, `_exists`, and `_describe`.\n\nCheck out this example from their docs.  I removed the docstrings for brevity,\nyou can see the entire `DataSet` in their\n[docs](https://kedro.readthedocs.io/en/0.15.2/03_tutorial/03_set_up_data.html?highlight=custom%20dataset#creating-custom-datasets).\n\n> The complete example all in one was only available in an older version, more up to date [docs](https://kedro.readthedocs.io/en/0.16.6/07_extend_kedro/01_custom_datasets.html?highlight=custom%20dataset) have a good writeup that walks through everything separately.\n\n``` python\nfrom os.path import isfile\nfrom typing import Any, Union, Dict\n\nimport pandas as pd\n\nfrom kedro.io import AbstractDataSet\n\nclass ExcelLocalDataSet(AbstractDataSet):\n\n    def _describe(self) -> Dict[str, Any]:\n        return dict(filepath=self._filepath,\n                    engine=self._engine,\n                    load_args=self._load_args,\n                    save_args=self._save_args)\n\n    def __init__(\n        self,\n        filepath: str,\n        engine: str = \"xlsxwriter\",\n        load_args: Dict[str, Any] = None,\n        save_args: Dict[str, Any] = None,\n    ) -> None:\n\n        self._filepath = filepath\n        default_save_args = {}\n        default_load_args = {\"engine\": \"xlrd\"}\n\n        self._load_args = {**default_load_args, **load_args} \\\n            if load_args is not None else default_load_args\n        self._save_args = {**default_save_args, **save_args} \\\n            if save_args is not None else default_save_args\n        self._engine = engine\n\n    def _load(self) -> Union[pd.DataFrame, Dict[str, pd.DataFrame]]:\n        return pd.read_excel(self._filepath, **self._load_args)\n\n    def _save(self, data: pd.DataFrame) -> None:\n        writer = pd.ExcelWriter(self._filepath, engine=self._engine)\n        data.to_excel(writer, **self._save_args)\n        writer.save()\n\n    def _exists(self) -> bool:\n        return isfile(self._filepath)\n```\n\n## Execution order is taken care of\n\nAs you build up complex pipelines containing 10's or 100's of nodes it becomes\ndifficult to splice in new nodes/steps without messing up or a framework to\nhelp.  Kedro simply needs a set of nodes that each takes in catalog entries as\ninput and output to catalog entries and it will figure out the order for you.\n\nThese nodes can be made for one-off purposes, take in functions from reusable\nlibraries, and even be dynamically generated from a configuration.  There is\nno need to worry about hand curating the execution order, that's all taken care\nof.\n\n## Easily slice up a pipeline\n\nSince kedro is a DAG that takes in a pile of nodes and figures out all of the\ndependencies for you it knows a lot about your pipeline.  You can slice it up to\nonly the specific pieces that you need.\n\n``` python\n# single nodes\npipeline.only_nodes(\"node1\")\n\n# single nodes and all of thier dependencies\npipeline.to_nodes(\"node1\", \"node2\")\n\n# from a dataset to all of its dependants\npipeline.from_inputs(\"dataset1\", \"dataset2\")\n\n# to a an outputs with all of its dependencies\npipeline.to_outputs(\"dataset6\", \"dataset7\")\n```\n\n## plugins/hooks\n\nCreating your own modifications to how kedro behaves is made really simple\nthrough the use of hooks.  There are several hooks that happen at different\npoints in the kedro lifecycle.  For instance, you can hook in before pipeline\nrun or after pipeline run to do whatever your project needs.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/creating-the-kedro-preflight-hook/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.comundefined\" alt=\"article cover for creating the kedro-preflight hook\">\n<div class=\"right\">\n    <h2>creating the kedro-preflight hook</h2>\n    <p class=\"description\">\n    Kedro Hooks Intro - kedro hooks are an exciting upcoming feature of kedro `0.16.0`.  They allow you to hook into `catalog_created`,`pipeline_run`, and `node_run`(nouns). With a `before`, or `after` (adjective).  This really reminds me of reacts lifecycle hooks, that let you hook into various state of react web components.  This is going to make kedro so extendable by the community.  I am super pumped to see what the community is able to do with this ability.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n### pip install plugin\n\nThere is a growing list of plugins available from pypi that is only a `pip\ninstall` away.  Most of them are on\n[GitHub](https://github.com/topics/kedro-plugin) and tagged as a\n[kedro-plugin](https://github.com/topics/kedro-plugin) topic.\n\n## flexible cli\n\nIn the end, you have a cli for your project that can run your pipeline in all\nsorts of cool ways since it knows about each node's dependencies.  This makes\nrunning and scheduling production a breeze.\n\n``` bash\n# single nodes\nkedro run --node node1\n\n# single nodes and all of their dependencies\nkedro run --to-nodes node1,node2 \n\n# from a dataset to all of its dependents\nkedro run --from-inputs dataset1,dataset2\n\n# to outputs with all of their dependencies\nkedro run --to-outputs dataset6,dataset7\n```\n\n## Try it out\n\nHopefully this post gave you the inspiration to get started today, if it did `pip install kedro` and run `kedro new` to try it out.",
        "long_description": "There are many reasons that you should be using kedro. If you are on a team of Data Scientists/Data Engineers processing DataFrames from many data sources should be considering a pipeline framework. Kedro is a great option that provides many benef..."
    },
    {
        "cover": "static/codeit-bro-interview-xmas2020.png",
        "title": "Codeit Bro Interview",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/codeit-bro-interview.md",
        "canonical_url": "https://waylonwalker.com/codeit-bro-interview",
        "cover_image": "https:waylonwalker.comcodeit-bro-interview.png",
        "date": "2020-11-02 06:00:00+00:00",
        "description": "use this profile image Please share your professional role as a data scientist? [Also feel free to share about your pe",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "![profile image](https://waylonwalker.com/profile.jpg)\n\n> use this profile image\n\n> Please share your professional role as a data scientist? \\[Also feel free to\n> share about your personal projects, publications, etc.\\]\n\nI graduated with a Mechanical Engineering Degree 8 years ago.  Much of my work\n[early in my career](https://waylonwalker.com/eight-years-cat) was wrapped\naround analyzing larger datasets for my group to understand quality, drive\nchanges to improve quality or prove that quality was already good.\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/eight-years-cat'>\n<img\nstyle='width:500px; max-width:80%; margin: auto;'\nsrc=\"https://waylonwalker.com/eight-years-cat.png\"\nalt=\"My first eight years as a working professional article\"\n/>\n</a>\n</p>\n\nThree years ago I made the switch to Data Science and have loved every minute of\nit.  It is a very dynamic field that is continually changing and there are\nalways a new set of skills to learn and hone in on.  I talk a lot about the\nmindset of always learning, sharing knowledge, and communicating in my\n[newsletter](https://waylonwalker.com/newsletter)\n\n> What are the most difficult challenges you faced as a data scientist and how\n> you resolved them?\n\nDeployment is a high bar to enter.  Jupyter notebooks provide a suspiciously simple start into Data Science.  Folks with very little coding experience can easily get up and running and start bringing value back into their organization, but as you want to start sharing these notebooks, re-using components of them, and scheduling them to run autonomously the bar is raised very quickly.  Many places will have teams dedicated to each piece of the process, but all too often if you want your project to be successful you have to step out of your comfort zone and do much of it yourself.\n\nGetting started in Data Science\n\n* Jupyter\n\nGoing to production\n\n* packaging\n* creating cli's\n* linux\n* bash\n* cron\n* CI/CD\n* git\n* Docker\n* AWS\n* Pipelines\n* Schedulers/orchestration\n* Virtual Machines\n* hosting docs\n* hosting models/apis\n* Visualizations\n* Databases\n* blob storage\n* ...\n\n> What are the most required skills for a data scientist?\n\n* Communication\n* project Estimation\n* Subject Matter Expertise\n* Python\n\nA good understanding of the business problems you are trying to solve.  This\nrequires very good communication between Subject matter experts and the Data\nScience team.\n\nFor the technical side, python is the core skill that I stick with.  As I said\nbefore this quickly starts to grow as you start needing to take projects into\nproduction.  Learning how to write good python efficiently without needing to\nlook up much really frees up your brain to focus on the harder challenge of\nsolving the problem at hand.\n\nLearn how to frame up your problem ahead of time and be flexible in just the\nright ways.\n\nLet's make up a fictitious transportation company that is split into a number of divisions for car, train, bus, etc.  All too often I see projects setup as a pilot for the car division, or even a micro subset of the car division.  The proof of concept takes off, and now we need to expand the project from one city to a whole region, but since the city was hard coded in it makes it really hard to expand. After a few months we have a lot of copy and paste code and at some point it becomes nearly impossible to make any changes without needing to change everything, or expand to new regions or divisions. Understand the inputs to your problem set early on and plan for them to change.\n\n> How a beginner can create a roadmap to become a successful data scientist in\n> the present scenario?\n\nSomeone who is currently working in any sort of role that involves manipulating data in excel can get their foot in the door by automating the work their team does in python, or visualizing it in a more powerful tool.\n\nYou will quickly find that you can handle much more data than spreadsheet tools can, you can start expanding projects to utilize more data, or use that extra free time to find new insights you didn't have time for before.\n\n> How much Maths is required to be a good data scientist? \\[You can also share\n> which concepts should everyone focus on more\\]\n\nI have a lot of math background from my Mechanical Engineering degree that I haven't use in years.\n\nTo be clear I am not generally building models in my day to day.  My role kind\nof sits between Data Engineering and MLOps these days.  I scaffold up new\nprojects for the team, take on more complex data pipelining projects, and own\nour whole deployment system.  None of this really requires advanced math on a\nday to day basis.\n\n> What are some concepts that everyone should know more\n\nLinters.  They are so easy to run that no one should be bad code that fails\nlinting these days.  You can set them to run from your favorite editor, the\ncommand line, in a git commit, from GitHub Actions, or an Azure pipeline, just\nfigure out the ones that fit you and run them.\n\n> Will data science be replaced by AI?\n\nEverything that we see today will be different in the future whether replaced by\nAI or the next hot topic.  There might be subsets of our work that is completely\nautomated away.  I think it will be a great opportunity to focus our minds on\nmore difficult things that AI cannot.  Data Science is a relatively new field,\nbe ready for it to change and move with it.\n\n> Words of advice for people without a Computer Science background?\n\nYou can do it, there are more folks out there crushing Data Science and Software Engineering in general without a Computer Science background than you realize. Don't let the imposter syndrome get to you.  Keep honing your skills and be confident.\n\n* Be flexible\n* Always be open and ready for change\n* Never stop learning\n* Keep a positive attitude\n* Be kind to others\n\n> Tell us about your journey towards becoming a successful data scientist?\n\nsee Q1\n\n> Which tools you use for Data Science and which one do you recommend for\n> beginners?\n\nAs a beginner definitely focus on a minimal number of things at a time.  As you go through the journey of learning anything you will likely to see articles that tell you that your tech of choice is dead and should never be used because some new hotness it so much better.  Focus on skills that have a real job market and solve real problems don't worry so much about it that you never learn one.\n\nPython is my core skill, it can do so much so quickly and has a very strong ecosystem in data.\n\nA skill I would add in general is to deploy early.  Too often we spend months on prototypes that need rewritten for the prod environment, when they could have just been written for prod from the beginning while ci tooling could have kept the project cleaner and easier to work with.  Whether its GitHub actions or Azure Pipelines CI/CD is cheaper and easier to setup than ever.  There is a fluid movement that happens when you are working with clean code along the way rather than cleaning it up after its all done.  Simplifying your work opens up mental space to put more focus on your problem at hand.\n\n<p style='text-align: center'>\n<a href='https://waylonwalker.com/what-are-github-actions'>\n<img\nstyle='width:500px; max-width:80%; margin: auto;'\nsrc=\"https://waylonwalker.com/what-are-github-actions.png\"\nalt=\"introductory article to GitHub actions\"\n/>\n</a>\n</p>\n\n> check out this article about github actions\n\n> Is data science a stressful job?\n\nIt definitely can be if you let it.  Manage expectations and scope creep well and you will be fine.  My most stressful times have probably been when I over committed to something and it was my own fault for setting myself up for stress.\n\n> What type of problems you faced every day as a data scientist?\n\nAt a high level the business I support remanufactures ( similar to recycling ) parts for heavy equipment.  I find ways to re-use more core material to save cost and reduce emissions.  A lot of what I do is solving business problems with code.  This might be a problem that has been solved by hand for a small focused subset of a population and expanding it to everything.  More and more of my time is being dedicated to coaching.  Whether in the form of code review, pair programming, or general mentoring.",
        "long_description": "use this profile image Please share your professional role as a data scientist? [Also feel free to share about your personal projects, publications, etc.] I graduated with a Mechanical Engineering Degree 8 years ago. Much of my work early in my c..."
    },
    {
        "cover": "/static/resume-tips-xmas2020.png",
        "title": "Resume Tips",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/resume-tips.md",
        "canonical_url": "https://waylonwalker.com/resume-tips",
        "cover_image": "https:waylonwalker.com/resume-tips.png",
        "date": "2020-11-06 06:00:00+00:00",
        "description": "customize for the job Why are you a good fit? What will you bring to the role? Give real outcomes give real experience",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "* customize for the job\n* Why are you a good fit?\n* What will you bring to the role?\n* Give real outcomes\n* give real experience\n* Stop tech vomiting\n* if you link to GitHub\n  * Make a profile readme\n  * Guide me to your best work\n  * have some activity\n* if you link to LinkedIn\n  * Provide some benefit that is not on your resume\n* Have a logical flow of experience (dont make me hunt for past experience)\n* Keep it under 2 pages\n* Who you know.\n* Reference real experience\n  * Deployed 12 data pipelines with over 500 nodes to process 200GB of data at a Fortune 100 company\n  * vs\n  * Knowledge of Data Engineering methodology with python EC2\n* Dont be so fluffy",
        "long_description": "customize for the job Why are you a good fit? What will you bring to the role? Give real outcomes give real experience Stop tech vomiting if you link to GitHub Make a profile readme Guide me to your best work have some activity if you link to Linked..."
    },
    {
        "cover": "/static/find-replace-xmas2020.png",
        "title": "Find and Replace in the Terminal.",
        "tags": [
            "linux",
            "bash"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/find-replace.md",
        "canonical_url": "https://waylonwalker.com/find-replace",
        "cover_image": "https:waylonwalker.com/find-replace.png",
        "date": "2020-11-12 05:00:00+00:00",
        "description": "notes about find and replace techniques",
        "published": true,
        "content": "## grepr\n\n```bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n\n```bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n```\n\n## grepd\n\n``` python\ngrepd() {grep -iRl \"$1\" | xargs sed -i \"/^$1/d\"}\n```\n\n## CocSearch\n\n\n``` bash\n:CocSearch status: 'false' -g *.md\n```",
        "long_description": "grepr ```bash grepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"} bash grepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"} grepd python grepd() {grep -iRl \"$1\" | xargs sed -i \"/^$1/d\"} CocSearch bash :CocSearch status: 'false' -g *.md..."
    },
    {
        "cover": "/static/rebrand-xmas2020.png",
        "title": "rebrand",
        "tags": [
            "blog"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/rebrand.md",
        "canonical_url": "https://waylonwalker.com/rebrand",
        "cover_image": "https:waylonwalker.com/rebrand.png",
        "date": "2020-11-14 06:00:00+00:00",
        "description": "A few notes for my next refactoring of waylonwalker.com",
        "published": false,
        "content": "* simple landing page\n  * https://swyx.io\n  * [joel on software](https://www.joelonsoftware.com/)\n      * recent\n      * reading lists\n* More from waylon just above footer\n  * 4x2 grid\n* link strategy\n  * latest post\n  * next/prev\n  * similar tags\n* search in nav\n* tag stickers\n* simple cards?\n* bookmarks?\n* nav style stinks\n* single post template\n* flat routes no need to /blog /notes\n* post types\n  * \ud83c\udf33  full\n  * \ud83c\udf31  budding\n  * \ud83d\udd8a  Note\n  * \ud83d\udcbb  hot tip\n* usage of tags\n* MDX\n  * stories\n  * slides\n  * \u26a0\n  * \u274c\n  * \u2714\n  * kedro viz\n  * charts\n  * inlink component\n  * [https://joshwcomeau.com/](https://joshwcomeau.com/ \"https://joshwcomeau.com/\")\n  * auto-card oneline links\n* meta posts\n  * about\n  * uses\n  * how site is built\n  * how to search\n* stories\n\n## TODO\n\n* review package.json\n* update package.json\n\n## Done\n\n* ahrefs\n  * fix canonical urls\n  * fix broken inlinks\n* convert to one post template\n*",
        "long_description": "simple landing page https://swyx.io joel on software recent reading lists More from waylon just above footer 4x2 grid link strategy latest post next/prev similar tags search in nav tag stickers simple cards? bookmarks? nav style stinks single post..."
    },
    {
        "cover": "/static/testing-data-pipelines-xmas2020.png",
        "title": "Testing Data Pipelines",
        "tags": [
            "kedro",
            "python"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/testing-data-pipelines.md",
        "canonical_url": "https://waylonwalker.com/testing-data-pipelines",
        "cover_image": "https:waylonwalker.com/testing-data-pipelines.png",
        "date": "2020-11-16 06:00:00+00:00",
        "description": "Thinking through testing best practices for Data Pipelines",
        "published": false,
        "content": "# Lint/Format/Doc\n\n* black\n* flake8\n* interrogate\n* mypy\n\n# Pipeline Assertions\n\n* pipeline constructs\n* pipeline as expected nodes\n* pipeline has minimum nodes\n* test minimum tags\n* test alternate tags\n\n# Catalog Assertions\n\n* test catalog follows naming structure\n* \n\n# Node Tests\n\n* test function does the correct operations on test data\n\n# Great Expectations",
        "long_description": "Lint/Format/Doc black flake8 interrogate mypy Pipeline Assertions pipeline constructs pipeline as expected nodes pipeline has minimum nodes test minimum tags test alternate tags Catalog Assertions test catalog follows naming structure Node Tes..."
    },
    {
        "cover": "/static/kedro-factory-xmas2020.png",
        "title": "Kedro Factory",
        "tags": [
            "blog"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-factory.md",
        "canonical_url": "https://waylonwalker.com/kedro-factory",
        "cover_image": "https:waylonwalker.com/kedro-factory.png",
        "date": "2020-11-16 06:00:00+00:00",
        "description": "Kedro Plugin Idea for creating Dags quickly",
        "published": false,
        "content": "Dynamically generate kedro pipelines with yaml or script\n\nInspiration\n\n* [dag-factory](https://github.com/ajbosco/dag-factory)",
        "long_description": "Dynamically generate kedro pipelines with yaml or script Inspiration dag-factory..."
    },
    {
        "cover": "/static/expand-one-line-links-xmas2020.png",
        "title": "Expand One Line Links",
        "tags": [
            "webdev"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/expand-one-line-links.md",
        "canonical_url": "https://waylonwalker.com/expand-one-line-links",
        "cover_image": "https:waylonwalker.com/expand-one-line-links.png",
        "date": "2020-11-18 05:00:00+00:00",
        "description": "I wanted a super simple way to cross-link blog posts that require as little effort as possible, yet still looks good in",
        "published": true,
        "content": "I wanted a super simple way to cross-link blog posts that require as little effort as possible, yet still looks good in vanilla markdown in GitHub.  I have been using a snippet that puts HTML into the markdown.  While this works, it's more manual/difficult for me does not look the best, and does not read well as\n\n## Goals for new card\n\nThe new card should be fully automated to expand with title, description, and\ncover image.  Bonus if I am able to attach a comment behind it.\n\n* fully automated\n* card expansion\n* Title\n* description\n* cover image\n\n## Old Card\n\nIf you can call it a card \ud83e\udd23.  This card was just an image wrapped in an anchor tag and a paragraph tag.  I found this was the most consistent way to get an image narrower and centered in both GitHub and dev.to.\n\n``` html\n<p style='text-align: center'>\n  <a href='https://waylonwalker.com/notes/eight-years-cat'>\n    <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/eight-years-cat.png\"\n    alt=\"My first eight years as a working professional article\"\n    />\n  </a>\n</p>\n```\n\n<p style='text-align: center'>\n  <a href='https://waylonwalker.com/notes/eight-years-cat'>\n    <img\n    style='width:500px; max-width:80%; margin: auto;'\n    src=\"https://waylonwalker.com/eight-years-cat.png\"\n    alt=\"My first eight years as a working professional article\"\n    />\n  </a>\n</p>\n\nThe key here is that I have to put the HTML into the markdown.  It looks a bit dirty while editing and quite frankly it's a pain to deal with.\n\n---\n\n## New Card\n\n``` markdown\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/eight-years-cat/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/29cdf6fcfb17d7fd766fc438144fb3e4/630fb/eight-years-cat-xmas2020.png\" alt=\"article cover for My first eight years as a working professional.\">\n<div class=\"right\">\n    <h2>My first eight years as a working professional.</h2>\n    <p class=\"description\">\n    This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n```\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/eight-years-cat/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/29cdf6fcfb17d7fd766fc438144fb3e4/630fb/eight-years-cat-xmas2020.png\" alt=\"article cover for My first eight years as a working professional.\">\n<div class=\"right\">\n    <h2>My first eight years as a working professional.</h2>\n    <p class=\"description\">\n    This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n## First step\n\nMy first attempt was to make my own transformer for `gatsby-remark-embedder`. I previously set this up on my site for Twitter and YouTube.  I tried to get some custom transformers going, to do what I wanted for my own website, but failed.  I really struggled to understand what data was coming in and out of the transformer.  My lack of js/node debugging skills was really showing.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/gatsby-remark-embedder/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/d84c8333b6cb5760cc36988444e204c4/630fb/gatsby-remark-embedder-xmas2020.png\" alt=\"article cover for gatsby-remark-embedder\">\n<div class=\"right\">\n    <h2>gatsby-remark-embedder</h2>\n    <p class=\"description\">\n    Inspired by discourse's link expansion I am rolling out expansions for one line links on the blog\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n\n> using gatsby-remark-embedder to expand Twitter/YouTube\n\n## Redirects\n\nIt also works with redirects. I have a redirect to my \"latest\" post.  It's something that I don't do the best job at keeping up to date, but when I feel really proud of a post I make it the latest.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/minimal-python-package/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/de47aa7ab3bcdcd5f0dade8cdccdddc2/630fb/minimal-python-package-xmas2020.png\" alt=\"article cover for Minimal Python Package\">\n<div class=\"right\">\n    <h2>Minimal Python Package</h2>\n    <p class=\"description\">\n    What does it take to create an installable python package that can be hosted on pypi? What is the minimal python package\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> this post is a redirect to my \"latest post\"\n\n## Client Side\n\nI started out by running this card expansion client side. This was the strategy that I used to find the list of elements that should be transformed.\n\n* get all anchors\n* get all paragraphs\n* filter paragraphs where the content is one of the links\n* filter paragraphs where there is only one element in the paragraph\n* filter to paragraphs with links that `shouldTransform`\n* These elements should have the `oneLineLinkCard` applied.\n\n``` javascript\nconst oneLineLinks = () => {\n  const linkText = [...document.querySelectorAll('.post-body p a')].map(\n    (p) => p.innerText\n  )\n  const paragraphs = document.querySelectorAll('.post-body p') //\n\n  const regex = /^https?:\\/\\/waylonwalker\\.com\\//\n  const shouldTransform = (url) => regex.test(url)\n\n  const anchorOnly = [...paragraphs].filter(\n    (p) => linkText.includes(p.innerText) && p.childElementCount === 1\n  )\n\n  anchorOnly\n    .filter((p) => shouldTransform(p.firstElementChild.href))\n    .map(\n      async (p) =>\n        (p.outerHTML = await oneLineLinkCard(p.firstElementChild.href))\n    )\n}\n```\n\n## Styles\n\nCSS is not my strong suit, but I can generally hammer something into a shape that I am happy with.  For this one, I did struggle a bit with how it looked on various screens, particularly because I was holding the cover image size to a hard 300px.  I ended up with more media queries than I needed, but it works.\n\n``` css\n.onelinelink + blockquote {\n  position: relative;\n  left: 2rem;\n  background: rgba(0, 0, 0, .2);\n  margin: -6rem auto 1rem;\n  padding-top: 3rem;\n  border: 1px solid goldenrod;\n  border-top: 2px solid goldenrod;\n\n  max-width: 300px;\n  @media (max-width: 350px) {\n  left: 0rem;\n  margin-left: .4rem;\n  margin-right: .4rem;\n  }\n  @media (min-width: 800px) {\n    max-width: 600px;\n  }\n  @media (min-width: 900px) {\n    max-width: 700px;\n  }\n  @media (min-width: 1000px) {\n    max-width: 800px;\n  }\n  border-radius: 15px/45px;\n  display: block;\n  }\n\n}\n\n.onelinelink {\n  position: relative;\n  z-index: 2;\n  margin: 4rem;\n  overflow: hidden;\n  display: flex;\n  border: 2px solid rgba(255, 50, 50, .1);\n  background: rgba(255, 50, 50, .015);\n  background: #262236;\n  text-decoration: none;\n  border-radius: 8px;\n  max-height: 126px;\n\n  @media (max-width: 800px) {\n    flex-direction: column;\n    max-height: 800px;\n    max-width: 300px;\n    margin: 4rem auto;\n\n  }\n\n  h2 {\n    top: -1.2rem;\n    postition: relative;\n    margin: 0;\n    padding: 0;\n    font-size: .8rem;\n    font-weight: 400;\n\n  }\n\n  .right {\n  width: 100%;\n    padding: 5px 15px;\n  }\n  .description {\n    font-size: 1rem;\n    line-height: 1.2rem;\n    height: calc(100% - 31px - 1rem);\n    padding: 0;\n    padding-bottom: 1rem;\n    padding-top: .1rem;\n    margin: 0;\n  }\n  .url {\n    padding-right: 30px;\n    color: rgba(255, 255, 255, .1);\n    text-align: right;\n    position: relative;\n    z-index: 2;\n    background: #262236;\n  }\n  \n  img {\n    max-width: 300px;\n    max-height: 126px;\n    padding: 0;\n    margin: 0;\n    border-radius: 8px 0 0 8px;\n  }\n  .read-more {\n    font-size: .6rem;\n    color: rgba(255, 255, 255, .08);\n  }\n}\n```\n\n### Final Look\n\nOn mobile, it renders vertically.\n\n![mobile](https://waylonwalker.com/one-line-link-vertical.png)\n\nOn desktop, it renders horizontally.\n\n![desktop](https://waylonwalker.com/one-line-link-horizontal.png)\n\n## Expansion\n\nI'm sure that all of this can be better, my js skills are still forming.  It's quite humbling to see how hard it is to think in an unfamiliar language.  The following `oneLineLineCard` renders a string template literal from a paragraph with a single anchor to a card that contains some of that pages meta information.  The \n getDescription` function uses a fetch to get the metadata right from the content of the page.\n\n``` javascript\nconst getDescription = (url) =>\n  fetch(url)\n    .then((r) => r.text())\n    .then((html) => {\n      let parser = new DOMParser()\n      let doc = parser.parseFromString(html, 'text/html')\n      let meta = doc.querySelectorAll('meta')\n      const description = [...meta].filter(\n        (m) => m.name === 'og:description'\n      )[0].content\n      const image = [...meta].filter((m) => m.name === 'og:image')[0]?.content\n      const sm_image = [...meta].filter((m) => m.name === 'og:sm_image')[0]\n        ?.content\n      const url = [...meta].filter((m) => m.name === 'og:url')[0]?.content\n      const title = [...meta].filter((m) => m.name === 'title')[0]?.content\n      return { description, image, url, title, sm_image }\n    })\n\nconst oneLineLinkCard = (url) => {\n  return getDescription(url).then(\n    (meta) =>\n      `<a class=\"onelinelink\" href=${meta.url}>\n  <img src='${meta.sm_image ? meta.sm_image : meta.image ? meta.image : ''}' alt='cover image for ${meta.title ? meta.title : ''}>\n  <div class=\"right\">\n    <h2>${meta.title ? meta.title : ''}</h2>\n    <p class='description'>\n      ${meta.description ? meta.description : ''}\n    </p>\n    <p class=\"url\">\n       <span class='read-more'>read more</span>  waylonwalker.com\n    </p>\n  </div>\n\n</a>\n  `\n  )\n}\n```\n\n## It works...\n\nAnd it works.  Whenever I reference my own blog with just a single link on a line in markdown I get a nice card link out to the other post, with a small image sized for the card, the title, and the description of the post.\n\n\n## But\n\n* too much client-side\n* does not work well with cross-posting\n\nFor every link I do this with the client will pull the full page just to get a bit of metadata.  I am already doing a bit more than I want to do client-side for a blog, so I would prefer to do it ahead of time.\n\nAdditionally, since it is done client-side it does not translate well when I copy my markdown to various other blogging platforms.  If it were rendered right into the markdown cross-posting would be much easier.\n\n## Future State\n\n_actually already implemented at this point_\n\nThe direction I am going to try is to use python to load each post, look for lines that contain only a link, then render this same markup right in the markdown.  For this I am going to use a language I am more familiar with, python, and do this inside of GitHub actions just before build time so that the markdown I write stays the same, the cards will only be rendered in prod.\n\n## Why Python \ud83d\udc0d\n\nPython is my every day what I know, I work much more efficiently and cleanly with it.  Also the more I blog the more abstractions I am seeing and the lazier I am getting.  Things like description, SEO, cover images are all getting automated. Gatsby really doesn't like to run when some of those things are missing, probably due to my lack of JS error handling skills.  I find it much easier to load up all the pages and patch up the frontmatter in python before\nbuild time.\n\nI am kinda curious if eventually, I can re-create everything I need in python because I am honestly not using react for much more than a glorified templating system, besides search.  If I can pre-render everything in python\n\n## What do you think??\n\nDo they look good?  Could they be better?",
        "long_description": "I wanted a super simple way to cross-link blog posts that require as little effort as possible, yet still looks good in vanilla markdown in GitHub. I have been using a snippet that puts HTML into the markdown. While this works, it's more manual/dif..."
    },
    {
        "cover": "/static/gatsby-remark-embedder-xmas2020.png",
        "title": "gatsby-remark-embedder",
        "tags": [
            "webdev"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/gatsby-remark-embedder.md",
        "canonical_url": "https://waylonwalker.com/gatsby-remark-embedder",
        "cover_image": "https:waylonwalker.com/gatsby-remark-embedder.png",
        "date": "2020-11-18 05:00:00+00:00",
        "description": "Inspired by discourse's link expansion I am rolling out expansions for one line links on the blog",
        "published": true,
        "related_post_label": "Check out this related post",
        "content": "<iframe src=\"https://anchor.fm/waylon-walker/embed/episodes/gatsby-remark-embedder-en6l3j\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\nInspired by discourse's link expansion I am rolling out expansions for one line\nlinks on the blog [waylonwalker](https://waylonwalker.com).  I was able to find\na gatsby plugin\n[gatsby-remark-embedder](https://www.gatsbyjs.com/plugins/gatsby-remark-embedder/?=embed)\nthat expands one line links for social cards for popular platforms like twitter\nand YouTube through a repose from Kyle Mathews to my tweet.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"und\" dir=\"ltr\">yes! <a href=\"https://t.co/IKmXijS9IT\">https://t.co/IKmXijS9IT</a></p>&mdash; Kyle Mathews (@kylemathews) <a href=\"https://twitter.com/kylemathews/status/1329817928666005504?ref_src=twsrc%5Etfw\">November 20, 2020</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n## Use Cases\n\nThis covers a couple of use cases I have with very little effort.\n\n* Twitter\n* YouTube\n\n## install\n\n``` bash\nnpm i gatsby-remark-embedder gatsby-plugin-twitter\n```\n\nThis was super quick and simple to setup, the only thing that was extra was to\ninstall the `gatsby-plugin-twitter` plugin as well as the\n`gatsby-remark-embedder`.\n\n## enable\n\n``` javascript\n// In your gatsby-config.js\n\nmodule.exports = {\n  // Find the 'plugins' array\n  plugins: [\n    `gatsby-plugin-twitter`,\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-embedder`,\n            options: {\n              customTransformers: [\n                // Your custom transformers\n              ],\n              services: {\n                // The service-specific options by the name of the service\n              },\n            },\n          },\n\n          // Other plugins here...\n        ],\n      },\n    },\n  ],\n};\n```\n\nThats it, now I can embed tweets and YouTube videos by just leaving the link on a single line.",
        "long_description": "Inspired by discourse's link expansion I am rolling out expansions for one line links on the blog waylonwalker. I was able to find a gatsby plugin gatsby-remark-embedder that expands one line links for social cards for popular platforms like twitte..."
    },
    {
        "cover": "/static/audio-for-blog-xmas2020.png",
        "title": "Adding Audio to my blog posts",
        "tags": [
            "webdev",
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/audio-for-blog.md",
        "canonical_url": "https://waylonwalker.com/audio-for-blog",
        "cover_image": "https:waylonwalker.com/audio-for-blog.png",
        "date": "2020-11-25 20:52:22+00:00",
        "description": "This is episode 1 of the Waylon Walker Audio experience, posts from waylonwalker.com in audio form. So I have had this",
        "published": true,
        "content": "<iframe src=\"https://anchor.fm/waylon-walker/embed/episodes/Launching-Audio-for-the-Blog-en6kof\" height=\"102px\" width=\"400px\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\nThis is episode 1 of the Waylon Walker Audio experience, posts from\n[waylonwalker.com](https://waylonwalker.com) in audio form.\n\nSo I have had this idea for awhile to add audio to my blog posts.  The idea\npartly comes from the aws blog, if you have ever been on their blog you will\nhave noticed that they have a _voiced by amazon polly_ section.\n\n## What to Expect\n\nHonestly I don't know this is all new to me and I dont have much to go off of.\nFor now its a test that may or may not work out.\n\nI will say that the time that I have available for clean audio is a bit limited\nso expect these to come out in batches as I get time to go back and record.\n\n## What Not to Expect\n\nOne thing that makes the aws blog really hard to listen to is the robotic\nvoice, I definitely don't want that.  This will be voiced by a real human, Me.\nAt the same time written text doesn't translate directly to audio well so don't\nnecessarily expect the audio to be\nword for word.\n\n\n## Code blocks \n\nThere are a lot of code blocks in my blog, which don't translate directly into\nI will do my best to read short one liners or describe larger blocks, but don't\nexpect a boring three minute read of large code blocks.\n\n## Updates\n\nExpect to see these at the top of finished posts once I consider them done.  I\nwill not likely come back to edit the audio if there is an edit to the post\nunless its major.  I will do my best to highlight changes in a note next to the\nembeded audio on the post.\n\n## Lets do this\n\nIf you like this idea give the posts a listen, share them with your friends,\ngive me a shout out on twitter\n[@_waylonwalker](https://twitter.com/_WaylonWalker).\n\n---\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/crush-dev-to-posts/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/2c5331cc1e03f772830a1584092d79cf/630fb/crush-dev-to-posts-xmas2020.png\" alt=\"article cover for How to crush amazing posts on DEV\">\n<div class=\"right\">\n    <h2>How to crush amazing posts on DEV</h2>\n    <p class=\"description\">\n    Here are a few of my top tips to help make dev.to posts more readable, and drive better engagement.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> If you enjoyed this post you may enjoy another \"meta\" post",
        "long_description": "This is episode 1 of the Waylon Walker Audio experience, posts from waylonwalker.com in audio form. So I have had this idea for awhile to add audio to my blog posts. The idea partly comes from the aws blog, if you have ever been on their blog you w..."
    },
    {
        "cover": "/static/more-itertools-windowed-xmas2020.png",
        "title": "Windowing Python Lists",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/more-itertools-windowed.md",
        "canonical_url": "https://waylonwalker.com/more-itertools-windowed",
        "cover_image": "https:waylonwalker.com/more-itertools-windowed.png",
        "date": "2020-12-10 10:44:19+00:00",
        "description": "In python data science we often will reach for pandas a bit more than necessary. While pandas can save us so much there",
        "published": true,
        "content": "In python data science we often will reach for pandas a bit more than necessary. While pandas can save us so much there are times where there are alternatives that are much simpler.  The itertools` and `more-itertools` are full of cases of this.\n\nThis post is a walkthrough of me solving a problem with `more-itertools` rather than reaching for a for loop, or pandas.\n\nI am working on a  one-line-link expander for my blog.  I ended up doing it, just by modifying the markdown with python.  I first split the post into lines with `content.split('\\n')`, then look to see if the line appears to be just a link.  One more safety net that I wanted to add was to check if there was whitespace around the line, this could not simply be done in a list comprehension by itself.  I need just a bit of knowledge of the surrounding lines, enter `more-itertools`.\n\n\n## simplified rendering function\n\nI have a function that will check to see if the line should be expanded, then render the correct template.  Fist step is to check if the line contains no spaces and starts with `https`, if it\ndoes render the template. \n\nThe real expand_line function uses requests to pull some metadata about the post to insert into the card, more on that in another post.\n\n``` python\ndef expand_line(line):\n   \"\"\"\n   Check if line should be expanded then render a template\n   \"\"\"\n\n   if ' ' in line and line.startswith('https'):\n      return line\n\n  return f\"<a href='{line}' class='card'>\"\n```\n\n## initial implementation\n\nMy first implementation was to load in the content as a single string and use a list comprehension to expand each line.\n\n``` python\nexpanded_content = \"\\n\".join(\n    [expand_line(line) for line in content]\n)\n```\n\n## The issue.\n\nSometimes I write my posts in vim without wordwrap on and just use `gq` to wrap them to the current `textwidth`.  If I have a link that happens to be really long it ends up on its own line.  I do not want one line links to expand if they are in the middle of a paragraph.\n\n``` markdown\n## sample paragraph\n\nThis is a paragraph that has a really long link\nhttps://waylonwalker.com/not-a-real-link-just-a-silly-example-for-this-post\ninside of it that ends up on its own line\n```\n\n> I need a bit of knowledge about the lines around the link.\n\n\n## windowing\n\n`more-itertools` comes with a windowing function that will slide over an iterable with a width of n.\n\n``` python\n>>> from more_itertools import windowed\n>>> all_windows = windowed([1, 2, 3, 4, 5], 3)\n>>> list(all_windows)\n[(1, 2, 3), (2, 3, 4), (3, 4, 5)])]\n```\n\n> this example is copied from the [more-itertools docs](https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.windowed)\n\n## sliding through my content\n\nThe one extra that we need is padding at the front and back of the list so that we ensure that every value ends up in the middle position at least once.\n\n\n``` python\nexpanded_content = \"\\n\".join(\n    [expand_line(*line) for line in windowed(f'\\n{content}\\n', 3)]\n)\n```\n\n**meta**: \ud83d\udc47  This is an example of a one-line-link card that we are trying to achieve.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/python-args-kwargs/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/8c73a5e2f384efdcd17762c52faff94f/630fb/python-args-kwargs-xmas2020.png\" alt=\"article cover\">\n<div class=\"right\">\n    <h2>understanding python *args and **kwargs</h2>\n    <p class=\"description\">\n    Python `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> Not sure what *line is, check out this article.\n\n\n## update expand_line\n\nNow that we are calling `expand_line` with all three lines.  We need to update the function signature and add a guarding clause to return early if before or after lines are not blank.\n\n``` python\ndef expand_line(before, line, after):\n   \"\"\"\n   Check if line should be expanded then render a template\n   \"\"\"\n    if before != '' and after != '':\n      return line\n\n\n    if ' ' in line and line.startswith('https'):\n      return line\n\n    return f\"<a href='{line}' class='card'>\"\n```\n\n\nHope you liked this walk-through of solving a problem I had with `more-itertools`, If you learned something be sure to share it.",
        "long_description": "In python data science we often will reach for pandas a bit more than necessary. While pandas can save us so much there are times where there are alternatives that are much simpler. The itertoolsandmore-itertools` are full of cases of this. This pos..."
    },
    {
        "cover": "/static/compare-directories-in-bash-xmas2020.png",
        "title": "Compare Directories In Bash",
        "tags": [
            "bash",
            "tip"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/compare-directories-in-bash.md",
        "canonical_url": "https://waylonwalker.com/compare-directories-in-bash",
        "cover_image": "https:waylonwalker.com/compare-directories-in-bash.png",
        "date": "2020-12-11 00:00:00+00:00",
        "description": "Today I needed to check for articles that used the same slug from two directories, bash made it super simple. bash diff",
        "published": false,
        "content": "Today I needed to check for articles that used the same slug from two directories, bash made it super simple.\n\n``` bash\ndiff -rq src/pages/blog src/pages/notes\n```",
        "long_description": "Today I needed to check for articles that used the same slug from two directories, bash made it super simple. bash diff -rq src/pages/blog src/pages/notes..."
    },
    {
        "cover": "/static/automating-my-post-starter-xmas2020.png",
        "title": "Automating my Post Starter",
        "tags": [
            "blog",
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/automating-my-post-starter.md",
        "canonical_url": "https://waylonwalker.com/automating-my-post-starter",
        "cover_image": "https:waylonwalker.com/automating-my-post-starter.png",
        "date": "2020-12-11 09:08:00+00:00",
        "description": "One thing we all dread is mundane work of getting started, and all the hoops it takes to get going. This year I want to",
        "published": true,
        "content": "One thing we all dread is mundane work of getting started, and all the hoops it\ntakes to get going.  This year I want to post more often and I am taking some\nsteps towards making it easier for myself to just get started.\n\nWhen I start a new post I need to cd into my blog directory, start neovim in a\nmarkdown file with a clever name, copy some frontmatter boilerplate, update the\npost date, add tags, a description, and a cover.\n\n## Todo List for starting a post\n\n* frontmatter template\n* Title\n* slug\n* tags\n* date\n* cover\n* description\n* create markdown file\n* open in neovim\n\n\n## Lets Automate this\n\n### This aint no proper cli\n_hot and fast_\n\nAs with many thing running behind the scenes on this site, I am the one and\nonly user, I have limited time, so this is going to be a bit **hot and fast**.\nLet's create a file called new-post.\n\n_<small><mark>start the script new-post</mark></small>_\n``` python\n#!python\n# new-post\n```\n\n> \ud83d\udc46 Works on my machine\n\nIf this were something that had more users than me I would probably use\nsomething like click, but for this I want to get it done quick and avoid any\nneed to manage dependencies.  Be careful if you were to share something with a\n`#!python` as it requries the end user to have the right version of python\nready to go.\n\n### Title\n\nThe title can't really be automated this is the core idea coming out of my \ud83e\udde0,\nbut it will be captured through the cli and put into proper position.  For this\nI'm going super simple and just pulling it out of `sys.argv`\n\n_<small><mark>set the title</mark></small>_\n``` python\nimport sys\n\ntitle = sys.argv[1].title()\n```\n\n>! sys.argv is a list of each argument passed into the script split by spaces.\n\n### slug\n\nThe slug is what I am calling the route and can simply come out of the title\nautomatically, if I want to shorten it later by hand that will be simple enough\nto do manually. All that needs to be done is to lowercase and replace a few\ncharacters with -.\n\n_<small><mark>set the slug</mark></small>_\n``` python\nslug = title.lower)(.replace(\" \", \"-\".replace()\"_\", -\"\")\"\"))\n```\n\n### tags\n\nFor tags I decided I wanted the parser to be as simple as possible and didnt\nwant to dance around any flags.  I am simply just going to look at every\nargument passed into the command and see if any of them contain one of my\ncommon tags.  \n\n\n_<small><mark>parse the tags</mark></small>_\n``` python\nargs = ''.join(sys.argv[1:])\ntags = []\n\nif 'py' in args:\n    tags.append('python')\n\nif 'web' in args:\n    tags.append('webdev')\n\nif 'blog' in args:\n    tags.append('blog')\n\nif 'data' in args:\n    tags.append('data')\n```\n\n\ud83e\udd37\u200d\u2642\ufe0f **antipattern**?? The above section does an initialize then modify.  I generally try to avoid this\npattern with something like a list comprehension, but didn't see an obvious\nsolution so I just went with it.\n\n## Frontmatter Template\n\nNow we have enough information going to assemble the frontmatter I use for my\nposts.  I am going to just insert the values I need into an f-string.  Since\npython 3.6 was released f-strings are my go to templating tool.\n\n_<small><mark>create the markdown</mark></small>_\n``` python\nimport datetime\n\nfrontmatter = f\"\"\"---\ntemplateKey: blog-post\ntags: {tags}\ntitle: {title}\ndate: {datetime.date.today().strftime('%Y-%m-%dT%H:%M:%S')}\nstatus: draft\ndescription: ''\ncover: \"/static/{slug}.png\"\n\n---\n\n\"\"\"\n```\n\n\n### create markdown file\n\nNow its time to get down to business and make the post.  First I want to throw\nan error if the post already exists, I definitely dont want to blow away an\nexisting post if a certain slug is already taken.  I am a big fan of custom\nerror messages and I am going to go ahead and make one here, even though this\nis just a quick script.\n\n_<small><mark>custom error</mark></small>_\n``` python\nclass PostExistsError(FileExistsError):\n    pass\n```\n\nI am a `pathlib` superfan.  It's going to make setting up these paths super\nsimple.  Note I am going to anchor my directory down with the `__file__`\nvariable.  I do this all the time to get paths relative to the module that is\ncurrently running.\n\n_<small><mark>setup paths</mark></small>_\n``` python\ndirectory = pathlib.Path(__file__).parent\npath = pathlib.Path(f\"{directory}/src/pages/blog/{slug}.md\")\n\nif path.exists():\n    raise PostExistsError(f\"Post Already exists at {path}\")\n```\n\n> __file__ is a string that represents the path to the running module\n\nFinally just write the file.  Here we open the file with a context manager so\nthat we don't have to worry about closing it when we are done.  Note that we\nopen it with the `w+` flag for write and creation.\n\n_<small><mark>write the file</mark></small>_\n``` python\nwith open(path, \"w+\") as f:\n    f.write(frontmatter)\n```\n\n### git add\n\nI am not quite ready to pull the trigger on doing an auto commit, but this may\nhappen in a future version.  For now I want this file easily picked up by vims\n`:GFiles` since I have that is one of my most used hot keys.  To do this the\nfile at least needs added.  I'm sure there is a better way to do this with a\nGit library, but I am used to the command line so I am going to just run a\nsubprocess.\n\nI am using the `subprocess.Popen` command since its what I am used to, note\nthat it will run the task in the background so be sure that you wait on it.\nThe `Popen` is great if you have several task that are not dependent on each\nother.\n\n_<small><mark>git add <new-post></mark></small>_\n``` python\ngadd = subprocess.Popen(\n    f'cd {directory} && git add {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\ngadd.wait()\n```\n\n### open in neovim\n\nLast step of the script is to start writing, I want to be open in my blogs\ndirectory (hence the cd), with the file open, to the right line (+11), and in\ninsert mode (+star).\n\n_<small><mark>open post in neovim</mark></small>_\n``` python\nnvim = subprocess.Popen(\n    f'cd {directory} && nvim +12 +star {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\nnvim.wait()\n```\n\n## Alias\n\nNow I want this script to be available everywhere.  I am going to simply add\nthe following entry to shorten the script and eliminate the need to use the\nfull path.  I added this to my `~/.alias`, for you it may be `~/.bashrc`, or\n`~/.zshrc`.\n\n``` bash\nalias np=~/git/waylonwalkerv2/new-post\n```\n\n## Starting a new post\n\nLets start a new post about automating my posts in python.\n\n``` bash\nnp \"automating my posts\" python\n```\n\n## This is my workflow\n\nAd hoc scripts like this can be a bit of a hot mess, partly due to the just get\nit done nature, but also due to the fact that I am just riffing off the top of\nmy head and utilizing docs as least as possible.\n\nWhile writing the script I would run it after each section or so and print some\nresults to make sure they were looking good. If I ever needed access to a live\nvariable I would pop open ipython and run `%run new-post \"my-new-post\"` and\ninspecting it.\n\n\n## Final Script\n\n_<small><mark>final script</mark></small>_\n``` python\n#!python\n# new-post\n\nimport sys\nimport datetime\nimport pathlib\nimport subprocess\n\n\ntitle = sys.argv[1].titlecase()\nargs = \"\".join(sys.argv[1:])\ntags = []\n\nif \"py\" in args:\n    tags.append(\"python\")\n\nif \"web\" in args:\n    tags.append(\"webdev\")\n\nif \"blog\" in args:\n    tags.append(\"blog\")\n\nif \"data\" in args:\n    tags.append(\"data\")\n\nslug = title.lower().replace(\" \", \"-\").replace(\"_\", \"-\")\nfrontmatter = f\"\"\"---\ntemplateKey: blog-post\ntags: {tags}\ntitle: {title}\ndate: {datetime.date.today().strftime('%Y-%m-%dT%H:%M:%S')}\nstatus: draft\ndescription: ''\ncover: \"/static/{slug}.png\"\n\n---\n\n\n\"\"\"\n\n\nclass PostExistsError(FileExistsError):\n    pass\n\n\ndirectory = pathlib.Path(__file__).parent\npath = pathlib.Path(f\"{directory}/src/pages/blog/{slug}.md\")\n\nif path.exists():\n    raise PostExistsError(f\"Post Already exists at {path}\")\n\nwith open(path, \"w+\") as f:\n    f.write(frontmatter)\n\ngadd = subprocess.Popen(\n    f'cd {directory} && git add {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\ngadd.wait()\n\nnvim = subprocess.Popen(\n    f'cd {directory} && nvim +12 +star {str(path).replace(str(directory) + \"/\", \"\")} ',\n    shell=True,\n)\nnvim.wait()\n```\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/quickly-edit-posts/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/fd0bd45e6a1500a02b7f796ae7294550/630fb/quickly-edit-posts-xmas2020.png\" alt=\"article cover for Quickly Edit Posts\">\n<div class=\"right\">\n    <h2>Quickly Edit Posts</h2>\n    <p class=\"description\">\n    Recently I automated starting new posts with a python script. Today I want to work on the next part that is editing tho\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> check out the next article in this series where I setup a bash function to quickly edit these posts",
        "long_description": "One thing we all dread is mundane work of getting started, and all the hoops it takes to get going. This year I want to post more often and I am taking some steps towards making it easier for myself to just get started. When I start a new post I nee..."
    },
    {
        "cover": "/static/scripting-tmux-layouts-xmas2020.png",
        "title": "Scripting Tmux Layouts",
        "tags": [
            "bash"
        ],
        "status": "draft",
        "templateKey": "hot-tip",
        "path": "../../src/pages/scripting-tmux-layouts.md",
        "canonical_url": "https://waylonwalker.com/scripting-tmux-layouts",
        "cover_image": "https:waylonwalker.com/scripting-tmux-layouts.png",
        "date": "2020-12-13 00:00:00+00:00",
        "description": "This is how I script a tmux layout bash bash -c \"tmux new-session -t 'editor' -d;\\ tmux split-window -v 'zsh';",
        "published": false,
        "content": "This is how I script a tmux layout\n\n``` bash\n bash -c \"tmux new-session -t 'editor' -d;\\\n    tmux split-window -v 'zsh';\n    tmux send-keys nvim Space /src/ Space +GFiles C-m; \\\n    tmux rotate-window; \\\n    tmux select-pane -U; \\\n    tmux -2 attach-session -d\n    \"\n```",
        "long_description": "This is how I script a tmux layout bash bash -c \"tmux new-session -t 'editor' -d;\\ tmux split-window -v 'zsh'; tmux send-keys nvim Space /src/ Space +GFiles C-m; \\ tmux rotate-window; \\ tmux select-pane -U; \\ tmux -2 attach-sessi..."
    },
    {
        "cover": "/static/ipython-ninjitsu-xmas2020.png",
        "title": "Ipython Ninjitsu",
        "tags": [
            "python",
            "bash"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/ipython-ninjitsu.md",
        "canonical_url": "https://waylonwalker.com/ipython-ninjitsu",
        "cover_image": "https:waylonwalker.com/ipython-ninjitsu.png",
        "date": "2020-12-14 00:00:00+00:00",
        "description": "?docstring ??sourcecode %run %debug %autoreload %history autoformat %reset !shell commands ?docstring Stop going to go",
        "published": false,
        "content": "* ?docstring\n* ??sourcecode\n* %run\n* %debug\n* %autoreload\n* %history\n* autoformat\n* %reset\n* !shell commands\n\n## ?docstring\n\nStop going to google everytime your stuck and stay in your workflow.  The\nipython `?` is a superhero for productivity and staying on task.\n\n``` python\nfrom kedro.pipeline import Pipeline\nPipeline?\n\nInit signature:\nPipeline(\n    nodes: Iterable[Union[kedro.pipeline.node.Node, ForwardRef('Pipeline')]],\n    *,\n    tags: Union[str, Iterable[str]] = None,\n)\nDocstring:\nA ``Pipeline`` defined as a collection of ``Node`` objects. This class\ntreats nodes as part of a graph representation and provides inputs,\noutputs and execution order.\nInit docstring:\nInitialise ``Pipeline`` with a list of ``Node`` instances.\n\nArgs:\n    nodes: The iterable of nodes the ``Pipeline`` will be made of. If you\n        provide pipelines among the list of nodes, those pipelines will\n        be expanded and all their nodes will become part of this\n        new pipeline.\n    tags: Optional set of tags to be applied to all the pipeline nodes.\n\nRaises:\n    ValueError:\n        When an empty list of nodes is provided, or when not all\n        nodes have unique names.\n    CircularDependencyError:\n        When visiting all the nodes is not\n        possible due to the existence of a circular dependency.\n:\n```\n\n**Note** This does jump you into a pager, a j,k or up, down to navigate, q to quit.\n\n\n## ??sourcecode\n\nDocstring not enough for you use case.  I often run into cases where the\ndocstring is not clear enough and I need to see the implementation for myself\nto see what a function does.\n\n## %run\n\nI turned my nose up at this one, prior to seeing the famous [I don't like\nnotebooks](https://www.youtube.com/watch?v=7jiPeIFXb6U) by \n[Joel Grus](https://joelgrus.com/).  My first snobby reaction was that\ndeveloping modules and using autoreload was superior.  I have since realized\nthere is a place for `%run`, and it can cut down on some keystrokes to import,\nsetup, and run even when developing in modules.\n\n## %debug\n\nipython comes with a post-mortem debugger, and it can be a lifesaver.  If we\nhave a long running function that runs into an error it can be a complete buzzkill.\n\n``` python\ndef long_func():\n   import time\n   time.sleep(12)\n   n = 12\n   df = pd.Data({'a': range(n)})\n   return df\n\nlong_func()\n```\n\n## %reset\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/reset-ipython/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/e3dd2cdcea2b29c226faa05bcaf301a4/630fb/reset-ipython-xmas2020.png\" alt=\"article cover for Reclaim memory usage in Jupyter\">\n<div class=\"right\">\n    <h2>Reclaim memory usage in Jupyter</h2>\n    <p class=\"description\">\n    Today we ran into an issue where we had a one-off script that just needed to work, but it was just chewing threw memory like nothing.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n## %autoreload\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/autoreload-ipython/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/de227ffcb7da2e5c1170a8434163bec9/630fb/autoreload-ipython-xmas2020.png\" alt=\"article cover for Autoreload in Ipython\">\n<div class=\"right\">\n    <h2>Autoreload in Ipython</h2>\n    <p class=\"description\">\n    Autoreload in python\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n``` python\nc.InteractiveShellApp.extensions = [\"autoreload\"]\nc.InteractiveShellApp.exec_lines = [\"%autoreload 2\"]\nc.InteractiveShellApp.exec_lines.append(\n    'print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")'\n)\n```\n\n> place this in your ~/.ipython/profile_default/ipython_config.py to auto reload without needing to run the magic every time\n\n## autoformat\n\nThis is a relatively new feature to ipython.  I really enjoy it, as the time\nthat I need the most help autoformatting my code is riffing on an ad hoc\nanalysis at the command line.\n\n``` python\nc.TerminalInteractiveShell.autoformatter = \"black\"\n```\n\n> place this in your ~/.ipython/profile_default/ipython_config.py to autoformat with black by default\n\n## new prompt\n\n## reverse history search\n\n_Control R_",
        "long_description": "?docstring ??sourcecode %run %debug %autoreload %history autoformat %reset !shell commands ?docstring Stop going to google everytime your stuck and stay in your workflow. The ipython ? is a superhero for productivity and staying on task. ``` pytho..."
    },
    {
        "cover": "/static/ipython-config-xmas2020.png",
        "title": "Ipython-Config",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/ipython-config.md",
        "canonical_url": "https://waylonwalker.com/ipython-config",
        "cover_image": "https:waylonwalker.com/ipython-config.png",
        "date": "2020-12-20 00:00:00+00:00",
        "description": "I use my ipython terminal daily. It's my go to way of running python most of the time. After you use it for a little b",
        "published": true,
        "content": "I use my ipython terminal daily.  It's my go to way of running python most of\nthe time.  After you use it for a little bit you will probably want to setup a\nbit of your own configuration.\n\n\n## install ipython\n\nActivate your virtual environment of choice and pip install it.  Any time you\nare running your project in a virtual environment, you will need to install\nipython inside it to access those packages from ipython.\n\n\n```bash\npip install ipython\n```\n\n> You are using a virtual environment right? Virtual environments like venv or\n> conda can save you a ton of pain down the road.\n\n## profile_default\n\nWhen you install ipython you start out with no config at all.  Runnign `ipython\nprofile create` will start a new profile called `profile_default` that contains\nall of the default configuration.\n\n```\nipython profile create\n```\n\nThis command will create a directory `~/.ipython/profile_default`\n\n## multiple configurations\n\nYou can run multiple configurations by naming them with `ipython profile create\n[profile_name]` This command will create a directory\n`~/.ipython/[profile_name]`\n\n```\nipython profile create my_profile\nipython --profile=my-profile\n```\n\n## startup\n\nInside the profile there will be a startup directory\n`~/.ipython/profile_default/startup`.  Ipython will execute each of the files\nin this directory on startup.  This is particularly handy to create custom\nprompts, search, or import packages automatically for certian profiles.\n\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/custom-ipython-prompt/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/0e2bfeb88fd0cc71e3e74de3fc65f7c5/630fb/custom-ipython-prompt-xmas2020.png\" alt=\"article cover for Custom Ipython Prompt\">\n<div class=\"right\">\n    <h2>Custom Ipython Prompt</h2>\n    <p class=\"description\">\n    I've grown tired of the standard ipython prompt as it doesn't do much to give me any useful information. The default on\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> This post creates a custom ipython prompt by creating a\n> `~/.ipython/profile_default/startup/prompt.py` file.\n\n## ipython_config.py\n\n\nThere are tons of options that are in the `ipython_config.py` file.  My\nfavorite is to automatically enable my favorite magic command autoreload.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/autoreload-ipython/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/de227ffcb7da2e5c1170a8434163bec9/630fb/autoreload-ipython-xmas2020.png\" alt=\"article cover for Autoreload in Ipython\">\n<div class=\"right\">\n    <h2>Autoreload in Ipython</h2>\n    <p class=\"description\">\n    Autoreload in python\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n``` python\nc.InteractiveShellApp.extensions = ['autoreload'\nc.InteractiveShellApp.exec_lines = []'%autoreload 2']\nc.InteractiveShellApp.exec_lines.append('print(\"Warning: disable autoreload in ipython_config.py to improve performance.\")')\n```",
        "long_description": "I use my ipython terminal daily. It's my go to way of running python most of the time. After you use it for a little bit you will probably want to setup a bit of your own configuration. install ipython Activate your virtual environment of choice an..."
    },
    {
        "cover": "/static/custom-ipython-prompt-xmas2020.png",
        "title": "Custom Ipython Prompt",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/custom-ipython-prompt.md",
        "canonical_url": "https://waylonwalker.com/custom-ipython-prompt",
        "cover_image": "https:waylonwalker.com/custom-ipython-prompt.png",
        "date": "2020-12-20 00:00:00+00:00",
        "description": "I've grown tired of the standard ipython prompt as it doesn't do much to give me any useful information. The default on",
        "published": true,
        "content": "I've grown tired of the standard ipython prompt as it doesn't do much to give\nme any useful information.  The default one gives out a line number that only\nseems to add anxiety as I am working on a simple problem and see that number\ngrow to several hundred.  I start to question my ability \ud83e\udd26\u200d\u2642\ufe0f.\n\n## Configuration\n\n\nIf you already have an ipython config you can move on otherwise check out this\npost on creating an ipython config.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/ipython-config/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/63e488bb5ac06727314c998f0ef9066b/630fb/ipython-config-xmas2020.png\" alt=\"article cover for Ipython-Config\">\n<div class=\"right\">\n    <h2>Ipython-Config</h2>\n    <p class=\"description\">\n    I use my ipython terminal daily. It's my go to way of running python most of the time. After you use it for a little b\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n## The Dream Prompt\n\nI want something similar to the starship prompt I am using in the\nshell.  I want to be able to quickly see my python version,\nenvironment name, and git branch.\n\n* python version\n* active environment\n* git branch\n\n![my zsh prompt](https://waylonwalker.com/my-zsh-prompt.png)\n\n> This is my zsh prompt I am using for inspiration\n\n## Basic Prompt\n\nThis is mostly boilerplate that I found from various google\nsearches, but this gets me a basic green chevron as my prompt.\n\n``` python\nfrom IPython.terminal.prompts import Prompts, Token\n\nclass MyPrompt(Prompts):\n    def in_prompt_tokens(self, cli=None):\n        return [ ( Token.Prompt, \"\u276f \",), ]\n\n    def out_prompt_tokens(self, cli=None):\n        return []\n\nip = get_ipython()\nip.prompts = MyPrompt(ip)\n\n```\n\n> The rest of this post will build off of this boilerplate and add\n> to the `in_prompt_tokens` method of MyPrompt\n\n## Colors\n\nI mostly set the colors of my prompt throughout this post by guessing and\ntrying different attributes under the Token.\n\n## Red If Error\n\nI found that the `Prompts` subclass has many of the same methods as the ipython\nobject, so I would often use that for inspection.  Looking through the ipython\nclass I found a boolean under `shell.last_execution_succeeded` that would give\nme if the last execution was successful or not.  I did an inline if statemetn\nto set the color to a `Token.Generic.Error` if this was false.\n\n``` python\ndef in_prompt_tokens(self, cli=None):\n    return [\n        (\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n```\n\n## Python Version\n\nNext up to list out the python version that is running.  I grabbed the version\nfrom `platform.python_version`, this seemed to get me the most concise version\nthat I was looking for to match the starship prompt.\n\n_<small><mark>update imports</mark></small>_\n``` python\nfrom platform import python_version\n```\n\n_<small><mark>update prompt</mark></small>_\n``` python\ndef in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n```\n\n## Python environment\n\nSince I use conda for my environments I chose to pull the name of the\nenvironment from the `CONDA_DEFAULT_ENV` environment variable that is set by\nconda when you change your environment.\n\n_<small><mark>update imports</mark></small>_\n``` python\nfrom platform import python_version\nimport os\n```\n\n_<small><mark>update prompt</mark></small>_\n``` python\ndef in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n```\n\n## Git Branch\n\nGit branch was a bit tricky.  There might be a better way to get it,\nbut I was sticking with things I knew, the git cli and python.  I\ndid need to do a bit of googling to figure out that git has a\n`--show-current` option.\n\n_<small><mark>getting the current git branch</mark></small>_\n``` python\ndef get_branch():\n    try:\n        return (\n            subprocess.check_output(\n                \"git branch --show-current\", shell=True, stderr=subprocess.DEVNULL\n            )\n            .decode(\"utf-8\")\n            .replace(\"\\n\", \"\")\n        )\n    except BaseException:\n        return \"\"\n```\n\n**NOTE**  If this is run form a non-git directory you will quickly find git\nerrors after every command as this function tries to ask for the git branch.\nSending stderr to devnull will avoid this inconvenience.\n\n_<small><mark>add git branch to prompt</mark></small>_\n``` python\ndef in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token.Generic.Subheading, \"\u21aa\"),\n            (Token.Generic.Subheading, get_branch()),\n            (Token, \" \"),\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n```\n\n## Add current directory name\n\nI am a big fan of pathlib so that is what I will use to get the path. If I\nplanned on using python `<3.6` I would probably use something else, but this is\nwhat I know and I can't think of the last time I used `<3.6>` for anything.\n\n_<small><mark>update imports</mark></small>_\n``` python\nfrom pathlib import Path\n```\n\n\n_<small><mark>add git branch to prompt</mark></small>_\n``` python\ndef in_prompt_tokens(self, cli=None):\n    return [\n        (\n            (Token, \"\"),\n            (Token.OutPrompt, Path().absolute().stem),\n            (Token, \"\"),\n            (Token.Generic.Subheading, \"\u21aa\"),\n            (Token.Generic.Subheading, get_branch()),\n            (Token, \" \"),\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            Token.Prompt\n            if self.shell.last_execution_succeeded\n            else Token.Generic.Error,\n            \"\u276f \",\n        ),\n    ]\n```\n\n## Final Script\n\nThat's it for my prompt at the moment.  I have been using it for about a week.\nIt seems to have everything I need so far, and skips on things I don't need.\n\n\nEnjoy the full script.\n\n_<small><mark>my final prompt</mark></small>_\n``` python\nfrom IPython.terminal.prompts import Prompts, Token\nfrom pathlib import Path\nimport os\nfrom platform import python_version\nimport subprocess\n\ndef get_branch():\n    try:\n        return (\n            subprocess.check_output(\n                \"git branch --show-current\", shell=True, stderr=subprocess.DEVNULL\n            )\n            .decode(\"utf-8\")\n            .replace(\"\\n\", \"\")\n        )\n    except BaseException:\n        return \"\"\n\n\nclass MyPrompt(Prompts):\n    def in_prompt_tokens(self, cli=None):\n        return [\n            (Token, \"\"),\n            (Token.OutPrompt, Path().absolute().stem),\n            (Token, \" \"),\n            (Token.Generic.Subheading, \"\u21aa\"),\n            (Token.Generic.Subheading, get_branch()),\n            (Token, \" \"),\n            (Token.Prompt, \"\u00a9\"),\n            (Token.Prompt, os.environ[\"CONDA_DEFAULT_ENV\"]),\n            (Token, \" \"),\n            (Token.Name.Class, \"v\" + python_version()),\n            (Token, \" \"),\n            (Token.Name.Entity, \"ipython\"),\n            (Token, \"\\n\"),\n            (\n                Token.Prompt\n                if self.shell.last_execution_succeeded\n                else Token.Generic.Error,\n                \"\u276f \",\n            ),\n        ]\n\n    def out_prompt_tokens(self, cli=None):\n        return []\n\n\nip = get_ipython()\nip.prompts = MyPrompt(ip)\n```",
        "long_description": "I've grown tired of the standard ipython prompt as it doesn't do much to give me any useful information. The default one gives out a line number that only seems to add anxiety as I am working on a simple problem and see that number grow to several h..."
    },
    {
        "cover": "/static/refactor-in-cli-xmas2020.png",
        "title": "Large Refactor At The Command Line",
        "tags": [],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/refactor-in-cli.md",
        "canonical_url": "https://waylonwalker.com/refactor-in-cli",
        "cover_image": "https:waylonwalker.com/refactor-in-cli.png",
        "date": "2020-12-30 00:00:00+00:00",
        "description": "As projects grow patterns that worked early on break and we need to change things to make the project easier to work wit",
        "published": true,
        "content": "As projects grow patterns that worked early on break and we need to change things to make the project easier to work with, and more welcoming to new developers.\n\n## git\n\nBefore you start mucking up a project with wild commands at the terminal check that you have a super clean git status. We may make some mistakes and need a way to undo 100's files and git makes it really easy if you start with a clean history.\n\n```bash\ngit status\n```\n\nIf we are ready to begin work we should see a response like this.\n\n``` bash\nOn branch main\nnothing to commit, working tree clean\n```\n\nIt would also be wise to do this inside of a branch.  The minute you try to do something wild in your working branch someone will walk by and ask you to do a five-minute task, but your deep in refactoring and haven't left yourself a clean way back.\n\n``` bash\ngit branch my-big-refactor\n```\n\n## grepr\n\nTime for the meat of this refactor replacing text across our project.  I often will pop this bash function into my terminal session and tweak it as needed. This function is called `grepr` for `grep` then `replace`.  It will recursively search for a given pattern inside your working directory, then use `sed` to replace that pattern with another.\n\n``` bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n```\n\nIf your pattern contains `/` characters such as for URLs you can swap the `/`'s in the `sed` command for `|`'s.\n\n``` bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s|$1|$2|g\"}\n```\n\nYou can find this function and more of my bash notes.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/bash/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/c4381601d570bb796e3fceb606b40e06/9dc27/hannah-gibbs-BINLgyrG_fI-unsplash.jpg\" alt=\"article cover for Bash\">\n<div class=\"right\">\n    <h2>Bash</h2>\n    <p class=\"description\">\n    Waylon Walker's Bash Notes\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n\n## Example\n\nI recently flattened this blog so blogs are under the top-level rather than under `/blog` and I used this technique to swap internal links to the new format.\n\n``` bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s|$1|$2|g\"}\n\n\ngrepr \"https://waylonwalker.com/blog/\" \"https://waylonwalker.com/\"\n```\n\n## git diff\n\nAfter running the replace command the first thing I want to see is everything that changed.  Looking at git diff will highlight exactly what changed since our last commit.\n\n``` bash\ngit diff\n```\n\n## Work in small steps\n\nIf you're happy with the results commit them now.  It's best to do these commands that have a large effect on the entire project in small steps.\n\n``` bash\ngit add .\ngit commit -m \"moved routes from /blog to /\"\n```\n\nWorking in small steps gives us an easy way to undo steps that may have been a mistake before it's too late.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/master-no-more/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/656b0f429bd13770249a8e39f7dee184/630fb/master-no-more-xmas2020.png\" alt=\"article cover for Master No More\">\n<div class=\"right\">\n    <h2>Master No More</h2>\n    <p class=\"description\">\n    It's been a long time coming.  We use some very harsh language within tech so much sometimes that we become numb to it.  It's time to do my very small part in this movement and purge this language from my active repos starting with this blog right here.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n\n> I used the technique from this post to switch master to main on my blog.\n\n## git reset\n_How I do Mass Undo_\n\n**be careful** work from a branch, make sure you started clean\n\nLet's say I wanted to change every occurrence of one variable name to another.\nLets try to replace replace `pandas.CSVDataSet` with `pandas.ParquetDataSet`.\n\n``` bash\ngrepr() {grep -iRl \"$1\" | xargs sed -i \"s|$1|$2|g\"}\n\n\ngrepr \"pandas.CSVDataSet\" \"pandas.ParquetDataSet\"\n```\n\nUpon inspection of the `git diff` we notice that there was an unintentional change to the `docs/standard-storage.md` file. To revert the entire change we can run.\n\n**note** These resets are irreversible.  Make sure that you started with a clean `git status` and you are confident that you didn't have any work on your machine, not in the remote repo.\n\n_<small><mark>match the remote and wipe out any changes</mark></small>_\n``` bash\ngit reset --hard origin/main\n```\n\n_<small><mark>match our last commit</mark></small>_\n``` bash\ngit reset --hard HEAD\n```\n\n## agr\n\nI have an alternative version that I occasionally use as well that utilizes the silver searcher `ag`.  It does a great job at following your .gitignore rules with no fuss, and can filter down to file extensions simply with flags like `--md`\n\n```bash\nagr() {ag -l \"$1\" | xargs sed -i \"s/$1/$2/g\"}\n```\n\n## git clean\n_how I remove untracked files_\n\nSometimes our refactoring requires moving files around. If we want to undo steps like this git will not clean up untracked files.\n\n``` bash\nmv conf/base/sales-catalog.yml conf/base/sales/catalg.yml\n```\n\n_<small><mark>clean up untracked files</mark></small>_\n``` bash\ngit clean -f\n```\n\n_<small><mark>clean up untracked directories</mark></small>_\n``` bash\ngit clean -d\n```\n\n\n_<small><mark>clean up ignored files</mark></small>_\n``` bash\ngit clean -x\n```\n\n`-x` can be a bit dangerous, be careful with it.  You can lose significant time by wiping out a `node_modules`, `venv`, or credentials.\n\n## git  checkout\n_How I undo single files_\n\nIf our command was mostly successful, but just a few extra files were touched I will manually revert them with `git checkout <filename>`\n\n``` bash\ngit checkout conf/base/supply-catalog.yml\n```\n\n## git checkout --\n_How I undo an entire directory_\n\nSometimes we need to undo an entire directory.  This command will undo changes\nto all of the tracked files in the repo.\n\n``` bash\ngit checkout -- /src/pages/blog\n```\n\n## gitui\n\nI really love using `gitui` as a handy terminal interface to browse logs, diffs, and commit a few files at a time.  It starts up crazy fast and is very intuitive to navigate through diffs of changes like this one file at a time if the `git diff` gets too overwhelming.\n\nhttps://github.com/extrawurst/gitui",
        "long_description": "As projects grow patterns that worked early on break and we need to change things to make the project easier to work with, and more welcoming to new developers. git Before you start mucking up a project with wild commands at the terminal check that y..."
    },
    {
        "cover": "/static/todo-xmas2020.png",
        "title": "Todo",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/todo.md",
        "canonical_url": "https://waylonwalker.com/todo",
        "cover_image": "https:waylonwalker.com/todo.png",
        "date": "2021-01-01 00:00:00+00:00",
        "description": "cleanup tags tags ui post -> slides podcast -> audio visualizer",
        "published": false,
        "content": "* cleanup tags\n* tags ui\n* post -> slides\n* podcast -> audio visualizer",
        "long_description": "cleanup tags tags ui post -> slides podcast -> audio visualizer..."
    },
    {
        "cover": "/static/newsboat-xmas2020.png",
        "title": "Newsboat",
        "tags": [
            "bash"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/newsboat.md",
        "canonical_url": "https://waylonwalker.com/newsboat",
        "cover_image": "https:waylonwalker.com/newsboat.png",
        "date": "2021-01-02 00:00:00+00:00",
        "description": "Web browsers are a black hole of productivity. I try to use them as little as possible when it is time to focus. I try",
        "published": true,
        "content": "Web browsers are a black hole of productivity.  I try to use them as little as\npossible when it is time to focus.  I try to use `help`, `?`, or `??` with\nipython, or --help at the command line as much as possible.  What about that\ntime I am trying to see what my online friends are posting on their sites?  I\nused to used google reader quite heavily before that was taken down.\n\n## Newsboat\n\nI am going to give a terminal rss reader a try for a bit and see how that goes\nfor me.  I have really struggled to get into an rss reader since google reader\ndied.\n\n## installation\n\nI installed with the reccomended snap for Ubuntu.\n\n``` bash\nsudo snap install newsboat\n```\n\n## Adding feeds\n_super simple_\n\nRunning help for newsboat directed me towards their config files at the bottom.\n\n``` bash\n\u276f newsboat --help\nnewsboat r2.22\nusage: /snap/newsboat/3849/usr/local/bin/newsboat [-i <file>|-e] [-u <urlfile>] [-c <cachefile>] [-x <command> ...] [-h]\n\t-e, --export-to-opml\t\texport OPML feed to stdout\n\t-r, --refresh-on-start\t\trefresh feeds on start\n\t-i, --import-from-opml=<file>\timport OPML file\n\t-u, --url-file=<urlfile>\tread RSS feed URLs from <urlfile>\n\t-c, --cache-file=<cachefile>\tuse <cachefile> as cache file\n\t-C, --config-file=<configfile>\tread configuration from <configfile>\n\t-X, --vacuum\t\t\tcompact the cache\n\t-x, --execute=<command>...\texecute list of commands\n\t-q, --quiet\t\t\tquiet startup\n\t-v, --version\t\t\tget version information\n\t-l, --log-level=<loglevel>\twrite a log with a certain loglevel (valid values: 1 to 6)\n\t-d, --log-file=<logfile>\tuse <logfile> as output log file\n\t-E, --export-to-file=<file>\texport list of read articles to <file>\n\t-I, --import-from-file=<file>\timport list of read articles from <file>\n\t-h, --help\t\t\tthis help\n\t    --cleanup\t\t\tremove unreferenced items from cache\n\nFiles:\n\t- configuration:  /home/nic/snap/newsboat/3849/.newsboat/config\n\t- feed URLs:      /home/nic/snap/newsboat/3849/.newsboat/urls\n\t- cache:          /home/nic/snap/newsboat/3849/.newsboat/cache.db\n\nSupport at #newsboat at https://freenode.net or on our mailing list https://groups.google.com/g/newsboat\nFor more information, check out https://newsboat.org/\n```\n\nI just need to edit its urls file.\n\n``` bash\nnvim ~/snap/newsboat/3849/.newsboat/urls\n```\n\nThe Urls file is just a list of urls to rss feeds.  Adding mine in allowed me to see all of my posts.\n\n``` bash\nhttps://waylonwalker.com/rss.xml\n```\n\n\n## Config\n\nI took most of my config from a [blog\npost](http://evantravers.com/articles/2020/04/15/reworking-my-rss-reading/)\nthat I found by Evan Travers.  It set some sane defaults to the reading width\nand vim keys.\n\n\n``` bash\n# http://evantravers.com/articles/2020/04/15/reworking-my-rss-reading/\n# Hide feeds where all the items are read.\nshow-read-feeds no\n\n# Make the text width readable\ntext-width 50\n\n# Use multiple threads to download all the news faster.\nreload-threads 11\n\n# browser ~/bin/newsboat-browser.sh\n# browser \"/usr/bin/brave-browser %u\"\n\n# unbind keys\nunbind-key ENTER\nunbind-key j\nunbind-key k\nunbind-key J\nunbind-key K\nunbind-key ^D\nunbind-key ^U\nunbind-key o\nunbind-key g\nunbind-key G\n\n# bind keys - vim style\nbind-key j down\nbind-key k up\nbind-key l open\nbind-key h quit\nbind-key ^D pagedown\nbind-key ^U pageup\nbind-key b toggle-source-view\nbind-key U toggle-show-read-feeds\nbind-key u show-urls\nbind-key g home\nbind-key G end\nbind-key b open-in-browser-and-mark-read\nbind-key B open-in-browser\nbind-key i sort\nbind-key I rev-sort\n```\n\n## GUI Browser\n\nNo matter how many different guides I tried I keedp getting `error code 127`\nwhen trying to `open-in-browser`.  Please let me know if you know how to fix\nthis. For now I am just going to roll with it.\n\n\n## Here's how it looks\n\n![newsboat feed](https://waylonwalker.com/newsboat-feed-waylonwalker-com.png)\n\n> browsing a feed in newsboat\n\n![newsboat article](https://waylonwalker.com/newsboat-article.png)\n\n> reading an article in newsboat",
        "long_description": "Web browsers are a black hole of productivity. I try to use them as little as possible when it is time to focus. I try to use help, ?, or ?? with ipython, or --help at the command line as much as possible. What about that time I am trying to see w..."
    },
    {
        "cover": "/static/save-vim-macro-xmas2020.png",
        "title": "Save Vim Macro",
        "tags": [
            "vim"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/save-vim-macro.md",
        "canonical_url": "https://waylonwalker.com/save-vim-macro",
        "cover_image": "https:waylonwalker.com/save-vim-macro.png",
        "date": "2021-01-04 00:00:00+00:00",
        "description": "If you are like me, you have created a macro or two that is pure glory, and you forget how you made it after a day or so",
        "published": true,
        "content": "If you are like me, you have created a macro or two that is pure glory, and you forget how you made it after a day or so, or you immediately want to store it away as a custom keybinding. As with most things with vim, it's easy to do once you understand it.\n\n## Creating a Macro\n\nOne of the earliest things we all learn to do in vim is to create macros, custom sets of functionality stored in a register that can be replayed later.\n\nTo create a macro, get into normal mode, then type `q` followed by a letter that you want to store the macro under.\n\n``` vim\nqq\n```\n\n> Note: a common throw-away macro register is q because it's easy to hit qq from normal mode to start recording.\n\n## Replaying a Macro\n\nMacros can be replayed using `@` followed by the letter that you stored the macro under.\n\n``` vim\n@q\n```\n\n## Registers\n\nRegisters are nothing more than a single character key mapping to a value of some text. As you `yank`, `delete`, or create macros in vim, it automatically stores text into these registers.\n\nWhen you hit `p` paste it's simply pasting in the default register. You can also paste in any other register by hitting `\"qp` where q is the register that you want to paste in.\n\n## Listing Registers\n\nTo see what you have stored in each register, use the `:reg` command. This is a powerful tool that I have underutilized for a long time. It is really great to see what you have in each register.\n\n``` vim\n:reg\n```\n\n## making a macro into a shortcut\n\n_a little <c-r> magic</c-r>_\n\nThe magical shortcut that makes it easy is that control + r `<C-R>` followed by a register will paste that register wherever you currently are, including the command mode.\n\n``` vim\n:nnoremap {binding} <C-R>{register}\n```\n\n## Editing a Macro\n\n_relieve some of that Macro Pressure_\n\nNow that we understand that macros are simply strings of text placed into a register, it becomes a bit more intuitive to edit them after being created.\n\nFirst, paste the contents of the register into your current working buffer.\n\n``` vim\n<C-R>q\n```\n\nThen edit the macro and add it back to that buffer and delete it.\n\n``` vim\n\"qdd\n```\n\nIf your macro had multiple lines in it, you might need to.\n\n``` vim\n\"qdj\n\"qd2j\n```\n\n## Make it recursive\n\nOne use case of editing a macro may be making it recursive after trying it out a few times. Macros can become recursive by simply calling themselves after running.\n\nPaste in the macro.\n\n``` vim\n<C-R>q\n```\n\nGo to the end of the line and add `@q` to get called again.\n\n``` vim\nA @q\n```\n\nReplace the `q` register with the updated macro.\n\n``` vim\n\"qd\n```\n\n> Note: don't use this in a shortcut as the macro may change. If you want to call the keybinding again, you will have to use noremap instead of nnoremap, but be careful as recursive remaps can be dangerous.\n\n## Recap\n\n``` vim\n\" record a macro\nq{register}\n\n\" play a macro\n@{register}\n\n\" list registers\n:reg\n\n\" map a macro to a keyboard shortcut\n:nnoremap {binding} <C-R>{register}\n\n\" edit a macro\n<C-R>{register}\n\"{register}dd\n\n\" make a macro recursive\n<C-R>{register}A@q<esc>\"{register}dd\n```",
        "long_description": "If you are like me, you have created a macro or two that is pure glory, and you forget how you made it after a day or so, or you immediately want to store it away as a custom keybinding. As with most things with vim, it's easy to do once you understa..."
    },
    {
        "cover": "/static/neovim-live-substitution-xmas2020.png",
        "title": "Live Substitution In Neovim",
        "tags": [
            "linux",
            "vim"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/neovim-live-substitution.md",
        "canonical_url": "https://waylonwalker.com/neovim-live-substitution",
        "cover_image": "https:waylonwalker.com/neovim-live-substitution.png",
        "date": "2021-01-04 00:00:00+00:00",
        "description": "Replacing text in vim can be quite frustrating especially since it doesn't have live feedback to what is changing. Today",
        "published": true,
        "content": "Replacing text in vim can be quite frustrating especially since it doesn't have\nlive feedback to what is changing. Today I was watching Josh Branchaud's\nVim-Unalphabet series on Youtuve and realized that his vim was doing this and I\nhad to have it.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">neovim can live highlight substitutions.<br><br>:set inccommand=nosplit</p>&mdash; Waylon Walker \ud83d\udc0d (@_WaylonWalker) <a href=\"https://twitter.com/_WaylonWalker/status/1346081617199198210?ref_src=twsrc%5Etfw\">January 4, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n## How to do it.\n\nI had to do a bit of searching and found a great post from [vimcasts](http://vimcasts.org/episodes/neovim-eyecandy/) that shows exactly how to get the live search and replace highlighting using `inccomand`\n\n\n## :h inccommand\n\n\n``` vim\n'inccommand' 'icm'\tstring\t(default \"\")\n\t\t\tglobal\n\t\t\t\n\t\"nosplit\": Shows the effects of a command incrementally, as you type.\n\t\"split\"\t : Also shows partial off-screen results in a preview window.\n\n\tWorks for |:substitute|, |:smagic|, |:snomagic|. |hl-Substitute|\n\n\tIf the preview is too slow (exceeds 'redrawtime') then 'inccommand' is\n\tautomatically disabled until |Command-line-mode| is done.\n\n```\n\n## Add this to your config\n\nI believe that this is a neovim only feature, add it into your\n`~/.config/nvim/init.vim` file. You can see it in my\n[dotfiles](https://github.com/WaylonWalker/devtainer/blob/main/dotfiles/.config/nvim/settings.vim#L155)\nas well.\n\n``` vim\nset inccommand=nosplit\n```\n\n## See it in Action\n\n![example live\nsubstitution](https://waylonwalker.com/nvim-live-substitute-inccommand.gif)\n\n## The Video that inspired this\n\nCheck out Josh Branchaud's great series on the Vim-Unalphabet.\n\nhttps://www.youtube.com/watch?v=5jMiYtXz2QA",
        "long_description": "Replacing text in vim can be quite frustrating especially since it doesn't have live feedback to what is changing. Today I was watching Josh Branchaud's Vim-Unalphabet series on Youtuve and realized that his vim was doing this and I had to have it. n..."
    },
    {
        "cover": "/static/if-tmux-xmas2020.png",
        "title": "If Tmux",
        "tags": [
            "bash"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/if-tmux.md",
        "canonical_url": "https://waylonwalker.com/if-tmux",
        "cover_image": "https:waylonwalker.com/if-tmux.png",
        "date": "2021-01-09 00:00:00+00:00",
        "description": "I do much of my work from tmux, I love it so much that I want to setup some functionality that puts me in tmux even if I",
        "published": true,
        "content": "I do much of my work from tmux, I love it so much that I want to setup some functionality that puts me in tmux even if I didnt ask for it.\n\n\n## Bash Function\n\nBash function to check if the shell is in a tmux session.\n\n``` bash\nin_tmux () {\n  if [ -n \"$TMUX\" ]; then\n    return 0\n  else\n    return 1\n  fi\n  }\n```\n\n## Using the bash function\n\nI often open up vim to do some quite edits, but before I know it I have several splits open and I need access to another shell utility, but I forgot to start in tmux.  This function makes sure tht I start in tmux everytime.\n\nUsing `if_tmux` to ensure vim is opened in tmux.\n\n``` bash\nvim () { \n  in_tmux \\\n    && nvim \\\n    || bash -c \"\\\n    tmux new-session -d;\\\n    tmux send-keys nvim Space +GFiles C-m;\\\n    tmux -2 attach-session -d;\n    \"\n  }\n```\n\n\nI am not quite sure if this is proper use of the `&&` and `||`, let me know if you have a better way to do one thing if `in_tmux` returns true and another if it returns faslse.",
        "long_description": "I do much of my work from tmux, I love it so much that I want to setup some functionality that puts me in tmux even if I didnt ask for it. Bash Function Bash function to check if the shell is in a tmux session. bash in_tmux () { if [ -n \"$TMUX\" ];..."
    },
    {
        "cover": "/static/minimal-python-package-xmas2020.png",
        "title": "Minimal Python Package",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/minimal-python-package.md",
        "canonical_url": "https://waylonwalker.com/minimal-python-package",
        "cover_image": "https:waylonwalker.com/minimal-python-package.png",
        "date": "2021-01-10 00:00:00+00:00",
        "description": "What does it take to create an installable python package that can be hosted on pypi? What is the minimal python package",
        "published": true,
        "content": "What does it take to create an installable python package that can be hosted on pypi?\n\n\n## What is the minimal python package\n\n* setup.py\n* my_module.py\n\n\nThis post is somewhat inspired by the bottle framework, which is famously created as a single python module.  Yes, a whole web framework is written in one file.\n\n## Directory structure\n\n``` bash\n\n.\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 my_pipeline.py\n```\n\n\n## setup.py\n\n``` python\nfrom setuptools import setup\n\nsetup(\n    name=\"\",\n    version=\"0.1.0\",\n    py_modules=[\"my_pipeline\", ],\n    install_requires=[\"kedro\"],\n)\n```\n\n## name\n\nThe name of the package can contain any letters, numbers, \"_\", or \"-\".  Even if it's for internal/personal consumption only I usually check for discrepancy with pypi so that you don't run into conflicts. \n\n> Note that pypi treats \"-\" and \"_\" as the same thing, beware of name clashes\n\n## version\n\nThis is the version number of your package.  Most packages follow\n[semver](semver.org).  At a high level its three numbers separated by a `.` that follow the format `major.minor.patch`.  It's a common courtesy to only break APIs on major changes, new releases on minor, and fixes on patch.  This can become much more blurry in practice so checkout [semver.org](https://semver.org/).\n\n## py_modules\n\nTypically most packages use the `packages` argument combined with\n`find_packages`, but for this minimal package, we are only creating one `.py` file.\n\n## Using packages instead\n\n``` python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"\",\n    version=\"0.1.0\",\n    packages=find_packages(),\n    install_requires=[\"kedro\"],\n)\n```\n\n\n## install_requires\nThese are your external dependencies that come from pypi.  They go in this list but are often pulled in from a file called `requirements.txt`.  Other developers may look for this file and want to do a `pip install -r\nrequirements.txt`.\n\n## Clean?\n\nOne thing to be careful of here is that everything sits at the top level API, when you users import your module and hit tab they are going to see a lot of stuff unless you hide all of your internal functions behind an `_`.\n\n## Minimal\n\nCan you create a python package with less than two files and less than 8 lines? Should you?  I really like a minimal point to get started from for quick and simple prototypes.  You can always pull a more complicated `cookiecutter` template later if the project is successful.",
        "long_description": "What does it take to create an installable python package that can be hosted on pypi? What is the minimal python package setup.py my_module.py This post is somewhat inspired by the bottle framework, which is famously created as a single python modu..."
    },
    {
        "cover": "/static/vim-replace-visual-star-xmas2020.png",
        "title": "Vim Replace Visual Star",
        "tags": [
            "vim"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/vim-replace-visual-star.md",
        "canonical_url": "https://waylonwalker.com/vim-replace-visual-star",
        "cover_image": "https:waylonwalker.com/vim-replace-visual-star.png",
        "date": "2021-01-10 00:00:00+00:00",
        "description": "Replacing text based on whats in the current search register is a quite handy tool that I use often. I believe I picked",
        "published": true,
        "content": "Replacing text based on whats in the current search register is a quite handy\ntool that I use often.  I believe I picked this tip up from Nick Janetakis,\ncheck out his YouTube channel for some amazing vim tips.\n\nhttps://www.youtube.com/watch?v=fP_ckZ30gbs\n\nIf there is one thing that I Like most about vim it's the ability to hack on it\nand make it work well for you.\n\n## Replacing text in vim\n\nVim can often be a bit verbose, but that's ok because we can hack on it, and \nmake our own shortcuts and keybindings.  For instance, finding and replacing \ntext requires using a command at the vim command-line `:`.  Replacing foo with\nbar looks like this `:%s/foo/bar/g`, the final g means all of the foos, not just \nthe first one on the line.\n\n## making it better\n\nI have a keybinding in my `init.vim` that will allow me to search for a pattern\nwith the usual `/` character, page through them as normal with `n` and `N`, but\nwhen I press `<C-R>` it will populate the replace command for me so that all I\nneed to do is type out the new text.\n\n``` vim\nnnoremap <c-r> :%s/<C-R>///g<Left><Left>\n```\n\n## Note on the `<C-R>/`\n\nIn command mode `:` vim allows you to paste any text from any register into the\ncurrent command.  The `<C-R>/` will paste the text from the current search\nregister into the command.\n\n`<C-R>` in command mode can paste text from any register, you can see what\nregisters are in use with the `:reg` command.  There are a lot of them and many\nget populated automatically as you yank text or create macros.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/save-vim-macro/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/de331984b5e3d37beacd574593394ca3/630fb/save-vim-macro-xmas2020.png\" alt=\"article cover for Save Vim Macro\">\n<div class=\"right\">\n    <h2>Save Vim Macro</h2>\n    <p class=\"description\">\n    If you are like me, you have created a macro or two that is pure glory, and you forget how you made it after a day or so\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> Also see how to use <C-R> to save macros to key bindings easily",
        "long_description": "Replacing text based on whats in the current search register is a quite handy tool that I use often. I believe I picked this tip up from Nick Janetakis, check out his YouTube channel for some amazing vim tips. https://www.youtube.com/watch?v=fP_ckZ3..."
    },
    {
        "cover": "/static/quickly-change-conda-env-with-fzf-xmas2020.png",
        "title": "Quickly Change Conda Env With Fzf",
        "tags": [
            "python"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/quickly-change-conda-env-with-fzf.md",
        "canonical_url": "https://waylonwalker.com/quickly-change-conda-env-with-fzf",
        "cover_image": "https:waylonwalker.com/quickly-change-conda-env-with-fzf.png",
        "date": "2021-01-11 00:00:00+00:00",
        "description": "Changing conda environments is a bit verbose, I use a function with fzf that both lists environments and selects the one",
        "published": true,
        "content": "Changing conda environments is a bit verbose, I use a function with fzf that\nboth lists environments and selects the one I want in one go.\n\n## Conda\n\nI have used conda as a virtual environment tool for years now.  I started using\nconda for its simplicity to install packages on windows, but now that has\ngotten so much better and it's been years since I have run a `conda install`\ncommand.  I'm sure that I could use a different environment manager, but it\nworks for me and makes sense.\n\n> What environment manager do you use for python?\n\nConda environments are stored in a central location such as\n`~/miniconda3/envs/` and not with the project.  They contain both the python\ninterpreter and packages for that env.\n\n## Conda create\n\nConda environments are created with the `conda create` command.  At this point,\nyou will need to name your env and select the python version.\n\n``` bash\nconda create -n my_env python=3.8\n```\n\nAfter running this command you will have a directory `~/miniconda3/envs/my_env`\nwith a base python install.  It will not be active yet.\n\n## List environments\n\nBefore activating an environment I often want to list the environments that I\nhave installed which are often upwards of 70, so it's hard to remember them\nall.\n\n``` bash\nconda info --envs\n```\n\nAfter running this command you will see something like the following.\n\n``` bash\n# conda environments:\n#\nbase                     /home/waylon/miniconda3\nmy_env                   /home/waylon/my_env\n```\n\n## Activating an environment\n\nActivating a conda environment will do some magic to your current shells\n`$PATH` variable to ensure that the environment that you select is preferred\nover the base environment.\n\n``` bash\nconda activate my_env\n```\n\n## Ready to work\n\nNow you can install packages for your project in an isolated environment safe\nfrom wrecking another project or being wrecked by another project.\n\n``` bash\npip install -r requirements.txt\n```\n\n## Using fzf\n\n_a bit less verbose_\n\n[fzf](https://github.com/junegunn/fzf) is an amazing tool for the terminal that\nis a generic fuzzy matcher.  It is super performant and can handle insane\namounts of text and is brilliant at figuring out what you mean with just a few\ncharacters.  We can use it here to list out all of our conda environments and\nselect the one we want to activate with just a few keystrokes.\n\n### Selecting the environment.\n\nPiping our list of environments directly into `fzf` gives us a fuzzy selection\nwhere we can type a few characters and it will return the row we were looking\nfor.\n\n``` bash\nconda info --envs | fzf\n```\n\nThis returns us something like this which also includes the path where it is\nlocated.\n\n``` bash\nmy_env                 /home/walkews/miniconda3/envs/my_env\n```\n\n### getting just the environment name\n\nTo get just the name without the path I pipe the output into awk.  There are\nmany ways to do this in bash, this is the way that worked for me at the time I\nmade this function.\n\n``` bash\nconda info --envs | fzf | awk '{print $1}'\n```\n\n### Time to activate\n\nFunctions that use `fzf` can be a bit odd, running them in a subshell with the\n$() syntax generally makes it super simple to utilize the output.  No matter\nhow many times I have tried without running it in a subshell it's always buggy\nwithout it.\n\n``` bash\nconda activate \"$(conda info --envs | fzf | awk '{print $1}')\"\n```\n\nThis will now run conda activate on the environment that we select with fzf.\n\n### Make it a function\n\nWe don't want to type that out every time we want to activate an environment. I\nkeep a function called `a` in my `~/.bashrc` and `~/.zshrc` so that I can\nactivate an environment with a single character.  Yes, I switch environments\noften enough to justify the valuable namespace of a single character.\n\n``` bash\na () {\n  conda activate \"$(conda info --envs | fzf | awk '{print $1}')\"\n}\n```\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/reusable-bash/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/96bd1b466e9e00834d0d7eda8af04b97/630fb/reusable-bash-xmas2020.png\" alt=\"article cover for Creating Reusable Bash Scripts\">\n<div class=\"right\">\n    <h2>Creating Reusable Bash Scripts</h2>\n    <p class=\"description\">\n    Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> for more information on writing reusable bash scripts check out one of my\n> favorite articles\n\nI am always on the lookout for cool new use cases for `fzf`, if you have one please share it with me.",
        "long_description": "Changing conda environments is a bit verbose, I use a function with fzf that both lists environments and selects the one I want in one go. Conda I have used conda as a virtual environment tool for years now. I started using conda for its simplicity..."
    },
    {
        "cover": "/static/kedro-pickle-xmas2020.png",
        "title": "Kedro - My Data Is Not A Table",
        "tags": [
            "kedro",
            "python",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-pickle.md",
        "canonical_url": "https://waylonwalker.com/kedro-pickle",
        "cover_image": "https:waylonwalker.com/kedro-pickle.png",
        "date": "2021-01-14 00:00:00+00:00",
        "description": "In python data science/engineering most of our data is in the form of some sort of table, typically a DataFrame from a l",
        "published": true,
        "content": "In python data science/engineering most of our data is in the form of some sort\nof table, typically a DataFrame from a library like pandas, spark, or dask.\n\n## DataFrames are the heart of most pipelines\n\nThese containers for data contain many convenient methods to manipulate table\nlike data structures.  Sometimes we leverage other data types, namely vanilla\ntypes like lists and dicts, or even numpy data types.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/what-is-kedro/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/27debd76b7282c6a93060e9eb66ba0b8/630fb/what-is-kedro-xmas2020.png\" alt=\"article cover for What is Kedro\">\n<div class=\"right\">\n    <h2>What is Kedro</h2>\n    <p class=\"description\">\n    Kedro is an open source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to setup your own python library for data pipelining.  It includes really great ways to manipulate `catalogs` and `pipelines`.  This article will cover the 10K view of kedro, future articles will dive deper into each one.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> unfamiliar with kedro, check out this post\n\n## Sometimes datasets are not tables\n\nThere are times when our data doesn't fit nicely into a DataFrame. Lucky for us\nKedro has pickle support out of the box.  Pickle is a way to store any python\nobject to disk.  Beware that pickle files coming from an unknown source can run\nmalicous code and are considered unsafe.  For the most part though when you\nread and write your own pickle files they are a good tool to consider.\n\n> See more about [pickle](https://docs.python.org/3/library/pickle.html) from python.org.\n\n## Cataloging Pickle\n\nI may have a dictionary that describes some cars.\n\n``` python\n{\n  'truck-012-abc': {\n    'type': 'truck'\n    'sales': [12, 2, 3, 4, 8]\n    'weight': 9024,\n    'accesories': ['leather', 'audio-1']\n}\n```\n\nIn the catalog we will simply set the type as `pickle.PickleDataSet` and give\nit a filepath.\n\n``` yaml\ncars:\n  filepath: data/cars.pkl\n  type: pickle.PickleDataSet\n```\n\n> This filepath does not have to be on the local filesystem it can be on the\n> cloud thanks to how kedro utilizes fsspec for each of its datasets.\n\n## Loading the dataset\n\nThe benefit of cataloging this dataset compared to leaving it as a\n`MemoryDataSet` is that you can easily load this data back into memory for\nfurther development or debugging without running any of the pipeline.\n\n``` python\ncatalog.load('cars')\n```",
        "long_description": "In python data science/engineering most of our data is in the form of some sort of table, typically a DataFrame from a library like pandas, spark, or dask. DataFrames are the heart of most pipelines These containers for data contain many convenient m..."
    },
    {
        "cover": "/static/gitui.slides-xmas2020.png",
        "title": "Gitui is a blazing fast terminal git interface",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "slides",
        "path": "../../src/pages/gitui.slides.md",
        "canonical_url": "https://waylonwalker.com/gitui.slides",
        "cover_image": "https:waylonwalker.com/gitui.slides.png",
        "date": "2021-01-17 00:00:00+00:00",
        "description": "GitUI Gitui is a terminal-based git user interface (TUI) that will change the way that you work with git. Works alongsi",
        "published": true,
        "content": "## GitUI\n\nGitui is a terminal-based git user interface (TUI) that will change the way\nthat you work with git. \n\n## Works alongside the cli\n\nI have been a long-time user of the git cli, and it's\nbeen hard to beat, mostly because there is nothing that keeps my fingers on the\nkeyboard quite like it, except `gitui` which comes with some great ways to very\nquickly walk through a git project.\n\n## installation\n\nGo to their [releases]https://github.com/extrawurst/gitui/releases) page,\ndownload the latest build, and pop it on your PATH.  I have the following\nstuffed away in some install scripts to get the latest version.\n\n\n_<small>install latest release</small>_\n``` bash\nGITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\nwget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | sudo tar -zxf - -C /usr/bin/\n```\n\n## run `gitui`\n\nIt opens blazing fast.\n\n``` bash\ngitui\n```\n\n## Quick Commits\n\nSometimes I edit a number of files and want to commit them one at a time, this\nis painful in the git cli and my main use case for `gitui`.  `gitui` shows\nunstaged changes at the top, staged changes on the bottom, and a diff on the\nright.\n\n\n![gitui status](https://waylonwalker.com/gitui-status.png)\n\n\n## Navigate with hjkl\n\nBy default, `gitui` uses arrow keys, but simply copying\n[vim_style_key_config.ron](https://github.com/extrawurst/gitui/blob/master/assets/vim_style_key_config.ron)\nto your config directory will get you vim-like keybindings.\n\n## workflow\n\n* pop open `gitui`, \n* use **j/k** to get to the file I want to commit,\n* glance at the diff to the right\n* press enter to stage the file\n* sc to switch focus to the saged files and commit\n* write my commit message hit enter and\n* q to quit\n\n## Keybindings\n\n```\nw/s:   to toggle focus between working and staged changes\nj/k:   to scroll each section\nh/l:   switch between left and right side\nenter: toggle file from working or staging\nc:     start a commit message\np:     push\n<c-c>: quit\n```\n\n## Other Panes\n\nI am in the `Status [1]` pane 90% of the time, but it also has three other\npanes for `Log [2]`, `Stashing [3]`, and `Stashes [4]`.  I do not really use\nthe stashes panes, but the `Log [2]` pane is quite useful to quickly go through\nthe last set of commits and see the diff for each of them.\n\n## What UI do you use for git\n\nLet me know what ui you use for git, do you stick to the cli, use a gui, or use\na similar `TUI` interface?",
        "long_description": "GitUI Gitui is a terminal-based git user interface (TUI) that will change the way that you work with git. Works alongside the cli I have been a long-time user of the git cli, and it's been hard to beat, mostly because there is nothing that keeps my..."
    },
    {
        "cover": "/static/gitui-xmas2020.png",
        "title": "Gitui is a blazing fast terminal git interface",
        "tags": [
            "git"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/gitui.md",
        "canonical_url": "https://waylonwalker.com/gitui",
        "cover_image": "https:waylonwalker.com/gitui.png",
        "date": "2021-01-17 00:00:00+00:00",
        "description": "Gitui is a terminal-based git user interface (TUI) that will change the way that you work with git. I have been a long-t",
        "published": true,
        "content": "Gitui is a terminal-based git user interface (TUI) that will change the way\nthat you work with git. I have been a long-time user of the git cli, and it's\nbeen hard to beat, mostly because there is nothing that keeps my fingers on the\nkeyboard quite like it, except `gitui` which comes with some great ways to very\nquickly walk through a git project.\n\n\n\n## installation\n\nGo to their [releases]https://github.com/extrawurst/gitui/releases) page,\ndownload the latest build, and pop it on your PATH.  I have the following\nstuffed away in some install scripts to get the latest version.\n\n\n_<small>install latest release</small>_\n``` bash\nGITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '\"' | sed 's/^.*tag\\///g' | sed 's/>.*$//g' | sed 's/^v//')\nwget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | sudo tar -zxf - -C /usr/bin/\n```\n\n## run `gitui`\n\nIt opens blazing fast.\n\n``` bash\ngitui\n```\n\n## Quick Commits\n\nSometimes I edit a number of files and want to commit them one at a time, this\nis painful in the git cli and my main use case for `gitui`.  `gitui` shows\nunstaged changes at the top, staged changes on the bottom, and a diff on the\nright.\n\n\n![gitui status](https://waylonwalker.com/gitui-status.png)\n\n\n## Navigate with hjkl\n\nBy default, `gitui` uses arrow keys, but simply copying\n[vim_style_key_config.ron](https://github.com/extrawurst/gitui/blob/master/assets/vim_style_key_config.ron)\nto your config directory will get you vim-like keybindings.\n\n## workflow\n\nGenerally, I pop open `gitui`, use j/k to get to the file I want to commit,\nglance at the diff to the right, press enter to stage the file, sc to switch\nfocus to the saged files and commit, write my commit message hit enter and\ndone.\n\n* w/s:   to toggle focus between working and staged changes\n* j/k:   to scroll each section\n* h/l:   switch between left and right side\n* enter: toggle file from working or staging\n* c:     start a commit message\n* p:     push\n* <c-c>: quit\n\n## Other Panes\n\nI am in the `Status [1]` pane 90% of the time, but it also has three other\npanes for `Log [2]`, `Stashing [3]`, and `Stashes [4]`.  I do not really use\nthe stashes panes, but the `Log [2]` pane is quite useful to quickly go through\nthe last set of commits and see the diff for each of them.\n\n## What UI do you use for git\n\nLet me know what ui you use for git, do you stick to the cli, use a gui, or use\na similar `TUI` interface?",
        "long_description": "Gitui is a terminal-based git user interface (TUI) that will change the way that you work with git. I have been a long-time user of the git cli, and it's been hard to beat, mostly because there is nothing that keeps my fingers on the keyboard quite l..."
    },
    {
        "cover": "/static/quickly-edit-posts-xmas2020.png",
        "title": "Quickly Edit Posts",
        "tags": [
            "bash"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/quickly-edit-posts.md",
        "canonical_url": "https://waylonwalker.com/quickly-edit-posts",
        "cover_image": "https:waylonwalker.com/quickly-edit-posts.png",
        "date": "2021-01-18 00:00:00+00:00",
        "description": "Recently I automated starting new posts with a python script. Today I want to work on the next part that is editing tho",
        "published": true,
        "content": "Recently I automated starting new posts with a python script.  Today I want to\nwork on the next part that is editing those posts quickly.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/automating-my-post-starter/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/d4770ec76e0f29cf7536bccfee99340b/630fb/automating-my-post-starter-xmas2020.png\" alt=\"article cover for Automating my Post Starter\">\n<div class=\"right\">\n    <h2>Automating my Post Starter</h2>\n    <p class=\"description\">\n    One thing we all dread is mundane work of getting started, and all the hoops it takes to get going. This year I want to\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> Check out this post about setting up my posts with python \ud83d\udc0d\n\n## Enter Bash\n\nFor the process of editing a post I just need to open the file in vim quickly.\nI dont need much in the way of parsing and setting up the frontmatter.  I think\nthis is a simple job for a **bash** script and fzf.\n\n1. change to the root of my blog\n1. fuzzy find the post\n1. open it with vim\n1. change back to the directory I was in\n\n## bash function\n\nFor this I am going to go with a bash function.  This is partly due to being\nable to track where I was and get back.  Also the line with nvim will run fzf\neverytime you source your `~/.alias` file which is not what we want.\n\nLets setup the **boilerplate**.  Its going to create a function called ep\n`\"edit post\"`, track our current directory, create a sub function `_ep`.  Then\ncall that function and cd back to where we were no matter if `_ep` fails or\nsucceeds.\n\n_<small><mark>boilerplate</mark></small>_\n``` bash\nep () {\n    _dir=$(pwd)\n    _ep () {\n        # open file here\n    }\n    _ep && cd $_dir || cd $_dir\n}\n```\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/reusable-bash/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/96bd1b466e9e00834d0d7eda8af04b97/630fb/reusable-bash-xmas2020.png\" alt=\"article cover for Creating Reusable Bash Scripts\">\n<div class=\"right\">\n    <h2>Creating Reusable Bash Scripts</h2>\n    <p class=\"description\">\n    Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n> check out this post for more information about writing reusable bash scripts.\n\n## FZF\n\nLet's focus in on that `_ep` function here that is going to do the bulk of the\nwork to edit the post.\n\n_<small><mark>cd to where I want to edit from</mark></small>_\n``` bash\ncd ~/git/waylonwalkerv2/\n```\n\nNext I need to find all markdown pages within my posts directory.  There is\nprobably a better way to filter with the `find` command directly, but I am not\nworried about perf here and I knew how to do it without google.\n\n_<small><mark>find all markdown</mark></small>_\n``` bash\nfind ~/git/waylonwalkerv2/src/pages/ | grep .md$\n```\n\nNow that we can list all potential posts, sending the selected post back to\nneovim is as easy as piping those files into fzf inside of a command\nsubstitution that is called with neovim.\n\n\n_<small><mark>putting together the edit command</mark></small>_\n``` bash\n$EDITOR $(find ~/git/waylonwalkerv2/src/pages/ | grep .md$ | fzf)\n```\n\n## Final Script\n\n_<small><mark>final ep function</mark></small>_\n``` bash\nep () {\n    _dir=$(pwd)\n    _ep () {\n        cd ~/git/waylonwalkerv2/\n        $EDITOR $(find ~/git/waylonwalkerv2/src/pages/ | grep .md$ | fzf)\n    }\n    _ep && cd $_dir || cd $_dir\n}\n```",
        "long_description": "Recently I automated starting new posts with a python script. Today I want to work on the next part that is editing those posts quickly. Automating my Post Starter One thing we all dread is mundane work of getting started, and all the hoops..."
    },
    {
        "cover": "/static/blog-data-with-python-xmas2020.png",
        "title": "Blog Data With Python",
        "tags": [
            "python",
            "blog",
            "data"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/blog-data-with-python.md",
        "canonical_url": "https://waylonwalker.com/blog-data-with-python",
        "cover_image": "https:waylonwalker.com/blog-data-with-python.png",
        "date": "2021-01-18 00:00:00+00:00",
        "description": "Generating an api for a blog is much simpler than one might expect with python. Markdown Frontmatter Fill in the blanks",
        "published": false,
        "content": "Generating an api for a blog is much simpler than one might expect with python.\n\n## Markdown\n\n## Frontmatter\n\n## Fill in the blanks\n\nfix missing data\n\n## Fast",
        "long_description": "Generating an api for a blog is much simpler than one might expect with python. Markdown Frontmatter Fill in the blanks fix missing data Fast..."
    },
    {
        "cover": "/static/2021-content-strategy-xmas2020.png",
        "title": "My Content Strategy For 2021",
        "tags": [
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/2021-content-strategy.md",
        "canonical_url": "https://waylonwalker.com/2021-content-strategy",
        "cover_image": "https:waylonwalker.com/2021-content-strategy.png",
        "date": "2021-01-19 00:00:00+00:00",
        "description": "I am making another push in 2021 to get my content out in the world and meeting users where they are. See how I plan to",
        "published": true,
        "content": "I am making another push in 2021 to get my content out in the world and meeting users where they are.  See how I plan to execute.\n\n## Platforms\n\n* waylonwalker.com\n* Twitter\n* DEV\n* hashnode\n* Medium\n* LinkedIn\n* Anchor\n\n## Markdown\n\nMy content is written in markdown, all markdown.  I find that markdown does a really great job at getting out of the way and letting ideas flow onto the page.  I am never fussing with fonts and formatting while physically writing posts.   Not that I don't spend way more time than I need to tweak these things on my own personal site where everything gets posted.\n\n## Articles\n\nMuch of what I create is inside of short articles that get posted to my personal site [waylonwalker.com](https://waylonwalker.com).  These will get cross-posted to [DEV](https://dev.to/waylonwalker),\n[hashnode](https://h.waylonwalker.com/), [Medium](https://waylonwalker.medium.com/).\n\nI have made cross-posting a bit easier for myself by posting the markdown for each article next to the post on my personal site.  Add .md to any post and there is the source.\n\nShould I be giving my articles to Medium??  Personally, I am not a fan of the bait and switch that they did with adding a paywall years after launch.  From what I can tell authors are not getting paid much from it, users are discouraged when they are blocked, and they really only promote articles that are behind the paywall.\n\nIn the end, I am a fan of meeting users where they are, if they like Medium I don't want them to miss my content.\n\n## More Catalytic\n_soft skills_\n\nMy articles are very code-heavy, I do want to transition over to some more evergreen type of posts that are long-lasting.  I want to create some more content around how to be a good developer, data scientist, engineer, whatever you call yourself.\n\nPersonally, this is some of the content I enjoy consuming, but for some reason is not something I tend to create.\n\n## Slides\n\nI am really enjoying the slide output of my articles on\n[LinkedIn](https://www.linkedin.com/in/waylonwalker/detail/recent-activity/shares/). It makes for something that is unique and easy to digest.  I have a pandoc script that takes in the markdown from my posts and kicks out a set of slides, so it's quick and easy to do.  Not every post works well this way by many have so\nfar.\n\n![my linked in slide\nactivity](https://waylonwalker.com/linkedin-activity-slides.gif)\n\n## Threads\n\nWith less success (shares, views, likes) I have been converting articles over to Twitter threads as they are released, again not every article works well this way, but many do.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">What does it take to create an installable python package that can be hosted on pypi?<br><br>.<br>\u251c\u2500\u2500 setup .py<br>\u2514\u2500\u2500 my_module.py<br><br>\ud83e\uddf5\u25b6 <a href=\"https://t.co/G7V84Uk4IO\">pic.twitter.com/G7V84Uk4IO</a></p>&mdash; Waylon Walker \ud83d\udc0d (@_WaylonWalker) <a href=\"https://twitter.com/_WaylonWalker/status/1349716127887347717?ref_src=twsrc%5Etfw\">January 14, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n## Simplicity\n_just write markdown_\n\nIn the end, everything needs to be simple and build off of the original markdown post.  Automation should be in a place where it makes sense.  I am no longer manually creating cover art or article descriptions, those are scripted out of the article itself.\n\nI have come cli tooling in place to simplify my process. Expect more of that to come.\n\n## Audio\n\nI have set up a podcast where I read out my posts, but the time that I have available to read them is very constraining to the process.  It may be something that I figure out how to work out or something that I drop.  It's something that I think would be really nice, but still trying to figure out how to do it.\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/audio-for-blog/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/a8606be154d71412741094d011b75098/630fb/audio-for-blog-xmas2020.png\" alt=\"article cover for Adding Audio to my blog posts\">\n<div class=\"right\">\n    <h2>Adding Audio to my blog posts</h2>\n    <p class=\"description\">\n    This is episode 1 of the Waylon Walker Audio experience, posts from waylonwalker.com in audio form. So I have had this\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\nI personally really like this as I often find a cool blog article that I want to read, but it's time to cook dinner or drive somewhere.  Articles with audio make it super convenient to consume while doing a task requiring eye contact.\n\n## TLDR\n\nMeet Users Where They are.",
        "long_description": "I am making another push in 2021 to get my content out in the world and meeting users where they are. See how I plan to execute. Platforms waylonwalker.com Twitter DEV hashnode Medium LinkedIn Anchor Markdown My content is written in markdown, all..."
    },
    {
        "cover": "/static/kedro-dependency-management-xmas2020.png",
        "title": "Kedro Dependency Management",
        "tags": [],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/kedro-dependency-management.md",
        "canonical_url": "https://waylonwalker.com/kedro-dependency-management",
        "cover_image": "https:waylonwalker.com/kedro-dependency-management.png",
        "date": "2021-01-19 00:00:00+00:00",
        "description": "Docs https://kedro.readthedocs.io/en/stable/04_kedro_project_setup/01_dependencies.html?highlight=install pip-tools pip-",
        "published": false,
        "content": "## Docs\n\nhttps://kedro.readthedocs.io/en/stable/04_kedro_project_setup/01_dependencies.html?highlight=install\n\n## pip-tools\n\n## pip-compile\n## requirements\n\n* requirements.in\n* requirements.txt",
        "long_description": "Docs https://kedro.readthedocs.io/en/stable/04_kedro_project_setup/01_dependencies.html?highlight=install pip-tools pip-compile requirements requirements.in requirements.txt..."
    },
    {
        "cover": "/static/markdown-cli-xmas2020.png",
        "title": "Markdown Cli",
        "tags": [
            "python",
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/markdown-cli.md",
        "canonical_url": "https://waylonwalker.com/markdown-cli",
        "cover_image": "https:waylonwalker.com/markdown-cli.png",
        "date": "2021-01-20 00:00:00+00:00",
        "description": "This is a post that may be a work in progress for awhile, Its a collections of thoughts on managing my blog, but could b",
        "published": true,
        "content": "This is a post that may be a work in progress for awhile, Its a collections of\nthoughts on managing my blog, but could be translated into anythiung that is\njust a collection of markdown.\n\n## Listing things\n\n* posts\n* tags\n* draft posts\n\n## data\n\n* frontmatter\n* filepath\n* content\n* template\n* html\n\n## render content\n\n* Markdown.Markdown\n* support extentsions\n\n## frontmatter cleaning.\n\n* provide ways to hook in or clean up the frontmatter\n\n## Markata.Markata methods\n\n* load\n* render\n* save\n\n## Markata.Post methods\n\n* load\n* render\n* save\n\n## Markata plugins\n\n* before_load\n* before_post_load\n* after_load\n* after_post_load\n* before_save\n* before_post_save\n* after_save\n* after_post_save\n\n\n## Markata plugins\n\n* cleanse_frontmatter\n* html_feed\n* json_feed\n* rss_feed\n* save_posts\n\n\n\n\n## CLI\n\n``` bash\n$ markata list tags\n\npython\ndata\n```\n\n``` bash\n$ markata\n\n[\n  { \n    \"title\": \"post title\",\n    \"description\": \"this is a post\",\n    \"filepath\": \"path_to.md\",\n    \"content\": \"the content of the post\",\n    \"html\": \"<p>the content of the post</p>\"\n    },\n    ...\n]\n```\n\n``` bash\n```",
        "long_description": "This is a post that may be a work in progress for awhile, Its a collections of thoughts on managing my blog, but could be translated into anythiung that is just a collection of markdown. Listing things posts tags draft posts data frontmatter filep..."
    },
    {
        "cover": "/static/minimal-kedro-pipeline-xmas2020.png",
        "title": "Minimal Kedro Pipeline",
        "tags": [
            "python",
            "kedro",
            "data"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/minimal-kedro-pipeline.md",
        "canonical_url": "https://waylonwalker.com/minimal-kedro-pipeline",
        "cover_image": "https:waylonwalker.com/minimal-kedro-pipeline.png",
        "date": "2021-01-20 00:00:00+00:00",
        "description": "How small can a minimum kedro pipeline ready to package be? I made one within 4 files that you can pip install. It's o",
        "published": true,
        "content": "How small can a minimum kedro pipeline ready to package be?  I made one within 4 files that you can pip install.  It's only a total of 35 lines of python, 8 in `setup.py` and 27 in `mini_kedro_pipeline.py`.\n\n# Minimal Kedro Pipeline\n\nI have everything for this post hosted in this [gihub repo](https://github.com/WaylonWalker/mini-kedro-pipeline), you can fork it, clone it, or just follow along.\n\n## Installation\n\n``` bash\npip install git+https://github.com/WaylonWalker/mini-kedro-pipeline\n```\n\n## Caveats\n\nThis repo represents the minimal amount of structure to build a kedro pipeline that can be shared across projects.  Its installable, and drops right into your `hooks.py` or `run.py` modules.  It is not a runnable pipeline.  At this point\nI think the config loader requires to have a logging config file.\n\nThis is a sharable pipeline that can be used across many different projects.\n\n## Usage\n\n``` python\n# hooks.py\n\nimport mini_kedro_project as mkp\n\nclass ProjectHooks:\n    @hook_impl\n    def register_pipelines(self) -> Dict[str, Pipeline]:\n        \"\"\"Register the project's pipeline.\n\n        Returns:\n            A mapping from a pipeline name to a ``Pipeline`` object.\n\n        \"\"\"\n\n        return {\"__default__\": Pipeline([]), \"mkp\": mkp.pipeline}\n```\n\n## Implemantation\n\nThis builds on another post that I made about creating the minimal python package.  I am not sure if it should be called a package, it's a module, but what do you call it after you build it and host it on pypi?\n\n\n<a class=\"onelinelink\" href=\"https://waylonwalker.com/minimal-python-package/\">\n<img style=\"float: right;\" align='right' src=\"https://waylonwalker.com/static/de47aa7ab3bcdcd5f0dade8cdccdddc2/630fb/minimal-python-package-xmas2020.png\" alt=\"article cover for Minimal Python Package\">\n<div class=\"right\">\n    <h2>Minimal Python Package</h2>\n    <p class=\"description\">\n    What does it take to create an installable python package that can be hosted on pypi? What is the minimal python package\n    </p>\n    <p class=\"url\">\n    <span class=\"read-more\">read more</span>  waylonwalker.com\n    </p>\n</div>\n</a>\n\n\n## Directory structure\n\n``` bash\n.\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 my_pipeline.py\n```\n\n## setup.py\n\nThis is a very minimal `setup.py`.  This is enough to get you started with a package that you can share across your team.  In practice, there is a bit more that you might want to include as your project grows.\n\n``` python\nfrom setuptools import setup\n\nsetup(\n    name=\"MiniKedroPipeline\",\n    version=\"0.1.0\",\n    py_modules=[\"mini_kedro_pipeline\"],\n    install_requires=[\"kedro\"],\n)\n```\n\n## mini_kedro_pipeline.py\n\nThe mini kedro pipeline looks like any set of nodes in your project.  Many projects will separate nodes and functions, I prefer to keep them close together.  The default recommendation is also to have a `create_pipelines` function that returns the pipeline.\n\nThis pattern creates a singleton, if you were to reference the same pipeline in multiple places within the same running interpreter and modify the one you would run into issues.  I don't foresee myself running into this issue, but maybe as more features become available I will change my mind.\n\n``` python\n\"\"\"\nAn example of a minimal kedro pipeline project\n\"\"\"\nfrom kedro.pipeline import Pipeline, node\n\n__version__ = \"0.1.0\"\n__author__ = \"Waylon S. Walker\"\n\nnodes = []\n\n\ndef create_data():\n    \"creates a dictionary of sample data\"\n    return {\"beans\": range(10)}\n\n\nnodes.append(node(create_data, None, \"raw_data\", name=\"create_raw_data\"))\n\n\ndef mult_data(data):\n    \"multiplies each record of each item by 100\"\n    return {item: [i * 100 for i in data[item]] for item in data}\n\n\nnodes.append(node(mult_data, \"raw_data\", \"mult_data\", name=\"create_mult_data\"))\n\npipeline = Pipeline(nodes)\n```\n\n## Share your pipelines\n\nGo forth and share your pipelines across projects.  Let me know, do you share pipelines or catalogs across projects?",
        "long_description": "How small can a minimum kedro pipeline ready to package be? I made one within 4 files that you can pip install. It's only a total of 35 lines of python, 8 in setup.py and 27 in mini_kedro_pipeline.py. Minimal Kedro Pipeline I have everything for th..."
    },
    {
        "cover": "/static/python-tool-config-xmas2020.png",
        "title": "\u2699 How Python Tools Are Configured",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/python-tool-config.md",
        "canonical_url": "https://waylonwalker.com/python-tool-config",
        "cover_image": "https:waylonwalker.com/python-tool-config.png",
        "date": "2021-01-21 00:00:00+00:00",
        "description": "There are various ways to configure python tools, config files, code, or environment variables. Let's look at a few pro",
        "published": false,
        "content": "There are various ways to configure python tools, config files, code, or\nenvironment variables.  Let's look at a few projects that allow users to\nconfigure them through the use of config files and how they do it.\n\n## Motivation\n\nThis will not include how they are implemented, I've looked at a few and its\nnot simple.  This will focus on where config is placed and the order in which\nduplicates are resolved.\n\nThe motivation of this article is to serve as a bit of a reference guide for\nthose who may want to create their own package that needs configuration.\n\n## Flake8\n\n### Global\n\nUser settings can exist in the users `~/.config/flake8` file to configure how\nflake8 runs on their machine.\n\n* `~/.config/flake8`\n\n### Per-Project\n\nOnly One project config file will be considered, but allows for several\noptions.  These files all use the `ini` format and must have a `[flake8]`\nsection  header to be consideered.\n\nSelection of the config file can also be overridden by the `--config` cli option.\n\nAn extra config file may be selected as `--append-config`.  It will be read in\nlast and take highest precedence.\n\n* `tox.ini`\n* `setup.cfg`\n* `.pep8`\n* `.flake8`\n\n## Example Config\n\n_valid in any of the supported files_\n\n``` ini\n[flake8]\nmax-line-length = 88\nextend-ignore = E203, W503\n```\n\n### Options\n\nThe number of options configured through config files is fairly short for `flake8`.\n\n* exclude\n* filename\n* select\n* ignore\n* max-line-length\n* format\n* max-complexity\n\n## Black\n\nBlack only supports `TOML` file formats for configuration.\n\n### Global\n\nBlack provides no global config support.  If you really needed one I guess you\ncould make a cli alias.\n\n### Per-Project\n\nBlack states that it includes sane defaults that do not need configured, but if\nyou need to do so it only supports `pyproject.toml` or cli arguments.\n\nPersonally I believe that a lot of work went into making these sane defaults\nreally good.  I personally do not make any configuration changes to black.\n\n* pyproject.toml\n\n## Example\n\n_pyproject.toml_\n\n``` toml\n[tool.black]\nline-length = 88\ntarget-version = ['py37']\ninclude = '\\.pyi?$'\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n  | foo.py           # also separately exclude a file named foo.py in\n                     # the root of the project\n)\n'''\n```\n\n## Resolution\n\nBlack will use teh `pyproject.toml` file for configuration, then make any\naddional overrides through the use of command line arguments.\n\n## MyPy\n\n`mypy` takes the cake for the most complex configuration.  Primarily because\nyou can configure how it treats different modules specifically.  These modules\nmay be inside your codebase or installed and imported in.\n\n### Per-Project\n\n* --config-file\n* mypy.ini\n* .mypy.ini\n\n### Global\n\n* $XDG_CONFIG_HOME/mypy/config\n* ~/.config/mypy/config\n* ~/.mypy.ini\n\n### Resolution\n\n* --config-file\n* mypy.ini\n* .mypy.ini\n* setup.cfg\n* $XDG_CONFIG_HOME/mypy/config\n* ~/.config/mypy/config\n* ~/.mypy.ini\n\n### Example\n_mypy.ini_\n\n```\n# Global options:\n\n[mypy]\npython_version = 2.7\nwarn_return_any = True\nwarn_unused_configs = True\n\n# Per-module options:\n\n[mypy-mycode.foo.*]\ndisallow_untyped_defs = True\n\n[mypy-mycode.bar]\nwarn_return_any = False\n\n[mypy-somelibrary]\nignore_missing_imports = True\n```\n\n## Kedro - framework\n\nKedro is a unique one here.  It offers two distinctly different configurations,\none for how the framework behaves and the other for actual project config.\n\nKedro does utilizes a `settings.py` and `pyproject.toml` to define a bit more\nof the framework settings.  These are the outter layer of your project.\n\n\nThese files sit at the root of the project.\n\n### [pyproject.toml](https://github.com/quantumblacklabs/kedro/blob/fb88cc2504ddbfc93b9b859ca436130b396b93c4/docs/source/12_faq/02_architecture_overview.md#pyprojecttoml)\n\nThis replaces much of what used to be specified in run.py.\n\n* package_name\n* project_name\n* project_version\n* source_dir\n\n### [Settings.py](https://github.com/quantumblacklabs/kedro/blob/fb88cc2504ddbfc93b9b859ca436130b396b93c4/docs/source/12_faq/02_architecture_overview.md#settingspy)\n\n* DISABLE_HOOKS_FOR_PLUGINS\n* HOOKS\n* SESSION_STORE_CLASS\n* SESSION_STORE_ARGS\n* CONTEXT_CLASS\n\n## Kedro - project\n\nWithin the project generally in the `src/conf` directory kedro allows you to\nset both local and base configurations.  Local configurations will be git\nignored and most commonly used for credentials.\n\n* catalog\n* logging\n* credentials\n\n\n### Config Loader\n\nKedro lets you setup the config loader if you choose to do so.  You can\nconfigure the directories to look in as well as the glob pattern for files.\n\n``` python\nfrom kedro.config import ConfigLoader\n\nconf_paths = [\"conf/base\", \"conf/local\"]\nconf_loader = ConfigLoader(conf_paths)\nconf_catalog = conf_loader.get(\"catalog*\", \"catalog*/**\")\n```\n\n### additional envs\n\nAdditional to the `base` and `local` config, kedro lets you specify an env at\nruntime through a `--env` argumet or a `KEDRO_ENV` variable.  setting this will\nadditionally tell kedro to reach into `conf/<env-name>` for configuration.\n\n### Resolution Order\n\nkedro will load each config starting from `base`, `local`, then `env` and will\noverrite any colllisions along the way.\n\n\n**precedence heirarchy**\n\n* env\n* local\n* base\n\n### Jinja Support\n\nAs of `0.17.0` kedro supports jinja2 templates in its yml configuration files.\nThis is quite beneficial as catalogs can become incredebly repetative.\n\n``` yaml\n{% for speed in ['fast', 'slow'] %}\n{{ speed }}-trains:\n    type: MemoryDataSet\n\n{{ speed }}-cars:\n    type: pandas.CSVDataSet\n    filepath: s3://${bucket_name}/{{ speed }}-cars.csv\n    save_args:\n        index: true\n\n{% endfor %}\n```\n\n## flask\n\n## pytest\n\nCurrently pytest is configured \n\n## resolution order\n\n`pytest` will look for the existence of each of these files, if its a match it\nwill stop looking for new files, even if the file is empty.\n\n* `pytest.ini`\n* `pyproject.toml` with `[tool.pytest.ini_options]`\n* `tox.ini` with `[pytest]`\n* `setup.cfg` with `[tool:pytest]`\n\n## Multiple Config\n\n`pytest` is a bit unique here in that it allows for multiple configs.  There is\na complex resolution for module specific configuration, but essentially it does\nthe resolution highlighted above through a number of directories and returns\nthe config closest to the test module.\n\n## Example pytest config\n\n\n``` ini\n# pytest.ini\n[pytest]\nminversion = 6.0\naddopts = -ra -q\ntestpaths =\n    tests\n    integration\n```\n\n## Command Line Options\n\nAs far as I am aware every option specified in a config file can also be\nconfigured or overridden at the command line.\n\n## ipython\n\n`Ipython` is configured completely at a system level with python scripts within\nthe users `~/.ipython/` directory.  The user may have multiple profiles that\ncan be created by running `ipython profile create [profilename]` or specified\nby running `ipython --profile=[profilename]`\n\n### Config Directory\n\nBy default this is `~/.ipython`, but an be configured by setting the\n`IPYTHONDIR` environment variable or `--ipython-dir=<path>` command line\noption.\n\n### Example Config\n\n``` python\n# sample ipython_config.py\nc = get_config()\n\nc.TerminalIPythonApp.display_banner = True\nc.InteractiveShellApp.log_level = 20\nc.InteractiveShellApp.extensions = [\n    'myextension'\n]\nc.InteractiveShellApp.exec_lines = [\n    'import numpy',\n    'import scipy'\n]\nc.InteractiveShellApp.exec_files = [\n    'mycode.py',\n    'fancy.ipy'\n]\nc.InteractiveShell.autoindent = True\nc.InteractiveShell.colors = 'LightBG'\nc.InteractiveShell.confirm_exit = False\nc.InteractiveShell.deep_reload = True\nc.InteractiveShell.editor = 'nano'\nc.InteractiveShell.xmode = 'Context'\n\nc.PromptManager.in_template  = 'In [\\#]: '\nc.PromptManager.in2_template = '   .\\D.: '\nc.PromptManager.out_template = 'Out[\\#]: '\nc.PromptManager.justify = True\n\nc.PrefilterManager.multi_line_specials = True\n\nc.AliasManager.user_aliases = [\n ('la', 'ls -al')\n]\n```\n\n### CommandLine Overrides\n\nEvery configurable value can be overridden from the command line.\n\n``` bash\nipython --ClassName.attribute=value\n```\n\n### Config Magic\n\nConfiguration can be overridden at runtime with the `%config` magic.\n\n``` python\n%config IPCompleter.greedy = True\n```\n\n### Startup\n\nEvery ipython profile has a startup directory where it will execute each `.py`\nand `.ipy` file on startup.  You can make additional configuration here, import\nmodules you want readily available, execute literally any python code you want\nto at the startup of that particular profile.",
        "long_description": "There are various ways to configure python tools, config files, code, or environment variables. Let's look at a few projects that allow users to configure them through the use of config files and how they do it. Motivation This will not include how..."
    },
    {
        "cover": "/static/blogging-for-me-xmas2020.png",
        "title": "Blogging For Me",
        "tags": [
            "blog"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/blogging-for-me.md",
        "canonical_url": "https://waylonwalker.com/blogging-for-me",
        "cover_image": "https:waylonwalker.com/blogging-for-me.png",
        "date": "2021-01-21 00:00:00+00:00",
        "description": "I create this blog with one person in mind, me. There are others like me This is not completely selfish, as there are li",
        "published": true,
        "content": "I create this blog with one person in mind, me.\n\n## There are others like me\n\nThis is not completely selfish, as there are likely many others out there that\nthink similarly to me.  Everyone comes from different backgrounds and varying\nlevels of experience.  In no way do you need to be an expert to create content\nothers will benefit from.\n\n## Accurate\n\nI am as accurate as possible.  I don't know everything, and If I waited for\nthat to happen I would never post, or write at such a high level no one else\n(including me) would ever want to read.\n\nGenerally I know that I am directionally accurate for most of the article.  In\nfact there is often a part of the article that I don't feel the best about.  It\nmay have been some code that could have been better.  I try to point these\nthings out.  Often when I am honest and point out where I know there is\nimprovement to be had I get the most welcoming comments, \"that was just fine\nhow you did that\", or \"I tried that myself and saw a better abstraction.\n\n## Create the articles I want to read\n\nGenerally the articles I want to read are directly relatable to things I am\ncurrently working on and vary over time.  Over the last year its been leaning a\nbit more towards automation with\n[bash](https://waylonwalker.com/archive/linux),\n[python](https://waylonwalker.com/archive/python),\n[kedro](https://waylonwalker.com/archive/kedro) tools.\n\n## On Brand\n\nI try to stay on brand to who I am.  I remember writing my first articles.  I\nwas trying to be whitty, and include funny memes.  Thats not me.  I am not a\ncommedian, and generally memes go right over my head.  I can remember back in\nHigh School, I was the one that didn't understand a lot of pop culture and was\nkinda treated as if I was always living under a rock.  I knew it was true and I\nowned it, so no one ever got too mean about it.\n\n# Honest, never fake\n\nI will not try to pretend that I know everything.  You may read my blog on\noccasion and think I know a lot, also possible that you think \"wow what an\nidiot\".  I welcome you to share your thoughts and techniques in a positive way.\nI often cringe at some of my old posts and think about how differently I would\napproach something not that long after posting.  I honest, never fake know what\nI need to know and don't pretend to know anything outside of my wheelhouse.",
        "long_description": "I create this blog with one person in mind, me. There are others like me This is not completely selfish, as there are likely many others out there that think similarly to me. Everyone comes from different backgrounds and varying levels of experience..."
    },
    {
        "cover": "/static/stand-with-your-team-xmas2020.png",
        "title": "Stand With Your Team",
        "tags": [
            "catalytic"
        ],
        "status": "published",
        "templateKey": "blog-post",
        "path": "../../src/pages/stand-with-your-team.md",
        "canonical_url": "https://waylonwalker.com/stand-with-your-team",
        "cover_image": "https:waylonwalker.com/stand-with-your-team.png",
        "date": "2021-01-22 00:00:00+00:00",
        "description": "People who are quick to toss team members under a bus are not well trusted or highly thought of and it will lead to some",
        "published": true,
        "content": "People who are quick to toss team members under a bus are not well trusted or\nhighly thought of and it will lead to some toxic team dynamics.\n\n## Building Steam\n\nWhile collaborating on any project there are going to be decisions made that\naren't necessarily your favorite, during a summer internship my mentor made\nsome decisions for it that I was not on board with, but I accepted his wisdom\nand moved forward with little push back.\n\n## Full Spead Ahead\n\nDuring a review leadership showed interest in the option that I wanted to go\ntowards.  I was quick to jump up and say I  told you so right then and there\nand pitch reasons why my idea was so much better.\n\n## The Aftermath\n\nI walked out so **proud** that leadership wanted my recognized the my idea, but I will\nnever forget the look on my teammates face and what he told me after the\nmeeting.\n\n> \"Wow quick to throw me under the bus in front of everyone\".   I\n\n~ my teammate\n\n## Realizing what Happened\n\nIt was at this moment that I threw my mentor, a good **friend** in front of a\nbus that was at full speed.  I will never forget this moment and the importance\nof being a good trustworthy team player.\n\n## Speak your Mind, be heard, shut up\n\nThis day I learned that there is a time to speak your mind.  While that bus is\nsitting idle it would have hurt no one.\n\nThere were times to hear out ideas, and there were times that we need to accept\nthe decisions the team made.  The team that you were a part of and had a chance\nto steer.\n\nThere are times where its appropriate to sit down and shut up.",
        "long_description": "People who are quick to toss team members under a bus are not well trusted or highly thought of and it will lead to some toxic team dynamics. Building Steam While collaborating on any project there are going to be decisions made that aren't necessari..."
    },
    {
        "cover": "/static/create-og-image-covers-using-python-xmas2020.png",
        "title": "Create Og Image Covers Using Python",
        "tags": [
            "python"
        ],
        "status": "draft",
        "templateKey": "blog-post",
        "path": "../../src/pages/create-og-image-covers-using-python.md",
        "canonical_url": "https://waylonwalker.com/create-og-image-covers-using-python",
        "cover_image": "https:waylonwalker.com/create-og-image-covers-using-python.png",
        "date": "2021-01-22 00:00:00+00:00",
        "description": "There are so many tutorials out there for creating OG images with nodejs or puppeteer, but I have yet to see many using",
        "published": false,
        "content": "There are so many tutorials out there for creating OG images with `nodejs` or\n`puppeteer`, but I have yet to see many using python.\n\n## PIL\n\n## Template\n\n## Text\n\n\n## Overlays",
        "long_description": "There are so many tutorials out there for creating OG images with nodejs or puppeteer, but I have yet to see many using python. PIL Template Text Overlays..."
    }
]
