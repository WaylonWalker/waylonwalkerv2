<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Waylon Walkers Digital Garden</title><link>https://waylonwalker.com/rss.xml</link><description>Waylon Walkers posts</description><atom:link href="https://waylonwalker.com/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>8bitcc.png</url><title>Waylon Walkers Digital Garden</title><link>https://waylonwalker.com/rss.xml</link></image><language>en</language><lastBuildDate>Thu, 28 Jan 2021 02:29:11 +0000</lastBuildDate><item><link>https://waylonwalker.com/012</link><description>autoreload your imports in ipython for ⚡ fast development</description><content:encoded>&lt;p&gt;&lt;strong&gt;autoreload&lt;/strong&gt; your imports in ipython for ⚡ fast development&lt;/p&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;c.InteractiveShellApp.extensions = ['autoreload']c.InteractiveShellApp.exec_lines = ['%autoreload 2']c.InteractiveShellApp.exec_lines.append('print("Warning: disable autoreload in ipython_config.py to improve performance.")')&lt;/code&gt;&lt;/pre&gt;👆 add this to your &lt;code&gt;~/.ipython/profile_default/ipython_config.py.&lt;/code&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/012</guid></item><item><link>https://waylonwalker.com/006</link><description>Setup pre-commit for isort includes automatic .isort-config</description><content:encoded>&lt;p&gt;Setup &lt;strong&gt;pre-commit&lt;/strong&gt; for &lt;em&gt;isort&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;  - repo: https://github.com/asottile/seed-isort-config    rev: v2.1.1    hooks:      - id: seed-isort-config  - repo: https://github.com/pre-commit/mirrors-isort    rev: v4.3.21    hooks:      - id: isort&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;includes automatic&lt;/em&gt; .isort-config&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/006</guid></item><item><link>https://waylonwalker.com/001</link><description>practice building pipelines with #kedro today</description><content:encoded>&lt;p&gt;&lt;strong&gt;practice&lt;/strong&gt; building pipelines with &lt;em&gt;#kedro&lt;/em&gt; today&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n learning-kedro-1 python=3.8 -yconda activate learning-kedro-1pip install kedro kedro-vizkedro new# make sure to answer yes to adding example data your first time&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/001</guid></item><item><link>https://waylonwalker.com/011</link><description>Load data from database into pandas</description><content:encoded>&lt;p&gt;Load &lt;em&gt;data&lt;/em&gt; from database into &lt;strong&gt;pandas&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom sqlalchemy import create engineengine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')sql = 'select * from inventory'with engine.connect() as connection:    inventory = pd.read_sql(sql, con)engine.dispose()&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/011</guid></item><item><link>https://waylonwalker.com/015</link><description>order matters</description><content:encoded>&lt;h2&gt;Recieving &lt;code&gt;*args&lt;/code&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def funnc(*args):    print(args) # args are a list!&amp;gt;&amp;gt;&amp;gt; func('a', 'b', 'c')['a', 'b', 'c']&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;order matters&lt;/strong&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/015</guid></item><item><link>https://waylonwalker.com/020</link><description>Show Remaining Space on Drives</description><content:encoded>&lt;h2&gt;File System Full 🤔&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Show Remaining Space on Drives&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;with &lt;strong&gt;Bash&lt;/strong&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;df -h&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/020</guid></item><item><link>https://waylonwalker.com/017</link><description>order matters</description><content:encoded>&lt;h2&gt;Sending &lt;code&gt;*args&lt;/code&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def func(one, two):    print(f'two is {two}')&amp;gt;&amp;gt;&amp;gt; func(*['a', 'b'])two is b&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;order matters&lt;/strong&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/017</guid></item><item><link>https://waylonwalker.com/013</link><description>Even if you think a topic has been blogged to death There is one thing they are all missing.... Your unique perspective</description><content:encoded>&lt;h1&gt;Blog consistently&lt;/h1&gt;&lt;p&gt;Even if you &lt;em&gt;think&lt;/em&gt; a topic has been blogged to death&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;There is one thing they are &lt;em&gt;all&lt;/em&gt; missing....&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Your unique perspective&lt;/strong&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/013</guid></item><item><link>https://waylonwalker.com/004</link><description>🔥 #kedrotips use find-kedro to assembly your pipelines</description><content:encoded>&lt;p&gt;🔥 #kedrotips use find-kedro to assembly your pipelines&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.context import KedroContextfrom find_kedro import find_kedroclass ProjectContext(KedroContext):    def _get_pipelines(self) -&amp;gt; Pipeline:        return find_kedro()&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/004</guid></item><item><link>https://waylonwalker.com/018</link><description>&lt;h2&gt;Sending &lt;code&gt;**kwargs&lt;/code&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def func(**kwargs):    print(kwargs) # kwargs are a dictionary!&amp;gt;&amp;gt;&amp;gt; func(**{'one':'a', 'two':'b'){'one': 'a', 'two': 'b'}&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/018</guid></item><item><title>026.md</title><link>https://waylonwalker.com/026.md</link><description>setup
 convert</description><content:encoded>&lt;h1&gt;Convert &lt;strong&gt;Markdown&lt;/strong&gt; to &lt;em&gt;reveal.js&lt;/em&gt; slides&lt;/h1&gt;&lt;p&gt;setup&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;wget https://github.com/hakimel/reveal.js/archive/master.tar.gztar -xzvf master.tar.gzmv reveal.js-master reveal.js&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;convert&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pandoc -t revealjs -s\   -o myslides.html myslides.md \   -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/026.md</guid></item><item><link>https://waylonwalker.com/019</link><description>&lt;h2&gt;batch rename files&lt;/h2&gt;&lt;h2&gt;with &lt;strong&gt;bash&lt;/strong&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;for f in *.jpeg; do    mv -- "$f" "${f%.jpeg}.jpg"done&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/019</guid></item><item><link>https://waylonwalker.com/010</link><description>load remote data with pandas</description><content:encoded>&lt;p&gt;load remote &lt;em&gt;data&lt;/em&gt; with &lt;strong&gt;pandas&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdcars_url = 'waylonwalker.com/cars.csv'cars = pd.read_csv(cars_url)&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/010</guid></item><item><link>https://waylonwalker.com/003</link><description>🔥 #kedrotips hooks can be created using modules</description><content:encoded>&lt;p&gt;🔥 #kedrotips hooks can be created using modules&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# kedro-hooks/src/kedro-hooks/preflight.pyfrom kedro.hooks import hook_implfrom kedro.io.core import DataSetNotFoundErrorfrom colorama import Foreimport textwrap@hook_impldef before_pipeline_run(run_params, pipeline, catalog):    missing_input = [i for i in pipeline.inputs() if not getattr(catalog.datasets, i)._exists()]    if len(missing_input) != 0:        raise DataSetNotFoundError(textwrap.dedent(f'''    {Fore.LIGHTBLACK_EX}――――――――  {Fore.RED}PREFLIGHT ERROR {Fore.LIGHTBLACK_EX}―――――――――    {Fore.RESET} preflight of pipeline failed due to {Fore.YELLOW}missing datasets    {Fore.BLUE} {missing_input}{Fore.RESET}    '''))&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/003</guid></item><item><link>https://waylonwalker.com/024</link><description>Conditionally run GitHub Actions Steps</description><content:encoded>&lt;p&gt;Conditionally run GitHub Actions Steps&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;- uses: dorny/paths-filter@v2.2.0  id: filter  with:      # inline YAML or path to separate file (e.g.: .github/filters.yaml)      filters: |      backend:          - 'backend/**/*'      frontend:          - 'frontend/**/*'# run only if 'backend' files were changed- name: backend unit tests  if: steps.filter.outputs.backend == 'true'  run: ...&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/024</guid></item><item><link>https://waylonwalker.com/009</link><description>Combine a directory of csv's with pandas</description><content:encoded>&lt;p&gt;Combine a directory of &lt;em&gt;csv's&lt;/em&gt; with &lt;strong&gt;pandas&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom pathlib import Pathcsvs = Path.glob('raw/*.csv')csvs_combined = pd.concat(csvs)csvs_combined.to_csv('processed/combined.csv')&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/009</guid></item><item><link>https://waylonwalker.com/014</link><description>&lt;h1&gt;Rename your Master Branch&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git branch -m master maingit push -u origin main&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/014</guid></item><item><link>https://waylonwalker.com/021</link><description>show largest files in current directory</description><content:encoded>&lt;h2&gt;File System Full 🤔&lt;/h2&gt;&lt;p&gt;&lt;em&gt;show largest files in current directory&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;with &lt;strong&gt;Bash&lt;/strong&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;du . -h --max-depth=1&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/021</guid></item><item><link>https://waylonwalker.com/022</link><description>Move files then symlink them</description><content:encoded>&lt;h2&gt;File System Full 🤔&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Move files then symlink them&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;with &lt;strong&gt;Bash&lt;/strong&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mkdir /mnt/mounted_drivemv ~/bigdir /mnt/mounted_driveln -s /mnt/mounted_drive/bigdir ~/bigdir&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/022</guid></item><item><link>https://waylonwalker.com/023</link><description>Find and replace Groups in VSCode
$1 referrs to the second group</description><content:encoded>&lt;p&gt;Find and replace Groups in VSCode$1 referrs to the second group&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;(filepath: top)(.*)filepath: s3://bucket/top$1.parquet&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;- filepath: top/raw/scooters+ filepath: s3://bucket/top/raw/scooters.parquet&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/023</guid></item><item><title>025.md</title><link>https://waylonwalker.com/025.md</link><description>setup
 convert</description><content:encoded>&lt;h1&gt;Convert &lt;strong&gt;Markdown&lt;/strong&gt; to &lt;strong&gt;reveal.js&lt;/strong&gt; slides&lt;/h1&gt;&lt;p&gt;setup&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;wget https://github.com/hakimel/reveal.js/archive/master.tar.gztar -xzvf master.tar.gzmv reveal.js-master reveal.js&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;convert&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/025.md</guid></item><item><link>https://waylonwalker.com/016</link><description>&lt;h2&gt;Recieving &lt;code&gt;**kwargs&lt;/code&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def funnc(**kwargs):    print(kwargs) # kwargs are a dictionary!&amp;gt;&amp;gt;&amp;gt; func(one='a', two='b'){'one': 'a', 'two': 'b'}&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/016</guid></item><item><link>https://waylonwalker.com/008</link><description>compare feature branch to main with git cli</description><content:encoded>&lt;p&gt;compare &lt;em&gt;feature&lt;/em&gt; branch to &lt;em&gt;main&lt;/em&gt; with &lt;strong&gt;git&lt;/strong&gt; cli&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git diff main..feature&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/008</guid></item><item><link>https://waylonwalker.com/005</link><description>pre-commit setup is simple Try it yourself</description><content:encoded>&lt;p&gt;&lt;strong&gt;pre-commit&lt;/strong&gt; setup is &lt;em&gt;simple&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip instal pre-commitpre-commit sample-config &amp;gt; .pre-commit-config.yamlpre-commit installgit add .git commit -m "added pre-commit"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Try&lt;/strong&gt; it yourself&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/005</guid></item><item><link>https://waylonwalker.com/007</link><description>Get isort and black to cooperate store this in .isort.cfg</description><content:encoded>&lt;p&gt;Get &lt;strong&gt;isort&lt;/strong&gt; and &lt;strong&gt;black&lt;/strong&gt; to &lt;em&gt;cooperate&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;[settings]multi_line_output=3include_trailing_comma=Trueforce_grid_wrap=0use_parentheses=Trueline_length=88&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;store this in &lt;code&gt;.isort.cfg&lt;/code&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/007</guid></item><item><title>Newsletter 3</title><link>https://waylonwalker.com/AUG2020</link><description>&lt;p&gt;It's been quite a busy Month and a half since my last official newsletter With about 14 individual posts going live since then.  I pushed hard over the past two weeks and just made a lot of content about things that I actually do.  Many of these were things that I know quite well and were quite quick to write.  I really enjoyed putting them out there and seeing all of the comments and feedback roll in.&lt;/p&gt;&lt;h2&gt;Highlights&lt;/h2&gt;&lt;h3&gt;&lt;a href="https://waylonwalker.com/testproject-io-py-actions/"&gt;Integration testing with Python, TestProject.io, and GitHub Actions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I learned the most from this post.  It's been awhile since I had done any testing with selenium and I wanted to brush up on those skills for some upcoming work.  I chose to test my own website, run it on github actions and use TestProject for reporting.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://waylonwalker.com/reusable-bash/"&gt;Creating Reusable Bash Scripts&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I've been writing a ton of bash scripts lately.  In this article I write down a few of the things that I have recently learned to make my scripts just a bit better.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3"&gt;🤓 What's on your GitHub Profile&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;GitHub profiles were released recently and I asked on DEV.to "Whats on your GitHub Profile".  This was a discussion that turned out some incredible response.  There are so many great profiles posted in the discussion section.  Check them out for inspiration on yours.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://dev.to/waylonwalker/how-to-crush-amazing-posts-on-dev-4cgh"&gt;🔥 How to crush amazing posts on DEV&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This post was super fun to write.  It's specifically for writing DEV.to posts, but is generally useful to any medium length content that sits between a tweet and a book.  I definitly learned a few things during research and in the discussion.  I have picked up a few tricks that make my posts a bit easier to scan and get a bit better engagement than having a wall of text.&lt;/p&gt;&lt;h2&gt;Recent Posts&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/reusable-bash/"&gt;Creating Reusable Bash Scripts&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/3-things-to-automate-with-python/"&gt;Three things to Automate with Python using Pandas&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Here are three things that I see my non programming counterparts doing every single day. These really sum up so much of what folks do within an office.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/install-miniconda/"&gt;Installing miniconda on linux (from the command line)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Installing miniconda from only the command line can be a bit of an intimidating task your first time. Lets walk through how to do it.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/git-auto-commit-action-review/"&gt;Review of the git-auto-commit-action&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It's a really cool GitHub action that will automatically commit files changed during the action. I was using this to render a new readme based on a template.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/pariss-athena-on-black-tech-pipeline/"&gt;Black Tech Pipeline&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I was particularly inspired by @chantastic episode 103 of the react podcast with @ParissAthena. They spoke about the black tech pipeline as well as Diversity, Equity, and Inclusion. Pariss is quite an inspiration. She has done so much work to create a better place for POC in tech. I like that not only is she helping them get jobs but acting as a mentor for their first few months on the job to make sure that they are able to find their place and fit in.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/whats-new-in-kedro-0164/"&gt;What's New in Kedro 0.16.4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;If we take a look at the release notes I see one &lt;strong&gt;major&lt;/strong&gt; feature improvement on the list, auto-discovery of hooks.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/testproject-io-py-actions/"&gt;Integration testing with Python, TestProject.io, and GitHub Actions&lt;/a&gt;&lt;/p&gt;&lt;p&gt;As I continue to build out &lt;a href="https://waylonwalker.com/"&gt;https://waylonwalker.com/&lt;/a&gt; I sometimes run into some errors that are not caught becuase I do not have good testing implemented. I want to explore some integration testing options using GitHub actions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/crush-dev-to-posts/"&gt;🔥 How to crush amazing posts on DEV&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Here are a few of my top tips to help make dev.to posts more readable, and drive better engagement.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/practice-python-online/"&gt;🐍 Practice Python Online&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try the out for myself to really understand.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/edit-on-github/"&gt;Edit On GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I recently added a button to my blog, and subsequently my posts on &lt;a href="https://dev.to/waylonwalker"&gt;DEV.to&lt;/a&gt;. It's the best thing that I have done for it in a while.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/why-use-cms/"&gt;Why use a cms&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its html or markdown for front end content, or even hardcoding parameters in our backend languages like python, or node.js.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/parsing-rss-python/"&gt;🐍 Parsing RSS feeds with Python&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us. I am starting by learning how to parse feeds with python, and without much previous knowledge it proved to be much easier than anticipated thanks to the &lt;code&gt;feedparser&lt;/code&gt; library.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/explain-twitter-cards/"&gt;🙋‍♂️ Can Anyone Explain Twitter Cards to me?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Can someone explain how or why twitter cards render differently from device to device? I do understand that twitter cards a built from meta tags, the full list can be found in their&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3"&gt;🤓 What's on your GitHub Profile&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comment on the DEV.to thread to show off what is on your GitHub profile.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><guid isPermaLink="false">https://waylonwalker.com/AUG2020</guid></item><item><title>Rewrite History with Git</title><link>https://waylonwalker.com/git-rewrite-history</link><description>&lt;ul&gt;&lt;li&gt;rebase&lt;/li&gt;&lt;li&gt;git commit --amend&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Unstage learning-python-debugger&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;rage&lt;/strong&gt; unstage to wipte out history of staged commit&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset --hard &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Undo file&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;rage quit&lt;/li&gt;&lt;li&gt;git reset HEAD~n &lt;file&gt;&lt;ul&gt;&lt;li&gt;removes modifications&lt;/li&gt;&lt;li&gt;keeps hitsory of changes and undoes them&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;git checkout HEAD~n -- &lt;file&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;keeps modifications&lt;/li&gt;&lt;li&gt;&lt;p&gt;removes history&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;--SOFT&lt;/p&gt;&lt;/li&gt;&lt;li&gt;--HARD&lt;/li&gt;&lt;li&gt;--Mixed&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;undo n commits back&lt;/h2&gt;&lt;p&gt;locally before push&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;after push&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git revert HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;update .gitignore&lt;/h2&gt;&lt;p&gt;after push&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git rm -r --cached .git commit -am "Updated .gitignore"&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/git-rewrite-history</guid></item><item><title>Minimal Project Structure</title><link>https://waylonwalker.com/bit_01</link><description>How to setup a data science project in python.</description><content:encoded>&lt;h1&gt;TLDR&lt;/h1&gt;&lt;p&gt;Use &lt;strong&gt;&lt;a href="https://www.gitignore.io"&gt;.gitignore.io&lt;/a&gt;&lt;/strong&gt; and consider adding an alias to your terminal to quickly add a .gitignore to any project missing one.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;alias gitignore='curl https://www.gitignore.io/api/vim,emacs,python,pycharm,sublimetext,visualstudio,visualstudiocode,data &amp;gt; .gitignore'&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add a minimal &lt;strong&gt;setup.py&lt;/strong&gt; to the root of your project, and use the following command to install it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install -e .&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;consider using **&lt;a href="https://github.com/audreyr/cookiecutter"&gt;cookiecutter&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/bit_01</guid></item><item><title>Keyboard Driven VSCode</title><link>https://waylonwalker.com/keyboard-driven-vscode</link><description>Reimagining my tmux configuration inside of vscode.</description><content:encoded>&lt;blockquote&gt;&lt;p&gt;Throw that mouse Away its time to setup some keyboard shortcuts.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;These sortcuts were the baseline for switching from tmux/vim to vscode.  Most folks posts I was able to find gave great tips on replacing vim, but very few have focused on the hackability of tmux.  tmux allows me to rapidly fire up a workspace, create new windows and splits.  Then When I switch tasks I can leave that workspace open and and jump right back in later exactly where I left off.  There is nothing quite like it.  The shortcuts listed here make the transition a bit better. The worst thing I found when using vscode at first was no way to switch between the terminal and editor without the mouse.  This first set of keybindings solve that issue.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The worst thing I found when using vscode at first was no way to switch between the terminal and editor without the mouse.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Alt+[hjkl]&lt;/h2&gt;&lt;p&gt;&lt;em&gt;navigation&lt;/em&gt;&lt;/p&gt;&lt;p&gt;⬅ jump to &lt;strong&gt;left&lt;/strong&gt; split &lt;strong&gt;alt+h&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;⬇ jump to &lt;strong&gt;terminal&lt;/strong&gt; from editor &lt;strong&gt;alt+j&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;⬆ jump to &lt;strong&gt;editor&lt;/strong&gt; from terminal &lt;strong&gt;alt+k&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;➡ jump to &lt;strong&gt;right&lt;/strong&gt; split &lt;strong&gt;alt+l&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This is by var the most useful set of keybindings that I use in vscode and is directly replicated from my tmux configuration.  It allows me to quickly jump up, down, left, right.  Do note that if you use vertical splits it does not work as well as tmux 😢.&lt;/p&gt;&lt;p&gt;&lt;img alt="navigating vscode with keyboard shortcuts" src="/alt [hjkl].gif" title="Alt+[hjkl]" /&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[        {            "key": "alt+j",            "command": "workbench.action.terminal.focus",            "when": "editorFocus"        },        {            "key": "alt+k",            "command": "workbench.action.focusFirstEditorGroup",            "when": "terminalFocus"        },        {            "key": "alt+k",            "command": "workbench.action.focusAboveGroup",            "when": "editorFocus"        },        {            "key": "alt+l",            "command": "-toggleFindInSelection",            "when": "editorFocus"        },        {            "key": "alt+l",            "command": "workbench.action.focusNextGroup",            "when": "editorFocus"        },        {            "key": "alt+h",            "command": "workbench.action.focusPreviousGroup",            "when": "editorFocus"        },        {            "key": "alt+l",            "command": "workbench.action.terminal.focusNextPane",            "when": "terminalFocus"        },        {            "key": "alt+h",            "command": "workbench.action.terminal.focusPreviousPane",            "when": "terminalFocus"        },]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Alt+b&lt;/h2&gt;&lt;p&gt;&lt;em&gt;toggle bloat&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Since closing the sidebar is assigned to &lt;code&gt;ctrl+b&lt;/code&gt; I thought that it made most sense to simulate the activity bar with &lt;code&gt;alt+b&lt;/code&gt;.  There are many times when I just want to get as much out of the way as possible and this little bit does help.&lt;/p&gt;&lt;p&gt;&lt;img alt="hiding the activity bar " src="/alt b.gif" title="Alt+b" /&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[    {        "key": "alt+b",        "command": "workbench.action.toggleActivityBarVisibility",        "when": "editorFocus"    },]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Alt+[svx]&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Split it up&lt;/em&gt;&lt;/p&gt;&lt;p&gt;🙌 Split hoizontally &lt;strong&gt;alt+s&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;🍌 Vertically &lt;strong&gt;alt+v&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;💥 Close &lt;strong&gt;alt+x&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This is another one replicated from tmux for quickly creatiting horizontal (s) and vertical (v) splits.  Once I am done with them I can close them with alt+x.&lt;/p&gt;&lt;p&gt;&lt;img alt="Make and destroy splits with ease in vscode." src="/alt [svx].gif" title="spliting the editor" /&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[    {        "key": "alt+s",        "command": "workbench.action.terminal.split",        "when": "terminalFocus"    },    {        "key": "alt+s",        "command": "workbench.action.splitEditor",        "when": "editorFocus"    },    {        "key": "alt+v",        "command": "workbench.action.splitEditorOrthogonal",        "when": "editorFocus"    },    {        "key": "alt+x",        "command": "workbench.action.terminal.kill",        "when": "terminalFocus"    },    {        "key": "alt+x",        "command": "workbench.action.closeActiveEditor",        "when": "editorFocus"    }]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Alt+[cnp]&lt;/h2&gt;&lt;p&gt;🤲 &lt;strong&gt;Create&lt;/strong&gt; new workspace &lt;strong&gt;alt+c&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;⏭ jump to &lt;strong&gt;next&lt;/strong&gt; workspace &lt;strong&gt;alt+n&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;⏮ jump to &lt;strong&gt;previous&lt;/strong&gt; workspace &lt;strong&gt;alt+p&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Sometimes the terminal window gets a bit cramped inside of splits and you need to use different panes.  I replicated the cnp pattern from tmux here as well.  I can create (c) new panes, then go to the next (n), or previous (p) without leaving the comfort of my keyboard.&lt;/p&gt;&lt;p&gt;I am often using this one when I have a process running that I watch like gatsby, and I need to quickly pop into a new pane to run a git command and back in to gatsby before jumping up to my editor.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/alt [cnp].gif" /&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[    {        "key": "alt+c",        "command": "workbench.action.terminal.new",        "when": "terminalFocus"    },    {        "key": "alt+n",        "command": "workbench.action.terminal.focusNext",        "when": "terminalFocus"    },    {        "key": "alt+p",        "command": "workbench.action.terminal.focusPrevious",        "when": "terminalFocus"    },]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Alt+z&lt;/h2&gt;&lt;p&gt;🗻 Zoom into terminal &lt;strong&gt;alt+z&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This last one doesnt work as well as I would like but it sure does get the job done.  It Zooms (z) into the terminal from anywhere in vscode.  I can be in my editor and zoom out of the terminal to make more room, or zoom in to see what happened from my last edit.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/alt z.gif" /&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[    {        "key": "alt+z",        "command": "workbench.action.toggleMaximizedPanel",    },]&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Bonus&lt;/h1&gt;&lt;h2&gt;Alt+r&lt;/h2&gt;&lt;p&gt;🖱 right click in place&lt;/p&gt;&lt;p&gt;I recently found this one, and find it quite useful to quickly do things like revert selected range, or extract variable without leaving the keyboard.&lt;/p&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[  {    "key": "alt+r",    "command": "editor.action.showContextMenu",  },]&lt;/code&gt;&lt;/pre&gt;&lt;img alt="" src="/static/EIIMiJHWwAAqihV.png" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/keyboard-driven-vscode</guid></item><item><title>Background Tasks in Python for Data Science</title><link>https://waylonwalker.com/python-data-science-background</link><description>This post is intended as an extension/update from [background tasks in python](https://waylonwalker.com/background-1/). I started using `background` the week that Kenneth Reitz released it.  It takes away so much boilerplate from running background tasks that I use it in more places than I probably should. After taking a look at that post today, I wanted to put a better data science example in here to help folks get started.</description><content:encoded>&lt;p&gt;This post is intended as an extension/update from &lt;a href="https://waylonwalker.com/background-1/"&gt;background tasks in python&lt;/a&gt;.  I started using &lt;code&gt;background&lt;/code&gt; the week that Kenneth Reitz released it.  It takes away so much boilerplate from running background tasks that I use it in more places than I probably should. After taking a look at that post today, I wanted to put a better data science example in here to help folks get started.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I use it in more places than I probably should&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Before we get into it, I want to make a shout out to Kenneth Reitz for making this so easy.  Kenneth is a python God for all that he has given to the community in so many ways, especially with his ideas in building stupid simple api's for very complicated things.&lt;/p&gt;&lt;h2&gt;Installation&lt;/h2&gt;&lt;h3&gt;install via pip&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code&gt;pip install background&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;install via github&lt;/h3&gt;&lt;p&gt;I believe one of the later pr's to the project fixes the way arguments are passed in.  I generally clone the repo or copy the module directly into my project.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;clone it&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git clone https://github.com/ParthS007/background.gitcd backgroundpython setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;copy the module&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;curl https://raw.githubusercontent.com/ParthS007/background/master/background.py &amp;gt; background.py&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;🐌 The Slow Function&lt;/h2&gt;&lt;p&gt;Imagine that this function is a big one!  This function is fairly realistic as it takes in some input and returns a DataFrame.  This is what a good half of my fuctions do in data science.  The internals of this function generally will include a sql query, load from s3 or a data catalog, an aggregation from another DataFrame.  In general it should do one simple thing.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Feel Free to copy this "boilerplate"&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import backgroundfrom time import sleepimport pandas as pd@background.taskdef long_func(i):    """    Simulates fetching data from a service    and returning a pandas DataFrame.    """    sleep(10)    return pd.DataFrame({'number_squared': [i**2]})&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Calling the Slow Function&lt;/h2&gt;&lt;p&gt;&lt;em&gt;it's the future calling 🤙&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If we were to call this function 10 times it would take 100s.  Not bad for a dumb example, but detrimental when this gets scaled up💥.  We want to utilize all of our available resources to reduce our development time and get moving on our project.&lt;/p&gt;&lt;p&gt;Calling &lt;code&gt;long_func&lt;/code&gt; will return a future object.  This object has a number of methods that you can read about in the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#future-objects"&gt;cpython docs&lt;/a&gt;.  The main one we are interested in is &lt;code&gt;result&lt;/code&gt;.  I typically call these functions many times and put them into a list object so that I can track their progress and get their results.  If you needed to map inputs back to the result use a dictionary.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;%time futures = [long_func(i) for i in range(10)]CPU times: user 319 µs, sys: 197 µs, total: 516 µsWall time: 212 µs&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Do something with those &lt;code&gt;results()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Simply running the function completes in no time! This is because the future objects that are returned are non blocking and will run in a background task using the &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;.  To get the result back out we need to call the &lt;code&gt;result&lt;/code&gt; method on the future object.&lt;code&gt;result&lt;/code&gt; is a blocking function that will not realease until the function has completed.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;%%timefutures = [long_func(i) for i in range(10)]pd.concat([future.result() for future in futures])CPU times: user 5.38 ms, sys: 3.53 ms, total: 8.9 msWall time: 10 s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that this example completed in &lt;code&gt;10s&lt;/code&gt;, the time it took for only one run, not all 10! 😎&lt;/p&gt;&lt;h2&gt;n&lt;/h2&gt;&lt;p&gt;😫 &lt;em&gt;crank it up&lt;/em&gt;&lt;/p&gt;&lt;p&gt;By default the number of parallel processes wil be equal to the number of cpu threads on your machine. To increase the number of parallel processes (&lt;code&gt;max_workers&lt;/code&gt;) set increase &lt;code&gt;background.n&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;background.n = 100&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Is it possible to overruse @background.task?&lt;/h1&gt;&lt;p&gt;I use this essentially anywhere that I cannot vectorize a python operation and push the compute down into those fast 💨 c extended libraries like numpy, and the operation takes more than a few minutes.  Nearly every big network request I make gets broken down into chunks and multithreaded.  Let me know... is is possible to overruse &lt;code&gt;@background.task&lt;/code&gt;? Let me know your thoughts &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_WaylonWalker&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;Repl.It&lt;/h1&gt;&lt;p&gt;Play with the code here!  Try different values of background.n and n_runs.&lt;/p&gt;&lt;iframe height="800px" width="100%" src="https://repl.it/@WaylonWalker/TestRepl?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"&gt;&lt;/iframe&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-data-science-background</guid></item><item><title>A brain dump of stories</title><link>https://waylonwalker.com/stories_10-10-2020_10-21-2020</link><description>I started making stories as kind of a brain dump a few times per day and posting them to LinkedIn.  Here are the last 11 days of stories</description><content:encoded>&lt;p&gt;I started making stories as kind of a brain dump a few times per day and posting them to [LinkedIn](&lt;a href="https://www.linkedin.com/in/waylonwalker/(https://www.linkedin.com/in/waylonwalker/"&gt;https://www.linkedin.com/in/waylonwalker/(https://www.linkedin.com/in/waylonwalker/&lt;/a&gt;).  Here are the last 11 days of stories.&lt;/p&gt;&lt;p&gt;I store all the stories on my website with the hopes of doing something with them on my own platform eventually. For now it makes it easy to make these posts.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd static/storiesls | xargs -I {} echo '![](https://waylonwalker.com/stories/{})'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Stories 10-10-2020 - 10-21-2020&lt;/h2&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/stories/TIL-kedro-sorts-nodes.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/TIL-kedro-sorts-nodes.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/disable-base-pip.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/disable-base-pip.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/discovered-social-cards.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/discovered-social-cards.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/find-kedro-de1-contributor.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/find-kedro-de1-contributor.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/hacktoberfest-2020-kedro-538-tests-pass.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/hacktoberfest-2020-kedro-538-tests-pass.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/itertools.product-cars-regions.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/itertools.product-cars-regions.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/kedro-run-only-missing.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/kedro-run-only-missing.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/new-post-designing-kedro-router.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/new-post-designing-kedro-router.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/power-is-nothing-without-control.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/power-is-nothing-without-control.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/progress-over-perfection-comment.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/progress-over-perfection-comment.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/quick-tdb.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/quick-tdb.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/running-ci-for-hacktoberfest-kedro.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/running-ci-for-hacktoberfest-kedro.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/three-ds-openings.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/three-ds-openings.png" /&gt;&lt;/a&gt;&lt;a href="https://waylonwalker.com/stories/use-venv.png"&gt;&lt;img alt="" src="https://waylonwalker.com/stories/use-venv.png" /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/stories_10-10-2020_10-21-2020</guid></item><item><title>Master No More</title><link>https://waylonwalker.com/master-no-more</link><description>It's been a long time coming.  We use some very harsh language within tech so much sometimes that we become numb to it.  It's time to do my very small part in this movement and purge this language from my active repos starting with this blog right here.</description><content:encoded>&lt;p&gt;It's been a long time coming.  We use some very harsh language within tech so much sometimes that we become numb to it.  It's time to do my very small part in this movement and purge this language from my active repos starting with this blog right here.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/refactor-in-cli"&gt;https://waylonwalker.com/refactor-in-cli&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;this post follows my method of refactoring code bases from the command line,read more about that in this article.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;c-s-f&lt;/h2&gt;&lt;p&gt;First off browsing through the content of my blog I found many references to master.  I cannot completely whole-sale find and replace each one of them, because some of them are links that I do not own.  Any set of instructions got upgraded from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;-  git checkout master+  git checkout main&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There were countless cases of examples like this to comb through, but it feels good to have them purged of old language.&lt;/p&gt;&lt;h2&gt;rename routes&lt;/h2&gt;&lt;p&gt;Following yesterdays post, I am going to rename my markdown files&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;/static/_redirects&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;shorteners&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;- /gdfm              /blog/today-i-learned-git-diff-feature-master/- /blog/gdfm         /blog/today-i-learned-git-diff-feature-master/+ /gdfm              /blog/today-i-learned-git-diff-feature-main/+ /blog/gdfm         /blog/today-i-learned-git-diff-feature-main/&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;redirect posts&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;+ # master -&amp;gt; main++ /blog/today-i-learned-git-diff-feature-master/   /blog/git-diff-feature-main/&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;redirect external links to repo&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;- /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/master/static/_redirects+ /redirects      https://github.com/WaylonWalker/waylonwalkerv2/edit/main/static/_redirects&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More info on refactoring your blog routes with netlify here.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/gracefully-redirect/"&gt;&lt;img alt="gracefully redirect cover image" src="https://waylonwalker.com/gracefully-redirect.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;em&gt;"Edit This post"&lt;/em&gt; Links&lt;/h2&gt;&lt;p&gt;I literally just added &lt;em&gt;"edit this post"&lt;/em&gt; links to my rss feed and my blog feed.  This was a simple find and replace inside of my blog template and &lt;code&gt;gatsby-config.js&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;Don't Forget about CI&lt;/h2&gt;&lt;p&gt;If you have build/deploy processes that specifically run on master or not on master dont forget to change those to main.  I did everything in a single commit and as soon as I pushed to main it started deploying gloriously.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;name: 🌱 Deploy siteon:  push:    branches:-      - master+      - main&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Now the fun part&lt;/h2&gt;&lt;p&gt;&lt;em&gt;removing &lt;strong&gt;master&lt;/strong&gt; completely&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I mostly just followed this &lt;a href="https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx"&gt;post by Scott Hanselman&lt;/a&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git branch -m master maingit push -u origin main&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then from GitHub go to settings&amp;gt;default branch&amp;gt; select main and accept the risk involved.&lt;/p&gt;&lt;p&gt;After your default is set to main, you have no use for master in your life anymore, time to purge it completely once and for all.  Go to &lt;repo&gt;/branches and trash it.&lt;/p&gt;&lt;p&gt;&lt;img alt="delete master" src="https://waylonwalker.com/delete-master.png" /&gt;&lt;/p&gt;&lt;h2&gt;Stop the Bleeding&lt;/h2&gt;&lt;p&gt;I like how Scott included this nice alias for starting from main from the beginning.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git config --global alias.new '!git init &amp;amp;&amp;amp; git symbolic-ref HEAD refs/heads/main'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;See the Full Diff&lt;/h2&gt;&lt;p&gt;If you happen to want to see the full diff of my change you can see it &lt;a href="https://github.com/WaylonWalker/waylonwalkerv2/commit/4bd26ba8faaf7c72e01cc4946d989e3284302cd0"&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/master-no-more</guid></item><item><title>Strip Trailing Whitespace from Git projects</title><link>https://waylonwalker.com/strip-trailing-whitespace</link><description>A common linting error thrown by various linters is for trailing whitespace. I most often use flake8.  Having an automated way to fix linting errors such as trailing whitespace is invaluable.</description><content:encoded>&lt;p&gt;A common linting error thrown by various linters is for trailing whitespace.  I most often use flake8.  I generally have [pre-commit](&lt;a href="https://waylonwalker.com/pre-commit-is-awesome" title="https://waylonwalker.com/pre-commit-is-awesome"&gt;https://waylonwalker.com/pre-commit-is-awesome&lt;/a&gt;) hooks setup to strip this, but sometimes I run into situations where I jump into a project without it, and my editor lights up with errors.  A simple fix is to run this one-liner.&lt;/p&gt;&lt;h2&gt;One-Liner to strip whitespace&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;bash&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git grep -I --name-only -z -e '' | xargs -0 sed -i -e 's/[ \t]\+\(\r\?\)$/\1/'&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p style='text-align: center' align='center'&gt;&lt;a href='https://waylonwalker.com/pre-commit-is-awesome'&gt;  &lt;img    style='width:400px; max-width:80%; margin: auto;'    width='400'    src="https://waylonwalker.com/pre-commit-is-awesome.png"    alt="pre-commit article"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p&gt;read more about pre-commit &lt;a href="https://waylonwalker.com/pre-commit-is-awesome"&gt;here&lt;/a&gt;.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/strip-trailing-whitespace</guid></item><item><title>If Tmux</title><link>https://waylonwalker.com/if-tmux</link><description>I do much of my work from tmux, I love it so much that I want to setup some functionality that puts me in tmux even if I didnt ask for it. Bash function to check if the shell is in a tmux session. I often open up vim to do some quite edits, but befor</description><content:encoded>&lt;p&gt;I do much of my work from tmux, I love it so much that I want to setup some functionality that puts me in tmux even if I didnt ask for it.&lt;/p&gt;&lt;h2&gt;Bash Function&lt;/h2&gt;&lt;p&gt;Bash function to check if the shell is in a tmux session.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;in_tmux () {  if [ -n "$TMUX" ]; then    return 0  else    return 1  fi  }&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Using the bash function&lt;/h2&gt;&lt;p&gt;I often open up vim to do some quite edits, but before I know it I have several splits open and I need access to another shell utility, but I forgot to start in tmux.  This function makes sure tht I start in tmux everytime.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;if_tmux&lt;/code&gt; to ensure vim is opened in tmux.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;vim () {   in_tmux \    &amp;amp;&amp;amp; nvim \    || bash -c "\    tmux new-session -d;\    tmux send-keys nvim Space +GFiles C-m;\    tmux -2 attach-session -d;    "  }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am not quite sure if this is proper use of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;, let me know if you have a better way to do one thing if &lt;code&gt;in_tmux&lt;/code&gt; returns true and another if it returns faslse.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/if-tmux</guid></item><item><title>Custom Ipython Prompt</title><link>https://waylonwalker.com/custom-ipython-prompt</link><description>I've grown tired of the standard ipython prompt as it doesn't do much to give
me any useful information.  The default one gives out a line number that only
seems to add anxiety as I am working on a simple problem and see that number
grow to several h</description><content:encoded>&lt;p&gt;I've grown tired of the standard ipython prompt as it doesn't do much to giveme any useful information.  The default one gives out a line number that onlyseems to add anxiety as I am working on a simple problem and see that numbergrow to several hundred.  I start to question my ability 🤦‍♂️.&lt;/p&gt;&lt;h2&gt;Configuration&lt;/h2&gt;&lt;p&gt;If you already have an ipython config you can move on otherwise check out thispost on creating an ipython config.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/ipython-config"&gt;https://waylonwalker.com/ipython-config&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;The Dream Prompt&lt;/h2&gt;&lt;p&gt;I want something similar to the starship prompt I am using in theshell.  I want to be able to quickly see my python version,environment name, and git branch.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;python version&lt;/li&gt;&lt;li&gt;active environment&lt;/li&gt;&lt;li&gt;git branch&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt="my zsh prompt" src="https://waylonwalker.com/my-zsh-prompt.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This is my zsh prompt I am using for inspiration&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Basic Prompt&lt;/h2&gt;&lt;p&gt;This is mostly boilerplate that I found from various googlesearches, but this gets me a basic green chevron as my prompt.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from IPython.terminal.prompts import Prompts, Tokenclass MyPrompt(Prompts):    def in_prompt_tokens(self, cli=None):        return [ ( Token.Prompt, "❯ ",), ]    def out_prompt_tokens(self, cli=None):        return []ip = get_ipython()ip.prompts = MyPrompt(ip)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;The rest of this post will build off of this boilerplate and addto the &lt;code&gt;in_prompt_tokens&lt;/code&gt; method of MyPrompt&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Colors&lt;/h2&gt;&lt;p&gt;I mostly set the colors of my prompt throughout this post by guessing andtrying different attributes under the Token.&lt;/p&gt;&lt;h2&gt;Red If Error&lt;/h2&gt;&lt;p&gt;I found that the &lt;code&gt;Prompts&lt;/code&gt; subclass has many of the same methods as the ipythonobject, so I would often use that for inspection.  Looking through the ipythonclass I found a boolean under &lt;code&gt;shell.last_execution_succeeded&lt;/code&gt; that would giveme if the last execution was successful or not.  I did an inline if statemetnto set the color to a &lt;code&gt;Token.Generic.Error&lt;/code&gt; if this was false.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def in_prompt_tokens(self, cli=None):    return [        (            Token.Prompt            if self.shell.last_execution_succeeded            else Token.Generic.Error,            "❯ ",        ),    ]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Python Version&lt;/h2&gt;&lt;p&gt;Next up to list out the python version that is running.  I grabbed the versionfrom &lt;code&gt;platform.python_version&lt;/code&gt;, this seemed to get me the most concise versionthat I was looking for to match the starship prompt.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;update imports&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from platform import python_version&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;update prompt&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def in_prompt_tokens(self, cli=None):    return [        (            (Token.Name.Class, "v" + python_version()),            (Token, " "),            Token.Prompt            if self.shell.last_execution_succeeded            else Token.Generic.Error,            "❯ ",        ),    ]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Python environment&lt;/h2&gt;&lt;p&gt;Since I use conda for my environments I chose to pull the name of theenvironment from the &lt;code&gt;CONDA_DEFAULT_ENV&lt;/code&gt; environment variable that is set byconda when you change your environment.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;update imports&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from platform import python_versionimport os&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;update prompt&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def in_prompt_tokens(self, cli=None):    return [        (            (Token.Prompt, "©"),            (Token.Prompt, os.environ["CONDA_DEFAULT_ENV"]),            (Token, " "),            (Token.Name.Class, "v" + python_version()),            (Token, " "),            Token.Prompt            if self.shell.last_execution_succeeded            else Token.Generic.Error,            "❯ ",        ),    ]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Git Branch&lt;/h2&gt;&lt;p&gt;Git branch was a bit tricky.  There might be a better way to get it,but I was sticking with things I knew, the git cli and python.  Idid need to do a bit of googling to figure out that git has a&lt;code&gt;--show-current&lt;/code&gt; option.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;getting the current git branch&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def get_branch():    try:        return (            subprocess.check_output(                "git branch --show-current", shell=True, stderr=subprocess.DEVNULL            )            .decode("utf-8")            .replace("\n", "")        )    except BaseException:        return ""&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;  If this is run form a non-git directory you will quickly find giterrors after every command as this function tries to ask for the git branch.Sending stderr to devnull will avoid this inconvenience.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;add git branch to prompt&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def in_prompt_tokens(self, cli=None):    return [        (            (Token.Generic.Subheading, "↪"),            (Token.Generic.Subheading, get_branch()),            (Token, " "),            (Token.Prompt, "©"),            (Token.Prompt, os.environ["CONDA_DEFAULT_ENV"]),            (Token, " "),            (Token.Name.Class, "v" + python_version()),            (Token, " "),            Token.Prompt            if self.shell.last_execution_succeeded            else Token.Generic.Error,            "❯ ",        ),    ]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Add current directory name&lt;/h2&gt;&lt;p&gt;I am a big fan of pathlib so that is what I will use to get the path. If Iplanned on using python &lt;code&gt;&amp;lt;3.6&lt;/code&gt; I would probably use something else, but this iswhat I know and I can't think of the last time I used &lt;code&gt;&amp;lt;3.6&amp;gt;&lt;/code&gt; for anything.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;update imports&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from pathlib import Path&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;add git branch to prompt&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def in_prompt_tokens(self, cli=None):    return [        (            (Token, ""),            (Token.OutPrompt, Path().absolute().stem),            (Token, ""),            (Token.Generic.Subheading, "↪"),            (Token.Generic.Subheading, get_branch()),            (Token, " "),            (Token.Prompt, "©"),            (Token.Prompt, os.environ["CONDA_DEFAULT_ENV"]),            (Token, " "),            (Token.Name.Class, "v" + python_version()),            (Token, " "),            Token.Prompt            if self.shell.last_execution_succeeded            else Token.Generic.Error,            "❯ ",        ),    ]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Final Script&lt;/h2&gt;&lt;p&gt;That's it for my prompt at the moment.  I have been using it for about a week.It seems to have everything I need so far, and skips on things I don't need.&lt;/p&gt;&lt;p&gt;Enjoy the full script.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;my final prompt&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from IPython.terminal.prompts import Prompts, Tokenfrom pathlib import Pathimport osfrom platform import python_versionimport subprocessdef get_branch():    try:        return (            subprocess.check_output(                "git branch --show-current", shell=True, stderr=subprocess.DEVNULL            )            .decode("utf-8")            .replace("\n", "")        )    except BaseException:        return ""class MyPrompt(Prompts):    def in_prompt_tokens(self, cli=None):        return [            (Token, ""),            (Token.OutPrompt, Path().absolute().stem),            (Token, " "),            (Token.Generic.Subheading, "↪"),            (Token.Generic.Subheading, get_branch()),            (Token, " "),            (Token.Prompt, "©"),            (Token.Prompt, os.environ["CONDA_DEFAULT_ENV"]),            (Token, " "),            (Token.Name.Class, "v" + python_version()),            (Token, " "),            (Token.Name.Entity, "ipython"),            (Token, "\n"),            (                Token.Prompt                if self.shell.last_execution_succeeded                else Token.Generic.Error,                "❯ ",            ),        ]    def out_prompt_tokens(self, cli=None):        return []ip = get_ipython()ip.prompts = MyPrompt(ip)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/custom-ipython-prompt</guid></item><item><title>Integration testing with Python, TestProject.io, and GitHub Actions</title><link>https://waylonwalker.com/testproject-io-py-actions</link><description>As I continue to build out https://waylonwalker.com/ I sometimes run into some errors that are not caught becuase I do not have good testing implemented. I want to explore some integration testing options using GitHub actions.</description><content:encoded>&lt;p&gt;As I continue to build out &lt;a href="https://waylonwalker.com/"&gt;waylonwalker.com&lt;/a&gt; I sometimes run into some errors that are not caught because I do not have good testing implemented.  I want to explore some integration testing options using GitHub's actions.&lt;/p&gt;&lt;p&gt;Running integration tests will not prevent bugs from happening completely, but it will allow me to quickly spot them and rollback.&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;🤔 What to test first?&lt;/h2&gt;&lt;p&gt;The very first thing that comes to my mind is anything that is loaded or ran client-side.  Two things quickly came to mind here.  I run gatsby so most of my content is statically rendered, and it yells at me if something isn't as expected.  For performance reasons I lazy load cards on my blogroll, loading all of the header images gets heavy and kills lighthouse (if anyone actually cares). I am also loading some information from the top open-source libraries that I have created.  To prevent the need to rebuild the whole site to get the latest information I am just using the GitHub API client-side.&lt;/p&gt;&lt;p&gt;things I was looking for from features to test&lt;/p&gt;&lt;ul&gt;&lt;li&gt;client-side interactions&lt;/li&gt;&lt;li&gt;external API&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;features on my blog to consider testing&lt;/p&gt;&lt;ul&gt;&lt;li&gt;lazy-loaded blog cards&lt;/li&gt;&lt;li&gt;GitHub Repos&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Repo Cards&lt;/h2&gt;&lt;p&gt;I chose to start with the GitHub repos as they seemed a bit more straight forward, and it's been a while since I have done any selenium.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;img src='https://waylonwalker.com/open-source-cards.png' style='width:600px; max-width:80%; margin: auto;' alt='Open Source cards as they look on waylonwalker.com'/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;here is what the GitHub repo cards look like&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;TestProject.io&lt;/h2&gt;&lt;p&gt;I am trying out &lt;a href="https://TestProject.io"&gt;TestProject.io&lt;/a&gt; for the first time on this project.  My experience so far has been top-notch.  There was an existing suite of docker images/files set up to run the TestProject agent in a docker container alongside headless chrome and firefox drivers.  The first thing that you are going to need is a &lt;a href="https://app.TestProject.io/#/integrations/sdk"&gt;TP_DEV_TOKEN &lt;/a&gt; and &lt;a href="https://app.TestProject.io/#/integrations/api"&gt;TP_API_KEY&lt;/a&gt;.  These will give TestProject access to your account so that it can automatically post results to your &lt;a href="https://app.TestProject.io/#/reports"&gt;dashboard&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://app.TestProject.io/#/integrations/sdk"&gt;TP_DEV_TOKEN &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://app.TestProject.io/#/integrations/api"&gt;TP_API_KEY&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Put these in secrets in your repo&lt;/h3&gt;&lt;p&gt;In your GitHub repo go to &lt;code&gt;settings&amp;gt;Secrets&lt;/code&gt;, or append &lt;code&gt;settings/secrets&lt;/code&gt; to the URL to your repo, and add the tokens.  This will give GitHub safe access to them without them being available to the public, contributors, log files, or anything.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;img src='https://waylonwalker.com/test-waylonwalker-com-secrets.png' style='width:600px; max-width:80%; margin: auto;' alt='Secrets panel in the GitHub Repo'/&gt;&lt;/p&gt;&lt;h2&gt;Setup Dev&lt;/h2&gt;&lt;p&gt;To expedite development I went ahead and set up development environment that I could log into on Digital Ocean.  This allowed me to get all of my tests working a bit quicker than just running them through GitHub, but being as similar as possible.  This allowed me to learn the ins and outs of setting up TestProject without needing to do a full install every time through Github's actions.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/notes/new-machine-tpio'&gt;  &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/new-machine-tpio-rm.png"    alt="Test Project Dev Machine setup notes card"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I am not going to go into full dev machine setup here, but you can read my &lt;a href="https://waylonwalker.com/notes/new-machine-tpio"&gt;setup notes&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;🐍 Pytest&lt;/h2&gt;&lt;p&gt;&lt;em&gt;you can see all of the tests ran with pytest on &lt;a href="https://github.com/waylonwalker/waylonwalker-com-tests/tree/master/tests"&gt;github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I chose to go down the route of using pytest.  I really liked the idea of utilizing fixtures, automatically running my test functions, and utilizing a bit of the pytest reporting capabilities.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; per pytest standard practice I named the directory containing tests &lt;code&gt;tests&lt;/code&gt;.  While this works, TestProject.io uses this director as the default name for the project.  If I were to go back I would either rename the directory to what I want to show up on TestProject.io or configure the project name inside of the config.&lt;/p&gt;&lt;h2&gt;conftest.py&lt;/h2&gt;&lt;p&gt;&lt;em&gt;You can see the &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/conftest.py"&gt;conftest.py&lt;/a&gt; live on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;pytest automatically imports &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/conftest.py"&gt;conftest.py&lt;/a&gt; modules from the same directory that you are working from.  It's common to place fixtures used across multiple files here.  I placed a driver fixture in this module so that as I create more tests it will be available everywhere by default.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;conftest.py stores fixtures for all modules in a directory.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# tests/conftest.pyimport timeimport pytestfrom src.TestProject.sdk.drivers import web driver@pytest.fixturedef driver():    "creates a webdriver and loads the homepage"    driver = webdriver.Chrome()    driver.get("https://waylonwalker.com/")    yield driver    driver.quit()&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Look at the full version of &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/conftest.py"&gt;conftest.py&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The above sample is a bit &lt;strong&gt;simplified&lt;/strong&gt;.  I ran into some inconsistencies in the real version and found that some tests had a better pass rate if I added a wait.  I ended up with a &lt;code&gt;driver&lt;/code&gt; and a &lt;code&gt;slow_driver&lt;/code&gt; fixture.&lt;/p&gt;&lt;h2&gt;test_repos.py&lt;/h2&gt;&lt;p&gt;&lt;em&gt;see the full &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/tests/test_repos.py"&gt;testrepos.py&lt;/a&gt; on GitHub&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I have initially set up 3 different tests for the repo cards.  I set a list of repos that I expect to show up in the cards.  These tests are quite easy to do with TestProject.io as it is using selenium and a headless browser to execute javascript under the hood.&lt;/p&gt;&lt;p&gt;If you are not familiar a &lt;strong&gt;headless browser&lt;/strong&gt; runs the engine as your browser without a graphical user interface.  JavaScript gets fully loaded and parsed, and the dom is completely interactive programmatically.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;"""Test that GitHub repo data dynamically loads the client-side."""REPOS = [    "find-kedro",    "kedro-static-viz",    "kedro-action",    "steel-toes",]def test_repos_loaded(slow_driver):    """    Test that each repo-name exists as a title in one of the repo cards.    On waylonwalker.com repo cards have a title with a class of "repo-name"    """    repos = slow_driver.find_elements_by_class_name("repo-name")    # get innertext from elements    header_text = [        header.text for header in repos    ]    for repo in REPOS:        assert repo in header_textdef test_repo_description_loaded(slow_driver):    """    Test that each repo has a description longer than 10 characters    On waylonwalker.com repo cards have a descriptiion with a class of "repo-description"    """    repo_elements = slow_driver.find_elements_by_class_name("repo")    for el in repo_elements:        desc = el.find_element_by_class_name("repo-description")        assert len(desc.text) &amp;gt; 10def test_repo_stars_loaded(slow_driver):    """    Ensure that stars are properly parsed from the API and loaded client-side    On waylonwalker.com repo cards have a stars element with a class of "repo-stars" and    is displayed as "n stars"    """    repo_elements = slow_driver.find_elements_by_class_name("repo")    for el in repo_elements:        stars = el.find_element_by_class_name("repo-stars")        num_stars, label = stars.text.split()        assert int(num_stars) &amp;gt; 0        assert label == 'stars'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Forum&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://forum.TestProject.io/t/install-agent-inside-github-actions/2334/3"&gt;forum.TestProject.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Before jumping into the real action.  I quickly wanted to mention the &lt;strong&gt;amazing&lt;/strong&gt; ✨  discord server that they have going.&lt;/p&gt;&lt;p&gt;I was a bit confused about how to set up TestProject.io inside of actions.  I was with a prompt response linking me to the exact example I needed.  The tests were written in java, but they had set up the docker-compose steps that I needed.&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;GitHub Actions 🎬&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/workflows/test-waylonwalker-com.yml"&gt;test-waylonwalker-com.yml&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;GitHub actions are a continuous integration, continuous delivery service by GitHub that will spin up a VM and run a set of steps upon a number of triggers including push, pull request, and schedule.&lt;/h2&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/github-actions-syntax'&gt;  &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/github-actions-syntax-rm.png"    alt="GitHub Actions Syntax article card"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you're new to actions check out this article on using actions.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;p&gt;Now that I have my GitHub repo setup with my &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/tree/master/tests"&gt;tests&lt;/a&gt; successfully running in pytest, let's get it running inside of GitHub actions automatically.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;name: Test WaylonWalker.com# Controls when the action will run. Triggers the workflow on push or pull request# events but only for the master branchon:  push:    branches: [ main ]  pull_request:    branches: [ main ]  schedule:    - cron: '*/10 * * * *'&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see in the section above I have set up to run every time there is a push to or pull request open to main.  I also set a fairly aggressive test schedule to run every &lt;strong&gt;10&lt;/strong&gt; &lt;strong&gt;minutes&lt;/strong&gt;.  For now, this is just to build confidence in the tests and get more data in the reports to explore.  I will likely turn this down later.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;jobs:  test:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@main    - uses: actions/setup-python@v2      with:        python-version: '3.8'    - run: pip install -r requirements.txt    - name: Run TestProject Agent      env:        TP_API_KEY: ${{ secrets.TP_API_KEY }} # &amp;lt; Let Secrets handle your keys      run: |        envsubst &amp;lt; .github/ci/docker-compose.yml &amp;gt; docker-compose.yml        cat docker-compose.yml        docker-compose -f docker-compose.yml up -d    - name: Wait for Agent to Register      run: bash .github/ci/wait_for_agent.sh    - run: pytest      env:        TP_DEV_TOKEN: ${{ secrets.TP_DEV_TOKEN }} # &amp;lt; Let Secrets handle your tokens        TP_AGENT_URL: http://localhost:8585&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the test job you can see that we have rendered the &lt;a href="https://app.TestProject.io/#/integrations/api"&gt;TP_API_KEY&lt;/a&gt; into the &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/ci/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt; using &lt;code&gt;envsubst&lt;/code&gt; file so that TestProject has access to it.  We have also exposed our &lt;a href="https://app.TestProject.io/#/integrations/sdk"&gt;TP_DEV_TOKEN &lt;/a&gt; to pytest.&lt;/p&gt;&lt;h2&gt;docker-compose.yml&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/ci/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The following &lt;a href="https://github.com/WaylonWalker/waylonwalker-com-tests/blob/master/.github/ci/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt; file was graciously contributed by &lt;a href="https://github.com/vitalybu"&gt;@vitalybu&lt;/a&gt; in the &lt;a href="https://github.com/testproject-io/java-sdk/blob/master/.github/ci/docker-compose.yml"&gt;testproject-io/java-sdk&lt;/a&gt; repo.  It sets up a template with the &lt;strong&gt;&lt;code&gt;TP_API_KEY&lt;/code&gt;&lt;/strong&gt; as a variable for envsubst, headless browsers for chrome and firefox, and the TestProject.io agent.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;version: "3.1"services:  testproject-agent:    image: testproject/agent:latest    container_name: testproject-agent    depends_on:      - chrome      - firefox    environment:      TP_API_KEY: "${TP_API_KEY}"      TP_AGENT_TEMP: "true"      TP_SDK_PORT: "8686"      CHROME: "chrome:4444"      CHROME_EXT: "localhost:5555"      FIREFOX: "firefox:4444"      FIREFOX_EXT: "localhost:6666"    ports:    - "8585:8585"    - "8686:8686"  chrome:    image: selenium/standalone-chrome    volumes:      - /dev/shm:/dev/shm    ports:    - "5555:4444"  firefox:    image: selenium/standalone-firefox    volumes:      - /dev/shm:/dev/shm    ports:    - "6666:4444"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;⌚ Waiting for the Agent to register&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://waylonwalker.com/waitforagent.sh"&gt;wait for agent.sh&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I think the most interesting part of the workflow above is how we wait for the agent to register.  The shell script is a bit terse, but it looks for exceeding the &lt;code&gt;max_attempts&lt;/code&gt; allowed or that the agent has started by using its &lt;code&gt;/api/status&lt;/code&gt; rest API.  This prevents us from wasting too much time by setting a big wait, or trying to move on too early and running pytest without a running agent.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;trap 'kill $(jobs -p)' EXITattempt_counter=0max_attempts=100mkdir -p build/reports/agentdocker-compose -f docker-compose.yml logs -f | tee build/reports/agent/log.txt&amp;amp;until curl -s http://localhost:8585/api/status | jq '.registered' | grep true; do    if [ ${attempt_counter} -eq ${max_attempts} ]; then    echo "Agent failed to register. Terminating..."    exit 1    fi    attempt_counter=$(($attempt_counter+1))    echo    sleep 1done&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;TestProject.io Dashboard 〽&lt;/h2&gt;&lt;p&gt;One one of the coolest features that you get from TestProject.io are the &lt;a href="https://app.testproject.io/#/reports"&gt;reports&lt;/a&gt; dashboard.  To me, this felt like a premium feature for &lt;strong&gt;free&lt;/strong&gt;.  Here you can see a time-series plot of your tests success rate over time.  It gives you a bit of an ability to slice in, but not a lot.  Some of the filters are pre-canned, like the past 2 days are past 30 days cannot be customized.&lt;/p&gt;&lt;p style='text-align: center'&gt;  &lt;img    style='width:800px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/tpio-test-repos.png"    alt="My Dashboard for test_repos"  /&gt;&lt;/p&gt;&lt;h2&gt;A single test flow in the dashboard&lt;/h2&gt;&lt;p&gt;As you drill in you can see individual tests that have been run, select them, and see individual reports for each test.  Personally I really like the layout on the side.  It converts the steps ran by the driver into a human-readable &lt;em&gt;flowchart&lt;/em&gt;, and each step can be opened up to see their values.  It would be nice if it picked up my pytest assertions, but picking up what it did was great.&lt;/p&gt;&lt;p style='text-align: center'&gt;  &lt;img    style='width:350px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/test_repo_stars_loaded.png"    alt="driver flow of test_repo_stars_loaded"  /&gt;&lt;/p&gt;&lt;h2&gt;Overall 😄&lt;/h2&gt;&lt;p&gt;The experience I had setting up TestProject.io to run inside GitHub's actions was great.  It was fairly simple to set up and get running with many of the greatest integration testing tools of today, selenium, chrome, firefox.&lt;/p&gt;&lt;p&gt;Now I am going to turn the test frequency down a bit.&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;More Actions&lt;/h2&gt;&lt;p&gt;If you're new to actions check out this article on using actions.&lt;/p&gt;&lt;TABLE&gt;&lt;TR&gt;   &lt;TD&gt;      &lt;a href='https://waylonwalker.com/four-github-actions-website'&gt;      &lt;img         style='margin: auto; float: left'         src="https://waylonwalker.com/four-github-actions-website-rm.png"         alt="GitHub Actions Syntax article card"         /&gt;      &lt;/a&gt;   &lt;/TD&gt;   &lt;TD&gt;      &lt;a href='https://waylonwalker.com/four-github-actions-python'&gt;      &lt;img         style='margin: auto; float: right;'         src="https://waylonwalker.com/four-github-actions-python-rm.png"         alt="GitHub Actions Syntax article card"         /&gt;      &lt;/a&gt;   &lt;/TD&gt;&lt;/TR&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/testproject-io-py-actions</guid></item><item><title>Blogging For Me</title><link>https://waylonwalker.com/blogging-for-me</link><description>I create this blog with one person in mind, me. This is not completely selfish, as there are likely many others out there that
think similarly to me.  Everyone comes from different backgrounds and varying
levels of experience.  In no way do you need </description><content:encoded>&lt;p&gt;I create this blog with one person in mind, me.&lt;/p&gt;&lt;h2&gt;There are others like me&lt;/h2&gt;&lt;p&gt;This is not completely selfish, as there are likely many others out there thatthink similarly to me.  Everyone comes from different backgrounds and varyinglevels of experience.  In no way do you need to be an expert to create contentothers will benefit from.&lt;/p&gt;&lt;h2&gt;Accurate&lt;/h2&gt;&lt;p&gt;I am as accurate as possible.  I don't know everything, and If I waited forthat to happen I would never post, or write at such a high level no one else(including me) would ever want to read.&lt;/p&gt;&lt;p&gt;Generally I know that I am directionally accurate for most of the article.  Infact there is often a part of the article that I don't feel the best about.  Itmay have been some code that could have been better.  I try to point thesethings out.  Often when I am honest and point out where I know there isimprovement to be had I get the most welcoming comments, "that was just finehow you did that", or "I tried that myself and saw a better abstraction.&lt;/p&gt;&lt;h2&gt;Create the articles I want to read&lt;/h2&gt;&lt;p&gt;Generally the articles I want to read are directly relatable to things I amcurrently working on and vary over time.  Over the last year its been leaning abit more towards automation with&lt;a href="https://waylonwalker.com/archive/linux"&gt;bash&lt;/a&gt;,&lt;a href="https://waylonwalker.com/archive/python"&gt;python&lt;/a&gt;,&lt;a href="https://waylonwalker.com/archive/kedro"&gt;kedro&lt;/a&gt; tools.&lt;/p&gt;&lt;h2&gt;On Brand&lt;/h2&gt;&lt;p&gt;I try to stay on brand to who I am.  I remember writing my first articles.  Iwas trying to be whitty, and include funny memes.  Thats not me.  I am not acommedian, and generally memes go right over my head.  I can remember back inHigh School, I was the one that didn't understand a lot of pop culture and waskinda treated as if I was always living under a rock.  I knew it was true and Iowned it, so no one ever got too mean about it.&lt;/p&gt;&lt;h1&gt;Honest, never fake&lt;/h1&gt;&lt;p&gt;I will not try to pretend that I know everything.  You may read my blog onoccasion and think I know a lot, also possible that you think "wow what anidiot".  I welcome you to share your thoughts and techniques in a positive way.I often cringe at some of my old posts and think about how differently I wouldapproach something not that long after posting.  I honest, never fake know whatI need to know and don't pretend to know anything outside of my wheelhouse.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/blogging-for-me</guid></item><item><title>What is Kedro</title><link>https://waylonwalker.com/what-is-kedro</link><description>Kedro is an open source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to setup your own python library for data pipelining.  It includes really great ways to manipulate `catalogs` and `pipelines`.  This article will cover the 10K view of kedro, future articles will dive deper into each one.</description><content:encoded>&lt;p&gt;&lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; is an open-source data pipeline framework.  It provides guardrails to set your project up right from the start without needing to know deeply how to set up your own python library for data pipelining.  It includes great ways to manipulate &lt;code&gt;catalogs&lt;/code&gt; and &lt;code&gt;pipelines&lt;/code&gt;.  This article will cover the 10K view of &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt;, future articles will dive deeper into each one.&lt;/p&gt;&lt;!-- {% slideshare DAZrqvJmuUUfFF %} --&gt;&lt;h2&gt;Libraries&lt;/h2&gt;&lt;p&gt;Currently, &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; is broken down into 3 different libraries.&lt;/p&gt;&lt;p&gt;💎 &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt;&lt;/p&gt;&lt;p&gt;📉 &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;🏗 &lt;a href="https://github.com/quantumblacklabs/kedro-docker"&gt;kedro-docker&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img alt="kedro logo" src="https://waylonwalker.com/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7175616e74756d626c61636b6c6162732f6b6564726f2f6d61737465722f696d672f6b6564726f5f62616e6e65722e6a7067.jpg" /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; is the core of the ecosystem.  It provides the docs, getting started, &lt;code&gt;kedro new&lt;/code&gt; templates, and the core library including the catalog and pipeline.&lt;/p&gt;&lt;h3&gt;Catalog&lt;/h3&gt;&lt;p&gt;&lt;img alt="catalogs" src="https://dev-to-uploads.s3.amazonaws.com/i/trzfj86dbq0ronis26x1.jpg" /&gt;&lt;/p&gt;&lt;p&gt;Inside this core library is a data catalog object.  This allows you to specify attributes about your data, then load and save it without ever writing a single line of read/write code, which can become very cumbersome.  Older versions would load this into the io variable, currently it loads into the catalog.  The power of the catalog is that it allows you to read and write data by just referencing its name.  Typically this is done inside of a YAML file, but can be done in python.&lt;/p&gt;&lt;p&gt;Here is an example of a CSV dataset stored locally&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;# Example 1: Loads a local csv filebikes:  type: CSVLocalDataSet  filepath: "data/01_raw/bikes.csv"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This dataset can be loaded by name&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;catalog.load('bikes')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Though it's not typical practice it is possible to save data to a catalog entry ad-hoc.  Typically the pipeline is used to run functions and save data for you.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdbikes_df = pd.DataFrame({...&amp;lt;bikes_data&amp;gt;...})catalog.datasets.bikes.save(bikes_df)&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Pipeline&lt;/h3&gt;&lt;p&gt;&lt;img alt="building pipelines" src="https://waylonwalker.com/roman-pentin-T5QT2bmiD4E-unsplash.jpg" /&gt;&lt;/p&gt;&lt;p&gt;The pipeline object is the brains of &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt;.  When working with &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; you simply define functions that take in data as arguments, manipulate it, and return a new dataset.  The pipeline will decide what order to execute these functions ini based on their dependencies.  It will then work with the catalog to load the data from the catalog pass it to your function, the save the returned data in the catalog.&lt;/p&gt;&lt;p&gt;Here is an example pipeline from the docs.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdimport numpy as npfrom kedro.pipeline import Pipelinefrom kedro.pipeline import nodedef clean_data(cars: pd.DataFrame,               boats: pd.DataFrame) -&amp;gt; Dict[str, pd.DataFrame]:    return dict(cars_df=cars.dropna(), boats_df=boats.dropna())def halve_dataframe(data: pd.DataFrame) -&amp;gt; List[pd.DataFrame]:    return np.array_split(data, 2)nodes = [    node(clean_data,         inputs=['cars2017', 'boats2017'],         outputs=dict(cars_df='clean_cars2017',                      boats_df='clean_boats2017')),    node(halve_dataframe,         'clean_cars2017',         ['train_cars2017', 'test_cars2017']),    node(halve_dataframe,         dict(data='clean_boats2017'),         ['train_boats2017', 'test_boats2017'])]pipeline = Pipeline(nodes)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; is a priceless component to the &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; ecosystem.  It gives you x-ray vision into your project.  You can see exactly how data flows through your pipeline.  Since it is fully automated it is always up to date and never lies to you.  &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; is an integral part of my daily debugging and refactoring toolbelt.&lt;/p&gt;&lt;p&gt;Starting the viz from the command line is super easy&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd my-kedro-projectkedro viz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/pipeline_visualisation.png" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-docker"&gt;kedro-docker&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-docker"&gt;kedro-docker&lt;/a&gt; is a simple way to set up your project for production.  It provides a few simple cli commands&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd my-kedro-projectkedro docker buildkedro docker run&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Other resources&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://kedro.readthedocs.io/"&gt;kedro docs&lt;/a&gt; have a ton of great resources.  They are searchable, but can be a bit of an overwhelming amount of data.&lt;/p&gt;&lt;p&gt;I keep adding to my &lt;a href="https://waylonwalker.com/notes/kedro/"&gt;kedro notes&lt;/a&gt; as I find new and interesting things.&lt;/p&gt;&lt;p&gt;I tweet out most of those snippets as I add them, you can find them all here &lt;a href="https://twitter.com/search?q=%23kedrotips"&gt;#kedrotips&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;More to come&lt;/h2&gt;&lt;p&gt;I am planning to do more articles like this, you can stay up to date with them by following me on &lt;a href="https://dev.to/waylonwalker"&gt;dev.to&lt;/a&gt;, subscribing to my &lt;a href="https://waylonwalker.com/rss.xml"&gt;rss feed&lt;/a&gt;, or subscribe to my &lt;a href="https://waylonwalker.com/newsletter"&gt;newsletter&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/what-is-kedro</guid></item><item><title>Create Configurable Kedro Hooks</title><link>https://waylonwalker.com/kedro-class-hooks</link><description>There are two main ways to create kedro hooks, with modules and classes.  Each one still uses the same verbiage as the function/method names.  Class hooks seem a bit special as they give you a way to configure them so that they are a bit more generally useful.</description><content:encoded>&lt;p&gt;There are two main ways to create kedro hooks, with modules and classes.  Each one still uses the same verbiage as the function/method names.&lt;/p&gt;&lt;p&gt;Class hooks seem a bit special as they give you a way to configure them so that they are a bit more generally useful.&lt;/p&gt;&lt;blockquote&gt;&lt;h3&gt;What is Kedro 🤔&lt;/h3&gt;&lt;p&gt;If you are completely unsure what kedro is be sure to check out my &lt;a href="https://waylonwalker.com/wike"&gt;what is kedro&lt;/a&gt; post&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Installation&lt;/h2&gt;&lt;p&gt;.create a new environment manager of choice.  Here I will use &lt;code&gt;conda&lt;/code&gt;. Then we will install &lt;code&gt;kedro&lt;/code&gt; from pypi.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n kedro_class_hooks -yconda activate kedro_class_hooks # may also be source activate kedro_class_hooks or activate kedro_class_hookspip install kedro&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create a sample project&lt;/h2&gt;&lt;blockquote&gt;&lt;h3&gt;Kedro new&lt;/h3&gt;&lt;p&gt;For more details check out my full post on &lt;a href="https://waylonwalker.com/knew"&gt;kedro new&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;For this post I really just want a working pipeline as fast as possible.  For this I am going to use iris pipeline that is generated from the &lt;code&gt;kedro new&lt;/code&gt; command in the cli.  It's &lt;strong&gt;important&lt;/strong&gt; that you answer &lt;code&gt;y&lt;/code&gt; to create an example pipeline.&lt;/p&gt;&lt;blockquote&gt;&lt;h3&gt;Hold On ✋&lt;/h3&gt;&lt;p&gt;Did you create a separate environment for this?  Please do.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro new&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you run the &lt;code&gt;kedro new&lt;/code&gt; command it will ask a series of questions.  👇 Here is how I answered them.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;Project Name:=============Please enter a human readable name for your new project.Spaces and punctuation are allowed. [New Kedro Project]: Kedro Class HooksRepository Name:================Please enter a directory name for your new project repository.Alphanumeric characters, hyphens and underscores are allowed.Lowercase is recommended. [kedro-class-hooks]:Python Package Name:====================Please enter a valid Python package name for your project package.Alphanumeric characters and underscores are allowed.Lowercase is recommended. Package name must start with a letter or underscore. [kedro_class_hooks]:Generate Example Pipeline:==========================Do you want to generate an example pipeline in your project?Good for first-time users. (default=N) [y/N]: yChange directory to the project generated in /mnt/c/temp/kedro-hooks/A best-practice setup includes initialising git and creating a virtual environment before running `kedro install` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Install the Project&lt;/h3&gt;&lt;p&gt;Next install the project itself and all of its dependencies with the &lt;code&gt;kedro install&lt;/code&gt; command.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd kedro-hookskedro install&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;🏃‍♀️ Run the pipeline&lt;/h3&gt;&lt;p&gt;Before we start developing any hooks lets make sure everything is set up correctly by running the pipeline with &lt;code&gt;kedro run&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro run&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;class hook without &lt;code&gt;self&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;A kedro class-based hook is a class with methods using the kedro lifecycle names, decorated with &lt;code&gt;@hook_impl&lt;/code&gt;, If we create a class-based kedro hook without &lt;code&gt;self&lt;/code&gt; in the method calls, we simply pass the hook class itself into the hooks list. And we are off.  Kedro will call each method as it hits that point in its lifecycle.  It will pass any of the possible arguments, see arguments below.  Each method has a different set of possible arguments.  You don't need to ask for all of them, but I did here so that you could see them.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.framework.hooks import hook_implclass debug_hook:    """debugs all kedro hook points"""    @staticmethod    @hook_impl    def before_pipeline_run(run_params, pipeline, catalog):        "pops into a debugger before pipeline run"        print('I hooked in right before the pipeline run')        if self.should_before_pipeline_run:            breakpoint()    @staticmethod    @hook_impl    def after_pipeline_run(run_params, pipeline, catalog):        "pops into a debugger after pipeline run"        print('I hooked in right after the pipeline run')        breakpoint()    @staticmethod    @hook_impl    def on_pipeline_error(error, run_params, pipeline, catalog):        "pops into a debugger on pipeline error"        print('I hooked into the pipeline during an error')        breakpoint()    @staticmethod    @hook_impl    def after_catalog_created(catalog, conf_catalog, conf_creds, feed_dict, save_version, load_versions, run_id):        "pops into a debugger after catalog created"        print('I hooked in right after the catalog created')        breakpoint()    @staticmethod    @hook_impl    def before_node_run(node, catalog, inputs, is_async, run_id):        "pops into a debugger before node run"        print('I hooked in right before the node run')        breakpoint()    @staticmethod    @hook_impl    def after_node_run(node, catalog, inputs, outputs, is_async, run_id):        "pops into a debugger after node run"        print('I hooked in right after the node run')        breakpoint()    @staticmethod    @hook_impl    def on_node_error(error, node, catalog, inputs, is_async, run_id):        "pops into a debugger on node error"        print('I hooked into the node during an error')        breakpoint()&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Implement the hook object&lt;/h4&gt;&lt;p&gt;With this version of the hook it gets added to the &lt;code&gt;ProjectContext&lt;/code&gt; as the class itself, not an instance.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class ProjectContext(KedroContext):    """Users can override the remaining methods from the parent class here,    or create new ones (e.g. as required by plugins)    """    project_name = "kedro_class_hooks"    # `project_version` is the version of kedro used to generate the project    project_version = "0.16.1"    package_name = "kedro_class_hooks"    hooks = [        debug_hook    ]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Generalizing debug_hook&lt;/h2&gt;&lt;p&gt;If we want to generalize the debug hook and make it a bit more re-usable across all of our projects, we can include the &lt;code&gt;self&lt;/code&gt; argument, on each method and a &lt;code&gt;__init__&lt;/code&gt; method in which we can configure our hook.  This will make the hook configurable.  We can now create an instance of the &lt;code&gt;debug_hook&lt;/code&gt; class, and tell it which lifecycle points should trigger the debugger.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;""" Kedro Debug Hook module """from kedro.framework.hooks import hook_implclass debug_hook:    """ Kedro Debug Hook    Opens a debugger at any hook-able point of your kedro projects lifecycle.    debug_hook is applied by adding it to the pipeline and setting the desired    debug points to true.    Examples:        &amp;gt;&amp;gt;&amp;gt; hooks = [debug_hook(should_debug_all=True)]        &amp;gt;&amp;gt;&amp;gt; hooks = [debug_hook(should_debug_before_pipeline_run=True)]    Args:        should_debug_all (bool): overrides all points Defaults to False        should_debug_before_pipeline_run (bool): opens a debugger            before_pipeline_run if True Defaults to False        should_debug_after_pipeline_run (bool): opens a debugger            after_pipeline_run if True Defaults to False        should_debug_on_pipeline_error (bool): opens a debugger            on_pipeline_error if True Defaults to False        should_debug_before_node_run (bool): opens a debugger            before_node_run if True Defaults to False        should_debug_after_node_run (bool): opens a debugger            after_node_run if True Defaults to False        should_debug_on_node_error (bool): opens a debugger            on_node_error if True Defaults to False        should_debug_after_catalog_created (bool): opens a debugger            after_catalog_created if True Defaults to False    """    def __init__(        self,        should_debug_all=False,        should_debug_before_pipeline_run=False,        should_debug_after_pipeline_run=False,        should_debug_on_pipeline_error=False,        should_debug_before_node_run=False,        should_debug_after_node_run=False,        should_debug_on_node_error=False,        should_debug_after_catalog_created=False,    ):        self.should_debug_before_pipeline_run = (            should_debug_before_pipeline_run or should_debug_all        )        self.should_debug_after_pipeline_run = (            should_debug_after_pipeline_run or should_debug_all        )        self.should_debug_on_pipeline_error = (            should_debug_on_pipeline_error or should_debug_all        )        self.should_debug_before_node_run = (            should_debug_before_node_run or should_debug_all        )        self.should_debug_after_node_run = (            should_debug_after_node_run or should_debug_all        )        self.should_debug_on_node_error = should_debug_on_node_error or should_debug_all        self.should_debug_after_catalog_created = (            should_debug_after_catalog_created or should_debug_all        )    @hook_impl    def before_pipeline_run(self, run_params, pipeline, catalog):        "pops into a debugger before pipeline run"        if self.should_debug_before_pipeline_run:            breakpoint()    @hook_impl    def after_pipeline_run(self, run_params, pipeline, catalog):        "pops into a debugger after pipeline run"        if self.should_debug_after_pipeline_run:            breakpoint()    @hook_impl    def on_pipeline_error(self, error, run_params, pipeline, catalog):        "pops into a debugger on pipeline error"        if self.should_debug_on_pipeline_error:            breakpoint()    @hook_impl    def after_catalog_created(        self,        catalog,        conf_catalog,        conf_creds,        feed_dict,        save_version,        load_versions,        run_id,    ):        "pops into a debugger after catalog created"        if self.should_debug_after_catalog_created:            breakpoint()    @hook_impl    def before_node_run(self, node, catalog, inputs, is_async, run_id):        "pops into a debugger before node run"        if self.should_debug_before_node_run:            breakpoint()    @hook_impl    def after_node_run(self, node, catalog, inputs, outputs, is_async, run_id):        "pops into a debugger after node run"        if self.should_debug_after_node_run:            breakpoint()    @hook_impl    def on_node_error(self, error, node, catalog, inputs, is_async, run_id):        "pops into a debugger on node error"        if self.should_debug_on_node_error:            breakpoint()&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;implement the hook instance&lt;/h4&gt;&lt;p&gt;When &lt;code&gt;self&lt;/code&gt; is used in the method calls we must pass an instance of the &lt;code&gt;debug_hook&lt;/code&gt; into the hooks list, not the class itself.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class ProjectContext(KedroContext):    """Users can override the remaining methods from the parent class here,    or create new ones (e.g. as required by plugins)    """    project_name = "kedro_class_hooks"    # `project_version` is the version of kedro used to generate the project    project_version = "0.16.1"    package_name = "kedro_class_hooks"    hooks = [debug_hook(should_debug_all=True)]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Final thoughts&lt;/h2&gt;&lt;p&gt;Hooks are an amazing addition to the kedro framework that will allow the community to make big changes to how their kedro project gets ran without needing to change kedro itself.  Using a hook class with self can make them so much more configurable, and reusable across different projects without a lot of extra code. Personally I still really like the module method that we used in &lt;a href="https://waylonwalker.com/creating-the-kedro-preflight-hook/"&gt;kedro-preflight&lt;/a&gt;.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-class-hooks</guid></item><item><title>How Kedro handles your inputs</title><link>https://waylonwalker.com/kedro-inputs</link><description>Passing inputs into kedro is a key concept. Understanding how it accepts a single catalog key as input is quite trivial that easily makes sense, but passing a list or dictionary of catalog entries can be a bit confusing.</description><content:encoded>&lt;p&gt;Passing inputs into kedro is a key concept.  Understanding how it accepts a single catalog key as input is quite trivial that easily makes sense, but passing a list or dictionary of catalog entries can be a bit confusing.&lt;/p&gt;&lt;h2&gt;&lt;em&gt;args/&lt;/em&gt;*args review&lt;/h2&gt;&lt;p&gt;Check out this post for a review of how &lt;code&gt;*args&lt;/code&gt; &lt;code&gt;**kwargs&lt;/code&gt; work in python.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;&lt;img alt="python args and kwargs" src="https://waylonwalker.com/python-args-kwargs.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;python args and kwargs&lt;/a&gt; article by &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_waylonwalker&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;All Kedro inputs are catalog Entries&lt;/h2&gt;&lt;p&gt;When kedro runs your pipeline it uses the catalog to imperatively load your data, meaning that you don't tell kedro how to load your data, you tell it where your data is and what type it is.  These catalog entries are like a &lt;code&gt;key-value&lt;/code&gt; store.  You just need to give the key when setting up a node.&lt;/p&gt;&lt;h2&gt;Single Inputs&lt;/h2&gt;&lt;p&gt;These are fairly straightforward to understand.  In the example below when &lt;code&gt;kedro&lt;/code&gt; runs the pipeline it will load the input from the catalog, then pass that input to the func, then save the returned value to the output catalog entry.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline import nodedef create_int_sales(sales):    "cleans up raw sales data"    ...    return cleaned_salesmy_node = node(    func=create_int_sales,    inputs='raw_sales',    output='int_sales',    )&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;h2&gt;List of inputs&lt;/h2&gt;&lt;p&gt;Let's look at an example node that combines more than one dataset. When kedro has sees a list of catalog entries it will load up each catalog entry sequentially then pass them in order to the &lt;code&gt;create_sales_report&lt;/code&gt; function.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline import nodedef create_sales_report(sales, products):    "adds product metadata to the sales data"    ...my_node = node(    func=create_sales_report,    inputs=['pri_sales', 'pri_products'],    output='sales_report',    )&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;simulating pipeline run using 2 inputs&lt;/h2&gt;&lt;p&gt;Here We can simulate what kedro does during the pipeline run by using &lt;code&gt;*args&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# inputs you gave kedroinputs=['pri_sales', 'pri_products']# load datainput_data = [catalog.load(entry) for entry in  inputs]# run the nodesales_report = create_sales_report(*input_data)# save the data to the outputcatalog.datasets.sales_report.save(sales_report)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;More generalizable functions&lt;/h2&gt;&lt;p&gt;We can also use &lt;code&gt;*args&lt;/code&gt; to make our functions a little bit more generalizable. The first thatcomes to my mind is a unioner. The second&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def unioner(*dfs: pd.DataFrame): -&amp;gt; pd.DataFrame    pd.concat(dfs)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can pass any number of DataFrames into our kedro node to get unioned together, butdo we really need a function for a one-liner... No we can use an inline function for this case.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;my_node = node(    func=lambda *dfs: pd.concat(dfs),    input=['sales_2017', 'sales_2018'],    output='sales',)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;code&gt;*args&lt;/code&gt; scares the crap out of me!&lt;/h2&gt;&lt;p&gt;It's great for the &lt;code&gt;unioner&lt;/code&gt; example where its a collection of similar things where orderdoes not matter.  But for the &lt;code&gt;create_sales_report&lt;/code&gt; function.  Those are distinctly differentinputs.  If someone does some refactoring and changes the order in one place or another it'sgoing to turn into a bad day real fast.&lt;/p&gt;&lt;h2&gt;**kwargs are a bit better&lt;/h2&gt;&lt;p&gt;Let's refactor the &lt;code&gt;create_sales_report&lt;/code&gt; before someone tries to ruin our day.  We can easilydo this by passing a dictionary (keys are the argument name, values are the catalog key)of arguments to kedro instead of a list.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline import nodedef create_sales_report(sales, products):    "adds product metadata to the sales data"    ...my_node = node(    func=create_sales_report,    inputs={'sales': 'pri_sales', 'products': 'pri_products'},    output='sales_report',    )&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now if someone tries to refactor the order of arguments we are safe!&lt;/p&gt;&lt;h2&gt;Simulating the pipeline run with &lt;code&gt;**kwargs&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Pretty much the same as before, except with &lt;code&gt;**kwargs&lt;/code&gt; and &lt;code&gt;dictionaries&lt;/code&gt; keeping us a bitsafer.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# inputs you gave kedroinputs={'sales': 'pri_sales', 'products': 'pri_products'},# load datainput_data = {arg: catalog.load(entry) for arg, entry in inputs.items()}# run the nodesales_report = create_sales_report(**input_data)# save the data to the outputcatalog.datasets.sales_report.save(sales_report)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Stay Safe&lt;/h2&gt;&lt;p&gt;Kedro inputs are quite easy to understand if you already have a grasp of &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;and if you don't it is still fairly intuitive to pick up.  Stay on the safe side, if yourcollection of inputs are clearly different things, use a dictionary for safety.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-inputs</guid></item><item><title>Should I switch to Zeit Now</title><link>https://waylonwalker.com/should-i-switch-to-zeit-now</link><description>Should I switch to Zeit Now.  Netlify build times are starting to creep in.</description><content:encoded>&lt;h1&gt;Netlify&lt;/h1&gt;&lt;p&gt;I have happily had my personal site &lt;a href="https://waylonwalker.com"&gt;waylonwalker.com&lt;/a&gt; hosted on netlify for nearly 2 years now.  In fact I have hosted about a dozen different toy projects to play with on there, 4 of which have gone far enough to get a custom domain name.  They are fast to deploy and consistently do so on every &lt;code&gt;git push&lt;/code&gt; to main.&lt;/p&gt;&lt;h2&gt;Zeit&lt;/h2&gt;&lt;p&gt;I have recently started playing with zeit again.  I really like their cli tool, its dead simple and makes sense.  I tried the netlify one early on and dont think I really gave it much of a chance. I was able to backup a site we were modifying by saving everything locally (literally control+s) and running &lt;code&gt;now&lt;/code&gt; in the command line.&lt;/p&gt;&lt;p&gt;While I was on the site I realized that when switching to gatsby v2 I had deployed it to now.sh while testing, before cutting over to the updated one on netlify.  It has been building every version since without issue!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It has been building every version since without issue!&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;What I am using&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;gatsby&lt;/li&gt;&lt;li&gt;forestry.io&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I am using gatsby to build my site, and I do use forestry.io as a cms to be able to edit/manage posts online.  I think forestry is part of my problem in that it has added extra builds.  Every time I upload an image or save a post, even a draft, it pushes to production.&lt;/p&gt;&lt;h2&gt;Why Switch&lt;/h2&gt;&lt;p&gt;This is just a side hobby for me.  I do not make any $$ off of it, and I do not want to pay for anything I do not have to.  As I am stepping up my blogging I have already hit 50% of my build quota only 1 week into the month on netlify.  I really like what netlify is doing for the JAMstack community, but I would rather build everything locally and push to GHPages for this project than have to pay for it.&lt;/p&gt;&lt;h2&gt;What Are your suggestions&lt;/h2&gt;&lt;p&gt;Do you use Zeit?&lt;/p&gt;&lt;p&gt;Where do you host your gatsby.js site?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/should-i-switch-to-zeit-now</guid></item><item><title>RSS feed for your Gatsby Site</title><link>https://waylonwalker.com/gatsby-rss-feed</link><description>Add an rss feed to your Gatsby Site</description><content:encoded>&lt;p&gt;Adding an rss feed to your gatsby js site is super simple.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.gatsbyjs.org/packages/gatsby-plugin-feed/"&gt;https://www.gatsbyjs.org/packages/gatsby-plugin-feed/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Install&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;npm install --save gatsby-plugin-feed&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;How to use&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// In your gatsby-config.jsmodule.exports = {  plugins: [    {      resolve: `gatsby-plugin-feed`,      options: {        query: `          {            site {              siteMetadata {                title                description                siteUrl                site_url: siteUrl              }            }          }        `,        feeds: [          {            serialize: ({ query: { site, allMarkdownRemark } }) =&amp;gt; {              return allMarkdownRemark.edges.map(edge =&amp;gt; {                return Object.assign({}, edge.node.frontmatter, {                  description: edge.node.excerpt,                  date: edge.node.frontmatter.date,                  url: site.siteMetadata.siteUrl + edge.node.fields.slug,                  guid: site.siteMetadata.siteUrl + edge.node.fields.slug,                  custom_elements: [{ "content:encoded": edge.node.html }],                })              })            },            query: `              {                allMarkdownRemark(                  sort: { order: DESC, fields: [frontmatter___date] },                ) {                  edges {                    node {                      excerpt                      html                      fields { slug }                      frontmatter {                        title                        date                      }                    }                  }                }              }            `,            output: "/rss.xml",            title: "Your Site's RSS Feed",            // optional configuration to insert feed reference in pages:            // if `string` is used, it will be used to create RegExp and then test if pathname of            // current page satisfied this regular expression;            // if not provided or `undefined`, all pages will have feed reference inserted            match: "^/blog/",            // optional configuration to specify external rss feed, such as feedburner            link: "https://feeds.feedburner.com/gatsby/blog",          },        ],      },    },  ],}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;My updated graphql query&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-graphql"&gt;{    allMarkdownRemark(        sort: { order: DESC, fields: [frontmatter___date] }        filter: {            frontmatter: {                templateKey: { in: ["blog-post"] }                status: { in: ["published"] }            }        }    ) {        edges {            node {                excerpt                rawMarkdownBody                fields {                    slug                }                frontmatter {                    title                    date                    cover {                        relativePath                    }                    twitter_cover {                        relativePath                    }                }            }        }    }}&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gatsby-rss-feed</guid></item><item><title>I just added react-headroom to my site</title><link>https://waylonwalker.com/react-headroom</link><description>It was so easy to get a professional looking navbar with just 3 lines of code.  This thing is so usable on mobile.</description><content:encoded>&lt;p&gt;It was so easy to get a professional looking navbar with just 3 lines of code.  This package seriously is so usable on mobile it is rediculous.  I found this package from &lt;a href="https://www.gatsbyjs.org/blog/100days/react-component/?utm_campaign=100%20Days%20of%20Gatsby&amp;amp;utm_source=hs_email&amp;amp;utm_medium=email&amp;amp;utm_content=82376619&amp;amp;_hsenc=p2ANqtz-_DBh1A1A-GEy2TujddXq_H1de5wGZ_X6jIqB2wv_PE7QgUk40pfi64jbSVHv-S3bfzKZOQywtoTuup2aeO0o_KpeiF8w&amp;amp;_hsmi=82376619"&gt;day 4&lt;/a&gt; of the 100 days of gatsby challenge.  It is by the wonderful man who brought us gatsbyjs Kyle Mathews, so you know its gotta be good.&lt;/p&gt;&lt;h2&gt;install react-headroom&lt;/h2&gt;&lt;p&gt;installation is easy&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;npm i react-headroom&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Import Headroom&lt;/h2&gt;&lt;p&gt;There was no instructions for es6 style imports that are common with gatsbyjs sites like mine, but it was intuitive to figure out.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-js"&gt;import Headroom from 'react-headroom'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Using Headroom&lt;/h2&gt;&lt;p&gt;Simply wrap your existing content, Nav in my case, with the &lt;code&gt;&amp;lt;Headroom /&amp;gt;&lt;/code&gt; component and your off to the races.  The content will pop back into view when you scroll past then back up.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;Headroom&amp;gt;   &amp;lt;-- Your content goes here --&amp;gt;&amp;lt;/Headroom&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;See it in action&lt;/h2&gt;&lt;p&gt;I think this simple package completely changes the ux of your site on mobile.  You can get that sticky nav out of the way, but its still right there with just a little bit of a scroll up.&lt;/p&gt;&lt;p&gt;&lt;img alt="showing it in action on waylonwalker.com" src="https://waylonwalker.com/react-headroom-b.gif" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Here it is on &lt;a href="https://waylonwalker.com"&gt;waylonwalker.com&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Configurable&lt;/h2&gt;&lt;p&gt;&lt;code&gt;react-headroom&lt;/code&gt; is configurable, but I did not find it necessary.  I really like the simplicity that it brought by just adding the &lt;code&gt;&amp;lt;Headroom\&amp;gt;&lt;/code&gt; component.&lt;/p&gt;&lt;p&gt;&lt;img alt="react-headroom docs" src="https://waylonwalker.com/react-headroom-docs.png" /&gt;&lt;/p&gt;&lt;h2&gt;Links&lt;/h2&gt;&lt;p&gt;Check out the relavant links for more details.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href="https://github.com/KyleAMathews/react-headroom"&gt;https://github.com/KyleAMathews/react-headroom&lt;/a&gt;&lt;strong&gt;Demo Site&lt;/strong&gt;: &lt;a href="https://kyleamathews.github.io/react-headroom/"&gt;https://kyleamathews.github.io/react-headroom/&lt;/a&gt;&lt;strong&gt;Docs&lt;/strong&gt;: &lt;a href="https://kyleamathews.github.io/react-headroom/"&gt;https://kyleamathews.github.io/react-headroom/&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/react-headroom</guid></item><item><title>Pycon 2017 Roundup</title><link>https://waylonwalker.com/pycon-2017-roundup</link><description>none</description><content:encoded>&lt;h1&gt;Pycon 2017 Roundup&lt;/h1&gt;&lt;p&gt;Good afternoon fellow Data Geeks.  Last week &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg"&gt;Pycon&lt;/a&gt; released 141 videos of greatness.  Here are my top picks from the event.&lt;/p&gt;&lt;h2&gt;#3 Kelsey Hightower - Keynote - Pycon 2017&lt;/h2&gt;&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;t=1795s"&gt;http://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;t=1795s&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;#2 Al Sweigart Yes, It's Time to Learn Regular Expressions PyCon 2017&lt;/h2&gt;&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=abrcJ9MpF60"&gt;http://www.youtube.com/watch?v=abrcJ9MpF60&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;#1 Trey Hunner Readability Counts PyCon 2017&lt;/h2&gt;&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=knMg6G9_XCg"&gt;http://www.youtube.com/watch?v=knMg6G9_XCg&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;What's on Tap&lt;/h2&gt;&lt;p&gt;This afternoon we have a cup of from one of my favorite roasters Thirty Thiry Coffee.  This&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.thirty-thirtycoffee.com/" title="Whats on Tap"&gt;&lt;img alt="Whats on Tap" src="https://www.thirty-thirtycoffee.com/wp-content/uploads/2016/09/thirty-thirty-peoria-logo.png" /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pycon-2017-roundup</guid></item><item><title>Don’t waste your time learning everything</title><link>https://waylonwalker.com/don-t-waste-your-time-learning-everything</link><description>Stick to what you know, and learn a little bit of something new every day.</description><content:encoded>&lt;blockquote&gt;&lt;h1&gt;"Don’t waste your time learning everything."&lt;/h1&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/dont-waste-your-time-learning-everythign-post.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Inspired by this &lt;a href="https://www.linkedin.com/posts/activity-6633818327070326784--Ksl"&gt;linkedIn post&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I felt that this comment was very powerful. Here are my 2 cents.&lt;/p&gt;&lt;h2&gt;Be Productive&lt;/h2&gt;&lt;p&gt;Stick to what you know, and learn a little bit of something new every day. If what you know is how to use Excel like a boss, don't fee ashamed that you are missing something. Be proud and use what you know.&lt;/p&gt;&lt;h2&gt;Don't Stagnate&lt;/h2&gt;&lt;p&gt;Take small steps enhance what you know now with something new that you get you closer to where you want to be. If you need something that sci-py offers learn how to load in data and use that part. If your sick of waiting for IT to pull data out of the database so you can use it, learn that.&lt;/p&gt;&lt;h2&gt;Dont Overwhelm Yourself&lt;/h2&gt;&lt;p&gt;If you try to drop everything you know now and jump whole hog into these new flashy things its not going to work. Learn what you need to know.  New things crop up very often.  They will come and go.  Some things will get traction, some will never get much traction past an impressive hello world example.&lt;/p&gt;&lt;h2&gt;Keep your finger on new tech&lt;/h2&gt;&lt;p&gt;Its important to keep your finger on the state of technology, but dont Overwhelm yourself learning every new thing that comes out.  Make silly hello world examples in these new things and walk away.  When its time to implement something new into a real project you will be ready and understand how to do it.  If that thing dies its good that you didn't waste a lot of time on it, but chances are it inspired the thing that actually takes off.  Then you will have some understanding of what the next thing is doing ahead of everyone else who missed out on the original.&lt;/p&gt;&lt;h2&gt;I'll leave you with this inspirational video by Kitze&lt;/h2&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_kVxXV0TQ7M"&gt;&lt;img alt="" src="https://waylonwalker.com/2020-02-16 09-57-03_Microsoft Text Input Application.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_kVxXV0TQ7M"&gt;Navigating the hype-driven frontend development world without going insane - KITZE&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/don-t-waste-your-time-learning-everything</guid></item><item><title>Autoreload in Ipython</title><link>https://waylonwalker.com/autoreload-ipython</link><description>Autoreload in python</description><content:encoded>&lt;h1&gt;Autoreload in Ipython&lt;/h1&gt;&lt;p&gt;I have used &lt;code&gt;%autoreload&lt;/code&gt; for several years now with great success and 🔥 rapid reloads.  It allows me to move super fast when developing libraries and modules.  They have made some great updates this year that allows class modules to be automatically be updated.&lt;/p&gt;&lt;h2&gt;What I like about autoreload&lt;/h2&gt;&lt;p&gt;🔥 Blazing Fast&lt;/p&gt;&lt;p&gt;💥 Keeps me in the comfort of my text editor&lt;/p&gt;&lt;p&gt;👏 Allows me to use Jupyter when I need&lt;/p&gt;&lt;p&gt;👟 Extremely Reliable&lt;/p&gt;&lt;p&gt;One of the biggest benefits that I find is that it shortens the distance between my module/library code and test code inside of a terminal/notebook.  Now I primarily use jupyter notebooks for the presentation aspect.  I develop code from the comfort of my editor with all of the tools I have setup, and run the functions in a notebook to get the output.  From there I might do some aggregations or plots, but the 🥩 meat of development is done outside of jupyter.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Now I primarily use jupyter notebooks for the presentation aspect.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Enabling Autoreload&lt;/h2&gt;&lt;p&gt;📐 &lt;em&gt;config&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This is a short script that I use to setup ipython so that it automatically reloads modules.  This allows me to use a separate terminal and editor, and keep data in memory while developing functions.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ipython profile create&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then edit the created file &lt;code&gt;~/.ipython/profile_default/ipython_config.py&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;c.InteractiveShellApp.extensions = ['autoreload']c.InteractiveShellApp.exec_lines = ['%autoreload 2']c.InteractiveShellApp.exec_lines.append('print("Warning: disable autoreload in ipython_config.py to improve performance.")')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;According to the docs&lt;/h2&gt;&lt;p&gt;&lt;a href="https://ipython.org/ipython-doc/3/config/extensions/autoreload.html#caveats" title="IPython caveats"&gt;autoreload caveates&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Some of the known remaining caveats are:&lt;/p&gt;&lt;p&gt;Replacing code objects does not always succeed: changing a @property in a class to an ordinary method or a method to a member variable can cause problems (but in old objects only).Functions that are removed (eg. via monkey-patching) from a module before it is reloaded are not upgraded.C extension modules cannot be reloaded, and so cannot be autoreloaded.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;So what can gets updated??&lt;/h2&gt;&lt;p&gt;🤲 &lt;em&gt;Nearly everything...&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;new/updated functions&lt;/li&gt;&lt;li&gt;new/updated functions&lt;/li&gt;&lt;li&gt;new/updated class methods&lt;/li&gt;&lt;li&gt;new/updated class attributes&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What does not get updated&lt;/h2&gt;&lt;p&gt;🔄 &lt;em&gt;needs restart&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;config&lt;/strong&gt; files that are side loaded with modules typically do not get updated in my experience, and I tend to restart the session.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt; class methods do not get reran, but the session does not need to be reloaded.  The class instance will just need to be re-instanciated.&lt;/p&gt;&lt;h2&gt;Testing out the capabilities&lt;/h2&gt;&lt;p&gt;💨 &lt;em&gt;Watch&lt;/em&gt; it go&lt;/p&gt;&lt;p&gt;Here is a gif of me taking autoreload out for a test drive.  When creating the session test_autoreload.py does not even exist. From there new functions, classes, attributes, and methods are added in the file and all live reload into ipython.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/test_autoreload4.gif" /&gt;&lt;em&gt;for more gifs like these follow me on twitter&lt;/em&gt; &lt;a href="https://twitter.com/_WaylonWalker"&gt;&lt;em&gt;@waylonwalker&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;What About Jupyter Notebooks????&lt;/h2&gt;&lt;p&gt;💥 &lt;em&gt;Exactly the Same&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Since jupyter uses ipython in be background Jupyter will use the same &lt;code&gt;ipython_config.py&lt;/code&gt; file to have autoreload enabled by default.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/test_autoreload_jupyter.gif" /&gt;&lt;em&gt;for more gifs like these follow me on twitter&lt;/em&gt; &lt;a href="https://twitter.com/_WaylonWalker"&gt;&lt;em&gt;@waylonwalker&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Go use it now&lt;/h2&gt;&lt;p&gt;Take the splash into rapid development of python functions with minimal distance between your modules/library and your ipython/jupyter session.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/autoreload-ipython</guid></item><item><title>Pycon 2018 Roundup</title><link>https://waylonwalker.com/pycon-2018-roundup</link><description>none</description><content:encoded>&lt;p&gt;These are my notes from pycon 2018 videos.  I love the python community and especially the conference talks.  This year I am going to take some notes from my favorite talks and post them here.&lt;/p&gt;&lt;p&gt;This is an &lt;strong&gt;Incomplete&lt;/strong&gt; working post.&lt;/p&gt;&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=zQeYx87mfyw"&gt;Jake VanderPlas - Performance Python: Seven Strategies for Optimizing Your Numerical Code&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Always&lt;/strong&gt; profile &lt;strong&gt;before&lt;/strong&gt; making any optimizations.&lt;/li&gt;&lt;li&gt;Vectorize with Numpy&lt;ul&gt;&lt;li&gt;Looping in python can be slow&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Use specialized data structures.&lt;ul&gt;&lt;li&gt;scipy.spacial&lt;/li&gt;&lt;li&gt;pandas&lt;/li&gt;&lt;li&gt;xarray&lt;/li&gt;&lt;li&gt;scipy.sparse&lt;/li&gt;&lt;li&gt;sparse package&lt;/li&gt;&lt;li&gt;scipy.sparce.csgraph&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Cython&lt;ul&gt;&lt;li&gt;Add types&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Numba&lt;ul&gt;&lt;li&gt;jit&lt;/li&gt;&lt;li&gt;Fortran Like Speed&lt;/li&gt;&lt;li&gt;heavy dependencies&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dask&lt;ul&gt;&lt;li&gt;distributed tasks&lt;/li&gt;&lt;li&gt;Can be executed locally or on a cluster&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Look for an existing package&lt;ul&gt;&lt;li&gt;&lt;strong&gt;resist the urge to reinvent the wheel&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zQeYx87mfyw"&gt;https://www.youtube.com/watch?v=zQeYx87mfyw&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=LDdUuoI_lIg"&gt;Justin Crown - "WHAT IS THIS MESS?" - Writing tests for pre-existing code bases - PyCon 2018&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was a great talk about not only test driven development on existing code bases, but how to be a good steward of code.  Justin talks about how to clean up an existing code base, and leave it better than you found it.  Start by improving the parts that you touch, write tests, and improve docstrings whenever you make a change to a particular feature.  As you clean up the code base and it matures consider taking a sprint day to write tests and imporove documentation.  Doing it after you have familiarity with the project will make it much easier to do.  You will also improve your understanding of the parts that you have not touched along the way.&lt;/p&gt;&lt;p&gt;One of the biggest takeaways that I heard in this talk, was do not assume that last person to touch the code was any less than yourself.  They likely did what they did for a reason, so before you have strong test coverage accross the project take it easy with rewriting everything they did, and only make the necessary changes.  Your changes could have an impact on other parts of the code base that you are not familiar with.&lt;/p&gt;&lt;p&gt;https://.youtube.com/watch?v=zQeYx87mfyw&lt;/p&gt;&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=q-x7jK72E6E"&gt;Jason Huggins - Keynote &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Jason had a great talk about teaching kids to code through his experiences with First Lego League.  He found that the event has the best of intentions, but does lend itself to schools with a larger budget that is able to order many different kits.  He has found himself deep down a rabbit hole of finding an affordable alternative that can be done with the inexpensive raspbery pi zero, and controlled  with the cheapest tablets.  He is currently working on a programming language called wildcard, that can be programmed with paper.  This really reminds me of a game that I play with my 5 year old son &lt;a href="https://www.robotturtles.com"&gt;Robot Turtles&lt;/a&gt;.  He really likes to play it.  I will definitely be following this project to see if this is something that I can do with him when its ready.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=q-x7jK72E6E"&gt;https://www.youtube.com/watch?v=q-x7jK72E6E&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=ITksU31c1WY"&gt;Dan Callahan - Keynote - PyCon 2018&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was a bit sad when I was looking through the list of PyCon 2018 talks and did not see anything that appeared to talk about web assembly, but hidden in Dan Callagan's keynote was a great story about web assembly and what it means to python.  Dan's keynote was a great story about using the best tools available to you.  He goes back to his childhood where he programmed in basic because thats what he could take with him away from the desktop on his TI-82.  In modern times we have so many platforms other than desktop, and new ones comming out so frequently that its impossible to see what the next one will be.  There are even computers in refrigerators today.  The one thing that seems to be common is that they all have a web browser.  With that we can write web apps with python, but we are still missing the JavaScript dominated client side story.  Dan shows that this is changing with web assembly.  He showed examples where Autodesk compiled Autocad to wasm, and can run it in the browser!!  He showed versions of windows 3 running completely inside of firefox.  While it is currenly not realistic to compile python to web assembly as it creates large file sizes, it is possible and he sees a bright future for python in the browser.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ITksU31c1WY"&gt;https://www.youtube.com/watch?v=ITksU31c1WY&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=DlgG0QdrqAU"&gt;Alex Petralia - Analyzing Data: What pandas and SQL Taught Me About Taking an Average&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Asks the right questions before writing the first line of code.  Even the simplest questions such as averages have many possible pitfalls along the way.  Alex discusses how to prepare your data before averaging in this talk.  He brings some new &lt;em&gt;"Jargon"&lt;/em&gt; .  I am not sure that this jargon made this any easier for me to understand or discuss.  It may take some time for this one to sink in to become effective.  I feel like using plain english is more effective as it is more easily understood by anyone.  "find the &lt;strong&gt;daily&lt;/strong&gt; average &lt;strong&gt;sales&lt;/strong&gt; by &lt;strong&gt;seller&lt;/strong&gt;"&lt;/p&gt;&lt;h3&gt;Jargon&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Collapsing key:&lt;/strong&gt;* the collapsed/aggregated data relevant to this analysis* &lt;em&gt;we are overriding the primary key (i.e. what a table defines as an observation)&lt;/em&gt;* the original number of rows&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Grouping key:&lt;/strong&gt; the key defining a group*** &lt;em&gt;eg. "for each Seller" is (seller), "for each Country and city is (Country, City)&lt;/em&gt;* this defines how many rows are in the result&lt;/p&gt;&lt;p&gt;** Obvervation key: a unit of observation for this analysis*** &lt;em&gt;eg. "daily average" is (Date), "across regions" is (Region)&lt;/em&gt;* this defines how many rows are in the denominator&lt;/p&gt;&lt;h3&gt;Formula&lt;/h3&gt;&lt;p&gt;Collapsing Key - Grouping Key = Observation Key&lt;/p&gt;&lt;h3&gt;Example Question&lt;/h3&gt;&lt;p&gt;Calculate the Average Daily Sales for each Seller.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Collapsing Key:&lt;/strong&gt; (Date, Seller)&lt;strong&gt;Grouping Key:&lt;/strong&gt; (Seller)&lt;strong&gt;Observation Key:&lt;/strong&gt; (Date)&lt;/p&gt;&lt;h3&gt;data set&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;Seller&lt;/th&gt;&lt;th&gt;ApplesSold&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Monday&lt;/td&gt;&lt;td&gt;Mary&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Monday&lt;/td&gt;&lt;td&gt;Bob&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Tuesday&lt;/td&gt;&lt;td&gt;Bob&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Thursday&lt;/td&gt;&lt;td&gt;Jane&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Thursday&lt;/td&gt;&lt;td&gt;Jane&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;SQL Example&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-SQL"&gt;SELECT    Seller,    AVG(total)FROM (    SELECT       DATE,       SELLER,       SUM(ApplesSold) AS total    FROM       Apples    GROUP BY       DATE,       SELLER -- Collapsing Key    ) as tGROUP BY    Seller -- Grouping Key&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Pandas Example&lt;/h3&gt;&lt;p&gt;I am interested in trying out this technique of using the second groupby.  I typically use an unstack instead, but that relies on having the order of the Collapsing key correct.&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;(pd    .groupby(['Date', 'Seller']) # Collapsing Key    ['ApplesSold']    .sum()    .groupby(level='Seller') # Grouping Key    .mean()    )&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DlgG0QdrqAU"&gt;https://www.youtube.com/watch?v=DlgG0QdrqAU&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=s36GwDng904&amp;amp;t=1113s"&gt;Devishi Jha - Teaching Python 101 - PyCon 2018&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was really impresssed by the professional level of presentation from Devishi from such a young age!  She had a great talk about teaching python to young people.  This talk really resonated with me as a father of two young children. She was advocating for python to be taught more frequently and earlier in schools.  In her opion onece students have a basic grasp of algebra they should be starting to use python over a higher level abstraction like scratch.  She also advocated that on the other Java tends to make computer science unaproachable and too difficult for students.  It is too large of a jump and tends to steer students away.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=s36GwDng904"&gt;https://www.youtube.com/watch?v=s36GwDng904&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pycon-2018-roundup</guid></item><item><title>What's New in Kedro 0.16.6</title><link>https://waylonwalker.com/whats-new-in-kedro-0166</link><description>This version of kedro releases a new set of supported deployment options and the spaceflights pipeline is officially added as a starter alias.</description><content:encoded>&lt;p&gt;Kedro &lt;a href="https://github.com/quantumblacklabs/kedro/releases"&gt;0.16.6&lt;/a&gt; is out! Let's take a look through the release notes&lt;/p&gt;&lt;h2&gt;Deployment Docs&lt;/h2&gt;&lt;p&gt;This is really exciting to see more deployment options coming from the kedro team. It really shows the power of the framework. The power of some of these orchestrations options is incredible.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/10_deployment/04_argo.html"&gt;Argo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/10_deployment/05_prefect.html"&gt;Prefect&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/10_deployment/06_kubeflow.html"&gt;Kubeflow&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/10_deployment/07_aws_batch.html"&gt;Batch&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/10_deployment/08_aws_sagemaker.html"&gt;SageMaker&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Most of them hinge on a sweet combination of the kedro cli, docker image, and the pipeline knowing your nodes dependencies. &lt;/p&gt;&lt;p&gt;Argo, Prefect, and Kubeflow have an interesting technique where they translate the pipeline and its dependencies from kedro to their language.&lt;/p&gt;&lt;p&gt;Batch uses the aws cli to submit jobs, one node per job, and listen for them to complete. It will submit all nodes with completed dependencies at once, meaning that we can get some massive parallelization.&lt;/p&gt;&lt;p&gt;I did a quick and dirty test of one of these by simulating the technique in a bash script and saw a 40 hr pipeline finish in about 1 hour. I am excited to get this working in my production workflow.&lt;/p&gt;&lt;h2&gt;Spaceflight starter&lt;/h2&gt;&lt;p&gt;They have officially added the spaceflights pipeline as a starter. I have not yet had a chance to try this out, but I anticipate this will be a great pipeline to teach from as it is a bit more complex than the iris pipeline. &lt;/p&gt;&lt;p&gt;I tell folks all the time the best way to learn something new like kedro is to &lt;strong&gt;practice, practice, practice&lt;/strong&gt;. Having this at their fingertips will give an easy way to fire up a pipeline that is ok to break try out some new ideas and leave it. I see this helping me testing out plugins on more complex pipelines and writing blog posts with examples that readers can more easily follow along with.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;practice&lt;/li&gt;&lt;li&gt;testing&lt;/li&gt;&lt;li&gt;blog posts&lt;/li&gt;&lt;li&gt;tutorials&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Better Error Messages&lt;/h2&gt;&lt;p&gt;Shameless pug, my PR landed in kedro, but fell off of the release.md in a merge issue. I was frustrated working on large projects when the wrong arguments were passed into a node and it did not give you any information in the Error to figure out where the error was thrown. Now it will at least give the name of the function that caused the error. This was a simple fix as all of the information was already there.&lt;/p&gt;&lt;h2&gt;Overall&lt;/h2&gt;&lt;p&gt;Love the progress that the project is seeing and the focus on all of the deployment options.&lt;/p&gt;&lt;h2&gt;Thanks for supporting contributions&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/deepyaman"&gt;Deepyaman Datta&lt;/a&gt;, &lt;a href="https://github.com/bnmerchant"&gt;Bhavya Merchant&lt;/a&gt;, &lt;a href="https://github.com/Lovkush-A"&gt;Lovkush Agarwal&lt;/a&gt;, &lt;a href="https://github.com/vhawk19"&gt;Varun Krishna S&lt;/a&gt;, &lt;a href="https://github.com/sebastianbertoli"&gt;Sebastian Bertoli&lt;/a&gt;, &lt;a href="https://github.com/noklam"&gt;noklam&lt;/a&gt;, &lt;a href="https://github.com/djpetti"&gt;Daniel Petti&lt;/a&gt;, &lt;a href="https://github.com/waylonwalker"&gt;Waylon Walker&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/whats-new-in-kedro-0166</guid></item><item><title>simple click</title><link>https://waylonwalker.com/</link><description>Add helpful cli to your python libraries... All of them!</description><content:encoded>&lt;p&gt;cli tools are super handy and easy to add to your python libraries to supercharge them. Even if your library is not a cli tool there are a number of things that a cli can do to your library.&lt;/p&gt;&lt;h1&gt;Example Ideas&lt;/h1&gt;&lt;p&gt;Things a cli can do to enhance your library.&lt;/p&gt;&lt;p&gt;🆚 print version🕶 print readme📝 print changelog📃 print config✏ change config👩‍🎓 run a tutorial🏗 scaffold a project with cookiecutter&lt;/p&gt;&lt;h1&gt;🖱 &lt;a href="https://click.palletsprojects.com/"&gt;Click&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href="https://click.palletsprojects.com/"&gt;Click&lt;/a&gt; is the most popular python cli tool framework for python. There are others, some old, some new comers that make take the crown. For now &lt;a href="https://click.palletsprojects.com/"&gt;Click&lt;/a&gt; is the gold standard if you want to make a powerful cli quickly. If you are dependency conscious and dont need a lot of tooling, use &lt;a href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;Project Structure&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code&gt;.├── setup.py└── simple_click    ├── cli.py    └── __init__.py&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;❯ cli.py&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;    # simple_click/cli.py    import click    __version__ = "1.0.0"    @click.group()    def cli():       pass    @cli.command()    def version():        """prints project version"""        click.echo(__version__)    if __name__ == '__main__':        cli()&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;✨ &lt;strong&gt;init&lt;/strong&gt;.py&lt;/h1&gt;&lt;p&gt;For our simple_click library &lt;code&gt;__init__.py__&lt;/code&gt; can be left empty. It is here purely to signify that simple_click is a library. It is likely that you will import other modules here that need to reside at the top level of your library api, your cli does not need to be at the top of of your api.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;    # __init__.py&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;🚪 Entry Points&lt;/h1&gt;&lt;p&gt;Entry points are the magic that make python cli tools available as their own command without having python before it or the file extension.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;    # setup.py    from setuptools import setup, find_packages    # this is the 🥩 meat of this snippet    # simple_click is the command name    # = simple_click is the library name    # .cli is the cli.py file    # :cli is the cli function    #    # the second item is a shorthand alias to the main command    entry_points = [       "simple_click = simple_click.cli:cli",       "scli         = simple_click.cli:cli",    ]    setup(        name='simple_click',        version='1.0.0',        url='https://github.com/mypackage.git',        packages=find_packages(),        entry_points={"console_scripts": entry_points},    )&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;🕶 See it in action&lt;/h1&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RiG3kZsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zrhvj5yjzyk63np91g9.gif"&gt;&lt;img alt="See it in action" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RiG3kZsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zrhvj5yjzyk63np91g9.gif" title="See it in action" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;📢 Discuss&lt;/h1&gt;&lt;p&gt;What do You wish more python libraries included in their cli?  &lt;a href="https://twitter.com/intent/tweet?text=@_waylonwalker%20More%20libraries%20should%20...%0A%0Awaylonwalker.com/b/scli"&gt;Tweet it @_waylonwalker&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="Tweet it @_waylonwalker" src="https://twitter.com/intent/tweet?text=@_waylonwalker%20More%20libraries%20should%20...%0A%0Awaylonwalker.com/b/scli" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/</guid></item><item><title>Why use a cms</title><link>https://waylonwalker.com/why-use-cms</link><description>When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its html or markdown for front end content, or even hardcoding parameters in our backend languages like python, or node.js.</description><content:encoded>&lt;p&gt;When first learning to code its very common to hard code everything right into the code. This happens with most folks in just about any language. Whether its HTML or markdown for front end content, or even hardcoding parameters in our backend languages like python, or node.js.&lt;/p&gt;&lt;h2&gt;🤷‍♀️ What's wrong with hard coding everything?&lt;/h2&gt;&lt;p&gt;Hard coding everything right into your code makes it really hard for non-technical collaborators to join. It makes it nearly impossible to hand websites off to clients without needing to come back for routine updates.&lt;/p&gt;&lt;p&gt;The cms generally come with a rich content editor that feels more like something most folks are used to. There are buttons for changing the font, font-size, adding images, bold, italics, etc.&lt;/p&gt;&lt;h2&gt;Sometimes I don't feel technical&lt;/h2&gt;&lt;p&gt;Even when you are developing for a technical audience there is a layer of polish that comes from giving them a nice interface to edit their content in. YouTube doesn't have you manually inserting records into the database to add a comment, or upload a new video, nor would anyone expect you to.&lt;/p&gt;&lt;p&gt;&lt;img alt="Edit on GitHub" src="https://dev-to-uploads.s3.amazonaws.com/i/sgqd23rbbusjpfxqr7bl.PNG" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I recently added an edit button on my posts that allows me to jump right into edit on GitHub.  I have used this so much, I should have done this long ago!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There are times when I want to edit my blog on the go from my phone while on the go. I use &lt;a href="https://forestry.io"&gt;forestry.io&lt;/a&gt; to do this for the most part. It gives me an image uploader, and a markdown editor to edit this blog right from my phone.&lt;/p&gt;&lt;p&gt;&lt;img alt="forestry editor" src="https://waylonwalker.com/2019-05-09 10-40-11_forestry.io.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;My Blog on forestry.io&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;What do they output&lt;/h2&gt;&lt;p&gt;There are a number of different CMS's out there, and I haven't touched most of them. Some write content into a MySQL database while others kick out HTML or markdown to a git repo. I prefer the ones built off of a git repo for my site because I am cheap and I am not making anything from this blog yet, but you might want to check into some of the other options if you plan on handing your site off to a client.&lt;/p&gt;&lt;h2&gt;🤑 pricing&lt;/h2&gt;&lt;p&gt;Be aware of the various pricing models. They are priced every which way, per content editor, per site, per number of edits. Some offer free versions. Some are open source but require you to host it somewhere. Before you pick one make sure that you know your requirements.&lt;/p&gt;&lt;h2&gt;CMS's are more norm than I realized&lt;/h2&gt;&lt;p&gt;When I was first starting into web development, I was completely unaware of the concept of a CMS. I had thought that content needs to be in HTML, or markdown, with a few specific places that users could edit. This may have been the case many years ago, but not anymore. The first time I ever designed a website for someone other than myself I got quite a shock when I realized how many edits they wanted, and how un-appealing markdown is for most.&lt;/p&gt;&lt;h2&gt;Where CMS's fall short 🍂&lt;/h2&gt;&lt;p&gt;Please correct me if I am wrong here, I would love to be wrong on this. CMS's are not for developing the whole site. They hold data for content like site title, description, menu items, or blog posts. They don't necessarily give the user a full website designer, with drag and drop, and every widget imaginable. The web developer still needs to implement the site design and data integration.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/why-use-cms</guid></item><item><title>Three things to Automate with Python using Pandas</title><link>https://waylonwalker.com/3-things-to-automate-with-python</link><description>Here are three things that I see my non programming counterparts doing every single day.  These really sum up so much of what folks do within an office.</description><content:encoded>&lt;p&gt;Here are three things that I see my non programming counterparts doing every single day.  These really sum up so much of what folks do within an office.  So many of us dabble in or become power users of spreadsheets without knowing there is an alternative out there that can save us time, automate boring things, and allow us to open up our minds for the part that we add value, Thinking about the data.&lt;/p&gt;&lt;h2&gt;Focus on Value Add Operations&lt;/h2&gt;&lt;p&gt;Lets face it, stitching together spreadsheets is zero value add by itself, but if you can see something in the data and take action on it, this can be huge value add to your company. Learning just a bit of python will help focus more of your attention on "value add operations" and leave the mundane stuff to your computer.&lt;/p&gt;&lt;h2&gt;Merge a directory full of spreadsheets into one&lt;/h2&gt;&lt;p&gt;I see this one all the time.  One team gets a spreadsheet from another team once per month and they need to stich all the pieces together.  Excel really opens the door for some nasty hidden bugs in your manually stiched together data.  It also takes time out of your day that you dont need to spend.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom pathlib import Pathfiles = Path.glob('raw/*.csv')csvs = [pd.read_csv(file) for file in files]csvs_combined = pd.concat(csvs)csvs_combined.to_csv('processed/combined.csv')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Fetch data from a url&lt;/h2&gt;&lt;p&gt;It might be possible that the other team shares their data on a website.  If you can get access to the data via a url, as in the example below there is no need to go to the website to save the data every week/month, you can have python do that for you.  It's very likely that you will need to combine this with step one in many workflows.  Now your data compiling can be done in one single running of a script.  Your data is still in a format that excel can read and you can stick with a hybrid workflow while you become comfortable in python.&lt;/p&gt;&lt;p&gt;There is no shame in opening excel to do something in 5 minutes that would take an hour of research to do in python.  If you stick to it though, piece by piece everything will come together.  You will be able to do more in python than you could imagine in excel and you will wonder how you did it without the help of python.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdcars_url = 'https://www.kaggle.com/abineshkumark/carsdata/download/xrvGk4JtQZJZetxwsCCy%2Fversions%2Fl2HR9tTLKz8MzHMAjBcl%2Ffiles%2Fcars.csv?datasetVersionNumber=1'cars = pd.read_csv(cars_url)cars.to_csv('cars.csv')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Fetch data from a database&lt;/h2&gt;&lt;p&gt;This one can be a bit trickier, often requires hunting down tables that are undocumented. Getting access, and figuring out the crednetials.  If you can get over that hump though it is likely that you will have access to several data source that you typically use in one place.  From there you can learn how to join them together to create powerful workflows.&lt;/p&gt;&lt;p&gt;SQL can be a very daunting language to learn but if you spend an hour with it you will know enough to at least get the data into python or excel.  You can continue to hone your sql skills and move more of your aggregation/analysis into the database for better performance.  If you are asking for 1M rows for a 10 row report the efficiency gains of doing that aggregation in the database and not sending 1M rows over the wire can be immense.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom sqlalchemy import create engineengine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')sql = 'select * from inventory'with engine.connect() as connection:    inventory = pd.read_sql(sql, con)engine.dispose()inventory.to_csv('cars')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Learning to automate has value&lt;/h2&gt;&lt;p&gt;I often see folks joking that developers will spend 10 minutes to automate a 1 minute task that they will only ever do once.  There is definitely a limit to when your time is more valueable just doing the task and moving on, but as you hone your skills you will get much faster.&lt;/p&gt;&lt;p&gt;Things that needed research slowly become intuitive.  Things that used to be brain twisting 50 lines can be an easy to read 12.&lt;/p&gt;&lt;p&gt;Slowly you get better.&lt;/p&gt;&lt;p&gt;Things that were unfeasible become part of your wheelhouse.&lt;/p&gt;&lt;p&gt;Give value to the learning process of automating tasks.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/3-things-to-automate-with-python</guid></item><item><title>🐍 Practice Python Online</title><link>https://waylonwalker.com/practice-python-online</link><description>When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try the out for myself to really understand.</description><content:encoded>&lt;p&gt;When learning a new skill it's important to practice along the way. In order for me to show up to practice I need to make it easy to show up. An easy way to show up to practice with python is to use an online repl. With these, you can try out something quick. Sometimes I see snippets from blogs or tweets and I need to try them out for myself to really understand.&lt;/p&gt;&lt;h2&gt;Three online REPLS&lt;/h2&gt;&lt;p&gt;Here are three different options that I have used in the past to try out something at some various levels. I am sure there are plenty more, but these are three that I have tried. I am not covering all of them, because It's been a while since I have used one other than &lt;a href="https://repl.it"&gt;repl.it&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://python.org/shell/"&gt;python.org/shell/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://repl.it"&gt;repl.it&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://pythonanywhere.com"&gt;pythonanywhere.com&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;repl.it&lt;/h2&gt;&lt;p&gt;&lt;a href="https://repl.it"&gt;repl.it&lt;/a&gt; has been my go-to place to practice python away from my local machine. It's super quick to spin up a new "project" add files, install libraries, and run a script. It's not quite as nice as having all of my personal keyboard shortcuts and extensions, but its the closest thing I have found.&lt;/p&gt;&lt;p&gt;&lt;img alt="repl.it example" src="https://waylonwalker.com/repl-it.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Show up for Practice&lt;/h2&gt;&lt;p&gt;The best way to learn something new in tech is to get your own fingers on the keyboard and start trying new things. Reading and watching videos is great to start, but to get a deep understanding for yourself you need to get your fingers on the keyboard. Make it easy for yourself and find several options that work well for you. &lt;a href="https://repl.it"&gt;repl.it&lt;/a&gt; is one tool that works well for me.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/practice-python-online</guid></item><item><title>How to crush amazing posts on DEV</title><link>https://waylonwalker.com/crush-dev-to-posts</link><description>Here are a few of my top tips to help make dev.to posts more readable, and drive better engagement.</description><content:encoded>&lt;p&gt;This post was inspired by a comment I left on @dsteenman's  post.&lt;/p&gt;&lt;p&gt;{% post dsteenman/how-long-should-a-blogpost-be-2k6n %}&lt;/p&gt;&lt;p&gt;Most of the time I prefer short as I am more likely to read the whole thing.  If its setup as a series I am more likely to work my way through the whole series in a matter of a few sessions.  Just my preference&lt;/p&gt;&lt;p&gt;I will say though there are certain articles that fit well to the long format.  They are articles that folks tend to come back to often as a reference again and again.&lt;/p&gt;&lt;h2&gt;Sections&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="#layout-is-key"&gt;layout is key&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#break-it-up"&gt;Break it up&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#article-types"&gt;Article types&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#superpost"&gt;superpost&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#single-post"&gt;single post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#series"&gt;series&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#discussion"&gt;discussion&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#post-what-you-want-to-read"&gt;Post what you want to read&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;layout is key&lt;/h2&gt;&lt;p&gt;Either way, you go &lt;strong&gt;layout is key&lt;/strong&gt;.  You are not &lt;strong&gt;Steven King&lt;/strong&gt;, no matter how great of a writer you are, you are unlikely to hold attention like he can.  Most folks reading blogs scan articles first.  I often scan, then read.  If the article is really good or pertains well to me I will read everything, otherwise, I go back and read only the sections of interest.  If there are no discernable sections you lost me.&lt;/p&gt;&lt;p&gt;For this reason, you need to break up your post, into sections and treat the heading for each one like you would a title of a full post.&lt;/p&gt;&lt;h3&gt;&lt;abbr title="Table of Contents"&gt;TOC&lt;/abbr&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Table of Contents&lt;/em&gt;&lt;/p&gt;&lt;p&gt;A lot of folks responded to Danny's post suggesting a table of contents.  For some reason I have never included a &lt;abbr title="Table of Contents"&gt;TOC&lt;/abbr&gt; in my posts.  It's something I am now considering.  I am really good at changing layout right before, or after, shipping a brand new post.&lt;/p&gt;&lt;p&gt;&lt;em&gt;semi-auto &lt;abbr title="Table of Contents"&gt;TOC&lt;/abbr&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;As I am highly allergic to unnecessary rework and potential mistakes I put together this snippet that generates the &lt;abbr title="Table of Contents"&gt;TOC&lt;/abbr&gt;automatically, just paste this into your console, and paste the results in your article.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// pres F12// paste this in the console// get your auto generated DEV TOCconsole.log(  [...document.querySelectorAll('.anchor')]  .map(a =&amp;gt;    `1. [${a.parentElement.innerText}](#${a.href.split('#')[1]})`  )  .join('\n'))&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Break it up&lt;/h2&gt;&lt;p&gt;Use headings, images, and blockquotes to break your article up and make it scannable.  I treat each heading as an article title.  It should be engaging and pull the reader in, but not be clickbaity and irritate them when they didn't get what they expected.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;make it scannable! ... treat each heading as an article title&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;Markdown&lt;/h3&gt;&lt;p&gt;Get Familiar with Markdown. Check out this &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet"&gt;cheatsheet&lt;/a&gt; or the reference right in the DEV editor.  This is not an article about markdown, but here are the most common tags you need to break up your article.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;# H1## H2### H3... up to H6* unordered* list* of* things1. ordered1. list1. of1. things![Alt text of image](put-link-to-image-here)**bold**_italics_~~strikethrough~~👇 Horizontal rules are great a making a hard break between sections---&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DEV also supports these HTML elements for additional flair, use wisely. Some can make for some really jarring style that really pulls the readers eye to and is hard to focus on the rest.  I'm talking about you &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-HTML"&gt;&amp;lt;small&amp;gt;small text&amp;lt;/small&amp;gt;&amp;lt;sup&amp;gt;superscript text&amp;lt;/sup&amp;gt;&amp;lt;sub&amp;gt;subscript text&amp;lt;/sub&amp;gt;&amp;lt;mark&amp;gt;highlighted text&amp;lt;/mark&amp;gt;&amp;lt;abbr title="Table of Contents"&amp;gt;TOC&amp;lt;/abbr&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Liquid Tags&lt;/h3&gt;&lt;p&gt;When Editing a post click the Liquid Tag reference to the right, for a list of everything.  The &lt;code&gt;post&lt;/code&gt; tag is the retweet of DEV.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;{% post helenanders26/sql-series-from-a-to-z-2pk9 %}{% user helenanders26 %}{% github forem/forem %}{% github forem/forem no-readme %}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Article types&lt;/h2&gt;&lt;p&gt;As I can see there are several &lt;strong&gt;article types&lt;/strong&gt; on DEV&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="#superpost"&gt;superpost&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#single-post"&gt;single post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#series"&gt;series&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#discussion"&gt;discussion&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;superpost&lt;/h2&gt;&lt;p&gt;I think this is what @dsteenman is eluding to with the (+3000) word post.  This is the hardest to pull off in my opinion, but if done right it will land you at the top of the search for a long time, in the top 7, and potentially the top 1 for a given tag.&lt;/p&gt;&lt;p&gt;I used to think that every post needed to be a super post that everyone would rave over.  I have found personally that attempting to do this makes it so I rarely post and way overthink them.  I need to at least make a cutoff time that the post is going to ship.&lt;/p&gt;&lt;p&gt;This can also be the most frustrating, you have put all of your eggs in one basket.  If you don't title it right, post at the right time, share it at the right time, it might not take off like you had hoped.&lt;/p&gt;&lt;p&gt;{% post helenanders26/sql-series-from-a-to-z-2pk9 %}&lt;/p&gt;&lt;p&gt;@helenanders26 takes the 👑 as the queen of the superpost.  She is the first person who comes to mind when I think of this post type&lt;/p&gt;&lt;h2&gt;single post&lt;/h2&gt;&lt;p&gt;Your average post.  There are a lot of great techniques to making the average post great (some added above).  Sometimes they find traction, sometimes they don't.  I don't sweat if they don't.  I like posting shorter content as its achievable for me and my lifestyle.  I can always crosslink them and generate more views/discussion across them.&lt;/p&gt;&lt;p&gt;{% post taillogs/how-to-write-a-good-blog-post-2eom %}&lt;/p&gt;&lt;p&gt;@taillogs has a good article on his process to writing a good post.&lt;/p&gt;&lt;p&gt;For those struggling to find what to write about, this is a great article from @swyx &lt;a href="https://www.swyx.io/writing/learn-in-public-hack"&gt;learn-in-public-hack&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;series&lt;/h2&gt;&lt;p&gt;Using the &lt;code&gt;series&lt;/code&gt; tag you can break super posts into smaller ones.  This puts fewer of your eggs in the same basket.  I typically start a series when I know that I am going to post about a single topic often, but don't have it all laid out.  I've been told for these to be really successful it needs a bit more pre-thought.&lt;/p&gt;&lt;p&gt;I do notice that I get a bit of engagement back to older posts every time a new one is posted.  so this does help drive engagement by continuously pulling readers in.  I am not sure if its quite as good as a link, or liquid embed.  Keep in mind when doing this the series component will show the first 2 and the last two without clicking.  Make sure that the first two really count, they will likely get the most traffic benefit from the series.&lt;/p&gt;&lt;p&gt;{% post waylonwalker/what-are-github-actions-1lhh %}&lt;/p&gt;&lt;p&gt;I personally put a lot of my content into a series.  I don't think through the full series ahead of time very much.  I do it because it helps me organize and retrieve my thoughts.  I find it easier to get back to the post I want to reference if I can find the series it was part of.  I think of it as a tag that no one else can post to.&lt;/p&gt;&lt;h2&gt;discussion&lt;/h2&gt;&lt;p&gt;Posts just like this one, where the author leads the discussion with an intriguing question or comment but holds back on their opinion.  The key here is that the author should engage in the discussion, keep the discussion moving, and provide their thoughts here.&lt;/p&gt;&lt;p&gt;Selfishly this is one of my favorite types of posts to make as I learn the most from them.&lt;/p&gt;&lt;p&gt;{% post ben/how-do-you-identify-over-engineering-1oad %}&lt;/p&gt;&lt;p&gt;@ben is the king of the &lt;a href="https://dev.to/t/discuss"&gt;#discuss&lt;/a&gt; post.  He is able to get just the right titles that pull people in and generate quite large discussions.&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;Post what you want to read&lt;/h2&gt;&lt;p&gt;At the end of the day &lt;strong&gt;YOU&lt;/strong&gt; are the most important component.  Post what you like to read, post what you are able to write.  If you struggle to wrap your head around concepts in small posts and have a talent at making rockstar super posts do that.  &lt;strong&gt;Do YOU&lt;/strong&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/crush-dev-to-posts</guid></item><item><title>Supercharge Zsh Startup</title><link>https://waylonwalker.com/supercharge-zsh-startup</link><description>I have been using oh-my-zsh successfully for about 2 years now. But lately my startup time has been really bothersome. It has grown to the point where it was taking about **5.5s** to startup a shell!  This is ok if I am going to spend some time in here for awhile and do some work that benefits from all of the autocompletions, plugins, and shortcuts that oh-my-zsh brings.  But to only jump in to run a handful of commands is infuriating.</description><content:encoded>&lt;blockquote&gt;&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@maxlarochelle?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Max LaRochelle&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lightning?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I have been using oh-my-zsh successfully for about 2 years now. But lately my startup time has been really bothersome. It has grown to the point where it was taking about &lt;strong&gt;5.5s&lt;/strong&gt; to startup a shell!  This is ok if I am going to spend some time in here for awhile and do some work that benefits from all of the autocompletions, plugins, and shortcuts that oh-my-zsh brings.  But to only jump in to run a handful of commands is infuriating.&lt;/p&gt;&lt;h3&gt;📑 My Setup&lt;/h3&gt;&lt;p&gt;I believe the real issue is io speed on wsl.  I have some remote servers with similar configs that are 10x faster or more, loading in 100s of milliseconds rather than seconds.  Sourcing all of the individual plugin files are just too much for it.&lt;/p&gt;&lt;h2&gt;💨 How Fast can it be&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Quick side note: your zsh config is controled by your ~/.zshrc file.  This file can source other files, load plugins, or run literally anything.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Time the &lt;strong&gt;initial&lt;/strong&gt; time&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;time zsh -c exit&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Move your &lt;strong&gt;~/.zshrc&lt;/strong&gt; config file.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mv ~/.zshrc ~/.zshrc-back&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Time the fastest startup possible with nothing in your &lt;strong&gt;~/.zshrc&lt;/strong&gt; config file.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;time zsh -c exit&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Move your &lt;strong&gt;~/.zshrc&lt;/strong&gt; back&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mv ~/.zshrc-back ~/.zshrc&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;🕵️‍♂️Profile your startup time&lt;/h2&gt;&lt;p&gt;It is possible to profile your zsh startup time by adding &lt;code&gt;zmodload zsh/zprof&lt;/code&gt; to the start of your &lt;code&gt;~/.zshrc&lt;/code&gt; file and &lt;code&gt;zprof&lt;/code&gt; at the end.  This was unsuccessfull for me.  I ended up just backing up &lt;code&gt;~/.zshrc&lt;/code&gt; file, then deleting half of it to see where the hot spots were.  I found that two places that were really hot for me.  One I was inadvertantly setting git and npm settings everytime that didnt need to be set everytime.  That was an easy 2s gain.  Another easy 3s gain was removing oh-my-zsh.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;# ~/.zshrczmodload zsh/zprof......zprof&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;😭But I really like oh-my-zsh&lt;/h2&gt;&lt;p&gt;without all the bells and whistle that oh-my-zsh provided zsh became lightning fast to load, but incredibly boring.  It was also very painful to manually type out everything that it autocompleted or aliased all the time.  Next I headed down a path to get all of that functionality back without sacrificing load time.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Without oh-my-zsh, zsh became incredibly boring.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;🔌 Plugin Managers&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/static/steve-johnson-ZUabNmumOcA-unsplash.jpg" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@steve_j?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Steve Johnson&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/plug?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;oh-my-zsh&lt;/li&gt;&lt;li&gt;zplugin&lt;/li&gt;&lt;li&gt;zgen&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are a number of plugin managers for zsh, I tried each of the ones listed above, but found that as I approached a nice setup that I liked the load time would creep up &lt;strong&gt;above the 2s&lt;/strong&gt; &lt;strong&gt;mark&lt;/strong&gt; each time. I would turn certain plugins on and off, try different plugin managers, before realizing that I had spent enough time on this problem and it was going to be time to settle on fast startup or functionality.&lt;/p&gt;&lt;h2&gt;⚖ Finding Balance&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Semi-lazy loading&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/static/jeppe-hove-jensen-b3eaH1hguOA-unsplash.jpg" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Photo by Jeppe Hove Jensen on &lt;a href="https://unsplash.com/s/photos/balance?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;After struggling to get all of the features I wanted with a fast load time, I decided to only load what I needed upon startup.  Next I created a simple alias that loads in zgen and all of the plugins I want. By doing this I get two main benefits.  Obviously I get a faster starup time by loading less.  I got my startup time down to about 0.25s.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;# ~/.zshrcp () {zgen load zsh-users/zsh-autosuggestions.......}&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;⚡ Fast Loading&lt;/h3&gt;&lt;p&gt;I really like the fast startup time, because sometimes I am only loading up zsh to run a handful of commands that dont need much in the way of plugins&lt;/p&gt;&lt;p&gt;&lt;strong&gt;simple commands that need 💨 blazing start speed&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;any single easy to type command, these are my common commands that I will open a terminal in my editor and just need to run quick.&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;vim&lt;/li&gt;&lt;li&gt;git add . &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; git push&lt;/li&gt;&lt;li&gt;sh my_script.sh&lt;/li&gt;&lt;li&gt;make build&lt;/li&gt;&lt;li&gt;bake build&lt;/li&gt;&lt;li&gt;pytest&lt;/li&gt;&lt;li&gt;gatsby develop&lt;/li&gt;&lt;li&gt;npm i&lt;/li&gt;&lt;li&gt;npm update&lt;/li&gt;&lt;li&gt;pip install&lt;/li&gt;&lt;li&gt;ipython&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The second benefit was that I can continue typing while plugins are loading.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/static/type-while-loading-plugins.gif" /&gt;&lt;/p&gt;&lt;h2&gt;&amp;gt;Prompt&lt;/h2&gt;&lt;p&gt;After removing oh-my-zsh the first thing that I missed was the themes that it provided.  I went through a number of them and the one that seemed to have the smallest effect on performance and everything I needed was &lt;a href="https://starship.rs/"&gt;starship&lt;/a&gt;.  It's a really fast prompt written in rust.  The biggest thing that I needed to have that other prompts were misssing was conda environments.  I live much of my work life running python from various conda environments and it is crutial that I can see what environment I am in at all times.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/static/2020-01-04 12-36-31_Cortana.png" /&gt;&lt;/p&gt;&lt;h2&gt;💰 Bonus&lt;/h2&gt;&lt;p&gt;I applied the same logic to neovim and achieved similar results.  Again it just had too many plugins loading on startup for simple tasks.  I ended up taking a shortcut and load any heavy plugins upon NerdTreeToggle.  I dont really use NERDTree that much, but when I do its for more than just a quick edit.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;# ~/.config/nvim/init.vim...Plug 'valloric/youcompleteme', {'do': './install.py', 'on': 'NERDTreeToggle'}...&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/supercharge-zsh-startup</guid></item><item><title>Reclaim memory usage in Jupyter</title><link>https://waylonwalker.com/reset-ipython</link><description>Today we ran into an issue where we had a one-off script that just needed to work, but it was just chewing threw memory like nothing.</description><content:encoded>&lt;p&gt;Today we ran into an issue where we had a one-off script that just needed to work, but it was just chewing threw memory like nothing.&lt;/p&gt;&lt;h2&gt;Pre check the status of memory.&lt;/h2&gt;&lt;p&gt;There are a number of ways that you can check the amount of memory on your system.  The easiest is not necessarily my first go to is free... literally &lt;code&gt;free&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;check for free space&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ free -h             total       used       free     shared    buffers     cachedMem:           15G        15G       150M         0B        59M       8.7G&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generally my first go to is a bit more graphical, and not available on a stock stystem, but far more useful.... &lt;code&gt;htop&lt;/code&gt;.  &lt;a href="https://htop.dev"&gt;&lt;code&gt;htop&lt;/code&gt;&lt;/a&gt; is a terminal process explorer that shows cpu usage, mem usage, and running processes.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;htop&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;sudo apt-get install htop # install it from your package repohtop&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="htop in use" src="https://waylonwalker.com/htop-2.0.png" /&gt;&lt;/p&gt;&lt;h2&gt;First step throw more swap at it&lt;/h2&gt;&lt;p&gt;Often before going through the process of getting a larger instance underneath the notebook you can hobble home with a bit more swap file.  It may not be pretty or fast, but gets the job done in a pinch.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;Check for free disk&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ duFilesystem      Size  Used Avail Use% Mounted on/dev/asdasd        200G   50G  150G   25% /&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Make sure you check your free disk space first, filling both memory and disk can be bad news&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;make a swap file and activate it&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;SWAPFILE=~/swaps/swap1-50Gmkdir ~/swapssudo fallocate -l 50G $SWAPFILEsudo chmod 600 $SWAPFILEsudo mkswap $SWAPFILEsudo swapon $SWAPFILE&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see the results with either swapon or free.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;sudo swapon --showfree -h&lt;/code&gt;&lt;/pre&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-20-04/'&gt;  &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/linuxize-how-to-add-swap-space-on-ubuntu-20-04.jpg"    alt="How to Add Swap Space on Ubuntu 20.04"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-20-04/"&gt;linuxize how to add swap space on ubuntu 20.04&lt;/a&gt;&lt;/p&gt;&lt;p&gt;More details on creating swapfiles checkout &lt;a href="https://linuxize.com/post/how-to-add-swap-space-on-ubuntu-20-04/"&gt;linuxize&lt;/a&gt;.  It is my favorite linux tutorial site!&lt;/p&gt;&lt;h2&gt;Refactor - functions&lt;/h2&gt;&lt;p&gt;&lt;em&gt;keep big datasets inside functions returning aggregations&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Sometimes there is a clear quick and simple way to just let the python garbage collector.  Often we pull in large datasets to create features then aggregate them down into smaller datasets that can be then joined into other datasets.  This pattern of pulling in  &lt;code&gt;big_data&lt;/code&gt;, processing then aggregating can be a simple one.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;let the garbage collector take care of big data&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def process():   big_data = get_big_data()   smaller_data = &amp;lt;some aggregation&amp;gt;   return smaller_datadata = process()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If your notebook is following this type of pattern a simple &lt;code&gt;del&lt;/code&gt; won't work because ipython adds extra references to your &lt;code&gt;big_data&lt;/code&gt; that you didnt add.  These are things that enable features like &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;__&lt;/code&gt;, &lt;code&gt;___&lt;/code&gt;, umong others.&lt;/p&gt;&lt;h2&gt;%reset&lt;/h2&gt;&lt;p&gt;&lt;em&gt;check out more on reset from the &lt;a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-reset"&gt;ipython docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The last resort I would lean on here is an &lt;code&gt;ipython&lt;/code&gt; specific feature &lt;code&gt;%reset&lt;/code&gt; and &lt;code&gt;%reset_selective&lt;/code&gt;.  These will flush out all user define variables or selecive ones based on a regex respectively.&lt;/p&gt;&lt;p&gt;Following two example are directly from the &lt;a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-reset"&gt;ipython docs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;%reset&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;In [6]: a = 1In [7]: aOut[7]: 1In [8]: 'a' in get_ipython().user_nsOut[8]: TrueIn [9]: %reset -fIn [1]: 'a' in get_ipython().user_nsOut[1]: FalseIn [2]: %reset -f inFlushing input historyIn [3]: %reset -f dhist inFlushing directory historyFlushing input history&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;%reset_selective&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;In [2]: a=1; b=2; c=3; b1m=4; b2m=5; b3m=6; b4m=7; b2s=8In [3]: who_lsOut[3]: ['a', 'b', 'b1m', 'b2m', 'b2s', 'b3m', 'b4m', 'c']In [4]: %reset_selective -f b[2-3]mIn [5]: who_lsOut[5]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']In [6]: %reset_selective -f dIn [7]: who_lsOut[7]: ['a', 'b', 'b1m', 'b2s', 'b4m', 'c']In [8]: %reset_selective -f cIn [9]: who_lsOut[9]: ['a', 'b', 'b1m', 'b2s', 'b4m']In [10]: %reset_selective -f bIn [11]: who_lsOut[11]: ['a']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Develop faster utilizing autoreload in ipython&lt;/h2&gt;&lt;p&gt;The above tips will help you reclaim used memory in ipython, but the following tip is one that single handedly is the reason I use Ipython for faster development over anything else.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/autoreload-ipython'&gt;  &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/autoreload-ipython-rm.png"    alt="Autoreload in Ipython"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/autoreload-ipython"&gt;autoreload-ipython&lt;/a&gt; one of my biggest productivity boosts.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/reset-ipython</guid></item><item><title>What is YOUR Advice for New Data Scientists</title><link>https://waylonwalker.com/data-scientist-advice</link><description>What is YOUR Advice for New Data Scientists</description><content:encoded>&lt;ul&gt;&lt;li&gt;Learn the business&lt;/li&gt;&lt;li&gt;Learn Git&lt;/li&gt;&lt;li&gt;Your code does not need to be amazing&lt;/li&gt;&lt;li&gt;Keep Learning&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Learn Git&lt;/h1&gt;&lt;p&gt;You dont have to start out as a git wizard with the cleanest possible commit history.  At first dont let yourself get too wrapped up in it, the most important part is that you make commits.  You will find needs for more advanced stuff later.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git add .git commit -m "FEAT added new function to calculate revenue by product family"git push&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Get comfortable with this, then learn how to &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;stash&lt;/code&gt;, etc...&lt;/p&gt;&lt;h1&gt;Your code does not need to be amazing&lt;/h1&gt;&lt;p&gt;Get the job done.  Keep it in small bite size pieces.  Make readable function definitions and variable names.  You will thank yourself for naming things well later.  Readability counts more than performance in most cases of data science.  If it gets the job done try not to over worry about things like performance.  A few extra seconds to clean a dataset or build a model is not worth hours of your time.  As you go you will have cases that performance is more critical and you will learn what to do from the start to avoid them.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/data-scientist-advice</guid></item><item><title>Follow Your Passion</title><link>https://waylonwalker.com/test</link><description>none</description><content:encoded>&lt;h2&gt;Example&lt;/h2&gt;&lt;iframe src='/page2' width='375' height='812' scrolling='no' style='border: 1px solid #333;'&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/test</guid></item><item><title>Four Github Actions for Python</title><link>https://waylonwalker.com/four-github-actions-python</link><description>If you are developing python packages and using GitHub here are four actions that you can use today to automate your release workflow.  Since python tools generally have such a simple cli I have opted to use the cli for most of these, that way I know exactly what is happening and have more control over it if I need.</description><content:encoded>&lt;style&gt;h2 img { width: 100%; box-shadow: .5rem .5rem 3rem #141F2D, -.5rem -.5rem 3rem rgba(255,255,255,.1);}img{ max-width: 100% !important;}&lt;/style&gt;&lt;p&gt;If you are developing python packages and using GitHub here are four actions that you can use today to automate your release workflow.  Since python tools generally have such a simple cli I have opted to use the cli for most of these, that way I know exactly what is happening and have more control over it if I need.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lint&lt;/li&gt;&lt;li&gt;Test&lt;/li&gt;&lt;li&gt;Package&lt;/li&gt;&lt;li&gt;Upload to PyPi&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;img alt="Lint With flake8" src="https://waylonwalker.com/gh-actions-python-headers/1.png" /&gt;&lt;/h2&gt;&lt;p&gt;flake8 is pythons quintessential linting tool to ensure that your code is up to the standards that you have set for the project, and to help prevent hidden bugs.  I am a heavy user of &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;isort&lt;/code&gt; as well, but for ci flake8 is typically considered the gold standard. &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;isort&lt;/code&gt; will help you automate many fixes suggested by flake8.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;    - name: Lint with flake8      run: |        pip install flake8 isort black        # stop the build if there are Python syntax errors or undefined names        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Testing with pytest" src="https://waylonwalker.com/gh-actions-python-headers/2.png" /&gt;&lt;/h2&gt;&lt;p&gt;pytest is such an amazing project, definitely one to check out and start using if you are not already doing so.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;    - name: Test with pytest      run: |         pip install pytest         pytest&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Building with setuptools" src="https://waylonwalker.com/gh-actions-python-headers/3.png" /&gt;&lt;/h2&gt;&lt;p&gt;I am still using the older, less hipster, setuptools to build my projects.  Primarily because I am used to to, partly because things such as editable installs are not possible with the newer build tools, and I am a &lt;strong&gt;HEAVY&lt;/strong&gt; user of editable installs.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;    - name: build      run: |        pip install wheel        python setup.py sdist bdist_wheel&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Publishing to pypi" src="https://waylonwalker.com/gh-actions-python-headers/4.png" /&gt;&lt;/h2&gt;&lt;p&gt;Here I am going to use an amazing action from the GitHub marketplace by @webKnjaZ.  It is super simple.  First you need to log into your &lt;a href="https://pypi.org"&gt;pypi.org&lt;/a&gt; account, go to account settings, enable 2FA, and add a Token, then paste that toke into a secret inside your repos settings.  Next just drop the name of that secret into the password field of the action and you are off.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I did put a check in to make sure that push event comes from main.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;    - name: pypi-publish      if: github.ref == 'refs/heads/main'      uses: pypa/gh-action-pypi-publish@v1.1.0      with:        # PyPI user        # Password for your PyPI user or an access token        password: ${{ secrets.pypi_password }}        # The repository URL to use        # repository_url: # optional        # The target directory for distribution        # packages_dir: # optional, default is dist&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;That's my four top python actions&lt;/h2&gt;&lt;p&gt;These are the easiest and most basic four actions that every python project on GitHub should have.  Now that actions are available for free on any public repo there is no reason not to use GitHub Actions for any new project.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/four-github-actions-python</guid></item><item><title>Realistic Git Workflow</title><link>https://waylonwalker.com/realistic-git-workflow</link><description>My git workflow based on real life.  Its  not always clean and simple.</description><content:encoded>&lt;h1&gt;Realistic Git Workflow&lt;/h1&gt;&lt;p&gt;&lt;em&gt;sometimes things get messy&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;The Clean Path&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/akira-hojo-652732-unsplash.jpg" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;pull 👉 branch 👉 format 👉 work👉 add 👉 commit 👉 pull 👉 rebase 👉 push&lt;/strong&gt;&lt;/p&gt;&lt;iframe src='./clean' height=400 width=800 frameborder=None, &gt;### PullAs complicated as that seems it is pretty straight forward.  When you sit down to work the first thing you do is to **pull** down the teams latest working "develop" branch from git.    git checkout develop    git pull### BranchNext create a new branch with a name that will remind you of what you are working on.  For your own sanity choose something descriptive. It is easy to get too many similar branches going and forget which branch is which.    git checkout -b ingest_product_id_table### FormatIf you know which files in existance that you will be editing before you start work it is a good idea to format them in a commit early on to keep your working commits separate from formatting.  This will make it easier for reviewers to distinguish from your changes and formatting fixes.If your team agrees to a consistent formatting logic, sticks to it and always remembers to run the linting/fixing tools you should not have anything to  change.  But thats not what this post is about, its about the real world.  People forget to run linters, some don't care, some may not even be aware of the teams formatting guidelines.  Talk to your team about these things and get on the same page.I care about formatting, we all should.  We want to put out the best work we can in  our craft.  Realistically though I dont really care about nit picky stuff, I just want things consistant so that it makes things easier to read without me taking the time to swap  out quotes, and fix line spacing. I want a tool to do it for me, and when that tool runs I dont want it mixing in the same commit as my work.    black .    git add .    git commit -m "FIX formatted with black"### WorkMake your changes to your code, test them, document them, clean it up, do what you do best.### add and commitNext you will need to stage files that have changed for commit, and commit them.  This can be done in stages to make it clear what the progression was to finish the task you were assigned.**add all files**        git add .**add a single file**    git add "path/to/myfile.ext"**one line commit message**Here make sure that you create clear messages so that others know.  There are whole posts out there showing how to better write clear commit messages and why you should, check out those posts for more information.    git commit -m "FEAT ingested product id table on pipeline"**multi-line commit message**If you want some more information in your commit message run `git commit` without `-m` and it will pop you into your configured git editor, which is vim by default.### Super quick vim primerBy default when you run `git commit` you will pop into a vim editor and may want to throw your keyboard before you figure out exactly how to get out of the damn thing.  First type `i` to insert text.  Type out your commit message. Then hit `esc` followed by `:x`.  This is the most basic things you need, and will get you through a commit message.  Vim is a whole topic on its own.### Integrate your changesNow that you have made your changes and commited them its time to integrate them into the codebase so that everyone else can see them.  It is likely that time has gone by, and others have made changes to the codebase since you have, so you will want to pull those down first then switch back to your branch.    git checkout develop    git pull    git checkout ingest_product_id_tableNow you have the latest code changes and your work locally.  I prefer to rebase my work with the develop branch, pretending that I started my work after all of the other changes had occurred.  You can choose to merge, but I prefer not to have the extra merge commits in my PR.    git rebase develop### pushNow its time to push out to the remote repository and create your PR.    git push --set-upstream ingest_product_id_tableOpen your repository in your web browser and you should see that you have just pushed to a new branch and a  button to open a Pull Request (PR).### Your Not Done yetOpening a PR is not a done deal, it starts the conversation to get your code approved to be merged into the develop or main branch.  Your approver may have an idea to clean it up to make it more readable/maintainable, or something to make it more performant.  Remember that a second set of eyes sometimes has a new set of clarity that you do not as you have seen the work from start to end.  At this point they may request changes, discussion, or choose to accept and merge it in.## Realistically_We all hit some pitfalls along the way_![](/ian-espinosa-177961-unsplash.jpg)Things get dirty, the clean path is not always the path that is taken, but with git we can clean up our mess and make it look that way.## I started working from main/develop before branching_Pitfall #1_This is my most common pitfall.  I get really excited to start work and jump right in.  Then when I go to make some commits I see that `main` branch staring me right in the face from my bash prompt.**stash those changes away**    git stash    git checkout -b feature_branch    git stash pop**want to see what changes you have stashed away**    git stash list## I committed to the wrong branch_Pitfall #2_**Create a new branch**_Solution #1_It is common that I just forget to switch from the main/develop branch into my feature branch before starting work. You will first need to look at your `git log` and determine how many commits to go back or a git hash to go back to.**CAUTION** `git reset --hard` will kill changes and you will never get them back if you did not first put them somewhere.  I myself have been burned by this command, there is no recovering from a **hard** reset.    git log    # note commit hash or ~n to go back to    git branch feature_branch    git reset --hard HEAD ~3    # or    git reset --hard a1b2c4d4**Move to an Existing Branch**Sometimes when juggling many different features we are in the middle of several branches and forget to switch between them.  If its the case that you already have a `feature_branch` for the feature that you are working on, you can use this solution.    git status    # note current_branch    git checkout feature_branch    git merge current_branch    git reset --hard HEAD ~3    # or    git reset --hard a1b2c4d4## Another feature was complete before mine_pitfall #3_This can be a big matter of preference of how to deal with this just google `merge` vs `rebase`.  For this particular pitfall I prefer to **`rebase`**.  When you look at the git log and commit history it will appear as if you made your changes after everyone else made theirs.  I do this to clean up the PR and make it easier for the approver to read.  There will be less merge commits, and less history to try to understand.**Before pushing to the remote repository**&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git fetch --all# orgit checkout developgit pullgit checkout feature_branch# thengit rebase develop&lt;/code&gt;&lt;/pre&gt;**if its your first rodeo** or you are unsure how the rebase will go you can create a safty branch.&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git branch saftey_feature_branchgit fetch --allgit rebase developgit branch -D safety_feature_branch # deletes safety_feature_branch&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/realistic-git-workflow</guid></item><item><title>Personal URL shortener with Netlify Redirects</title><link>https://waylonwalker.com/personal-url-shortener</link><description>Personal URL shortener with Netlify Redirects</description><content:encoded>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ozarkdrones?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ozark Drones&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/uturn?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I love using URL shorteners to easily share links without hitting character limits, but they loose their meaning. Services like bit.ly will save my links for me so that I can find them, but I would rather them to be easy to remember. &lt;a href="https://bit.ly/2ruLwQz" title="https://bit.ly/2ruLwQz"&gt;https://bit.ly/2ruLwQz&lt;/a&gt; does not roll of the tongue so well.&lt;/p&gt;&lt;h1&gt;301 🤸‍♀️&lt;/h1&gt;&lt;p&gt;I recently discovered a really cool feature of netlify that I have always looked past, &lt;code&gt;_redirects&lt;/code&gt;. It is so simple cool and powerful, every netlify site should do this!&lt;/p&gt;&lt;h1&gt;But how 🤷‍♀️&lt;/h1&gt;&lt;p&gt;simply add a &lt;code&gt;_redirects&lt;/code&gt; file to the root of your your published site with the following format. The trick I found with my gatsby site was that it needed to be in my static directory &lt;code&gt;/static/_redirects&lt;/code&gt;, not root. Next you just put space separated links on separate lines. #'s can be used for comments.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;# netlify redirects# from_url to_url# Short-Blog/blog/scli         /blog/simple-click//blog/cmdt         /blog/cmd-exe-tips/...# splats/b*             /blog/:splat/n*             /notes/:splat# External/twitter        https://twitter.com/_WaylonWalker/github         https://github.com/WaylonWalker/devto          https://dev.to/waylonwalker/&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;🙌 Share those short links&lt;/h1&gt;&lt;p&gt;Now with shorter links we have more space for our content without needing to use a service like bit.ly that makes our links unreadable.&lt;/p&gt;&lt;p&gt;&lt;img alt="url shortener" src="/static/URL shortener.png" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/personal-url-shortener</guid></item><item><title>🐍 Pluggable Architecture with Python</title><link>https://waylonwalker.com/python-pluggable-architecture</link><description>pytest has open sourced their amazing plugin framework pluggy, it allows
library authors to give their users a way to modify the libaries behavior
without needing to submit a change that may not make sense to the entire
library. My experience so far </description><content:encoded>&lt;p&gt;pytest has open sourced their amazing plugin framework &lt;code&gt;pluggy&lt;/code&gt;, it allowslibrary authors to give their users a way to modify the libaries behaviorwithout needing to submit a change that may not make sense to the entirelibrary.&lt;/p&gt;&lt;h2&gt;Previous Experience&lt;/h2&gt;&lt;p&gt;My experience so far as a plugin user, and plugin author has been great.Building and using plugins are incredibly intuitive.  I wanted to dive a bitdeeper and see how they are implemented inside of a library and its a bit of amind bend the first time you try to do it.&lt;/p&gt;&lt;h2&gt;Plugins vs. Hooks&lt;/h2&gt;&lt;p&gt;A hook is a single function that has a specific place that it is ran by the PluginManager.&lt;/p&gt;&lt;p&gt;A Plugin is a collection of one or more hooks.&lt;/p&gt;&lt;h2&gt;Layers&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;library author&lt;/li&gt;&lt;li&gt;plugin author&lt;/li&gt;&lt;li&gt;end user&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Using a plugin&lt;/h2&gt;&lt;p&gt;For a plugin to be registered is must be registered by the PluginManager whichis implemented by the library author.  It is the job of the library author todetermine what plugins are actively registered or disabled.  There are twocommon ways that I have seen that plugins are registered, through entrypointsor configuration.&lt;/p&gt;&lt;h2&gt;Using a plugin - entrypoints&lt;/h2&gt;&lt;p&gt;Plugins that are implemented with entrypoints are the simplest for the user.They are simply activated by &lt;code&gt;pip install plugin&lt;/code&gt; or deactivated by &lt;code&gt;pipuninstall plugin&lt;/code&gt;.  The library author will show an entrypoint in their docswhich tells plugin authors how to setup entrypoints so that they will be loadedautommatically.&lt;/p&gt;&lt;h2&gt;Using a plugin - config&lt;/h2&gt;&lt;p&gt;Another way to configure plugins is through configuration.  This may come inthe form of a list in a python module or listed in a text file in the config.This route requires the user to add the plugin to a list or import it into apython module.&lt;/p&gt;&lt;h2&gt;Examples&lt;/h2&gt;&lt;p&gt;I really stuggled to find a good example of pluggy to get started.  I found thebest way for me to understand was to create one myself.  the pluggy repo hasone simple&lt;a href="https://github.com/pytest-dev/pluggy/blob/master/docs/examples/toy-example.py"&gt;example&lt;/a&gt;,but it is unclear who owns each piece from the example.  The whole point ofpluggy is to pass ownership of  implementation from the library author to theplugin author.&lt;/p&gt;&lt;h2&gt;Floris Bruynooghe&lt;/h2&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zZsNPDfOoHU"&gt;https://www.youtube.com/watch?v=zZsNPDfOoHU&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Floris Bruynooghe has a great talk from &lt;a href="https://www.youtube.com/watch?v=zZsNPDfOoHU"&gt;EuroPython2015&lt;/a&gt; where he shows how to builda project thats plugins all the way down.  His &lt;a href="http://devork.be/talks/pluggy"&gt;slides&lt;/a&gt; are also available.&lt;/p&gt;&lt;h2&gt;Kedro&lt;/h2&gt;&lt;p&gt;Kedro is a data pipelining framekwork that includes a hooks based architecturethat allows users to modify the behavior of the framework at different pointsthrough the lifecycle.  There is a&lt;a href="https://github.com/quantumblacklabs/kedro/tree/dc1ee8e06b255d4d5a4348ad8a2e78048c547279/kedro/framework/hooks"&gt;hooks&lt;/a&gt;module that implements everything, and a&lt;a href="https://github.com/quantumblacklabs/kedro/blob/dc1ee8e06b255d4d5a4348ad8a2e78048c547279/features/steps/test_plugin/plugin.py"&gt;test_plugin&lt;/a&gt;that is used for testing, but also serves as a good example.&lt;/p&gt;&lt;h2&gt;palantir/python-language-server&lt;/h2&gt;&lt;p&gt;Another example is the palantir python language server.  Check out their&lt;a href="https://github.com/palantir/python-language-server/blob/91a13687dbd5247374253b245124befb8d9c60c9/pyls/hookspecs.py"&gt;hookspec&lt;/a&gt;module.&lt;/p&gt;&lt;h2&gt;Tutorial&lt;/h2&gt;&lt;h2&gt;Plugin Components&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;project_name&lt;ul&gt;&lt;li&gt;implemented by the library author&lt;/li&gt;&lt;li&gt;gives a namespace for pluggy to store hooks&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;hookspec&lt;ul&gt;&lt;li&gt;created and used by libary author&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;hookimpl&lt;ul&gt;&lt;li&gt;created by libary author&lt;/li&gt;&lt;li&gt;used by plugin author&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;PluginManager&lt;ul&gt;&lt;li&gt;implementation of plugins in the library&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;hookspec&lt;/h2&gt;&lt;p&gt;_empty hooks created by the library author &lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# hookspec.pyimport pluggyhookspec = pluggy.HookspecMarker("printer")class PrinterHooks:    @hookspec    def pre_print(msg):        "pre print hook"        pass    @hookspec    def post_print(msg):        "pre print hook"        pass&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;hookimpl&lt;/h2&gt;&lt;p&gt;&lt;em&gt;used by the plugin author&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Implementations of plugins much match the name of the spec exactly.They can include some or all of the arguments listed in the spec,but no others.  They can be implemented as a module with functionsthat match the name of the spec or as a class with methods thatmatch the name of the spec.&lt;/p&gt;&lt;h3&gt;Class Style Plugin&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# plug.py# would be imported from the library authors hookspecfrom hookspec import hookimplclass Pre:    @hookimpl    def pre_print(msg):        msg = msg.upper()        return "BEFORE"class Post:    @hookimpl    def post_print(msg):        print(f"\033[A\033[2Knot today")&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Module Style Plugin&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# plug/Pre.pyfrom hookspec import hookimpl@hookimpldef pre_print(msg):    msg = msg.upper()# plug/Post.pyclass Post:    @hookimpl    def post_print(msg):        print(f"\033[A\033[2Knot today")&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; These plugins only implement one hook.  Each plugin mayimplement one or more hooks, a plugin is not required to onlyimplement on hook.&lt;/p&gt;&lt;h2&gt;Plugin Manager&lt;/h2&gt;&lt;p&gt;&lt;em&gt;implementing the hooks into the library&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;Simple Example&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pluggyimport importlibfrom hookspec import PrinterHooksfrom plug import Prepm = pluggy.PluginManager("printer")pm.add_hookspecs(PrinterHooks)pm.register(Pre)def printer(msg):    pm.hook.pre_print(msg=msg)    print(msg)    pm.hook.post_print(msg=msg)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Running the library&lt;/h2&gt;&lt;p&gt;Now if we run the printer function as a user we will see thisoutput.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-pycon"&gt;&amp;gt;&amp;gt;&amp;gt; printer('hello world')HELLO WORLD&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Adding Post&lt;/h2&gt;&lt;p&gt;Now if we register the Post plugin we will see the following output.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from plug import Pre, Postpm.register(Pre)pm.register(Post)&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-pycon"&gt;&amp;gt;&amp;gt;&amp;gt; printer('hello world')not today&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;Post&lt;/code&gt; plugin wipes away the last line from the console andprints out &lt;code&gt;"not today"&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;Plugin Manager - with dynamic imports&lt;/h2&gt;&lt;p&gt;In a real library we might want to allow the user to configure theirplugins through a config file.  If we do this we will need to reachfor &lt;code&gt;importlib&lt;/code&gt; to handle the imports based on a string.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pluggyimport importlib# from hookspec import hookspecfrom hookspec import PrinterHooks# from hookspec import hookimplplugins = ["plug.Pre", "plug.Post"]pm = pluggy.PluginManager("printer")pm.add_hookspecs(PrinterHooks)for plug in plugins:    if isinstance(plug, str):        # plug is a str representing a module to import        try:            # module style plugins            plugin = importlib.import_module(plug)        except ModuleNotFoundError as e:            # class style plugins            if "." in plug:                mod = importlib.import_module(".".join(plug.split(".")[:-1]))                plugin = getattr(mod, plug.split(".")[-1])            else:                raise e    else:        # plug is a module that is already imported        plugin = plug    pm.register(plugin)def printer(msg):    pm.hook.pre_print(msg=msg)    print(msg)    pm.hook.post_print(msg=msg)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;EntryPoint plugins&lt;/h2&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-pluggable-architecture</guid></item><item><title>Large Refactor At The Command Line</title><link>https://waylonwalker.com/refactor-in-cli</link><description>As projects grow patterns that worked early on break and we need to change things to make the project easier to work with, and more welcoming to new developers. Before you start mucking up a project with wild commands at the terminal check that you h</description><content:encoded>&lt;p&gt;As projects grow patterns that worked early on break and we need to change things to make the project easier to work with, and more welcoming to new developers.&lt;/p&gt;&lt;h2&gt;git&lt;/h2&gt;&lt;p&gt;Before you start mucking up a project with wild commands at the terminal check that you have a super clean git status. We may make some mistakes and need a way to undo 100's files and git makes it really easy if you start with a clean history.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we are ready to begin work we should see a response like this.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;On branch mainnothing to commit, working tree clean&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would also be wise to do this inside of a branch.  The minute you try to do something wild in your working branch someone will walk by and ask you to do a five-minute task, but your deep in refactoring and haven't left yourself a clean way back.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git branch my-big-refactor&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;grepr&lt;/h2&gt;&lt;p&gt;Time for the meat of this refactor replacing text across our project.  I often will pop this bash function into my terminal session and tweak it as needed. This function is called &lt;code&gt;grepr&lt;/code&gt; for &lt;code&gt;grep&lt;/code&gt; then &lt;code&gt;replace&lt;/code&gt;.  It will recursively search for a given pattern inside your working directory, then use &lt;code&gt;sed&lt;/code&gt; to replace that pattern with another.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {grep -iRl "$1" | xargs sed -i "s/$1/$2/g"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If your pattern contains &lt;code&gt;/&lt;/code&gt; characters such as for URLs you can swap the &lt;code&gt;/&lt;/code&gt;'s in the &lt;code&gt;sed&lt;/code&gt; command for &lt;code&gt;|&lt;/code&gt;'s.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {grep -iRl "$1" | xargs sed -i "s|$1|$2|g"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can find this function and more of my bash notes.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/bash/"&gt;https://waylonwalker.com/bash/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;I recently flattened this blog so blogs are under the top-level rather than under &lt;code&gt;/blog&lt;/code&gt; and I used this technique to swap internal links to the new format.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {grep -iRl "$1" | xargs sed -i "s|$1|$2|g"}grepr "https://waylonwalker.com/blog/" "https://waylonwalker.com/"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;git diff&lt;/h2&gt;&lt;p&gt;After running the replace command the first thing I want to see is everything that changed.  Looking at git diff will highlight exactly what changed since our last commit.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git diff&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Work in small steps&lt;/h2&gt;&lt;p&gt;If you're happy with the results commit them now.  It's best to do these commands that have a large effect on the entire project in small steps.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git add .git commit -m "moved routes from /blog to /"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Working in small steps gives us an easy way to undo steps that may have been a mistake before it's too late.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/master-no-more/"&gt;https://waylonwalker.com/master-no-more/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I used the technique from this post to switch master to main on my blog.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;git reset&lt;/h2&gt;&lt;p&gt;&lt;em&gt;How I do Mass Undo&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;be careful&lt;/strong&gt; work from a branch, make sure you started clean&lt;/p&gt;&lt;p&gt;Let's say I wanted to change every occurrence of one variable name to another.Lets try to replace replace &lt;code&gt;pandas.CSVDataSet&lt;/code&gt; with &lt;code&gt;pandas.ParquetDataSet&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {grep -iRl "$1" | xargs sed -i "s|$1|$2|g"}grepr "pandas.CSVDataSet" "pandas.ParquetDataSet"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Upon inspection of the &lt;code&gt;git diff&lt;/code&gt; we notice that there was an unintentional change to the &lt;code&gt;docs/standard-storage.md&lt;/code&gt; file. To revert the entire change we can run.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; These resets are irreversible.  Make sure that you started with a clean &lt;code&gt;git status&lt;/code&gt; and you are confident that you didn't have any work on your machine, not in the remote repo.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;match the remote and wipe out any changes&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset --hard origin/main&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;match our last commit&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset --hard HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;agr&lt;/h2&gt;&lt;p&gt;I have an alternative version that I occasionally use as well that utilizes the silver searcher &lt;code&gt;ag&lt;/code&gt;.  It does a great job at following your .gitignore rules with no fuss, and can filter down to file extensions simply with flags like &lt;code&gt;--md&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;agr() {ag -l "$1" | xargs sed -i "s/$1/$2/g"}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;git clean&lt;/h2&gt;&lt;p&gt;&lt;em&gt;how I remove untracked files&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Sometimes our refactoring requires moving files around. If we want to undo steps like this git will not clean up untracked files.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mv conf/base/sales-catalog.yml conf/base/sales/catalg.yml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;clean up untracked files&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git clean -f&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;clean up untracked directories&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git clean -d&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;clean up ignored files&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git clean -x&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; can be a bit dangerous, be careful with it.  You can lose significant time by wiping out a &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt;, or credentials.&lt;/p&gt;&lt;h2&gt;git  checkout&lt;/h2&gt;&lt;p&gt;&lt;em&gt;How I undo single files&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If our command was mostly successful, but just a few extra files were touched I will manually revert them with &lt;code&gt;git checkout &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git checkout conf/base/supply-catalog.yml&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;git checkout --&lt;/h2&gt;&lt;p&gt;&lt;em&gt;How I undo an entire directory&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Sometimes we need to undo an entire directory.  This command will undo changesto all of the tracked files in the repo.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git checkout -- /src/pages/blog&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;gitui&lt;/h2&gt;&lt;p&gt;I really love using &lt;code&gt;gitui&lt;/code&gt; as a handy terminal interface to browse logs, diffs, and commit a few files at a time.  It starts up crazy fast and is very intuitive to navigate through diffs of changes like this one file at a time if the &lt;code&gt;git diff&lt;/code&gt; gets too overwhelming.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/extrawurst/gitui"&gt;https://github.com/extrawurst/gitui&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/refactor-in-cli</guid></item><item><title>🤓 What's on your GitHub Profile</title><link>https://waylonwalker.com/whats-on-your-github-profile</link><description>Comment on the DEV.to thread to show off what is on your GitHub profile.</description><content:encoded>&lt;p&gt;I ran this post on dev.to and got a great response of great examples, &lt;a href="https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3"&gt;check it out&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3"&gt;&lt;img alt="dev.to whats-on-your-github-profile" src="https://waylonwalker.com/whats-on-your-github-profile.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The GitHub profile feature just went live for a subset of users.  Simply creating a repo named after your username, and clicking share to Profile on the sidebar will create a custom profile that shows up just above your pinned projects.&lt;/p&gt;&lt;p&gt;I am still trying to figure out what to put on mine, but this is what I have so far.  I feel like mine is a bit big at the moment, I don't like that my pinned repos end up blow the fold.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/waylonwalker"&gt;&lt;img alt="my github profile" src="https://dev-to-uploads.s3.amazonaws.com/i/pk1ostnnpn9dmlbs4emv.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;updated&lt;/h1&gt;&lt;p&gt;I tightened mine up and took inspiration from a few others.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/waylonwalker"&gt;&lt;img alt="Alt Text" src="https://dev-to-uploads.s3.amazonaws.com/i/zl9o2kmxoy2c7xv16pbz.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Share a screenshot and link of yours &lt;a href="https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3"&gt;on dev&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;updated again&lt;/h1&gt;&lt;p&gt;Updated with a list of latest Twitter followers, using GitHub actions.&lt;/p&gt;&lt;p&gt;&lt;img alt="waylonwalkers GitHub profile" src="https://dev-to-uploads.s3.amazonaws.com/i/f8fcm9dvvozj4rzh4376.png" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/whats-on-your-github-profile</guid></item><item><title>Do More of What Brings You Joy</title><link>https://waylonwalker.com/happy</link><description>happiness in the workplace</description><content:encoded>&lt;p&gt;Today I want to take some time to talk about the things that make me happy in my work environment.  This is completely free-flow off the cuff, but are things that I do that make me happy, not having them would definitely be a deal breaker for me .&lt;/p&gt;&lt;h3&gt;Attitude&lt;/h3&gt;&lt;p&gt;A positive work atmosphere goes a long ways.  We all have enough negativity going on in our lives that is out of our control accepting any negativity in the workplace is a no go for me.  There was a point in which I was suffering a lot of negativity at work.  This began to trickle into every part of life, and it became hard to see positivity anywhere.  My wife not only noticed this, but put a polite request in for change.  It was definitely a low point and she could tell tell that my work life was not helping anything.&lt;/p&gt;&lt;p&gt;&lt;img alt="positive gif" src="https://media.giphy.com/media/dJGYFScvBjfRabiH7m/giphy.gif" /&gt;Throw out the negativity - courtesy &lt;a href="https://giphy.com/"&gt;giphy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bring the positivity&lt;/strong&gt; to your workplace.  It is really difficult for folks to tear you down if you are the one that is always up beat and happy.  &lt;strong&gt;People will notice&lt;/strong&gt;. When they do they will bring the good projects your way, Praise you for your hard work, and  Ask for and value your advice.&lt;/p&gt;&lt;h3&gt;Helping People&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Helping people&lt;/strong&gt; is part of who I am,  I cannot change that.  I rarely turn someone away who comes to me looking for help.  I will give nearly anyone 15 minutes to help them reach thier goals.  I dont care if they are in a completely different part of my organization,  if they will ever return the favor, or how it will look on my performance review.&lt;/p&gt;&lt;p&gt;Being in the position that I am in I am graced with access to many data sets, that I can query en masse. It's not uncommon that I have someone come to me that has access to get the data they need but will take them 2 days to mine out the information they need one at a time every quarter.  I can save them these 2 days, increase their data quality, and increase its refresh rate by writing 10 lines of sql in about 5 minutes.  I hear so oftem from people why I do this, It's just part of who I am.  The benefits are that everytime I do this I build connections with many folks from a very broad range of backgrounds.&lt;/p&gt;&lt;h3&gt;Learning&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Learning&lt;/strong&gt; is one of the things that drive me to get excited to come to work every single day.  I am always looking for new techniques to improve my workflow, soft skills, and technical skills.  This keeps me confident that if something happens that I need to find another gig I am current with the latest tech and ready to hire in somewhere else.  It's also very enjoyable to watch my products improve, and be able to pump them out at faster and faster rates.&lt;/p&gt;&lt;h3&gt;Grind&lt;/h3&gt;&lt;p&gt;&lt;img alt="laser focus" src="https://media.giphy.com/media/3oEduGi1UWg9Q6nF84/giphy.gif" /&gt;Laser Focus - courtesy &lt;a href="https://giphy.com/"&gt;giphy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The last thing is that I need is a few hours of undistracted time to grind.  After I help some folks, and keep up with the latest skills I need to focus, &lt;strong&gt;Laser Focus&lt;/strong&gt;.  I have a lot going on outside of work, so in order for me to keep some sort of balance I need to chrun out some quality hours of progress, otherwise I get behind, stressed, anxious, and start to loose my work-life balance as it is important for me to meet the deadlines that I commit to.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/happy</guid></item><item><title>Vim Replace Visual Star</title><link>https://waylonwalker.com/vim-replace-visual-star</link><description>Replacing text based on whats in the current search register is a quite handy
tool that I use often.  I believe I picked this tip up from Nick Janetakis,
check out his YouTube channel for some amazing vim tips. https://www.youtube.com/watch?v=fP_ckZ3</description><content:encoded>&lt;p&gt;Replacing text based on whats in the current search register is a quite handytool that I use often.  I believe I picked this tip up from Nick Janetakis,check out his YouTube channel for some amazing vim tips.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=fP_ckZ30gbs"&gt;https://www.youtube.com/watch?v=fP_ckZ30gbs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;If there is one thing that I Like most about vim it's the ability to hack on itand make it work well for you.&lt;/p&gt;&lt;h2&gt;Replacing text in vim&lt;/h2&gt;&lt;p&gt;Vim can often be a bit verbose, but that's ok because we can hack on it, and make our own shortcuts and keybindings.  For instance, finding and replacing text requires using a command at the vim command-line &lt;code&gt;:&lt;/code&gt;.  Replacing foo withbar looks like this &lt;code&gt;:%s/foo/bar/g&lt;/code&gt;, the final g means all of the foos, not just the first one on the line.&lt;/p&gt;&lt;h2&gt;making it better&lt;/h2&gt;&lt;p&gt;I have a keybinding in my &lt;code&gt;init.vim&lt;/code&gt; that will allow me to search for a patternwith the usual &lt;code&gt;/&lt;/code&gt; character, page through them as normal with &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt;, butwhen I press &lt;code&gt;&amp;lt;C-R&amp;gt;&lt;/code&gt; it will populate the replace command for me so that all Ineed to do is type out the new text.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;nnoremap &amp;lt;c-r&amp;gt; :%s/&amp;lt;C-R&amp;gt;///g&amp;lt;Left&amp;gt;&amp;lt;Left&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Note on the &lt;code&gt;&amp;lt;C-R&amp;gt;/&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;In command mode &lt;code&gt;:&lt;/code&gt; vim allows you to paste any text from any register into thecurrent command.  The &lt;code&gt;&amp;lt;C-R&amp;gt;/&lt;/code&gt; will paste the text from the current searchregister into the command.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;C-R&amp;gt;&lt;/code&gt; in command mode can paste text from any register, you can see whatregisters are in use with the &lt;code&gt;:reg&lt;/code&gt; command.  There are a lot of them and manyget populated automatically as you yank text or create macros.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/save-vim-macro"&gt;https://waylonwalker.com/save-vim-macro&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Also see how to use &lt;C-R&gt; to save macros to key bindings easily&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/vim-replace-visual-star</guid></item><item><title>Quick Progress Bars in python using TQDM</title><link>https://waylonwalker.com/quick-progress-bars-in-python-using-tqdm</link><description>Quick Progress Bars in python using TQDM</description><content:encoded>&lt;p&gt;tqdm is one of my favorite general purpose utility libraries in python.  It allows me to see progress of multipart processes as they happen.  I really like this for when I am developing something that takes some amount of time and I am unsure of performance.  It allows me to be patient when the process is going well and will finish in sufficient time, and allows me to 💥 kill it and find a way to make it perform better if it will not finish in sufficient time.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/tqdm2.gif" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;for more gifs like these follow me on twitter&lt;a href="https://twitter.com/_WaylonWalker"&gt;@waylonwalker&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Add a simple Progress bar!&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from tqdm import tqdmfrom time import sleepfor i in tqdm(range(10)):    sleep(1)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;convenience&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;TQDM also has a convenience function called trange that wraps the range function with a tqdm progress bar automatically.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from tqdm import trangefrom time import sleepfor i in trange(range(10)):    sleep(1)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;notebook support&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There is also notebook support.  If you are bouncing between ipython and jupyter I recomend importing from the auto module.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from tqdm.auto import tqdmfrom time import sleepfor i in tqdm(range(10)):    sleep(1)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/autoreload-ipython"&gt;https://waylonwalker.com/autoreload-ipython&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you are using notebooks you should enable ipython autoreload 👆&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/quick-progress-bars-in-python-using-tqdm</guid></item><item><title>Create Custom Kedro Dataset</title><link>https://waylonwalker.com/create-custom-kedro-dataset</link><description>Kedro provides an efficient way to build out data catalogs with their yaml api.  It allows you to be very declaritive about loading and saving your data.  For the most part you just need to tell Kedro what connector to use and its filepath.  When running Kedro takes care of all of the read/write, you just reference the catalog key.</description><content:encoded>&lt;p&gt;Kedro provides an efficient way to build out data catalogs with their yaml api.  It allows you to be very declaritive about loading and saving your data.  For the most part you just need to tell Kedro what connector to use and its filepath.  When running Kedro takes care of all of the read/write, you just reference the catalog key.&lt;/p&gt;&lt;h2&gt;But what is happening behind the scenes&lt;/h2&gt;&lt;p&gt;Under the hood there is an &lt;code&gt;AbstractDataSet&lt;/code&gt; that each connector inherits from.  It sets up a lot of the behind the scenes structure for us so that we dont have to.  For the most part kedro has connectors for about anything that you want to load, csv, parquet, sql, json, from about anywhere, http, s3, localfile system are just some of the examples.&lt;/p&gt;&lt;p&gt;Here is a DataSet implementation from their docs.  Here you can see the barebones example straight from the docs.  Parameters from the yaml catalog will get passed in&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from pathlib import Pathimport pandas as pdfrom kedro.io import AbstractDataSetclass MyOwnDataSet(AbstractDataSet):    def __init__(self, param1, param2, filepath, version):        super().__init__(Path(filepath), version)        self._param1 = param1        self._param2 = param2    def _load(self) -&amp;gt; pd.DataFrame:        load_path = self._get_load_path()        return pd.read_csv(load_path)    def _save(self, df: pd.DataFrame) -&amp;gt; None:        save_path = self._get_save_path()        df.to_csv(save_path)    def _exists(self) -&amp;gt; bool:        path = self._get_load_path()        return path.is_file()    def _describe(self):        return dict(version=self._version, param1=self._param1, param2=self._param2)&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/create-custom-kedro-dataset</guid></item><item><title>Windowing Python Lists</title><link>https://waylonwalker.com/more-itertools-windowed</link><description>In python data science we often will reach for pandas a bit more than necessary. While pandas can save us so much there are times where there are alternatives that are much simpler.  The itertoolsandmore-itertools` are full of cases of this. This pos</description><content:encoded>&lt;p&gt;In python data science we often will reach for pandas a bit more than necessary. While pandas can save us so much there are times where there are alternatives that are much simpler.  The itertools&lt;code&gt;and&lt;/code&gt;more-itertools` are full of cases of this.&lt;/p&gt;&lt;p&gt;This post is a walkthrough of me solving a problem with &lt;code&gt;more-itertools&lt;/code&gt; rather than reaching for a for loop, or pandas.&lt;/p&gt;&lt;p&gt;I am working on a  one-line-link expander for my blog.  I ended up doing it, just by modifying the markdown with python.  I first split the post into lines with &lt;code&gt;content.split('\n')&lt;/code&gt;, then look to see if the line appears to be just a link.  One more safety net that I wanted to add was to check if there was whitespace around the line, this could not simply be done in a list comprehension by itself.  I need just a bit of knowledge of the surrounding lines, enter &lt;code&gt;more-itertools&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;simplified rendering function&lt;/h2&gt;&lt;p&gt;I have a function that will check to see if the line should be expanded, then render the correct template.  Fist step is to check if the line contains no spaces and starts with &lt;code&gt;https&lt;/code&gt;, if itdoes render the template. &lt;/p&gt;&lt;p&gt;The real expand_line function uses requests to pull some metadata about the post to insert into the card, more on that in another post.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def expand_line(line):   """   Check if line should be expanded then render a template   """   if ' ' in line and line.startswith('https'):      return line  return f"&amp;lt;a href='{line}' class='card'&amp;gt;"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;initial implementation&lt;/h2&gt;&lt;p&gt;My first implementation was to load in the content as a single string and use a list comprehension to expand each line.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;expanded_content = "\n".join(    [expand_line(line) for line in content])&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;The issue.&lt;/h2&gt;&lt;p&gt;Sometimes I write my posts in vim without wordwrap on and just use &lt;code&gt;gq&lt;/code&gt; to wrap them to the current &lt;code&gt;textwidth&lt;/code&gt;.  If I have a link that happens to be really long it ends up on its own line.  I do not want one line links to expand if they are in the middle of a paragraph.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;## sample paragraphThis is a paragraph that has a really long linkhttps://waylonwalker.com/not-a-real-link-just-a-silly-example-for-this-postinside of it that ends up on its own line&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;I need a bit of knowledge about the lines around the link.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;windowing&lt;/h2&gt;&lt;p&gt;&lt;code&gt;more-itertools&lt;/code&gt; comes with a windowing function that will slide over an iterable with a width of n.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; from more_itertools import windowed&amp;gt;&amp;gt;&amp;gt; all_windows = windowed([1, 2, 3, 4, 5], 3)&amp;gt;&amp;gt;&amp;gt; list(all_windows)[(1, 2, 3), (2, 3, 4), (3, 4, 5)])]&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;this example is copied from the &lt;a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.windowed"&gt;more-itertools docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;sliding through my content&lt;/h2&gt;&lt;p&gt;The one extra that we need is padding at the front and back of the list so that we ensure that every value ends up in the middle position at least once.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;expanded_content = "\n".join(    [expand_line(*line) for line in windowed(f'\n{content}\n', 3)])&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;meta&lt;/strong&gt;: 👇  This is an example of a one-line-link card that we are trying to achieve.&lt;/p&gt;&lt;p&gt;&lt;a class="onelinelink" href="https://waylonwalker.com/python-args-kwargs/"&gt;&lt;img style="float: right;" align='right' src="https://waylonwalker.com/static/8c73a5e2f384efdcd17762c52faff94f/630fb/python-args-kwargs-xmas2020.png" alt="article cover"&gt;&lt;/p&gt;&lt;div class="right"&gt;    &lt;h2&gt;understanding python *args and **kwargs&lt;/h2&gt;    &lt;p class="description"&gt;    Python `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.    &lt;/p&gt;    &lt;p class="url"&gt;    &lt;span class="read-more"&gt;read more&lt;/span&gt;  waylonwalker.com    &lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Not sure what *line is, check out this article.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;update expand_line&lt;/h2&gt;&lt;p&gt;Now that we are calling &lt;code&gt;expand_line&lt;/code&gt; with all three lines.  We need to update the function signature and add a guarding clause to return early if before or after lines are not blank.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def expand_line(before, line, after):   """   Check if line should be expanded then render a template   """    if before != '' and after != '':      return line    if ' ' in line and line.startswith('https'):      return line    return f"&amp;lt;a href='{line}' class='card'&amp;gt;"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope you liked this walk-through of solving a problem I had with &lt;code&gt;more-itertools&lt;/code&gt;, If you learned something be sure to share it.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/more-itertools-windowed</guid></item><item><title>cmd.exe tips</title><link>https://waylonwalker.com/cmd-exe-tips</link><description>cmd.exe tips</description><content:encoded>&lt;p&gt;I spend a lot of my time at the terminal for my daily work, mostly in Linux or wsl.  One big reason for using wsl over cmd.exe is the ease of walking through history that fzf provides.  This week we had a windows bug in a cli and I was stuck in vanilla cmd.exe 😭&lt;/p&gt;&lt;h2&gt;&amp;gt; Cmder&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/main.png" /&gt;&lt;/p&gt;&lt;p&gt;First off if you are stuck using cmd.exe, do yourself a favor and get cmder.  It makes life just a bit easier.  It is super confugurable and comes with several power ups that make it a bit more enjoyable than cmd.exe.&lt;/p&gt;&lt;h2&gt;History&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;F7&lt;/strong&gt; - Scroll through history&lt;/p&gt;&lt;p&gt;&lt;strong&gt;F8&lt;/strong&gt; - Search history based&lt;/p&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/cmd_exe_history_2.gif" /&gt;&lt;/p&gt;&lt;h2&gt;.bat&lt;/h2&gt;&lt;p&gt;The next simple technique is to save your commands into a .bat file. Any valid command ran with cmd.exe can be saved into a bat file and called again later by running it in the terminal.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;save your command&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;use f7/f8 to get your command back add &lt;code&gt;&amp;gt; filename.bat&lt;/code&gt; at the end, hit the home key and add echo to the front.  &lt;strong&gt;Do not&lt;/strong&gt; wrap with quotes.  This is not bash.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;echo python cmd_example.py &amp;gt; cmd_example.bat&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; append&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;echo python cmd_example2.py &amp;gt;&amp;gt; cmd_example.bat&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;type not cat&lt;/h2&gt;&lt;p&gt;To ensure that you got the command right... and didn't forget that you were in cmd.exe instead of bash and add quotes. you will want to see the file contents. For this reach for &lt;strong&gt;type&lt;/strong&gt; not &lt;strong&gt;cat&lt;/strong&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;type cmd_example.bat&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;results&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;python cmd_example.pypython cmd_example2.py&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Your quick tips&lt;/h2&gt;&lt;p&gt;let me know what quick cmd.exe tips you have.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?text=@waylonwalker%20my%20favorite%20cmd.exe%20tip%20is%20...%20https%3A//waylonwalker.com/blog/cmd-exe-tips/" title="tweet your tip"&gt;&lt;img alt="tweet your tip" src="/2020-01-27 06-32-34_Microsoft Text Input Application.png" title="tweet your tip" /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/cmd-exe-tips</guid></item><item><title>What is Refactoring</title><link>https://waylonwalker.com/what-is-refactoring</link><description>Make the change easy Make the easy change Martin Fowler When to refactor</description><content:encoded>&lt;p&gt;Make the change easy&lt;/p&gt;&lt;p&gt;Make the easy change&lt;/p&gt;&lt;p&gt;Martin Fowler&lt;/p&gt;&lt;p&gt;When to refactor&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/what-is-refactoring</guid></item><item><title>Forestry.io</title><link>https://waylonwalker.com/forestry-io</link><description>Creating Posts from forestry.io.</description><content:encoded>&lt;h1&gt;Testing out forestry.io&lt;/h1&gt;&lt;h2&gt;Sorry Netlify CMS&lt;/h2&gt;&lt;p&gt;&lt;em&gt;I still ♥️ your product dont be&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;forestry is simple&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I have been playing with the netlify cms for a while now, and it has been a decent experience, but I &lt;strong&gt;really&lt;/strong&gt; struggle configuring it.   Forestry is so simple to setup.  My favorite part is that I can code up my gatsby.js site, storing all editable text in markdown, and come back later and add the CMS based on existing documents.&lt;/p&gt;&lt;h2&gt;Configuration is Simple&lt;/h2&gt;&lt;p&gt;Forestry.io has this amazing feature to create &lt;em&gt;create based on existing document&lt;/em&gt; 🤯.  This is great because it sets up the &lt;code&gt;.yml&lt;/code&gt; config for me without error.  And If I really want to come back later to customize it more I have that option, too.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/Screenshot_20190503-165248.jpg" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;By far my favorite feature is &lt;em&gt;create based on existing document&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Multi-File Gallery&lt;/h2&gt;&lt;p&gt;I have a use case for a photography site where the owner wants to be able to show off sample photos of each type of work she does.  I got it working in the netlify cms, although it was not very user friendly.  Everything was nested in an accordian 😢.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/Screenshot_20190507-144948.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Netlify multi image upload&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Next I looked into forestry.io.  I pointed forestry.io at the existing git repo, created a template based on an existing document and &lt;strong&gt;BAM&lt;/strong&gt;💥 a nice image grid appeared.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/Screenshot_20190507-145044.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Forestry multi image gallery&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Editor&lt;/h2&gt;&lt;p&gt;The forestry.io editor is on point.  I can choose to edit using the WYSIWYG editor and still use markdown syntax!  I can edit in markdown.  I can add images without fat-fingering the path and screwing up the whole post.  Its amazing!&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/2019-05-09 10-40-11_forestry.io.png" /&gt;&lt;/p&gt;&lt;h2&gt;Images&lt;/h2&gt;&lt;p&gt;Image upload is on point!  Just click the add image button, it pops you into your media library, choose an image, or upload it, and you're off to the races 🏇.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/forestry_image_3.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Im Sold 💲&lt;/h2&gt;&lt;p&gt;At this point, I am sold. This blog is now written from Forestry, and I love it.  It's great when I am away from my editor to make some progress on the go.  If I decide I dont like it in 6 months, I can move on. All of my content is still in markdown on the git repo.&lt;/p&gt;&lt;p&gt;Forestry.io is missing the nice side-by-side preview that netlify cms has, but honestly, I have struggled to set that up, too.  If I am being honest, I just play front end developer on the side, and setting up a CMS is not something that I plan on doing every day.  I am perfectly happy having some gui tools, like forestry.io, setup all of the configuration for me with just a few clicks.&lt;/p&gt;&lt;h2&gt;Bonus&lt;/h2&gt;&lt;p&gt;Preview is Nice 👌.  Without configuring anything except a bash one-liner, I have a preview that is not quite instant, but does kick out my actual site with updated content quickly.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/forestry-io</guid></item><item><title>Live Substitution In Neovim</title><link>https://waylonwalker.com/neovim-live-substitution</link><description>Replacing text in vim can be quite frustrating especially since it doesn't have
live feedback to what is changing. Today I was watching Josh Branchaud's
Vim-Unalphabet series on Youtuve and realized that his vim was doing this and I
had to have it. h</description><content:encoded>&lt;p&gt;Replacing text in vim can be quite frustrating especially since it doesn't havelive feedback to what is changing. Today I was watching Josh Branchaud'sVim-Unalphabet series on Youtuve and realized that his vim was doing this and Ihad to have it.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/_WaylonWalker/status/1346081617199198210"&gt;https://twitter.com/_WaylonWalker/status/1346081617199198210&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;How to do it.&lt;/h2&gt;&lt;p&gt;I had to do a bit of searching and found a great post from &lt;a href="http://vimcasts.org/episodes/neovim-eyecandy/"&gt;vimcasts&lt;/a&gt; that shows exactly how to get the live search and replace highlighting using &lt;code&gt;inccomand&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;:h inccommand&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;'inccommand' 'icm'  string  (default "")            global    "nosplit": Shows the effects of a command incrementally, as you type.    "split"  : Also shows partial off-screen results in a preview window.    Works for |:substitute|, |:smagic|, |:snomagic|. |hl-Substitute|    If the preview is too slow (exceeds 'redrawtime') then 'inccommand' is    automatically disabled until |Command-line-mode| is done.&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Add this to your config&lt;/h2&gt;&lt;p&gt;I believe that this is a neovim only feature, add it into your&lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt; file. You can see it in my&lt;a href="https://github.com/WaylonWalker/devtainer/blob/main/dotfiles/.config/nvim/settings.vim#L155"&gt;dotfiles&lt;/a&gt;as well.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;set inccommand=nosplit&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;See it in Action&lt;/h2&gt;&lt;p&gt;&lt;img alt="example livesubstitution" src="https://waylonwalker.com/nvim-live-substitute-inccommand.gif" /&gt;&lt;/p&gt;&lt;h2&gt;The Video that inspired this&lt;/h2&gt;&lt;p&gt;Check out Josh Branchaud's great series on the Vim-Unalphabet.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5jMiYtXz2QA"&gt;https://www.youtube.com/watch?v=5jMiYtXz2QA&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/neovim-live-substitution</guid></item><item><title>simple click 2</title><link>https://waylonwalker.com/simple-click-2</link><description></description><guid isPermaLink="false">https://waylonwalker.com/simple-click-2</guid></item><item><title>🙋‍♂️ Can Anyone Explain Twitter Cards to me?</title><link>https://waylonwalker.com/explain-twitter-cards</link><description>Can someone explain how or why twitter cards render differently from device to device? I do understand that twitter cards a built from meta tags, the full list can be found in their</description><content:encoded>&lt;p&gt;Can someone explain how or why twitter cards render differently from device to device?  I do understand that twitter cards a built from meta tags, the full list can be found in their &lt;a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rendered on Mobile&lt;/h2&gt;&lt;p&gt;Mobile Looks fine.&lt;/p&gt;&lt;p&gt;&lt;img alt="rendered card" src="https://waylonwalker.com/twitter-card-rendered.png" /&gt;&lt;/p&gt;&lt;h2&gt;Not Rendered on Desktop&lt;/h2&gt;&lt;p&gt;On Desktop it is not picking up the image.&lt;/p&gt;&lt;p&gt;&lt;img alt="not rendered card" src="https://waylonwalker.com/twitter-card-rendered.png" /&gt;&lt;/p&gt;&lt;h2&gt;Twitter Card Validator&lt;/h2&gt;&lt;p&gt;The Validator renders the card correctly.  I tried the official &lt;a href="https://cards-dev.twitter.com/validator"&gt;twitter card validator&lt;/a&gt;, as well as &lt;a href="https://www.heymeta.com/url/waylonwalker.com/latest"&gt;heymeta.com&lt;/a&gt;, and &lt;a href="https://metatags.io/"&gt;metatags.io&lt;/a&gt;.  All look good.&lt;/p&gt;&lt;p&gt;&lt;img alt="rendered card with validator" src="https://waylonwalker.com/twitter-card-rendered.png" /&gt;&lt;/p&gt;&lt;h2&gt;Can Cards be updated?&lt;/h2&gt;&lt;p&gt;&lt;em&gt;even with a redirect?&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I tried seting up a pinned tweet that uses a netlify redirect to always keep my latest post up to date.  Again this one looks good in the validator, doesnt render the image on desktop, does render the image on mobile, but does not update.  I have heard that you need to hit the card validator to update cards?  I am not sure if this is true, but for me this is not even upating the card.&lt;/p&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;👋 Hello,&lt;br&gt;&lt;br&gt;―――――― I&amp;#39;m Waylon Walker ――――――&lt;br&gt;&lt;br&gt;I work with data using 🐍 &lt;a href="https://twitter.com/hashtag/python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#python&lt;/a&gt; and utilize &lt;a href="https://twitter.com/hashtag/webdev?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#webdev&lt;/a&gt; to 〽visualize it.&lt;br&gt;&lt;br&gt;――――――&lt;br&gt;&lt;br&gt;I write about things on my 🌱 digital garden&lt;a href="https://t.co/rAvD9iw05g"&gt;https://t.co/rAvD9iw05g&lt;/a&gt;&lt;br&gt;&lt;br&gt;👨‍💻Some are cross-posted to &lt;a href="https://t.co/oRWk7MgUD5"&gt;https://t.co/oRWk7MgUD5&lt;/a&gt;&lt;br&gt;&lt;br&gt;――――――&lt;br&gt;💌&lt;a href="https://t.co/PilOTWQ9ub"&gt;https://t.co/PilOTWQ9ub&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝚆𝚊𝚢𝚕𝚘𝚗 𝚆𝚊𝚕𝚔𝚎𝚛 (@_WaylonWalker) &lt;a href="https://twitter.com/_WaylonWalker/status/1282000623299371008?ref_src=twsrc%5Etfw"&gt;July 11, 2020&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/explain-twitter-cards</guid></item><item><title>background tasks in python</title><link>https://waylonwalker.com/background-1</link><description>none</description><content:encoded>&lt;h1&gt;background tasks in python&lt;/h1&gt;&lt;p&gt;I have tried most of the different methods in the past and found that copying and pasting the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example"&gt;threadpoolexecutor example&lt;/a&gt; or the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example"&gt;processpoolexecutor example&lt;/a&gt; from the standard library documentation to be the most reliable.  Since this is often something that I stuff in the back of a utility module of a library it is not something that I write often enough to be familiar with, which makes it both hard to write and hard to read and debug.  If you are looking for a good overview of the difference concurrency &lt;a href="https://twitter.com/raymondh"&gt;Raymond Hettinger&lt;/a&gt; has a great talk about the difference between the various different methods, when to use them and why.&lt;/p&gt;&lt;p&gt;Recently a new python library was released to make running tasks in the background very simple. The &lt;a href="https://github.com/kennethreitz/background"&gt;background&lt;/a&gt; project by Kenneth Reitz is a high level implementation of python 3's ThreadPoolExecutor.  I have been playing around with this project over the last week and I will say that this is definitely the simplest way to run background tasks in python by far.  It really simplifes the syntax and lets me focus on my job rather than implementing custom concurrent code that is more difficult to debug.&lt;/p&gt;&lt;h2&gt;Background&lt;/h2&gt;&lt;p&gt;I have pulled the latest version of the project in Sept 2017.  I found that it had some updates that were important to pass *args and **kwargs compared to the pypi version.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import timeimport background as bg%load_ext watermark%watermark -d -v -p background&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt;2017-09-16CPython 3.6.2IPython 6.1.0background n&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Define Worker Functions&lt;/h2&gt;&lt;p&gt;Each of these worker functions takes 1s to run, simulating a moderately long calculation that we need to do many times over.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def work():    time.sleep(1)    return 1@bg.taskdef bg_work():    time.sleep(1)    return 1&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Run the Worker Functions&lt;/h2&gt;&lt;h2&gt;Blocking function&lt;/h2&gt;&lt;p&gt;This function is blocking each time the function runs, thus taking 1 second to run for each calculation.  The example below took exactly &lt;strong&gt;100 s&lt;/strong&gt; to run 100 calculations.  Depending on your use case this may not be fast enough.  If the calculations do not rely on the global state&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;%%timefor _ in range(100):    work()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Wall time: 1min 40s&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Reaction&lt;/h3&gt;&lt;p&gt;I  know what half of you are saying to yourselfs..&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;!!What!! that took 100 s, by now my users have already sent a dozen messages and filed an issue that my feature is down&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;and the other half&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Seriously that wasnt even enough time to grab a coffee.  Any real time consuming analysis takes at least 3 dats 14 hours 159 seconds before I start to care about concurrency&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To you I say... I am impatient and I got other things to do rather than wait on this maching to finish its work.  Let's get into this concurrency stuff.&lt;/p&gt;&lt;h2&gt;Background Function&lt;/h2&gt;&lt;p&gt;This function spins off worker processes and runs much faster.  By default background sets the number of processes to the number of cpu cores available, Therefore this function should run in n/4 + (inefficiency).  Here we see that the result is just over &lt;strong&gt;13 s&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Note:&lt;em&gt;Since there is a bit of inefficiency added by needing to handle all of the threads it is not exactly divided by the number of workers.&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;%%timef_list = [bg_work() for _ in range(100)];while not all([f.done() for f in f_list]):    pass&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Wall time: 13.1 s&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Reaction&lt;/h3&gt;&lt;p&gt;I know what your saying this time.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;really a 7.6x improvement...  Is that really even woth the extra work.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Fine then lets crank it up to 11!&lt;/p&gt;&lt;h3&gt;Lots of Background&lt;/h3&gt;&lt;p&gt;lets set the number of background processes to a value just higher to than the number of workers we need to run in order to start them all simultaneously. With this simple example that is not very CPU intensive we see the result is just over the amount of time that it takes to run 1 worker.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;bg.n = 110&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;%%timef_list = [bg_work() for _ in range(100)];while not all([f.done() for f in f_list]):    pass&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Wall time: 1.09 s&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Reaction&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;91x improvement by putting my calculations into a function, adding a decorator, and some checks, im in.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;On Tap&lt;/h2&gt;&lt;p&gt;This week while taking it up to 11 I was enjoying a super thick and rich cup of El Salvador Finca Rosa from Onyx Coffee Labs.  Check out their love for letting the bean speak for it self and producing a great cup.&lt;/p&gt;&lt;p&gt;&lt;a href="https://onyxcoffeelab.com"&gt;&lt;img src="https://cdn.shopify.com/s/files/1/1707/3261/files/coffee_science.png?5305428688827820856"&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/background-1</guid></item><item><title>Four github actions for your website</title><link>https://waylonwalker.com/four-github-actions-website</link><description>GitHub actions can give you confidence that your site is up and running, with the latests JavaScript packages, does not have broken links, and can even take screenshots of what your website looks like on different screen sizes and operating systems.</description><content:encoded>&lt;p&gt;GitHub's actions are a new GitHub feature that will trigger GitHub to spin up a virtual machine and run some tasks with some special access to your repo. It can interact with comments/issues, it can clone your repo, You can explicitly pass in secrets so that it can commit back to the repo or deploy to another service. The environment may be a Linux, windows, or even a mac machine. I believe this is wildly incredible for the open-source community, putting these tools in the same place that we are already collaborating is so convenient.&lt;/p&gt;&lt;h2&gt;What can they do for my personal website? 🤔&lt;/h2&gt;&lt;p&gt;GitHub actions can give you confidence that your site is up and running, with the latest JavaScript packages, does not have broken links, and can even take screenshots of what your website looks like on different screen sizes and operating systems.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;periodically check that the website is up&lt;/li&gt;&lt;li&gt;update npm&lt;/li&gt;&lt;li&gt;url checker&lt;/li&gt;&lt;li&gt;screenshot website&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a href="https://github.com/srt32/uptime"&gt;srt32/uptime&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/srt32/uptime"&gt;srt32/uptime&lt;/a&gt; is an action that you can run on any public website. I run this one several times every day and it gives me confidence that my various sites are still up and running. It ensures that my build didn't break something, nothing is wrong with my hosting provider, or my DNS.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;name: check if site is upon:  schedule:    - cron: '0 0 * * *'jobs:  ping_site:    runs-on: ubuntu-latest    name: Ping the site    steps:    - name: Check the site      id: hello      uses: srt32/uptime@master      with:        url-to-hit: "https://waylonwalker.com/"        expected-statuses: "200,301"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="https://github.com/taichi/actions-package-update"&gt;taichi/actions-package-update&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here is another one to make sure that your package.json does not get too far out of date, or have any vulnerabilities. &lt;a href="https://github.com/taichi/actions-package-update"&gt;taichi/actions-package-update&lt;/a&gt; will submit a PR back to your repo with any updated dependencies. Since it submits it as a pr, your tests triggered by PRs should also run. giving you confidence that you are ready to update.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;img src='https://github.com/taichi/actions-package-update/raw/master/docs/actions-package-update.png' style='width:600px; max-width:80%; margin: auto;' alt='image of a PR submitted by actions-package-update'/&gt;&lt;/p&gt;&lt;p&gt;Example to update &lt;code&gt;package.json&lt;/code&gt; every Wednesday night at midnight.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;on:  schedule:  - cron: 0 0 * * 3name: Updatejobs:  package-update:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@master    - name: set remote url      run: git remote set-url --push origin https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY    - name: package-update      uses: taichi/actions-package-update@master      env:        AUTHOR_EMAIL: john@example.com        AUTHOR_NAME: john        EXECUTE: "true"        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        LOG_LEVEL: debug      with:        args: -u --packageFile package.json --loglevel verbose&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="https://github.com/urlstechie/urlchecker-action"&gt;urlstechie/urlchecker-action&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/urlstechie/urlchecker-action"&gt;urlstechie/urlchecker-action&lt;/a&gt; is an action to collect and check URLs in a project and report on broken links. This is another one to give yourself some confidence that you are not linking out to a broken site, and can give you a heads up before you have frustrated users.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;name: Check URLson: [push]jobs:  build:    runs-on: ubuntu-latest    steps:    - uses: actions/checkout@v2    - name: urls-checker      uses: urlstechie/urlchecker-action@0.2.1      with:        # A subfolder or path to navigate to in the present or cloned repository        subfolder: docs        # A comma-separated list of file types to cover in the URL checks        file_types: .md,.py,.rst        # Choose whether to include file with no URLs in the prints.        print_all: false        # The timeout seconds to provide to requests, defaults to 5 seconds        timeout: 5        # How many times to retry a failed request (each is logged, defaults to 1)        retry_count: 3        # A comma separated links to exclude during URL checks        white_listed_urls: https://github.com/SuperKogito/URLs-checker/issues/1,https://github.com/SuperKogito/URLs-checker/issues/2        # A comma separated patterns to exclude during URL checks        white_listed_patterns: https://github.com/SuperKogito/Voice-based-gender-recognition/issues        # choose if the force pass or not        force_pass : true&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="https://github.com/swinton/screenshot-website"&gt;swinton/screenshot-website&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/swinton/screenshot-website"&gt;swinton/screenshot-website&lt;/a&gt; will take a screenshot of your website. It can even run a matrix of sizes and os's to check how your site looks on various systems.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;name: screenshot-websiteon:  schedule:    - cron: '0 0 0 * *'jobs:  screenshot:    name: Screenshot    strategy:      matrix:        os: [ubuntu-latest, macos-latest, windows-latest]        width: [1200, 992, 768, 600]    runs-on: ${{ matrix.os }}    steps:    - name: Screenshot Website      uses: swinton/screenshot-website@v1.x      with:        source: https://waylonwalker.com/        destination: screenshot-${{ matrix.os }}-${{ matrix.width }}.png        width: ${{ matrix.width }}&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/four-github-actions-website</guid></item><item><title>Clean up Your Data Science with Named Tuples</title><link>https://waylonwalker.com/named-tuples-data-science</link><description>&lt;p&gt;If you are a regular listener of &lt;a href="https://talkpython.fm"&gt;TalkPython&lt;/a&gt; or PythonBytes you have hear Michael Kennedy talk about Named Tuples many times, but what are they and how do they fit into my data science workflow.&lt;/p&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;As you graduate your scripts into modules and libraries you might start to notice that you need to pass a lot of data around to all of the functions that you have created. For example if you are running some analysis utilizing &lt;code&gt;sales&lt;/code&gt;, &lt;code&gt;inventory&lt;/code&gt;, and &lt;code&gt;pricing&lt;/code&gt; data.  You may need to calculate total revenue, inventory on hand.  You may need to pass these data sets into various models to drive production or pricing based on predicted volumes.&lt;/p&gt;&lt;h2&gt;Load data&lt;/h2&gt;&lt;p&gt;Here we setup functions that can load data from the sales database.  Assume that we also have similar functions to &lt;code&gt;get_inventory&lt;/code&gt; and &lt;code&gt;get_pricing&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def get_engine():    engine = create_engine('postgresql://scott:tiger@localhost:5432/mydatabase')def get_sales():    '''    gets sales history from the sales database    '''    engine = get_engine()    with engine.connect() as con:        sql = '''select * from sales.history'''        df = pd.read_sql(sql, con)    engine.dispose()    return dfdef get_inventory():    ...def get_pricing():    ...&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Create Metrics&lt;/h3&gt;&lt;p&gt;Here we create our first function to calculate some metrics.  There are likely many of these functions that repeat a similar pattern.  They use similar data and have their own custom logic for calculations and joins.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def calculate_total_revenue(sales, pricing):    """calculates the total sales revenue for all of company XYZ"""    sales = sales.join(pricing.set_index('sku'), on='sku')    sales['revenue'] = sales['qty'] * sales['price']    return sales['revenue'].sum()def calculate_inventory_sale_ratio(sales, inventory, pricing):    ...def calculate_inventory_sale_ratio(inventory, sales):    ...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Furthermore these functions will need to be called somewhere, this might be in a &lt;code&gt;make_report()&lt;/code&gt; function that puts this data into an html template to be sent out to stakeholders, or to be served on a website. Notice how we have the same data showing up time and time again.  And sometimes we even ask for it in a different order 😲.It is important to recognize this early in the project before this gets our of hand.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def make_report():    """Makes stakeholder report for company XYZ"""    sales = get_sales()    inventory = get_inventory()    pricing = get_pricing()    revenue = calculate_total_revenue(sales, pricing)    sales_ratio = inventory_sale_ratio(sales, inventory, pricing)    inventory_sale_ratio(inventory, sales)&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;getting out of hand&lt;/h3&gt;&lt;p&gt;Along the way our features, models, and out supervisors have all had their own needs and we have added new datasets, and several flags. This is the point at which anxiety starts creeping in.  We start spending a lot of time double checking the order of each call to make sure that we dont make a mistake.  And when someone else touches this model, we know what it looks like and cant help but think, "Oh God I hope they didn't screw up that horrid module!"&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def calculate_total_revenue(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):    sales = (sales                .join(pricing.set_index('sku'), on='sku')                .join(inventory.set_index('sku'), on='sku')            )    sales['revenue'] = sales['qty'] * sales['price']    sales  = sales.query(f'price &amp;gt; {min_price}')    sales  = sales.query(f'sale_date &amp;gt; {min_date}')    sales  = sales.query(f'sale_date &amp;lt; {end_date}')    return sales['revenue'].sum()def calculate_inventory_sale_ratio(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):    ...def calculate_inventory_sale_ratio(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):    ...def model_new_prices(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):    ...def model_production(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):    ...def completely_custom_metric_for_steve(sales, pricing, inventory, stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000'):    """Steve has been here 30 years and doesnt trust our metrics unless he can validate against the old metrics"""    ...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It gets even crazier when you start calling all of these functions! Note that we have a common theme of the same data getting passed into&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def make_report(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000', is_for_steve=False):    """Makes stakeholder report for company XYZ"""    sales = get_sales()    inventory = get_inventory()    pricing = get_pricing()    revenue = calculate_total_revenue(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')    sales_ratio = sales_ratio = inventory_sale_ratio(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')    inventory_sale_ratio = inventory_sale_ratio(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')    predicted_prices = model_new_prices(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')    predicted_production_rates = model_production_rate(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')    completely_custom_metric_for_steve(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000')    # render report    ...&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;This code Stinks&lt;/h3&gt;&lt;p&gt;⌚ &lt;em&gt;Time for refactoring&lt;/em&gt;&lt;/p&gt;&lt;p&gt;While our code started out good it has grown stinky over time.  It will works fine, but it could be better and more enjoyable to work with.  What we have here is a code smell called &lt;code&gt;data clump&lt;/code&gt;.  This is a group of data that always appears together.  It would be appropriate to formally group this data together.  One way to do this in python is to use nametuples.  It is a very simple technique that allows us to define a data structure that contains a specific set of attributes that we can access using &lt;code&gt;.attribute_name&lt;/code&gt;.  Replacing this &lt;code&gt;data clump&lt;/code&gt; with a formal group of data will allow us to reduce the number of arguments in all of our functions. Add new attributes easily. And not rely on positional arguments.  This code will be easier to maintain, read, and write.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What we have here is a code smell called &lt;code&gt;data clump&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;create a namedtuple&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from collections import namedtupleModelData = namedtuple('modin_data', 'sales pricing inventory stored_at min_price start_date end_date')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;use the namedtuple&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data = ModelData(    sales=get_sales(),    pricing=get_pricing(),    inventory=get_inventory(),    stored_at='LAX'    min_price=100    start_date = datetime.today() - datetime.timedelta(days=30)    end_date = datetime.today()    )&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;refactor functions&lt;/strong&gt;Now that we have a clean data object how do we use it.  Simple, we pass in one data object, then access each attribute with the dot operator. These functions are now much cleaner to call and read.  Here I have chosen a poor name for our &lt;code&gt;data&lt;/code&gt;, but in a real scenario you may have multple &lt;code&gt;namedtuples&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def calculate_total_revenue(data):    sales = (data.sales                .join(data.pricing.set_index('sku'), on='sku')                .join(data.inventory.set_index('sku'), on='sku')            )    sales['revenue'] = sales['qty'] * sales['price']    sales  = sales.query(f'price &amp;gt; {data.min_price}')    sales  = sales.query(f'sale_date &amp;gt; {data.min_date}')    sales  = sales.query(f'sale_date &amp;lt; {data.end_date}')    return sales['revenue'].sum()...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;call the function&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Now that all of the data is store in a single object it is really easy to call each of our functions using one data instance.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def make_report(stored_at='LAX', min_price=100, start_date='01-01-1999', end_date='01-01-3000', is_for_steve=False):    """Makes stakeholder report for company XYZ"""    data = ModelData(stored_at=stored_at, min_price=min_price, start_date=start_date, end_date=end_date)    revenue = calculate_total_revenue(data)    sales_ratio = sales_ratio = inventory_sale_ratio(data)    inventory_sale_ratio = inventory_sale_ratio(data)    predicted_prices = model_new_prices(data)    predicted_production_rates = model_production_rate(data)    completely_custom_metric_for_steve(data)    # render report    ...&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;🧹 Clean up your data science&lt;/h3&gt;&lt;p&gt;Named Tuples are a great way to clean up your data science code and reduce &lt;code&gt;Data Clumps&lt;/code&gt;.  Anytime you have multiple data sets that almost always get used together &lt;code&gt;namedtuple&lt;/code&gt;s are a great way to clean up your code, make it more readable and more maintainable.  If you find that you also have functions that are tightly coupled to this data you might want to consider using a &lt;code&gt;class&lt;/code&gt; instead of a &lt;code&gt;namedtuple&lt;/code&gt;, but that is for another article.&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/named-tuples-data-science</guid></item><item><title>What is something that you recently learned that you wish you would have learned or understood earlier?</title><link>https://waylonwalker.com/learn-early</link><description>What is something that you recently learned that you wish you would have learned or understood earlier?</description><content:encoded>&lt;p&gt;Cover Photo I call &lt;strong&gt;gaining clarity&lt;/strong&gt; by &lt;a href="https://unsplash.com/@dtravisphd?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;David Travis&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/clarity?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Mine is the python debugger. I was a long holdout thinking that print statements were sufficient. That was untill I started having errors crop up in functions that took minutes to run. The thing that I most notably wish I would have known about is post_mortem.&lt;/p&gt;&lt;h1&gt;Example&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code&gt;[ins] In [4]: def repeater(msg, repeats=1):         ...:     "repeats messages {repeats} number of times"         ...:     print(f'{msg}\n' * repeats)[ins] In [5]: repeater('hi', 3)hihihi[ins] In [6]: repeater('hi', 'a')---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&amp;lt;ipython-input-6-0ec595774c81&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 repeater('hi', 'a')&amp;lt;ipython-input-4-530890de75cd&amp;gt; in repeater(msg, repeats)      1 def repeater(msg, repeats=1):      2     "repeats messages {repeats} number of times"----&amp;gt; 3     print(f'{msg}\n' * repeats)      4&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Debug with iPython/Jupyter&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code&gt;%debug&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Vanilla Debug&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code&gt;import pdbimport syspdb.post_mortem(sys.last_traceback)&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;More&lt;/h1&gt;&lt;p&gt;For more information about the debugger checkout the real python article. &lt;a href="https://realpython.com/python-debugging-pdb/" title="https://realpython.com/python-debugging-pdb/"&gt;https://realpython.com/python-debugging-pdb/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Also keep a bookmark of the table of pdb commands from the article &lt;a href="https://realpython.com/python-debugging-pdb/#essential-pdb-commands" title="https://realpython.com/python-debugging-pdb/#essential-pdb-commands"&gt;https://realpython.com/python-debugging-pdb/#essential-pdb-commands&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Debug Session&lt;/h1&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ShQ3NN06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1tnri6wdwimwk7i83cvg.png"&gt;&lt;img alt="debug session" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShQ3NN06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1tnri6wdwimwk7i83cvg.png" /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/learn-early</guid></item><item><title>TIL: Bind arguments to dynamically generated lambdas in python</title><link>https://waylonwalker.com/bind-dynamic-lambdas</link><description>This past week I had a really weird bug in my [kedro](https://kedro.readthedocs.io/) pipeline.  For some reason data running through my pipeline was coming out completely made no sense, but if I manually request raw data outside of the pipeline it matched expectations.</description><content:encoded>&lt;p&gt;This past week I had a really weird bug in my &lt;a href="https://kedro.readthedocs.io/"&gt;kedro&lt;/a&gt; pipeline.  For some reason data running through my pipeline was coming out completely made no sense, but if I manually request raw data outside of the pipeline it matched expectations.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; While this story is about a kedro pipeline, it can be applied anywhere closures are put into an iterable.&lt;/p&gt;&lt;h2&gt;&lt;img alt="Debugger to the rescue" src="https://waylonwalker.com/bind-dynamic-lambdas-1.png" /&gt;&lt;/h2&gt;&lt;p&gt;After a few days of looking at it off and on, I pinpointed that it was all the way down in the raw layer. Right as data is coming off of the database.  For this I already had existing &lt;code&gt;sql&lt;/code&gt; files stored and a &lt;code&gt;read_sql&lt;/code&gt; function to get the data so I opted to just set up the pipeline to utilize the existing code as much as possible, leaning on the &lt;a href="https://kedro.readthedocs.io/"&gt;kedro&lt;/a&gt; framework a bit less.&lt;/p&gt;&lt;p&gt;I have dynamically created lists of pipeline nodes many times in the past, but typically I take data from &lt;a href="https://kedro.readthedocs.io/"&gt;kedro&lt;/a&gt; input and use it in the lambda.  I prefer the simplicity of using lambdas over &lt;code&gt;functools.partial&lt;/code&gt;.  It typically looks something like this.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# 👍  I do this all the timefrom kedro.pipeline import nodefrom my_generic_project_lib import cleandatasets_to_clean = ['sales', 'production', 'inventory']nodes = []for dataset in datasets_to_clean:   nodes.append(      node(         func=lambda x: clean(x)         inputs = f'raw_{dataset}'         outputs=f'int_{dataset}'         tags=['int', dataset]         name=f'create_int_{dataset}'      )   )&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What was different this time is that I needed to pass in the name of the dataset to my read_sql function, not the data loaded in the framework.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# ❌ This does not workfrom kedro.pipeline import nodefrom my_generic_project_lib import read_sqldatasets_to_read = ['sales', 'production', 'inventory']nodes = []for dataset in datasets_to_clean:   nodes.append(      node(         func=lambda: read_sql(dataset) # 💥 The major issue         inputs = f'dummy'         outputs=f'int_{dataset}'         tags=['int', dataset]         name=f'create_int_{dataset}'      )   )&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Seriously" src="https://waylonwalker.com/bind-dynamic-lambdas-2.png" /&gt;&lt;/h2&gt;&lt;p&gt;As I am still oblivious to what has happened I pop in a &lt;code&gt;breakpoint()&lt;/code&gt; and quickly see that during the first run the dataset passed into &lt;code&gt;read_sql&lt;/code&gt; was &lt;code&gt;'inventory'&lt;/code&gt;, in fact, every single one was &lt;code&gt;'inventory'&lt;/code&gt;.  The lambda is just using the latest value of dataset from outside and has no &lt;code&gt;local&lt;/code&gt; &lt;code&gt;dataset&lt;/code&gt; attached to it.&lt;/p&gt;&lt;h2&gt;&lt;img alt="The simple fix " src="https://waylonwalker.com/bind-dynamic-lambdas-3.png" /&gt;&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# 👍 Much Betterfrom kedro.pipeline import nodefrom my_generic_project_lib import read_sqldatasets_to_read = ['sales', 'production', 'inventory']nodes = []for dataset in datasets_to_clean:   nodes.append(      node(         func=lambda dataset=dataset: read_sql(dataset) # dataset is now bound to the lambda ✨         inputs = f'dummy'         outputs=f'int_{dataset}'         tags=['int', dataset]         name=f'create_int_{dataset}'      )   )&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Try it yourself" src="https://waylonwalker.com/bind-dynamic-lambdas-4.png" /&gt;&lt;/h2&gt;&lt;p&gt;I made a slightly more simple example so that you can try it and play with it yourself, edit it, share it with your friends, laugh at my mistake, whatever you like.&lt;/p&gt;&lt;iframe height="400px" width="100%" src="https://repl.it/@WaylonWalker/BindDynamicLambdas?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"&gt;&lt;/iframe&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/bind-dynamic-lambdas</guid></item><item><title>Automating my Post Starter</title><link>https://waylonwalker.com/automating-my-post-starter</link><description>One thing we all dread is mundane work of getting started, and all the hoops it
takes to get going.  This year I want to post more often and I am taking some
steps towards making it easier for myself to just get started. When I start a new post I nee</description><content:encoded>&lt;p&gt;One thing we all dread is mundane work of getting started, and all the hoops ittakes to get going.  This year I want to post more often and I am taking somesteps towards making it easier for myself to just get started.&lt;/p&gt;&lt;p&gt;When I start a new post I need to cd into my blog directory, start neovim in amarkdown file with a clever name, copy some frontmatter boilerplate, update thepost date, add tags, a description, and a cover.&lt;/p&gt;&lt;h2&gt;Todo List for starting a post&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;frontmatter template&lt;/li&gt;&lt;li&gt;Title&lt;/li&gt;&lt;li&gt;slug&lt;/li&gt;&lt;li&gt;tags&lt;/li&gt;&lt;li&gt;date&lt;/li&gt;&lt;li&gt;cover&lt;/li&gt;&lt;li&gt;description&lt;/li&gt;&lt;li&gt;create markdown file&lt;/li&gt;&lt;li&gt;open in neovim&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Lets Automate this&lt;/h2&gt;&lt;h3&gt;This aint no proper cli&lt;/h3&gt;&lt;p&gt;&lt;em&gt;hot and fast&lt;/em&gt;&lt;/p&gt;&lt;p&gt;As with many thing running behind the scenes on this site, I am the one andonly user, I have limited time, so this is going to be a bit &lt;strong&gt;hot and fast&lt;/strong&gt;.Let's create a file called new-post.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;start the script new-post&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;#!python# new-post&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;👆 Works on my machine&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If this were something that had more users than me I would probably usesomething like click, but for this I want to get it done quick and avoid anyneed to manage dependencies.  Be careful if you were to share something with a&lt;code&gt;#!python&lt;/code&gt; as it requries the end user to have the right version of pythonready to go.&lt;/p&gt;&lt;h3&gt;Title&lt;/h3&gt;&lt;p&gt;The title can't really be automated this is the core idea coming out of my 🧠,but it will be captured through the cli and put into proper position.  For thisI'm going super simple and just pulling it out of &lt;code&gt;sys.argv&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;set the title&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import systitle = sys.argv[1].title()&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;! sys.argv is a list of each argument passed into the script split by spaces.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;slug&lt;/h3&gt;&lt;p&gt;The slug is what I am calling the route and can simply come out of the titleautomatically, if I want to shorten it later by hand that will be simple enoughto do manually. All that needs to be done is to lowercase and replace a fewcharacters with -.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;set the slug&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;slug = title.lower)(.replace(" ", "-".replace()"_", -"")""))&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h3&gt;tags&lt;/h3&gt;&lt;p&gt;For tags I decided I wanted the parser to be as simple as possible and didntwant to dance around any flags.  I am simply just going to look at everyargument passed into the command and see if any of them contain one of mycommon tags.  &lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;parse the tags&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;args = ''.join(sys.argv[1:])tags = []if 'py' in args:    tags.append('python')if 'web' in args:    tags.append('webdev')if 'blog' in args:    tags.append('blog')if 'data' in args:    tags.append('data')&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;🤷‍♂️ &lt;strong&gt;antipattern&lt;/strong&gt;?? The above section does an initialize then modify.  I generally try to avoid thispattern with something like a list comprehension, but didn't see an obvioussolution so I just went with it.&lt;/p&gt;&lt;h2&gt;Frontmatter Template&lt;/h2&gt;&lt;p&gt;Now we have enough information going to assemble the frontmatter I use for myposts.  I am going to just insert the values I need into an f-string.  Sincepython 3.6 was released f-strings are my go to templating tool.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;create the markdown&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import datetimefrontmatter = f"""---templateKey: blog-posttags: {tags}title: {title}date: {datetime.date.today().strftime('%Y-%m-%dT%H:%M:%S')}status: draftdescription: ''cover: "/static/{slug}.png"---"""&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h3&gt;create markdown file&lt;/h3&gt;&lt;p&gt;Now its time to get down to business and make the post.  First I want to throwan error if the post already exists, I definitely dont want to blow away anexisting post if a certain slug is already taken.  I am a big fan of customerror messages and I am going to go ahead and make one here, even though thisis just a quick script.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;custom error&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class PostExistsError(FileExistsError):    pass&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I am a &lt;code&gt;pathlib&lt;/code&gt; superfan.  It's going to make setting up these paths supersimple.  Note I am going to anchor my directory down with the &lt;code&gt;__file__&lt;/code&gt;variable.  I do this all the time to get paths relative to the module that iscurrently running.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;setup paths&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;directory = pathlib.Path(__file__).parentpath = pathlib.Path(f"{directory}/src/pages/blog/{slug}.md")if path.exists():    raise PostExistsError(f"Post Already exists at {path}")&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;file&lt;/strong&gt; is a string that represents the path to the running module&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Finally just write the file.  Here we open the file with a context manager sothat we don't have to worry about closing it when we are done.  Note that weopen it with the &lt;code&gt;w+&lt;/code&gt; flag for write and creation.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;write the file&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;with open(path, "w+") as f:    f.write(frontmatter)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h3&gt;git add&lt;/h3&gt;&lt;p&gt;I am not quite ready to pull the trigger on doing an auto commit, but this mayhappen in a future version.  For now I want this file easily picked up by vims&lt;code&gt;:GFiles&lt;/code&gt; since I have that is one of my most used hot keys.  To do this thefile at least needs added.  I'm sure there is a better way to do this with aGit library, but I am used to the command line so I am going to just run asubprocess.&lt;/p&gt;&lt;p&gt;I am using the &lt;code&gt;subprocess.Popen&lt;/code&gt; command since its what I am used to, notethat it will run the task in the background so be sure that you wait on it.The &lt;code&gt;Popen&lt;/code&gt; is great if you have several task that are not dependent on eachother.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;git add &lt;new-post&gt;&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;gadd = subprocess.Popen(    f'cd {directory} &amp;amp;&amp;amp; git add {str(path).replace(str(directory) + "/", "")} ',    shell=True,)gadd.wait()&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h3&gt;open in neovim&lt;/h3&gt;&lt;p&gt;Last step of the script is to start writing, I want to be open in my blogsdirectory (hence the cd), with the file open, to the right line (+11), and ininsert mode (+star).&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;open post in neovim&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;nvim = subprocess.Popen(    f'cd {directory} &amp;amp;&amp;amp; nvim +12 +star {str(path).replace(str(directory) + "/", "")} ',    shell=True,)nvim.wait()&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Alias&lt;/h2&gt;&lt;p&gt;Now I want this script to be available everywhere.  I am going to simply addthe following entry to shorten the script and eliminate the need to use thefull path.  I added this to my &lt;code&gt;~/.alias&lt;/code&gt;, for you it may be &lt;code&gt;~/.bashrc&lt;/code&gt;, or&lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;alias np=~/git/waylonwalkerv2/new-post&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Starting a new post&lt;/h2&gt;&lt;p&gt;Lets start a new post about automating my posts in python.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;np "automating my posts" python&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;This is my workflow&lt;/h2&gt;&lt;p&gt;Ad hoc scripts like this can be a bit of a hot mess, partly due to the just getit done nature, but also due to the fact that I am just riffing off the top ofmy head and utilizing docs as least as possible.&lt;/p&gt;&lt;p&gt;While writing the script I would run it after each section or so and print someresults to make sure they were looking good. If I ever needed access to a livevariable I would pop open ipython and run &lt;code&gt;%run new-post "my-new-post"&lt;/code&gt; andinspecting it.&lt;/p&gt;&lt;h2&gt;Final Script&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;final script&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;#!python# new-postimport sysimport datetimeimport pathlibimport subprocesstitle = sys.argv[1].titlecase()args = "".join(sys.argv[1:])tags = []if "py" in args:    tags.append("python")if "web" in args:    tags.append("webdev")if "blog" in args:    tags.append("blog")if "data" in args:    tags.append("data")slug = title.lower().replace(" ", "-").replace("_", "-")frontmatter = f"""---templateKey: blog-posttags: {tags}title: {title}date: {datetime.date.today().strftime('%Y-%m-%dT%H:%M:%S')}status: draftdescription: ''cover: "/static/{slug}.png"---"""class PostExistsError(FileExistsError):    passdirectory = pathlib.Path(__file__).parentpath = pathlib.Path(f"{directory}/src/pages/blog/{slug}.md")if path.exists():    raise PostExistsError(f"Post Already exists at {path}")with open(path, "w+") as f:    f.write(frontmatter)gadd = subprocess.Popen(    f'cd {directory} &amp;amp;&amp;amp; git add {str(path).replace(str(directory) + "/", "")} ',    shell=True,)gadd.wait()nvim = subprocess.Popen(    f'cd {directory} &amp;amp;&amp;amp; nvim +12 +star {str(path).replace(str(directory) + "/", "")} ',    shell=True,)nvim.wait()&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/quickly-edit-posts"&gt;https://waylonwalker.com/quickly-edit-posts&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;check out the next article in this series where I setup a bash function to quickly edit these posts&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/automating-my-post-starter</guid></item><item><title>Explicit vs Implicit Returns in Javascript</title><link>https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript</link><description>Often when reading through javascript examples you will find some arrow functions use parentheses `()` while others use braces `{}`.  This key difference is that parentheses will implicitly return the last statement while braces require an explicit return statement.  It is important to understand the difference between them because it is likely that you will find code examples of both and trying to edit code written differently than you're used to may have unintended consequences.</description><content:encoded>&lt;p&gt;Often when reading through javascript examples you will find some arrow functions use parentheses &lt;code&gt;()&lt;/code&gt; while others use braces &lt;code&gt;{}&lt;/code&gt;.  This key difference is that parentheses will implicitly return the last statement while braces require an explicit return statement.  It is important to understand the difference between them because it is likely that you will find code examples of both and trying to edit code written differently than you're used to may have unintended consequences.&lt;/p&gt;&lt;h2&gt;&lt;img alt="Arrow functions" src="https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-1.png" /&gt;&lt;/h2&gt;&lt;p&gt;Arrow functions are one-liner functions in javascript that have two main syntactical ways to create the code block.  with parentheses and braces.  Let's take a look at both ways of creating arrow functions so that when we come accross them in the wild it will all make sense.&lt;/p&gt;&lt;h2&gt;&lt;img alt="implicit returns" src="https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-2.png" /&gt;&lt;/h2&gt;&lt;p&gt;Here is an example of an arrow function that will implicitly return the laststatement without the return keyword.  I believe that these are a bit more restrictedin that you cannot set variables inside them.  They are a little bit more conciseand great for &lt;strong&gt;one-liners.&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;const implicit = thing =&amp;gt; (thing)undefinedimplicit('hi')"hi"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that the parentheses are not required for this example and not havingparentheses or braces are implicitly returned as well.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// same as aboveconst implicit = thing =&amp;gt; thingundefinedimplicit('hi')"hi"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="explicit returns" src="https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-3.png" /&gt;&lt;/h2&gt;&lt;p&gt;In the following example, the curly braces create an arrow function that mustexplicitly return anything that you want to return from the function. Since thereturn keyword is never used the function returns &lt;code&gt;undefined&lt;/code&gt; by default.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// missing return statementconst explicit = thing =&amp;gt; {thing}undefinedexplicit('hi')undefined&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example using the return keyword will cause the function to return &lt;code&gt;thing&lt;/code&gt;and behave similarly to our implicit return.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// same as originalconst explicit_return = thing =&amp;gt; {return thing}undefinedexplicit_return('hi')"hi"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Multiline arrow functions" src="https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript-4.png" /&gt;&lt;/h2&gt;&lt;p&gt;Until writing this article I was unaware that you could not have a multiline arrow function with an implicit return statement.  I tried myself and ran into some issues. I also tried to find examples online and could not find one.  If it is possible to write something like below, let me know.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// more complex example// only possible with an explicit returnconst sayHello = who =&amp;gt; {    const greeting = 'Hello '    const message = greeting + who    return message    }undefinedsayHello('Waylon')"Hello Waylon"&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/explicit-vs-implicit-returns-in-javascript</guid></item><item><title>Long variable names are good</title><link>https://waylonwalker.com/long-variable-names-are-good</link><description>🏷️ Long variable names are a good thing.  Self documenting code is more important than poorly documented code.  Simply adding a few characters to your variable names can go a long ways. Scope is important</description><content:encoded>&lt;p&gt;🏷️ Long variable names are a good thing.  Self documenting code is more important than poorly documented code.  Simply adding a few characters to your variable names can go a long ways.&lt;/p&gt;&lt;h2&gt;Containers are plural&lt;/h2&gt;&lt;h2&gt;Aliases are welcome&lt;/h2&gt;&lt;p&gt;Scope is important&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/long-variable-names-are-good</guid></item><item><title>🐍 Parsing RSS feeds with Python</title><link>https://waylonwalker.com/parsing-rss-python</link><description>I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us. I am starting by learning how to parse feeds with python, and without much previous knowledge it proved to be much easier than anticipated thanks to the `feedparser` library.</description><content:encoded>&lt;p&gt;I am looking into a way to replace my google reader experience that I had back in 2013 before google took it from us.  I am starting by learning how to parse feeds with python, and without much previous knowledge, it proved to be much easier than anticipated thanks to the &lt;code&gt;feedparser&lt;/code&gt; library.&lt;/p&gt;&lt;h2&gt;Install&lt;/h2&gt;&lt;p&gt;Install the feedparser library.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n reader python=3.8 -ysource activate readerpip install feedparser&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Get the content&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import feedparserfeed = feedparser.parse('https://waylonwalker.com/rss.xml')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;The feed object&lt;/h2&gt;&lt;p&gt;The feed is a feedparser.FeedParserDict.  For all intents and purposes this seems to just behave like a dict with the following &lt;code&gt;keys()&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;feed.keys()['feed', 'entries', 'bozo', 'headers', 'etag', 'href', 'status', 'encoding', 'version', 'namespaces', 'content'])&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;feed&lt;/strong&gt; has some general information about the rss feed, but the meat of the feed is in &lt;strong&gt;entries&lt;/strong&gt;.  The rest of the keys weren't all that useful for me at the moment.&lt;/p&gt;&lt;h2&gt;pulling multiple feeds&lt;/h2&gt;&lt;p&gt;I grabbed a few popular RSS feeds that I was familiar with to get started.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;urls = ['https://waylonwalker.com/rss',        'https://joelhooks.com/rss.xml',        'https://swyx.io/rss.xml',    ]feeds = [feedparser.parse(url)['entries'] for url in urls]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I checked out the keys, all three had the following keys.  Mine also had the full post under &lt;code&gt;'content'&lt;/code&gt;, this is because I added an extra &lt;code&gt;custom_element&lt;/code&gt; for publishing to &lt;code&gt;dev.to&lt;/code&gt; from an RSS feed.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;feeds[1][0].keys()&amp;gt;&amp;gt;&amp;gt; dict_keys(['title', 'title_detail', 'summary', 'summary_detail', 'links', 'link', 'id', 'guidislink', 'published', 'published_parsed'])&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;NOTE: dev.to/feed&lt;/h2&gt;&lt;p&gt;I also pulled the &lt;a href="https://dev.to/feed"&gt;dev.to/feed&lt;/a&gt;.  Since is it setup for more Authors it had a few extra keys.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;feedparser.parse('https://dev.to/feed')[0].keys()&amp;gt;&amp;gt;&amp;gt; dict_keys(['title', 'title_detail', 'authors', 'author', 'author_detail', 'published', 'published_parsed', 'links', 'link', 'id', 'guidislink', 'summary', 'summary_detail', 'tags'])&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Combining Feeds&lt;/h2&gt;&lt;p&gt;Now that I have a list of feeds, I can create a single feed sorted by date with a list comprehension.  Note I did need to pull in &lt;code&gt;dateutil.parser&lt;/code&gt; to convert the date strings to datetime objects to be sorted.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import dateutil.parserfeed = [item for feed in feeds for item in feed]feed.sort(key=lambda x: dateutil.parser.parse(x['published']), reverse=True)&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;[ins] In [115]: [{'title': i['title'], 'date': i['published'], 'link': i['link']}  for i in feed[:10]]&amp;gt;&amp;gt;&amp;gt;[{'title': '🙋\u200d♂️ Can Anyone Explain Twitter Cards to me?',  'date': 'Sat, 11 Jul 2020 03:00:00 GMT',  'link': 'https://waylonwalker.com/explain-twitter-cards/'}, {'title': 'How I Built My GitHub Profile',  'date': 'Fri, 10 Jul 2020 03:00:00 GMT',  'link': 'https://waylonwalker.com/my-github-profile/'}, {'title': 'Lessons and Regrets from My $25000 Launch',  'date': 'Fri, 03 Jul 2020 04:06:47 GMT',  'link': 'https://swyx.io/writing/coding-career-launch'}, {'title': 'SLIDES - understanding python *args and **kwargs',  'date': 'Thu, 02 Jul 2020 05:00:00 GMT',  'link': 'https://waylonwalker.com/python-args-kwargs-slides/'}, {'title': 'Launching the Coding Career Handbook!',  'date': 'Wed, 01 Jul 2020 13:08:37 GMT',  'link': 'https://swyx.io/writing/launching-coding-career'}, {'title': 'Gracefully adopt kedro, the catalog',  'date': 'Mon, 29 Jun 2020 03:00:00 GMT',  'link': 'https://waylonwalker.com/graceful-kedro-catalog/'}, {'title': "🤓 What's on your GitHub Profile",  'date': 'Mon, 29 Jun 2020 03:00:00 GMT',  'link': 'https://waylonwalker.com/whats-on-your-github-profile/'}, {'title': "Versioned Docs in 30 Seconds with Amplify Console's Branch Subdomains",  'date': 'Fri, 26 Jun 2020 16:34:09 GMT',  'link': 'https://swyx.io/writing/amplify-console-branch-subdomains'}, {'title': "What's New in React",  'date': 'Wed, 24 Jun 2020 00:00:00 GMT',  'link': 'https://swyx.io/speaking/react-whats-new'}, {'title': 'Coding Careers - Vincit',  'date': 'Wed, 24 Jun 2020 00:00:00 GMT',  'link': 'https://swyx.io/speaking/coding-careers-vincit'}]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Decentralized Feed&lt;/h2&gt;&lt;p&gt;I think the idea of RSS is super cool, and the idea that I can potentially create my own custom platform-agnostic decentralized feed is pretty cool.  I would love to have a google reader like experience back.&lt;/p&gt;&lt;p&gt;This post was super fun to explore.  I used an external library (&lt;code&gt;feedparser&lt;/code&gt;) to pull in the feeds, but other than that It was all vanilla python 3.8.  In DataScience we tend to get very &lt;code&gt;DataFrame&lt;/code&gt; heavy and I miss working with vanilla datatypes sometimes.&lt;/p&gt;&lt;h2&gt;Trying to step up your python game&lt;/h2&gt;&lt;p&gt;While trying to step up your skills you will need lots of practice.  Its good to have several options to try out ideas quickly.  I often use repl.it, check out this post to see how I use it.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/practice-python-online"&gt;https://waylonwalker.com/practice-python-online&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Not a sponsor REPL.it is a great way to practice.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/parsing-rss-python</guid></item><item><title>Refactoring your blog urls</title><link>https://waylonwalker.com/gracefully-redirect</link><description>I just did a quick refactoring of my JAMStack blog urls.  Some didn't fit with my style, some had `_` that I wanted to switch to `-`, and others were rediculously long.  I've been using forestry as my CMS, I write many of my posts there, and sometimes it picks some crazy file names (based on my titles).  It was time to refactor.</description><content:encoded>&lt;p&gt;I just did a quick refactoring of my JAMStack blog urls.  Some didn't fit withmy style, some had &lt;code&gt;_&lt;/code&gt; that I wanted to switch to &lt;code&gt;-&lt;/code&gt;, and others wererediculously long.  I've been using forestry as my CMS, I write many of myposts there, and sometimes it picks some crazy file names (based on my titles).It was time to refactor.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/refactor-in-cli"&gt;https://waylonwalker.com/refactor-in-cli&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When refactorings similar to this get really big I often need to do someproject wide find an replace, I usually do this right from the command line.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;🖊 Rename posts &lt;em&gt;change the filename&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;My post urls are based on the file name of my markdown file, so I can simply gothrough my filesystem and rename anything I want.  From here its probably bestto only commit the addition of the new file name, until the redirects clear,but these are all low traffic posts for me so I just commited both at once.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Safely redirect without breaking links&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;em&gt;redirects ⤴ _/redirects&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;I am hosted on netlify, which automatically puts very ⚡ performant redirectson the edge based on a &lt;code&gt;/_redirects&lt;/code&gt; route on your site.  So I added a redirectfrom the old route to the new route there.&lt;/p&gt;&lt;h2&gt;rename long posts&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;/blog/i-finally-fixed-my-styled-components-in-gatsby-js/blog/fix-styled-components-in-gatsby/blog/interrogate-is-a-pretty-awesome-brand-new-cli-for-python-packages/blog/interrogate&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;pedantic 🤔 &lt;em&gt;probably&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;This is probably being a bit pedantic.  Realistically my urls were probably ok.These posts probably aren't going to be topping the google search chartsanyways, but I wanted to do it without killing off any links that I may havehappened to post somewhere.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gracefully-redirect</guid></item><item><title>How to Install miniconda on linux (from the command line only)</title><link>https://waylonwalker.com/install-miniconda</link><description>Installing miniconda from only the command line can be a bit of an intimidating task your first time. Lets walk through how to do it.</description><content:encoded>&lt;p&gt;miniconda is a python distribution from continuum. It's a slimmed-down version of their very popular anaconda distribution. It comes with its own environment manager and has eased the install process for many that do not have a way to compile c-extensions. It made it much easier to install the data science stack on windows a few years ago. These days windows are much better than it was back then at compiling c-extensions. I still like its environment manager, which installs to a global directory rather than a local directory for your project.&lt;/p&gt;&lt;h2&gt;Installing miniconda on Linux&lt;/h2&gt;&lt;p&gt;Installing miniconda on Linux can be a bit tricky the first time you do it completely from the terminal. The following snippet will create a directory to install miniconda into, download the latest python 3 based install script for Linux 64 bit, run the install script, delete the install script, then add a conda initialize to your bash or zsh shell. After doing this you can restart your shell and conda will be ready to go.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mkdir -p ~/miniconda3wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.shbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3rm -rf ~/miniconda3/miniconda.sh~/miniconda3/bin/conda init bash~/miniconda3/bin/conda init zsh&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Options&lt;/h2&gt;&lt;p&gt;The miniconda.sh script comes with a few basic options.  Most notably we used &lt;code&gt;-b&lt;/code&gt; to be able to run unattended, which means that all of the agreements are automatically accepted without user prompt.  &lt;code&gt;-u&lt;/code&gt; updates any existing installation in the directory of install if there is one. &lt;code&gt;-p&lt;/code&gt; is the directory to install into.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;usage: /root/miniconda3/miniconda.sh [options]Installs Miniconda3 4.6.14-b           run install in batch mode (without manual intervention),             it is expected the license terms are agreed upon-f           no error if install prefix already exists-h           print this help message and exit-p PREFIX    install prefix, defaults to /root/miniconda3, must not contain spaces.-s           skip running pre/post-link/install scripts-u           update an existing installation-t           run package tests after installation (may install conda-build)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Silent/Logged&lt;/h2&gt;&lt;p&gt;A quick and easy way to silence everything or to log it to a file during an automated install is to wrap the script into a bash function, or save it to its own file, and call the file.  I like the function method since I can still copy it right into a terminal, or keep my install script as one single file.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;install_miniconda () {mkdir -p ~/miniconda3wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.shbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3rm -rf ~/miniconda3/miniconda.sh~/miniconda3/bin/conda init bash~/miniconda3/bin/conda init zsh}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;normal&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code&gt;install_miniconda&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;silent&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code&gt;install_miniconda &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;logged&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code&gt;install_miniconda &amp;gt; miniconda_install.log 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/reusable-bash/"&gt;https://waylonwalker.com/reusable-bash/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This posts covers more ways to write reuable bash scripts&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Cross posted to DEV&lt;/h2&gt;&lt;p&gt;Check out this post and many more on &lt;a href="https://dev.to/waylonwalker/installing-miniconda-on-linux-from-the-command-line-4ad7"&gt;dev.to/waylonwalker&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/install-miniconda</guid></item><item><title>Custom Scrollbar Design</title><link>https://waylonwalker.com/custom-scrollbar-design</link><description>Getting a custom scrollbar on your site makes it stand out a bit compared to the very plain stock one that are on most sites.  This is how I set mine up on my gatsby site.</description><content:encoded>&lt;p&gt;Inspired by Wes Bos's new &lt;a href="https://uses.tech"&gt;uses.tech&lt;/a&gt; I wanted a custom scrollbar on my personal site.  I had tried to do it in the past, but gave up after it was not working.&lt;/p&gt;&lt;h2&gt;Looking at the Source&lt;/h2&gt;&lt;p&gt;Since &lt;a href="https://uses.tech"&gt;uses.tech&lt;/a&gt; is open source I jumped on github, searched for scroll and found this &lt;a href="https://github.com/wesbos/awesome-uses/blob/124bdd64345bc64eb84879929f0e57cbb8752e34/src/components/layout.js#L74"&gt;layout.js&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Copy it to my own component&lt;/h2&gt;&lt;p&gt;My first step was to take his css and copy it into a styled component for my entire layout, but it failed.  I do not fully understand why.  None of the custom style came through at all.  If you know please leave me a comment.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/why-wont-you-work.jpg" /&gt;&lt;/p&gt;&lt;p&gt;I suspect for some reason it has to do with attatching to the html element inside of a styled-component.  I think wes was able to get around this by using &lt;code&gt;createGlobalStyle&lt;/code&gt;.  But I was still using much of the default gatsby template, so I did not have a &lt;code&gt;createGlobalStyle&lt;/code&gt; element, but I did have a layout.css.&lt;/p&gt;&lt;h2&gt;scroll.css&lt;/h2&gt;&lt;p&gt;I added &lt;code&gt;scroll.css&lt;/code&gt; to my static directory, then imported it into &lt;code&gt;gatsby-browser.js&lt;/code&gt; in order to get it loaded onto the page.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt; /* static/scroll.css */body::-webkit-scrollbar {    width: 1rem;  }  html {    scroll-behavior: smooth;    scrollbar-width: thin;    scrollbar-color: #5651B7;  }  body::-webkit-scrollbar-track {    background: #392E3D;  }  body::-webkit-scrollbar-thumb {    background-color: #5651B7 ;    border-radius: .5rem;    background: rgb(112,107,208);    background: linear-gradient(180deg, rgba(112,107,208,1) 0%, rgba(86,81,183,1) 100%);    border: 1px solid rgba(86,81,183,.5);  }&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// gatsby-browser.jsimport './static/scroll.css&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;It works&lt;/h2&gt;&lt;p&gt;It was a bit finicky for me to find the right place to put everything, but this is the final result.  I found out that you can have a gradient on your &lt;code&gt;scrollbar-thumb&lt;/code&gt;, but the &lt;code&gt;scrollbar-track&lt;/code&gt; cannot, it also cannot be transparent.  I picked a color that matched my background the best for most use cases, but when the screen gets really narrow a line starts to appear.&lt;/p&gt;&lt;p&gt;&lt;img alt="My final result" src="/static/custom-scrollbar-with-css.gif" title="my final result, an example give of the final result live on waylonwalker.com" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;My final result&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Resources&lt;/h2&gt;&lt;p&gt;uses.tech layout.js: &lt;a href="https://github.com/wesbos/awesome-uses/blob/124bdd64345bc64eb84879929f0e57cbb8752e34/src/components/layout.js#L74"&gt;layout.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;css-trick article: &lt;a href="https://css-tricks.com/almanac/properties/s/scrollbar/" title="css tricks scrollbar article"&gt;scrollbar&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/custom-scrollbar-design</guid></item><item><title>Pug Reveal</title><link>https://waylonwalker.com/pug-reveal</link><description>none</description><content:encoded>&lt;h1&gt;Pug Reveal Slides&lt;/h1&gt;&lt;p&gt;I recently gave a presentation at the Big Brothers and Big Sisters Data Challenge.  I wanted to use reveal to create my slides.  I have used it before and it is a really nice package.  Compared to PowerPoint it is much easier to incorporate interactive visualizations right into the presentation,easy to re factor and maintain slides.  Since you are just working with text you can easily convert from a list of items on one slide to a set of slides.&lt;/p&gt;&lt;h2&gt;Avoiding Death by PowerPoint&lt;/h2&gt;&lt;p&gt;If you have not seen David JP Phillips &lt;a href="https://www.youtube.com/watch?v=Iwpi1Lm6dFo"&gt;Death By PowerPoint&lt;/a&gt;  TEDx, stop now and watch it.  You will never look at slides the same again.  Watching this video ruined me for watching presentations with these issues.  Reveal is a tool that makes it very easy to follow these principles&lt;/p&gt;&lt;ul&gt;&lt;li&gt;You are the center of focus&lt;/li&gt;&lt;li&gt;Reduce clutter&lt;/li&gt;&lt;li&gt;Focus your users with&lt;ul&gt;&lt;li&gt;size&lt;/li&gt;&lt;li&gt;contrast&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Reduce clutter&lt;/h2&gt;&lt;p&gt;In the video David talks about reducing the number of points we have down to no more than 6. You may be thinking "What No More than 6, Well I would have to have a hundred slides to get all of my point in".  to this David tells us, "The amount of slides in your PowerPoint has never been the problem. It is the amount of objects per slide that are the problem."&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The amount of slides in your PowerPoint has never been the problem. It is the amount of objects per slide that are the problem.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Pug&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;"What is this pug thing you speak of?"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Pug is a markup language typically that is into html for the browser.  It is a much less verbose markup language that uses whitespace as syntax.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pug-reveal</guid></item><item><title>Quickly Change Conda Env With Fzf</title><link>https://waylonwalker.com/quickly-change-conda-env-with-fzf</link><description>Changing conda environments is a bit verbose, I use a function with fzf that
both lists environments and selects the one I want in one go. I have used conda as a virtual environment tool for years now.  I started using
conda for its simplicity to ins</description><content:encoded>&lt;p&gt;Changing conda environments is a bit verbose, I use a function with fzf thatboth lists environments and selects the one I want in one go.&lt;/p&gt;&lt;h2&gt;Conda&lt;/h2&gt;&lt;p&gt;I have used conda as a virtual environment tool for years now.  I started usingconda for its simplicity to install packages on windows, but now that hasgotten so much better and it's been years since I have run a &lt;code&gt;conda install&lt;/code&gt;command.  I'm sure that I could use a different environment manager, but itworks for me and makes sense.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What environment manager do you use for python?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Conda environments are stored in a central location such as&lt;code&gt;~/miniconda3/envs/&lt;/code&gt; and not with the project.  They contain both the pythoninterpreter and packages for that env.&lt;/p&gt;&lt;h2&gt;Conda create&lt;/h2&gt;&lt;p&gt;Conda environments are created with the &lt;code&gt;conda create&lt;/code&gt; command.  At this point,you will need to name your env and select the python version.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n my_env python=3.8&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After running this command you will have a directory &lt;code&gt;~/miniconda3/envs/my_env&lt;/code&gt;with a base python install.  It will not be active yet.&lt;/p&gt;&lt;h2&gt;List environments&lt;/h2&gt;&lt;p&gt;Before activating an environment I often want to list the environments that Ihave installed which are often upwards of 70, so it's hard to remember themall.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After running this command you will see something like the following.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;# conda environments:#base                     /home/waylon/miniconda3my_env                   /home/waylon/my_env&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Activating an environment&lt;/h2&gt;&lt;p&gt;Activating a conda environment will do some magic to your current shells&lt;code&gt;$PATH&lt;/code&gt; variable to ensure that the environment that you select is preferredover the base environment.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda activate my_env&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Ready to work&lt;/h2&gt;&lt;p&gt;Now you can install packages for your project in an isolated environment safefrom wrecking another project or being wrecked by another project.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Using fzf&lt;/h2&gt;&lt;p&gt;&lt;em&gt;a bit less verbose&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; is an amazing tool for the terminal thatis a generic fuzzy matcher.  It is super performant and can handle insaneamounts of text and is brilliant at figuring out what you mean with just a fewcharacters.  We can use it here to list out all of our conda environments andselect the one we want to activate with just a few keystrokes.&lt;/p&gt;&lt;h3&gt;Selecting the environment.&lt;/h3&gt;&lt;p&gt;Piping our list of environments directly into &lt;code&gt;fzf&lt;/code&gt; gives us a fuzzy selectionwhere we can type a few characters and it will return the row we were lookingfor.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs | fzf&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This returns us something like this which also includes the path where it islocated.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;my_env                 /home/walkews/miniconda3/envs/my_env&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;getting just the environment name&lt;/h3&gt;&lt;p&gt;To get just the name without the path I pipe the output into awk.  There aremany ways to do this in bash, this is the way that worked for me at the time Imade this function.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs | fzf | awk '{print $1}'&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Time to activate&lt;/h3&gt;&lt;p&gt;Functions that use &lt;code&gt;fzf&lt;/code&gt; can be a bit odd, running them in a subshell with the$() syntax generally makes it super simple to utilize the output.  No matterhow many times I have tried without running it in a subshell it's always buggywithout it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda activate "$(conda info --envs | fzf | awk '{print $1}')"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will now run conda activate on the environment that we select with fzf.&lt;/p&gt;&lt;h3&gt;Make it a function&lt;/h3&gt;&lt;p&gt;We don't want to type that out every time we want to activate an environment. Ikeep a function called &lt;code&gt;a&lt;/code&gt; in my &lt;code&gt;~/.bashrc&lt;/code&gt; and &lt;code&gt;~/.zshrc&lt;/code&gt; so that I canactivate an environment with a single character.  Yes, I switch environmentsoften enough to justify the valuable namespace of a single character.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;a () {  conda activate "$(conda info --envs | fzf | awk '{print $1}')"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/reusable-bash"&gt;https://waylonwalker.com/reusable-bash&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;for more information on writing reusable bash scripts check out one of myfavorite articles&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I am always on the lookout for cool new use cases for &lt;code&gt;fzf&lt;/code&gt;, if you have one please share it with me.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/quickly-change-conda-env-with-fzf</guid></item><item><title>Keep Location List Closed</title><link>https://waylonwalker.com/keep-location-list-closed</link><description>Vim's (neovim in my case) location list can provide some very useful information while developing.  Mine gives me information about linting and type checking errors with fairly little config.  Generally, it sits nicely at the bottom of the screen and</description><content:encoded>&lt;p&gt;Vim's (neovim in my case) location list can provide some very useful information while developing.  Mine gives me information about linting and type checking errors with fairly little config.  Generally, it sits nicely at the bottom of the screen and barely affects me.  Other times, especially while zoomed way in during a presentation, it just gets in the way.&lt;/p&gt;&lt;p&gt;&lt;img alt="location list eats the screen" src="https://waylonwalker.com/location-list-eats-screen.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Location List eating up the screen while I am zoomed in and trying to live code&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Toggling the location list&lt;/h2&gt;&lt;p&gt;Through some google search I found the culprit was syntastic.  It has an &lt;code&gt;auto_loc_list&lt;/code&gt; feature.  We can turn it off by setting&lt;code&gt;syntastic_auto_loc_list=0&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;let syntastic_auto_loc_list=0&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Keybindings&lt;/h2&gt;&lt;p&gt;I want to keep the location list open automatically most of the time, but when I don't want it to keep opening it's generally detrimental.  Trying to live code while the location list keeps taking up the whole screen is not cool.&lt;/p&gt;&lt;p&gt;First, create a function that will toggle both the location list and syntactic together.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;let s:syntastic_auto_loc_list = 0function! s:ToggleLocationList()    if s:syntastic_auto_loc_list == 1        let s:syntastic_auto_loc_list = 0        let syntastic_auto_loc_list = 0        :lclose    else        let s:syntastic_auto_loc_list = 1        let syntastic_auto_loc_list = 1        :lopen    endifendfunction&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This binding will allow me to use &lt;code&gt;gtl&lt;/code&gt; from normal mode to toggle the location list.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;:command! ToggleLocationList :call s:ToggleLocationList()nnoremap gtl :ToggleLocationList&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am starting a set of &lt;strong&gt;toggle&lt;/strong&gt; keymaps under the &lt;code&gt;gt&lt;/code&gt; keybinding, this one is the second one after a keybinding made to toggle paste mode.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/keep-location-list-closed</guid></item><item><title>Designing a "Router" for kedro</title><link>https://waylonwalker.com/designing-kedro-router</link><description>I released a router-like plugin for kedro back in April 2020. This was not the first design, the idea actually came from one of the QB folks who taught me kedro nearly a year before.</description><content:encoded>&lt;h2&gt;nodes_global&lt;/h2&gt;&lt;p&gt;I released a router-like plugin for kedro back in April 2020.  This was not the first design, the idea actually came from one of the QB folks who taught me kedro nearly a year before.  We were assembling our pipelines with something called &lt;code&gt;nodes_global&lt;/code&gt;.  It worked fairly well but did have some issues around being set as a global variable.&lt;/p&gt;&lt;p&gt;&lt;em&gt;But...&lt;/em&gt;&lt;/p&gt;&lt;p&gt;One thing in particular that it did not lend itself well to was being able to create a packagable pipeline that I could pip install and append into any of my existing pipelines.  Something I am still trying to work out, maybe I don't need this.  I think I have it working for our internal pipelines and it seems like the way to go, but we don't necessarily end up using it.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Also...&lt;/em&gt;&lt;/p&gt;&lt;p&gt;With this pattern all of the nodes needed to be importable by the module containing nodes_global.  I find that this becomes a big hurdle for new pipelines coming from jupyter to overcome and can be most infuriating when their nodes aren't getting ran after they added them.&lt;/p&gt;&lt;p style='text-align: center' align='center'&gt;&lt;a href='https://waylonwalker.com/what-is-kedro'&gt;  &lt;img    style='width:400px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/what-is-kedro.png"    alt="What is kedro"    width='400'  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you are a bit unsure about what kedro is make sure to check out my &lt;a href="https://waylonwalker.com/what-is-kedro"&gt;what-is-kedro&lt;/a&gt; article.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;@node(inputs='a_raw_cars', outputs='b_int_cars')&lt;/h2&gt;&lt;p&gt;I set off to design something that was flask-like.  Around November I had something working.  You could simply start creating functions. and decorate these functions with a decorator just like with flask.  I even had it setup to autoname the nodes things like &lt;code&gt;create_b_int_cars&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;But....&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This did not lend well to pulling in functions from a library or dynamically creating nodes.  I didn't realize how few nodes I actually make in my pipelines that are a 1:1 relationship between the node and function in real work.  Most examples work this way, but for some reason when I step into a project we end up pulling a lot of functions out of existing libraries, or dynamically creating many datasets from a list of options.&lt;/p&gt;&lt;h2&gt;pytest inspired&lt;/h2&gt;&lt;p&gt;&lt;em&gt;simplicity&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The final design ended up being suggested by a colleague of mine who is not using kedro, but is a  brilliant python dev.  The idea was to walk through the project like pytest does looking for modules and variables with a certain pattern (&lt;code&gt;node&lt;/code&gt;, or &lt;code&gt;pipeline&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;I have been using this since April and am loving it. It has have very little change since first release.  When I create a new module, that automatically becomes a new pipeline in my &lt;code&gt;pipelines&lt;/code&gt; dict and all of the variables with the name node get scrapped up and put into a single pipeline.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Beginner Friendly&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Just like with pytest.  You just start hacking in modules ending with &lt;code&gt;_nodes.py&lt;/code&gt; with nodes in them and they just appear in your final pipeline.&lt;/p&gt;&lt;h2&gt;How to use it&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://github.com/WaylonWalker/find-kedro"&gt;readme&lt;/a&gt; has some great examples.&lt;/p&gt;&lt;h2&gt;Install it&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;pip install find-kedro&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Enable it&lt;/h2&gt;&lt;p&gt;Enable it by changing one line in your run.py&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;run.py&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.context import KedroContextfrom find_kedro import find_kedroclass ProjectContext(KedroContext):    def _get_pipelines(self) -&amp;gt; Pipeline:        return find_kedro()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or if your using the new &lt;code&gt;hooks.py&lt;/code&gt; method.  Again no need to import all of your nodes.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;hooks.py&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class ProjectHooks:    @hook_impl    def register_pipelines(self) -&amp;gt; Dict[str, Pipeline]:        """Register the project's pipeline.        Returns:            A mapping from a pipeline name to a ``Pipeline`` object.        """        return find_kedro()&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Use it&lt;/h2&gt;&lt;p&gt;Check out the &lt;a href="https://github.com/WaylonWalker/find-kedro"&gt;readme&lt;/a&gt; for more examples, but this one is the one that I use and recommend most often.  This method helps keep nodes close to functions that are designed for them.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;my_nodes.py&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# my-proj/pipelinies/data_engineering/pipelinefrom kedro.pipeline import nodefrom .nodes import split_datanodes = []def split_data(df: pd.DataFrame, ratio: float) -&amp;gt; Dict[str, pd.DataFrame]:   ...nodes.append(    node(        split_data,        ["example_iris_data", "params:example_test_data_ratio"],        dict(            train_x="example_train_x",            train_y="example_train_y",            test_x="example_test_x",            test_y="example_test_y",        ),    ))&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Want a simple guide to get started with find kedro&lt;/h1&gt;&lt;p style='text-align: center' align='center'&gt;&lt;a href='https://find.kedro.dev/examples/iris/&gt;  &lt;img    style='width:400px; max-width:80%; border-radius: '35px'; margin: auto;'    width='400'    src="https://waylonwalker.com/find-kedro-examples-iris.png"    alt="Find Kedro Iris example"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p&gt;In &lt;a href="https://find.kedro.dev/examples/iris/"&gt;this doc&lt;/a&gt; I transform the kedro iris template to find-kedro.&lt;/p&gt;&lt;h1&gt;Ready to start using kedro&lt;/h1&gt;&lt;p&gt;If you still have not tried out kedro, it's easier than you think. Check out &lt;a href="https://waylonwalker.com/create-new-kedro-project"&gt;create-new-kedro-project&lt;/a&gt; to get a project started in just a few minutes.&lt;/p&gt;&lt;p style='text-align: center' align='center'&gt;&lt;a href='https://waylonwalker.com/create-new-kedro-project'&gt;  &lt;img    style='width:400px; max-width:80%; margin: auto;'    width='400'    src="https://waylonwalker.com/create-new-kedro-project.png"    alt="Create New Kedro Project"  /&gt;  &lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/designing-kedro-router</guid></item><item><title>Brainstorming Kedro Hooks</title><link>https://waylonwalker.com/brainstorming-kedro-hooks</link><description>This post is a 🧠 branstorming work in progress, I will likely use it as a storage location/brain dump of hook ideas.</description><content:encoded>&lt;p&gt;This post is a 🧠 branstorming work in progress.&lt;/p&gt;&lt;blockquote&gt;&lt;h3&gt;What is Kedro 🤔&lt;/h3&gt;&lt;p&gt;If you are completely unsure what kedro is be sure to check out my &lt;a href="https://waylonwalker.com/wike"&gt;what is kedro&lt;/a&gt; post&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;after_catalog_created&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;filepath replacer&lt;/li&gt;&lt;li&gt;bucket replacer&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;before_pipeline_run&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;preflight&lt;/li&gt;&lt;li&gt;check that data exists&lt;/li&gt;&lt;li&gt;run &lt;code&gt;kedro_static_viz&lt;/code&gt;&lt;/li&gt;&lt;li&gt;run mypy&lt;/li&gt;&lt;li&gt;run interrogate&lt;/li&gt;&lt;li&gt;run flake8&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;after_pipeline_run&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Great Expectations&lt;/li&gt;&lt;li&gt;send email&lt;/li&gt;&lt;li&gt;send slack&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;before_node_run&lt;/h2&gt;&lt;h2&gt;after_node_run&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Great Expectations&lt;/li&gt;&lt;li&gt;save stats/meta data*&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Execution Order&lt;/h2&gt;&lt;p&gt;hooks are executed in reverse order of the hooks list.&lt;/p&gt;&lt;p&gt;hooks with &lt;code&gt;tryfirst&lt;/code&gt; will be moved to the end of the listhooks with &lt;code&gt;trylast&lt;/code&gt; will be moved to the end of the list&lt;/p&gt;&lt;ol&gt;&lt;li&gt;after_catalog_created&lt;/li&gt;&lt;li&gt;&lt;p&gt;before_pipeline_run&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;args&lt;/p&gt;&lt;/li&gt;&lt;li&gt;run_params = run_params = {'run_id': '2020-05-23T15.24.23.958Z', 'project_path': '/mnt/c/temp/kedro0160', 'env': 'local', 'kedro_version': '0.15.9', 'tags': (), 'from_nodes': [], 'to_nodes': [], 'node_names': (), 'from_inputs': [], 'load_versions': {}, 'pipeline_name': None, 'extra_params': {}, 'git_sha': None}&lt;/li&gt;&lt;li&gt;pipeline&lt;/li&gt;&lt;li&gt;&lt;p&gt;catalog&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;before_node_run&lt;/p&gt;&lt;/li&gt;&lt;li&gt;after_node_run3.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;When does data get saved???&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;before or after node hook?&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;??Unsure??&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;does before  catalog load have access to parameters?&lt;/li&gt;&lt;li&gt;Yes*&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;[steel toes](&lt;a href="https://github.com/waylonwalker/steel-toes/)6"&gt;https://github.com/waylonwalker/steel-toes/)6&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;I was way too excited about this one and already created it&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;prevents pain from stepping on your teammates toes&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Kedro is so amazing at promoting collaboration between team members.  Each team member can check out the code, branch, and start work on their own section of the pipeline.  Issues can arrise if the team members section of the pipeline happen to cross.  Breaking changes happen, BREAKS during development happen and can completely kill a teammates workflow.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;is there a way to prevent toe stepping?&lt;/li&gt;&lt;li&gt;try to load &lt;code&gt;filepath_&amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;if load fails try &lt;code&gt;filepath&lt;/code&gt;&lt;/li&gt;&lt;li&gt;save data to &lt;code&gt;filepath_&amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;how&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;on after_catalog_load check for existing "branch" data&lt;/li&gt;&lt;li&gt;if "branch" data exists load that&lt;/li&gt;&lt;li&gt;otherwise keep default*&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Run only nodes that have changed&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;store a deephash of functions code&lt;/li&gt;&lt;li&gt;store a hash of the inputs&lt;/li&gt;&lt;li&gt;if neither code or inputs changed run function, otherwise skip.&lt;/li&gt;&lt;li&gt;How could a hook choose to skip the node?&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Static viz hook&lt;/h2&gt;&lt;p&gt;Before pipeline run&lt;/p&gt;&lt;ul&gt;&lt;li&gt;make site&lt;/li&gt;&lt;li&gt;Set node status to queued&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Before node run&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set running status&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After node run&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set running status&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;On pipeline error&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set run status&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;On node error&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set error status&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After pipeline run&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set complete status&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After node run&lt;/p&gt;&lt;ul&gt;&lt;li&gt;set complete&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/brainstorming-kedro-hooks</guid></item><item><title>📢 Announcing find-kedro</title><link>https://waylonwalker.com/find-kedro-release</link><description>kedro is an amazing project that allows for super-fast prototyping of data pipelines, yet yielding production-ready pipelines. find-kedro enhances this experience by adding a pytest-like node discovery eliminating the need to bubble up pipelines through modules.</description><content:encoded>&lt;p&gt;&lt;code&gt;find-kedro&lt;/code&gt; is a small library to enhance your kedro experience.  It looks through your modules to find kedro pipelines, nodes, and iterables (lists, sets, tuples) of nodes.  It then assembles them into a dictionary of pipelines, each module will create a separate pipeline, and &lt;code&gt;__default__&lt;/code&gt; being a combination of all pipelines.  This format is compatible with the kedro &lt;code&gt;_create_pipelines&lt;/code&gt; format.&lt;/p&gt;&lt;p&gt;&lt;img alt="Python package" src="https://github.com/WaylonWalker/find-kedro/workflows/Python%20package/badge.svg" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="Test" src="https://github.com/WaylonWalker/find-kedro/workflows/Test/badge.svg" /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://find-kedro.waylonwalker.com"&gt;&lt;img alt="Build-Docs" src="https://github.com/WaylonWalker/find-kedro/workflows/Build-Docs/badge.svg?branch=master" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;img alt="Motivation" src="https://waylonwalker.com/find-kedro-release-1.png" /&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kedro&lt;/code&gt; is a ✨ fantastic project that allows for super-fast prototyping of data pipelines, while yielding production-ready pipelines. &lt;code&gt;find-kedro&lt;/code&gt; enhances this experience by adding a pytest like node/pipeline discovery eliminating the need to bubble up pipelines through modules.&lt;/p&gt;&lt;p&gt;When working on larger pipeline projects, it is advisable to break your project down into different sub-modules which requires knowledge of building python libraries, and knowing how to import each module correctly.  While this is not too difficult, in some cases, it can trip up even the most senior engineers, losing precious feature development time to debugging a library.&lt;/p&gt;&lt;h2&gt;&lt;img alt="Installation" src="https://waylonwalker.com/find-kedro-release-2.png" /&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;find-kedro&lt;/code&gt; is deployed to pypi and can easily be &lt;code&gt;pip&lt;/code&gt; installed.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install find-kedro&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Python Usage" src="https://waylonwalker.com/find-kedro-release-3.png" /&gt;&lt;/h2&gt;&lt;p&gt;The recommended usage of &lt;code&gt;find-kedro&lt;/code&gt; is to implement it directly into your projects &lt;code&gt;run.py&lt;/code&gt; module&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.context import KedroContextfrom find_kedro import find_kedroclass ProjectContext(KedroContext):    def _get_pipelines(self) -&amp;gt; Pipeline:        return find_kedro()&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Creating nodes&lt;/h3&gt;&lt;p&gt;&lt;code&gt;find-kedro&lt;/code&gt; will not execute any functions.  It will simply look for variables that match the &lt;code&gt;pattern&lt;/code&gt; and identify if they are a &lt;code&gt;kedro.pipeline.Pipeline&lt;/code&gt;, &lt;code&gt;kedro.pipeline.nodes.Node&lt;/code&gt;, or a list of &lt;code&gt;kedro.pipeline.nodes.  Node&lt;/code&gt;'s.  If so, it will collect them into the dictionary of pipelines.&lt;/p&gt;&lt;p&gt;There are typically &lt;strong&gt;three&lt;/strong&gt; ways that pipelines are constructed with &lt;code&gt;find-kedro&lt;/code&gt;; &lt;strong&gt;lists&lt;/strong&gt;, &lt;strong&gt;single-nodes&lt;/strong&gt;, and &lt;strong&gt;pipelines&lt;/strong&gt;.&lt;/p&gt;&lt;h4&gt;Lists&lt;/h4&gt;&lt;p&gt;Any pattern matched list will be flattened and collected into the pipeline.  Nodes can be created all at once in the list definition.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# my-proj/pipelinies/data_engineering/pipelinefrom kedro.pipeline import nodefrom .nodes import split_datapipeline = [    node(        split_data,        ["example_iris_data", "params:example_test_data_ratio"],        dict(            train_x="example_train_x",            train_y="example_train_y",            test_x="example_test_x",            test_y="example_test_y",        ),    )]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is also convenient many times to keep the node definition close to the function definition.  Many times I define the list at the top of the file, then append to it as I go.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# my-proj/pipelinies/data_engineering/pipelinefrom kedro.pipeline import nodefrom .nodes import split_datanodes = []nodes.append(    node(        split_data,        ["example_iris_data", "params:example_test_data_ratio"],        dict(            train_x="example_train_x",            train_y="example_train_y",            test_x="example_test_x",            test_y="example_test_y",        ),    ))&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Nodes&lt;/h4&gt;&lt;p&gt;All pattern matched &lt;code&gt;kedro.pipeline.node.Node&lt;/code&gt; objects will get collected into the pipeline.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# my-proj/pipelinies/data_engineering/pipelinefrom kedro.pipeline import nodefrom .nodes import split_datasplit_node = node(        split_data,        ["example_iris_data", "params:example_test_data_ratio"],        dict(            train_x="example_train_x",            train_y="example_train_y",            test_x="example_test_x",            test_y="example_test_y",        ),    )&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Pipeline&lt;/h4&gt;&lt;p&gt;All pattern matched &lt;code&gt;kedro.pipeline.Pipeline&lt;/code&gt; objects will get collected into the pipeline.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# my-project/pipelinies/data_engineering/pipelinefrom kedro.pipeline import node, Pipelinefrom .nodes import split_datasplit_node = Pipeline(    [        node(            split_data,            ["example_iris_data", "params:example_test_data_ratio"],            dict(                train_x="example_train_x",                train_y="example_train_y",                test_x="example_test_x",                test_y="example_test_y",            ),        )    ])&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Fully Qualified imports&lt;/h3&gt;&lt;p&gt;When using fully qualified imports &lt;code&gt;from my_proj.pipelines.data_science.nodes import split_data&lt;/code&gt; instead ofrelative imports &lt;code&gt;from .nodes split_data&lt;/code&gt; you will need to make sure that your project is installed, in your current path, or you set the directory&lt;/p&gt;&lt;h3&gt;&lt;img alt="CLI Usage" src="https://waylonwalker.com/find-kedro-release-4.png" /&gt;&lt;/h3&gt;&lt;p&gt;The CLI provides a handy interface to search your project for nodes&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Usage: find-kedro [OPTIONS]Options:  --file-patterns TEXT       glob-style file patterns for Python node module                             discovery  --patterns TEXT            prefixes or glob names for Python pipeline, node,                             or list object discovery  -d, --directory DIRECTORY  Path to save the static site to  --version                  Prints version and exits  -v, --verbose              Prints extra information for debugging  --help                     Show this message and exit.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example ran with a slightly modified default &lt;code&gt;kedro new&lt;/code&gt; project.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;❯ find-kedro{  "__default__": [    "split_data([example_iris_data,params:example_test_data_ratio]) -&amp;gt; [example_test_x,example_test_y,example_train_x,example_train_y]",    "train_model([example_train_x,example_train_y,parameters]) -&amp;gt; [example_model]",    "predict([example_model,example_test_x]) -&amp;gt; [example_predictions]",    "report_accuracy([example_predictions,example_test_y]) -&amp;gt; None"  ],  "src.default_kedro_159.pipelines.data_engineering.pipeline": [    "split_data([example_iris_data,params:example_test_data_ratio]) -&amp;gt; [example_test_x,example_test_y,example_train_x,example_train_y]"  ],  "src.default_kedro_159.pipelines.data_science.pipeline": [    "train_model([example_train_x,example_train_y,parameters]) -&amp;gt; [example_model]",    "predict([example_model,example_test_x]) -&amp;gt; [example_predictions]",    "report_accuracy([example_predictions,example_test_y]) -&amp;gt; None"  ]}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Contributing" src="https://waylonwalker.com/find-kedro-release-5.png" /&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;You're Awesome&lt;/strong&gt; for considering a contribution!  Contributions are welcome, please check out the &lt;a href="https://github.com/WaylonWalker/find-kedro/blob/master/contributing.md"&gt;Contributing Guide&lt;/a&gt; for more information.  Please be a positive member of the community and embrace feedback&lt;/p&gt;&lt;h2&gt;&lt;img alt="Versioning" src="https://waylonwalker.com/find-kedro-release-6.png" /&gt;&lt;/h2&gt;&lt;p&gt;We use &lt;a href="https://semver.org/"&gt;SemVer&lt;/a&gt; for versioning. For the versions available, see the &lt;a href="https://github.com/WaylonWalker/find-kedro/releases"&gt;tags on this repository&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;img alt="Authors" src="https://waylonwalker.com/find-kedro-release-7.png" /&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/WaylonWalker"&gt;&lt;img alt="Waylon Walker" src="https://avatars1.githubusercontent.com/u/22648375?s=120&amp;amp;v=4" /&gt;&lt;/a&gt; - Waylon Walker - &lt;em&gt;Original Author&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/mzjp2"&gt;&lt;img alt="Zain Patel" src="https://avatars3.githubusercontent.com/u/30357972?s=120&amp;amp;v=4" /&gt;&lt;/a&gt; - Zain Patel&lt;/p&gt;&lt;h2&gt;&lt;img alt="License" src="https://waylonwalker.com/find-kedro-release-8.png" /&gt;&lt;/h2&gt;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE.md file for details&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/find-kedro-release</guid></item><item><title>2018 Retrospective</title><link>https://waylonwalker.com/2018-retrospective</link><description>&lt;p&gt;2018 was a year of many ups and downs, and learning to deal with a whole new set of problems professionally and at home.  In 2018 I logged in to my first Linux system, setup my own webserver, data pipelines, database. I learned to use react and d3. Stepped up my python, javascript, and sql.&lt;/p&gt;&lt;p&gt;At home the doctor appointments keep piling in.  While I am learning to deal with it all there were several times throughout the year that I was very overwhelmed  with everything and broke down.&lt;/p&gt;&lt;p&gt;Here are the goals I had listed out for 2018 and how I faired at completing them.&lt;/p&gt;&lt;h3&gt;Positivity&lt;/h3&gt;&lt;h4&gt;The Good&lt;/h4&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;Continue "Favorite Things" with family at dinner time&lt;/li&gt;&lt;li&gt;Take 2 10min breaks per day clear the mind&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;I can say that the kids are fully on board with favorite things and love to tell everyone about how their day went.  This is a time that they are very positive and generally give praise to another family member for helping them through their day.&lt;/p&gt;&lt;h4&gt;To Be Improved&lt;/h4&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;Gratitude journaling every day&lt;/li&gt;&lt;li&gt;Snooze Less be productive&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;I hit 61  gratitude journals in 2018.  I would not say that I met my goal, but I would definitely say that it's a great start and is something that I plan on improving next year.  I really like how it helps me focus on the positive things that happened throughout the day to find the best gratitude journal subject.  I do think the quick five minute deadline helps in that I have to be semi-prepared, which forces me to think about gratitude throughout the day.&lt;/p&gt;&lt;h3&gt;Focus&lt;/h3&gt;&lt;p&gt;Mediocore performance??&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;8 pomodoro&lt;/li&gt;&lt;li&gt;up to date kanban&lt;/li&gt;&lt;li&gt;daily/weekly planning session&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;In 2018 I wanted to set out some goals to be more focused with the time that I do have at work.  I did quite a bit of research for the best techniques throughout December, and found a system that works well for me.  I did keep up with the &lt;em&gt;kanban&lt;/em&gt; system througout the year with trello.  I did not live by the board, but i did put things on there and move them.  The big thing that I found with this system is that it really made me &lt;strong&gt;feel&lt;/strong&gt; productive, and gave me motivation to keep going.  While tracking my tasks throughout the day I was able to really see progress at the end of the day, and go home knowing I did some good work rather than feeling "Where did this day go?".&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I am putting this back in for 2019, and I will learn to concur them.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I completely fell off of the pomodoro system.  I really feel like this system works for me and keeps me on task, I really have issues with task jumping.  It is really hard to keep on it when there are so many distractions throughout the day.  I am putting this back in for 2019, and I will learn to concur them.  The biggest challenge is people.  I have a lot of people stop by for a quick answer or to chat about a project.  I really need to set strong boundaries and tell them in X minutes I can talk, right now I am busy.&lt;/p&gt;&lt;h3&gt;Physical Health&lt;/h3&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;active 3 days a week... 🤔&lt;/li&gt;&lt;li&gt;eat better 👍&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;I will admit that I was not very measurable with "eat better", but I would say that I have done well.  I have really incorporated quite a few more vegetables into my diet, even when everyone else at the table isn't.  I throw some frozen brocoli in the microwave.  I have even started choosing vegan options at restaurants occasionally.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;As different things started taking over my time I was back off the wagon.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I started running in the March timeframe, and really enjoyed it.  As different things started taking over my time I was back off the wagon.  Overall I would say that I am still active 3 or so days of the week with the kids.&lt;/p&gt;&lt;h3&gt;Educational&lt;/h3&gt;&lt;p&gt;Continuous Learning is something that I am really passionate for.  I truly believe in always learning from experiences, taking classes, watching conferences, listening to podcasts and reading blogs&lt;/p&gt;&lt;h4&gt;The Good 👍&lt;/h4&gt;&lt;p&gt;&lt;em&gt;4 official courses completed&lt;/em&gt;&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;d3 in 5 days&lt;/li&gt;&lt;li&gt;flexbox zombies&lt;/li&gt;&lt;li&gt;cssgrid.io&lt;/li&gt;&lt;li&gt;datacamp sql&lt;/li&gt;&lt;li&gt;linux command line (many blogs/youtube... not a course)&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;I really stepped up my &lt;strong&gt;front end web skills&lt;/strong&gt; this past year. I have started using es6, react, and building interactive web visualizations, laid out with native modern css.  These are things that I loosely understood in the past and really relied on libraries like &lt;code&gt;bokeh&lt;/code&gt; or &lt;code&gt;dash&lt;/code&gt; to get them to work right.&lt;/p&gt;&lt;p&gt;I can also say that I have stopped google searching for every simple sql query that I write, Goal Complete.  I would say that I went beyond my sql goal in that I have learned to do far more than I realized was possible in the database, dramatically improving performance of my products.  I have also become the go to guy for reading/writing more complex queries.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Before 2018 I had never experienced the glory of the linux command line.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Before 2018 I had never experienced the glory of the linux command line.  Around May I was graced with a small on premis red hat virtual machine and my mind was quickly blown.  Many things that I have struggled to get up and working on windows simply worked right out of the box.  Webserver, task scheduling, 100% availability, and a great command line.  By the end of the year I installed Debian (wsl) on my windows machine and have converted all of my command line applications/languages to run from there, as there are far fewer compatability issues..&lt;/p&gt;&lt;h4&gt;The flop&lt;/h4&gt;&lt;p&gt;&lt;em&gt;planned coursed not completed&lt;/em&gt;&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;R&lt;/li&gt;&lt;li&gt;Machine Learning&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;Honestly I am not really hurt by not completing this one.  I really feel like I learned a ton of useful skills this year and I feel like neither of these two would have helped me progress.  R is too close to python to need both in my toolbelt without a specific project/need for it.  I did not have any projects with a dire need for ML.  I really hope to start getting some experience with it so I can have a better understanding when I should use it, but it was not a big need in any of my projects this year.&lt;/p&gt;&lt;p&gt;Overall I am really happy with the progress from this year, and can't wait to get started next year.  Having the past few weeks off has really given me time for a reset that I didn't realize I needed.  Looking at these goals reminds me of the things that had started slipping towards the end during that last hard push to the end.&lt;/p&gt;&lt;p&gt;🎉🎉 Hapy New Year 🎉🎉&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/2018-retrospective</guid></item><item><title>How to get Dev Comments from an article Url</title><link>https://waylonwalker.com/devto-comments-from-url</link><description>I want to incorporate some of the wonderful comments, 💕, 🦄, and 🔖's that I have been getting on dev.to on my website.  I have dabbled once or twice with no avail this time I am taking notes on my journey, so follow along and let's get there together.  By the end of this post, I will have a way to get comments from posts on the client-side thanks to the wonderfully open dev.to API.</description><content:encoded>&lt;p&gt;I want to incorporate some of the wonderful comments, 💕, 🦄, and 🔖's that I have been getting on &lt;strong&gt;dev.to&lt;/strong&gt; on my website.  I have dabbled once or twice with no avail this time I am taking notes on my journey, so follow along and let's get there together.  By the end of this post, I will have a way to get comments from posts on the client-side thanks to the wonderfully open dev.to API.&lt;/p&gt;&lt;h2&gt;The API&lt;/h2&gt;&lt;p&gt;dev.to has an open API that allows us to easily get comments as HTML.  They have their API hosted at &lt;a href="https://docs.dev.to/api/#tag/comments"&gt;https://docs.dev.to/api/#tag/comments&lt;/a&gt;, let's take a look at it.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/dev-to-api-comments.png" /&gt;&lt;/p&gt;&lt;p&gt;Here we can see that going to &lt;a href="https://dev.to/api/comments?a_id=270180"&gt;https://dev.to/api/comments?a_id=270180&lt;/a&gt; returns us some json, that contains an array of comments.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;[  {body_html: '&amp;lt;the comment rendered as html&amp;gt;',   user: {&amp;lt;an array with quite a bit of information about the commenting user&amp;gt;},   children: [&amp;lt;an array of child comment objects&amp;gt;]   &amp;lt;other stuff we don't care about&amp;gt;  },  &amp;lt;more comments&amp;gt;  ]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;What the heck is that a_id&lt;/h2&gt;&lt;p&gt;That is an &lt;code&gt;article_id&lt;/code&gt;.  Though a bit of searching I found that it occurs in at least four places on every page as a data attribute.  Using chrome dev tools I found a good place to "query" it from.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/dev-to-article-id.png" /&gt;&lt;/p&gt;&lt;p&gt;With this knowledge, we can fetch the contents of an article and pull the &lt;code&gt;articleId&lt;/code&gt; from it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;    async function getDevToAId(url) {        // Gets the articleId of a dev.to article        const root = 'https://dev.to/'        if (!url.includes(root)) {            url = root + url        }        let domparser = new DOMParser()        const html = await fetch(url).then(r =&amp;gt; r.text())        const doc = domparser.parseFromString(html, 'text/html')        const articleId = doc.querySelector('#article-body').dataset.articleId        return articleId    }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;  I do check to see if a full URL or slug was given, if it was just the slug I tack on &lt;code&gt;https://dev.to/&lt;/code&gt; before fetching.&lt;/p&gt;&lt;h2&gt;Now the comments&lt;/h2&gt;&lt;p&gt;The main event is here, what you all have waited for, and it's by far the easiest part.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;    async function getDevToComments(url) {        const articleId = await getDevToAId(url)        const response = await fetch(`https://dev.to/api/comments?a_id=${articleId}`)        const comments = await response.json()        return comments    }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The hardest part of this was figuring out what the &lt;code&gt;a_id&lt;/code&gt; was and how I was going to get it from some more commonly known information about my articles, the URL, or the slug&lt;/p&gt;&lt;h2&gt;Try it out&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;F12&lt;/strong&gt; pop open your console right in dev tools of this post and try it out.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/dev-to-comments-in-devtools.png" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/devto-comments-from-url</guid></item><item><title>GitHub Actions Syntax</title><link>https://waylonwalker.com/github-actions-syntax</link><description>GitHub actions use YAML to configure your workflows.  What gets ran, When it runs, What it runs on.  Let's discuss YAML and the structure needed for GitHub actions.</description><content:encoded>&lt;style&gt;h2 img { width: 100%; box-shadow: .5rem .5rem 3rem #141F2D, -.5rem -.5rem 3rem rgba(255,255,255,.1);}img{ max-width: 100% !important;}&lt;/style&gt;&lt;p&gt;Github actions are written in configuration files using the YAML syntax.  YAML is a superset of JSON.  Most YAML can be expressed inline with JSON syntax.  Similar to python YAML is whitespace driven by whitespace rather than brackets tags.  The argument for using YAML for configuration files such as actions is that it is more human-readable and editable.  It's much easier to see the whitespace layout than it is to get closing brackets correct.  For actions, I believe this is mostly true.  I don't see any use case to get past 3-5 indents, which is completely manageable.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Can I just say that I learned more than I realized about YAML by writing this article&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;img alt="Arrays and Objects" src="https://waylonwalker.com/gh-actions-syntax-headers/1.png" /&gt;&lt;/h2&gt;&lt;p&gt;In YAML or JSON, the most basic containers for data are &lt;strong&gt;arrays&lt;/strong&gt;, a 1D list of things, and &lt;strong&gt;objects&lt;/strong&gt;, for key-value pairs.&lt;/p&gt;&lt;h3&gt;&lt;img alt="Arrays" src="https://waylonwalker.com/gh-actions-syntax-h3/1.png" /&gt;&lt;/h3&gt;&lt;p&gt;The start of an array container is signified with a leading &lt;code&gt;-&lt;/code&gt;.  This is probably one of the big things I didn't understand about YAML before writing this post, but hats off to the GitHub actions editor as it took care of a lot of my misunderstanding for me.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-YAML"&gt;- one- two- three&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;['one', 'two', 'three']&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;img alt="Objects" src="https://waylonwalker.com/gh-actions-syntax-h3/2.png" /&gt;&lt;/h3&gt;&lt;p&gt;Objects are just &lt;code&gt;{key: "value"}&lt;/code&gt; pairs without any &lt;code&gt;-&lt;/code&gt; before them.  I find that objects make 💯 sense to me.  Unlike arrays, they feel very intuitive.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-YAML"&gt;name: onewho: me&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{'name': 'one', 'who': 'me'}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Example Combining arrays and objects" src="https://waylonwalker.com/gh-actions-syntax-headers/2.png" /&gt;&lt;/h2&gt;&lt;p&gt;Let's start writing something that looks a bit more like a GitHub action.  GitHub actions are built from an object containing name, on, jobs.  Where jobs is a list of jobs, that contain a list of steps.  Simple actions will only need a single job, but commonly a list of steps.&lt;/p&gt;&lt;h4&gt;&lt;img alt="Shortlist of GitHub action keys" src="https://waylonwalker.com/gh-actions-syntax-h3/4.png" /&gt;&lt;/h4&gt;&lt;p&gt;These are the keys, with their parents, that I found most useful.  You can find a complete list on &lt;a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;workflow-syntax-for-github-actions&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name&lt;/li&gt;&lt;li&gt;on&lt;ul&gt;&lt;li&gt;push&lt;/li&gt;&lt;li&gt;pull_request&lt;/li&gt;&lt;li&gt;schedule&lt;/li&gt;&lt;li&gt;watch&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;env&lt;/li&gt;&lt;li&gt;jobs&lt;ul&gt;&lt;li&gt;name&lt;/li&gt;&lt;li&gt;needs&lt;/li&gt;&lt;li&gt;env&lt;/li&gt;&lt;li&gt;if&lt;/li&gt;&lt;li&gt;steps&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;img alt="Combining arrays and objects" src="https://waylonwalker.com/gh-actions-syntax-h3/5.png" /&gt;&lt;/h3&gt;&lt;p&gt;Here is a very small example that contains an object with one key, &lt;code&gt;jobs&lt;/code&gt;.  That &lt;code&gt;jobs&lt;/code&gt; object contains one job called &lt;code&gt;build&lt;/code&gt; that contains a list of &lt;code&gt;steps&lt;/code&gt;.  Notice the &lt;code&gt;-&lt;/code&gt; before each step, and how each &lt;code&gt;step&lt;/code&gt; repeats the same object keys.&lt;/p&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;jobs:    build:        runs-on: ubuntu-latest        steps:        - name: step-one          uses: checkout        - name: step-two          uses: test        - name: step-three          uses: package&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{  "jobs": {    "build": {      "runs-on": "ubuntu-latest",      "steps": [        {          "name": "step-one",          "uses": "checkout"        },        {          "name": "step-two",          "uses": "test"        },        {          "name": "step-three",          "uses": "package"        }      ]    }  }}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;&lt;img alt="Multiline Strings" src="https://waylonwalker.com/gh-actions-syntax-headers/3.png" /&gt;&lt;/h2&gt;&lt;p&gt;Multiline strings are super important in GitHub actions.  You will likely use the &lt;code&gt;|&lt;/code&gt; to preserve newlines for shell scripts most commonly but may also have some raw text fields that need to be concatenated without a newline character using the &lt;code&gt;&amp;gt;&lt;/code&gt; operator.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;| preserves newlines&lt;/li&gt;&lt;li&gt;&lt;blockquote&gt;&lt;p&gt;folds newlines&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre class="highlight"&gt;&lt;code class="language-YAML"&gt;preserved: |    cd my-dir    ls    mv public ../folded: &amp;gt;    This is some long text    that I do not want on    one line, but it is    really a one-liner&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-JSON"&gt;{    "preserved": "cd my-dir\nls\nmv public ../\n",    "folded": "This is some long text that I do not want on one line, but it is  really   a one-liner"}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Anchors are not supported" src="https://waylonwalker.com/gh-actions-syntax-headers/4.png" /&gt;&lt;/h2&gt;&lt;p&gt;YAML has this amazing feature for reducing repetative content called anchors.  You can save part of your configuration as a reusable variable in other sections.  I see this being really cool if you had separate jobs that all needed similar steps.  Look for this improvement in the future, for now just be aware that it is part of the YAML syntax.&lt;/p&gt;&lt;p&gt;See support ticket 👉 &lt;a href="https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/m-p/30336"&gt;Support-for-YAML-anchors&lt;/a&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-YAML"&gt;secrets: &amp;amp;secrets    github-pat: ${{ gh-pat }}    gmail-pass: ${{ gmail-pass }}jobs:    build:        - name: step-one          uses: checkout          &amp;lt;&amp;lt;: *secrets        - name: step-two          uses: test          &amp;lt;&amp;lt;: *secrets        - name: step-three          uses: package          &amp;lt;&amp;lt;: *secrets&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice how the nice clean YAML syntax gets exploded with much more data in the JSON format.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{    "secrets": {        "github-pat": "${{ gh-pat }}",        "gmail-pass": "${{ gmail-pass }}"    },    "jobs": {        "build": [            {                "github-pat": "${{ gh-pat }}",                "gmail-pass": "${{ gmail-pass }}",                "name": "step-one",                "uses": "checkout"            },            {                "github-pat": "${{ gh-pat }}",                "gmail-pass": "${{ gmail-pass }}",                "name": "step-two",                "uses": "test"            },            {                "github-pat": "${{ gh-pat }}",                "gmail-pass": "${{ gmail-pass }}",                "name": "step-three",                "uses": "package"            }        ]    }}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Writing an Action" src="https://waylonwalker.com/gh-actions-syntax-headers/5.png" /&gt;&lt;/h2&gt;&lt;p&gt;With a basic understanding of YAML you can probably go to your repo and click actions &amp;gt; new workflow &amp;gt; setup my own workflow right from the ui, and create your own.  Or read through the official syntax docs for deeper information &lt;a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;workflow-syntax-for-github-actions&lt;/a&gt;. Let's finsh off with a really simple action, the default one from GitHub.&lt;/p&gt;&lt;h3&gt;&lt;img alt="Important first step" src="https://waylonwalker.com/gh-actions-syntax-h3/6.png" /&gt;&lt;/h3&gt;&lt;p&gt;It is important to know that when running an action you will likely need access to your code in order to lint, test, build, package, whatever you want to do with it.  Your first step for any action requiring code from your repo is to &lt;code&gt;checkout&lt;/code&gt; your repo.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt; steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;img alt="Default example" src="https://waylonwalker.com/gh-actions-syntax-h3/7.png" /&gt;&lt;/h3&gt;&lt;p&gt;This example runs a workflow called &lt;code&gt;CI&lt;/code&gt; on ubuntu on every push or PR to the main branch.  Within the build job it does a checkout of the repo, then runs two shell steps.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-YAML"&gt;# This is a basic workflow to help you get started with Actionsname: CI# Controls when the action will run. Triggers the workflow on push or pull request# events but only for the main branchon:  push:    branches: [ main ]  pull_request:    branches: [ main ]# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:  # This workflow contains a single job called "build"  build:    # The type of runner that the job will run on    runs-on: ubuntu-latest    # Steps represent a sequence of tasks that will be executed as part of the job    steps:    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it    - uses: actions/checkout@v2    # Runs a single command using the runners shell    - name: Run a one-line script      run: echo Hello, world!    # Runs a set of commands using the runners shell    - name: Run a multi-line script      run: |        echo Add other actions to build,        echo test, and deploy your project.&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/github-actions-syntax</guid></item><item><title>How to find things in your kedro catalog</title><link>https://waylonwalker.com/kedro-catalog-search</link><description>kedro 0.16.2 just dropped last week with a long-awaited feature... catalog search!  I went as far as monkey patching this into each of my projects.  I work jump between a few really big projects that have tons of datasets.  Being able to quickly search for what I need is so useful.</description><content:encoded>&lt;p&gt;kedro 0.16.2 just dropped last week with a long-awaited feature... &lt;strong&gt;catalog search&lt;/strong&gt;!  I went as far as monkey patching this into each of my projects.  I work jump between a few really big projects that have tons of datasets.  Being able to quickly search for what I need is so useful.&lt;/p&gt;&lt;h2&gt;The Catalog&lt;/h2&gt;&lt;p&gt;The kedro data catalog is a key component to the kedro framework.  It handles all data loading and saving for you.  It is configurable and hackable.  Having all your data connections listed in one place make it so easy to pick your project up and move it to a completely new environment.  That sweet imperative loading style saves so much read/write overhead.  I can load all my data with a single command whether it's in amazon s3, google cloud platform, or a local file.&lt;/p&gt;&lt;h2&gt;Kick start a toy project&lt;/h2&gt;&lt;p&gt;Just like with most of these articles, I am going to create a conda environment so that I don't break any existing projects and scaffold up a toy project to learn from.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n kedro0162 python=3.8 -yactivate kedro0162pip install kedrokedro new # call it Kedro 0162 and click-throughcd kedro-0162kedro install&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Expect this set of commands to take a few minutes depending on your system, connection speed, and amount of packages already in your local cache.&lt;/p&gt;&lt;h2&gt;Create some catalog&lt;/h2&gt;&lt;p&gt;Now the power of the catalog search really starts to shine when your projects grow legs.  You have groups of many datasets containing patterns of data including &lt;code&gt;layer&lt;/code&gt;, or &lt;code&gt;source&lt;/code&gt; among other things.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;vim conf/base/catalog.yml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the catalog, you will see a few lines of instructions followed by&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yml"&gt;example_iris_data:  type: pandas.CSVDataSet  filepath: data/01_raw/iris.csv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gives us one stored catalog entry called &lt;code&gt;example_iris_data&lt;/code&gt;, it is a CSV file stored in &lt;code&gt;data/01_raw/iris.csv&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let's make up a transportation company that is siloed into three different divisions and it is our job to bring their sales and product metadata into a single report.  This company makes &lt;code&gt;lifted-trucks&lt;/code&gt;, &lt;code&gt;primium-scoots&lt;/code&gt;, and &lt;code&gt;luxy-yahts&lt;/code&gt;.  and we know that we will want &lt;code&gt;raw&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;pri&lt;/code&gt; and &lt;code&gt;modin&lt;/code&gt; layers to start our project so let's scaffold up that catalog real quick.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yml"&gt;# ――――――――― lifted-truck ―――――――――raw_lifted_truck_sales:  type: pandas.CSVDataSet  filepath: data/01_raw/sales/lifted-truck.csvint_lifted_truck_sales:  type: pandas.CSVDataSet  filepath: data/01_int/sales/lifted-truck.csvpri_lifted_truck_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/lifted-truck.csvraw_lifted_truck_info:  type: pandas.CSVDataSet  filepath: data/01_raw/info/lifted-truck.csvint_lifted_truck_info:  type: pandas.CSVDataSet  filepath: data/01_int/info/lifted-truck.csvpri_lifted_truck_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/lifted-truck.csv# ――――――――― primium-scoot ―――――――――raw_primium_scoot_sales:  type: pandas.CSVDataSet  filepath: data/01_raw/sales/primium-scoot.csvint_primium_scoot_sales:  type: pandas.CSVDataSet  filepath: data/01_int/sales/primium-scoot.csvpri_primium_scoot_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/primium-scoot.csvraw_primium_scoot_info:  type: pandas.CSVDataSet  filepath: data/01_raw/info/primium-scoot.csvint_primium_scoot_info:  type: pandas.CSVDataSet  filepath: data/01_int/info/primium-scoot.csvpri_primium_scoot_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/primium-scoot.csv# ――――――――― luxy-yaht ―――――――――raw_luxy_yaht_sales:  type: pandas.CSVDataSet  filepath: data/01_raw/sales/luxy-yaht.csvint_luxy_yaht_sales:  type: pandas.CSVDataSet  filepath: data/01_int/sales/luxy-yaht.csvpri_luxy_yaht_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/luxy-yaht.csvraw_luxy_yaht_info:  type: pandas.CSVDataSet  filepath: data/01_raw/info/luxy-yaht.csvint_luxy_yaht_info:  type: pandas.CSVDataSet  filepath: data/01_int/info/luxy-yaht.csvpri_luxy_yaht_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/luxy-yaht.csv# ――――――――― combined ―――――――――pri_combined_sales:  type: pandas.CSVDataSet  filepath: data/01_pri/sales/combined.csvpri_combined_info:  type: pandas.CSVDataSet  filepath: data/01_pri/info/combined.csv# ――――――――― modin ―――――――――modin_main:  type: pandas.CSVDataSet  filepath: data/01_pri/info/combined.csv&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Some examples of common regex uses&lt;/h2&gt;&lt;p&gt;&lt;code&gt;regex&lt;/code&gt; gets really complicated fast, but these basic examples are very common use cases and will get you a long way without being very complicated.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;term&lt;/code&gt; - all catalog entries that include &lt;code&gt;term&lt;/code&gt; in the catalog entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;^term&lt;/code&gt; - all catalog entries that include &lt;code&gt;term&lt;/code&gt; at the &lt;strong&gt;beginning&lt;/strong&gt; of the catalog entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;term$&lt;/code&gt; - all catalog entries that include &lt;code&gt;term&lt;/code&gt; at the &lt;strong&gt;end&lt;/strong&gt; of the catalog entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1.*term2&lt;/code&gt; - include anything in between &lt;code&gt;term1&lt;/code&gt; and &lt;code&gt;term2&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1|term2&lt;/code&gt; - all catalog entries that include &lt;code&gt;term1&lt;/code&gt; or &lt;code&gt;term2&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Let's Search this thing&lt;/h2&gt;&lt;p&gt;kedro has long included the &lt;code&gt;catalog.list()&lt;/code&gt; feature that returns a list of all datasets.  Now the &lt;code&gt;list&lt;/code&gt; command takes in a &lt;code&gt;regex_search&lt;/code&gt; keyword argument.  By default, it is empty and returns the entire catalog.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro ipython&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;list out all of the luxy-yahts&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; catalog.list('luxy_yaht`)['raw_luxy_yaht_sales', 'int_luxy_yaht_sales', 'pri_luxy_yaht_sales', 'raw_luxy_yaht_info', 'int_luxy_yaht_info', 'pri_luxy_yaht_info'] ```## List out data by layerEasy just search for the layer name.### raw``` python&amp;gt;&amp;gt;&amp;gt; catalog.list('raw')['raw_lifted_truck_sales', 'raw_lifted_truck_info', 'raw_primium_scoot_sales', 'raw_primium_scoot_info', 'raw_luxy_yaht_sales', 'raw_luxy_yaht_info']&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;pri&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt; &amp;gt;&amp;gt;&amp;gt; catalog.list('pri')['pri_lifted_truck_sales', 'pri_lifted_truck_info', 'raw_primium_scoot_sales', 'int_primium_scoot_sales', 'pri_primium_scoot_sales', 'raw_primium_scoot_info', 'int_primium_scoot_info', 'pri_primium_scoot_info', 'pri_luxy_yaht_sales', 'pri_luxy_yaht_info', 'pri_combined_sales', 'pri_combined_info']&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;😲 We just included every &lt;code&gt;primium-scoot&lt;/code&gt; dataset!&lt;/p&gt;&lt;p&gt;Here we just encountered our first need for &lt;code&gt;regex&lt;/code&gt;.  I'll be the first to admit that I am really bad at regex, it's incredibly confusing, becomes read-only with much complexity, but is super powerful and used in a lot of places.&lt;/p&gt;&lt;h2&gt;&lt;code&gt;^term&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;beginning of catalog entry&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;^&lt;/code&gt; regex operator searches for catalog entries that include the search term at the very beginning.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt; &amp;gt;&amp;gt;&amp;gt; catalog.list('^pri')['pri_lifted_truck_sales', 'pri_lifted_truck_info', 'pri_primium_scoot_sales', 'pri_primium_scoot_info', 'pri_luxy_yaht_sales', 'pri_luxy_yaht_info', 'pri_combined_sales', 'pri_combined_info']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;code&gt;term$&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;end of catalog entry&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; operator is the opposite of the &lt;code&gt;^&lt;/code&gt; operator.  It means give me all that matches that occur at the end of the catalog entry.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; catalog.list('info$')['raw_lifted_truck_info', 'int_lifted_truck_info', 'pri_lifted_truck_info', 'raw_primium_scoot_info', 'int_primium_scoot_info', 'pri_primium_scoot_info', 'raw_luxy_yaht_info', 'int_luxy_yaht_info', 'pri_luxy_yaht_info', 'pri_combined_info']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;code&gt;term1.*term2&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;.*&lt;/code&gt; operator in regex means give me all the datasets that include the two terms no matter what is between them.  There is also a &lt;code&gt;.?&lt;/code&gt; to only allow one character between them.  More often than not I really just want the two patterns to exist in the dataset entry.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; catalog.list('raw.*info$')['raw_lifted_truck_info', 'raw_primium_scoot_info',  'raw_luxy_yaht_info']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Some real things that we can do with search&lt;/h2&gt;&lt;p&gt;Let's look at a few examples beyond the obvious of just searching for the dataset that we want to load.&lt;/p&gt;&lt;h2&gt;Check Raw Data&lt;/h2&gt;&lt;p&gt;While migrating pipelines between environments it's important to know if your raw datasets are available.  I will argue that you should also consider looking at &lt;code&gt;pipeline.inputs&lt;/code&gt; as it cannot lie and gives you a true reading of the pipeline inputs.  But another easy check might be to check all the datasets that the Data Engineers have labeled raw.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; {dataset: catalog.exists(dataset) for dataset in catalog.list('^raw')}{'raw_lifted_truck_sales': False, 'raw_lifted_truck_info': False, 'raw_primium_scoot_sales': False, 'raw_primium_scoot_info': False, 'raw_luxy_yaht_sales': False, 'raw_luxy_yaht_info': False}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since we just created a dummy catalog the data does not exist in this example.&lt;/p&gt;&lt;h2&gt;Create a new catalog&lt;/h2&gt;&lt;p&gt;Let's say that we have someone on the team who is from the land division of our company and they want a simplified catalog readily available that does not include any marine data.&lt;/p&gt;&lt;p&gt;To do this we will need to reach a bit into the kedro internals for the &lt;code&gt;DataCatalog&lt;/code&gt; class and utilize a new regex operator &lt;code&gt;|&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; from kedro.io import DataCatalog&amp;gt;&amp;gt;&amp;gt; land_catalog = DataCatalog(    {        dataset: getattr(catalog.datasets, dataset)        for dataset in catalog.list('truck|scoot')        }    )&amp;gt;&amp;gt;&amp;gt; land_catalog.list()['raw_lifted_truck_sales', 'int_lifted_truck_sales', 'pri_lifted_truck_sales', 'raw_lifted_truck_info', 'int_lifted_truck_info', 'pri_lifted_truck_info', 'raw_primium_scoot_sales', 'int_primium_scoot_sales', 'pri_primium_scoot_sales', 'raw_primium_scoot_info', 'int_primium_scoot_info', 'pri_primium_scoot_info']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;regex recap&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;^term&lt;/code&gt; - beginning&lt;/li&gt;&lt;li&gt;&lt;code&gt;term$&lt;/code&gt; - end&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1.*term2&lt;/code&gt; - anything in between&lt;/li&gt;&lt;li&gt;&lt;code&gt;term1|term2&lt;/code&gt; - or&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-catalog-search</guid></item><item><title>Kedro - My Data Is Not A Table</title><link>https://waylonwalker.com/kedro-pickle</link><description>In python data science/engineering most of our data is in the form of some sort
of table, typically a DataFrame from a library like pandas, spark, or dask. These containers for data contain many convenient methods to manipulate table
like data struct</description><content:encoded>&lt;p&gt;In python data science/engineering most of our data is in the form of some sortof table, typically a DataFrame from a library like pandas, spark, or dask.&lt;/p&gt;&lt;h2&gt;DataFrames are the heart of most pipelines&lt;/h2&gt;&lt;p&gt;These containers for data contain many convenient methods to manipulate tablelike data structures.  Sometimes we leverage other data types, namely vanillatypes like lists and dicts, or even numpy data types.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/what-is-kedro"&gt;https://waylonwalker.com/what-is-kedro&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;unfamiliar with kedro, check out this post&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Sometimes datasets are not tables&lt;/h2&gt;&lt;p&gt;There are times when our data doesn't fit nicely into a DataFrame. Lucky for usKedro has pickle support out of the box.  Pickle is a way to store any pythonobject to disk.  Beware that pickle files coming from an unknown source can runmalicous code and are considered unsafe.  For the most part though when youread and write your own pickle files they are a good tool to consider.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;See more about &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;pickle&lt;/a&gt; from python.org.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Cataloging Pickle&lt;/h2&gt;&lt;p&gt;I may have a dictionary that describes some cars.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;{  'truck-012-abc': {    'type': 'truck'    'sales': [12, 2, 3, 4, 8]    'weight': 9024,    'accesories': ['leather', 'audio-1']}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the catalog we will simply set the type as &lt;code&gt;pickle.PickleDataSet&lt;/code&gt; and giveit a filepath.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;cars:  filepath: data/cars.pkl  type: pickle.PickleDataSet&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;This filepath does not have to be on the local filesystem it can be on thecloud thanks to how kedro utilizes fsspec for each of its datasets.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Loading the dataset&lt;/h2&gt;&lt;p&gt;The benefit of cataloging this dataset compared to leaving it as a&lt;code&gt;MemoryDataSet&lt;/code&gt; is that you can easily load this data back into memory forfurther development or debugging without running any of the pipeline.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;catalog.load('cars')&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-pickle</guid></item><item><title>Generating Readme Tables From Pandas</title><link>https://waylonwalker.com/readme-tables</link><description>none</description><content:encoded>&lt;h2&gt;Generating Readme Tables From Pandas&lt;/h2&gt;&lt;p&gt;I commonly have a need to paste the first few lines of a dataset into a markdown file.  I use two handy packages to do this, &lt;code&gt;tabulate&lt;/code&gt; and &lt;code&gt;pyperclip&lt;/code&gt;.  Lets say I have a Pandas DataFrame in memory as &lt;code&gt;df&lt;/code&gt; already.  All I would need to do to convert the first 5 rows to markdown and copy it to the clipboard is the following.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-Python"&gt;from tabulate import tabulateimport pyperclipmd = tabulate.tabulate(df.head(), df.columns, tablefmt='pipe')pyperclip.copy(md)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a super handy snippet that I use a lot.  Folks really appreciate it when they can see a sample of the data without opening the entire file.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/readme-tables</guid></item><item><title>Todo</title><link>https://waylonwalker.com/todo</link><description>&lt;ul&gt;&lt;li&gt;cleanup tags&lt;/li&gt;&lt;li&gt;tags ui&lt;/li&gt;&lt;li&gt;post -&amp;gt; slides&lt;/li&gt;&lt;li&gt;podcast -&amp;gt; audio visualizer&lt;/li&gt;&lt;/ul&gt;</description><guid isPermaLink="false">https://waylonwalker.com/todo</guid></item><item><title>Edit On GitHub</title><link>https://waylonwalker.com/edit-on-github</link><description>I recently added a button to my blog, and subsequently my posts on [DEV.to](https://dev.to/waylonwalker).  It's the best thing that I have done for it in a while.</description><content:encoded>&lt;p&gt;I recently added a button to my blog, and subsequently my posts on &lt;a href="https://dev.to/waylonwalker"&gt;DEV.to&lt;/a&gt;.  It's the best thing that I have done for it in a while.  It makes it so easy to do quick edits.  &lt;/p&gt;&lt;h2&gt;finding errors&lt;/h2&gt;&lt;p&gt;I refer back to my old posts quite a bit, sometimes I find errors in them.  Honestly most of the time its too much effort to load up my editor make the change and &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;.  It's not much, but when I am referring to my own post generally I am just trying to get something done and don't have time for that.&lt;/p&gt;&lt;h2&gt;The slug&lt;/h2&gt;&lt;p&gt;The slug that I am getting from gatsby is formatted as &lt;code&gt;/blog/this-post/&lt;/code&gt;.  Note the trailing slash and missing file extension, thats where the &lt;code&gt;${slug.slice(0, -1)}.md&lt;/code&gt; comes in.  &lt;/p&gt;&lt;h2&gt;The Full Link&lt;/h2&gt;&lt;p&gt;GitHub makes it super easy to form a URL that puts you right into edit mode on the exact post you are looking for.  This is format for the URL... you can always figure it out easily by clicking edit on one.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;https://github.com/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/edit/&amp;lt;branch&amp;gt;/&amp;lt;filepath&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;The Final Result&lt;/h2&gt;&lt;p&gt;Wrapping that URL up in a short snippet gave me the following result.&lt;/p&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-jsx"&gt;&amp;lt;p style={{ display: 'flex', justify: 'center', textAlign: 'center', margin: '3rem auto' }}&amp;gt;  &amp;lt;span role='img' aria-label=''&amp;gt;👀&amp;lt;/span&amp;gt;  see an issue, edit this post on   &amp;lt;a     href={`https://github.com/WaylonWalker/waylonwalkerv2/edit/main/src/pages${slug.slice(0, -1)}.md`}     alt='edit post url'     title='edit this post'   &amp;gt;  &amp;lt;FiGithub /&amp;gt;   GitHub  &amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;img alt="Edit on GitHub" src="https://dev-to-uploads.s3.amazonaws.com/i/sgqd23rbbusjpfxqr7bl.PNG" /&gt;&lt;/p&gt;&lt;p&gt;I know better than hard coding the GitHub url in, but I did it anyway, my personal site gets to be a bit of a rats nest of hotfixes over time.&lt;/p&gt;&lt;p&gt;This was a super quick change that brought me a lot of value without much effort.  I will probably change up the styling/layout of it in the future. For now I have something that functions, and I can get back to creating content.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/edit-on-github</guid></item><item><title>Today I learned `git diff feature..main`</title><link>https://waylonwalker.com/git-diff-branches</link><description>Sometimes we get a little `git add . &amp;&amp; git commit -m "WIP"` happy and mistakenly commit something that we just cant figure out.  This is a good way to figure out what the heck has changed on the current branch compared to any other branch.</description><content:encoded>&lt;p&gt;Today I learned how to diff between two branches.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git diff feature..main&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes we get a little &lt;code&gt;git add . &amp;amp;&amp;amp; git commit -m "WIP"&lt;/code&gt; happy and mistakenly commit something that we just can't figure out. This is a good way to figure out what the heck has changed on the current branch compared to any other branch.&lt;/p&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;Let's create a new directory, initialize git and toss some content into a readme.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mkdir git-diffgit initecho "hello there" &amp;gt; readme.mdgit add . &amp;amp;&amp;amp; git commit -m "hello there"cat readme.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After all of that, we have a git repository on our local machine with a single file &lt;code&gt;readme.md&lt;/code&gt; that contains the following.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;hello there&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create a branch and ✍ edit&lt;/h2&gt;&lt;p&gt;Let's checkout a new branch called Waylon and change the word &lt;code&gt;there&lt;/code&gt; to &lt;code&gt;Waylon&lt;/code&gt; in our &lt;code&gt;readme.md&lt;/code&gt; file, then diff it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git checkout -b Waylonecho "hello Waylon" &amp;gt; readme.mdgit add . &amp;amp;&amp;amp; git commit -m "hello Waylon"git diff&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;- hello there+ hello waylon&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point we have one commit.  Things are really straightforward, and our diff will be the same between the last commit and the main branch since.  Let's make another commit by adding the date.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;echo "hello waylon\n\n$(date)" &amp;gt; readme.mdcat readme.mdgit diff&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;hello Waylon++ Fri 13 Mar 2020 04:23:21 PM DST&lt;/code&gt;&lt;/pre&gt;👆 At this point, our diff doesn't tell us the whole story between our current state and main, only between our current state and our last commit.  Let's commit our changes and compare our branch to main.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git add . &amp;amp;&amp;amp; git commit -m "add date"git diff main..waylon&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-diff"&gt;- hello there+ hello Waylon++ Fri 13 Mar 2020 03:43:21 PM DST&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Git is powerful&lt;/h2&gt;&lt;p&gt;I learn small tricks like this often with git.  Many times I forget about it and have to come back to re-learn. Sharing my thoughts gives me a better chance of remembering.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-diff-branches</guid></item><item><title>Avoid Nesting Loops in Python</title><link>https://waylonwalker.com/avoid-nesting-loops-in-python</link><description>Nesting loops inside of each other in python makes for much harder code to understand, it takes more brain power to understand, and is thus more error prone than if its avoidable.  One issue with this complexity is that toy examples may make sense, b</description><content:encoded>&lt;p&gt;Nesting loops inside of each other in python makes for much harder code to understand, it takes more brain power to understand, and is thus more error prone than if its avoidable.  One issue with this complexity is that toy examples may make sense, but most real example will grow and become more deeply nested over time.  Avoiding this complexity from the start can help simplify the project in the future.&lt;/p&gt;&lt;h2&gt;setup&lt;/h2&gt;&lt;p&gt;Lets take a pretty simple example where we are using a ficticious library to get some sales data for our transportation company.  The api allows us to fetch teh sales data for one class of vehicle and one region at a time.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom datastore import get_sales  # ficticious librarycars = ['sedan', 'coupe', 'hatchback']regions = ['US', 'CA', 'MX']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;❌ Nesting Loops&lt;/h2&gt;&lt;p&gt;We have setup to fetch our data with two lists that represent the vehicles and regions that we want to analyze.  We know that we need to make a call to &lt;code&gt;get_sales&lt;/code&gt; for every vehicle and region so nesting loops is a very common first solution to jump to.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;sales = pd.DataFrame()for car in cars:   for region in regions:      new_sales = get_sales(car, region)      sales = pd.concat([sales, new_sales])&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;itertools.product&lt;/h2&gt;&lt;p&gt;Python provides us with the beautiful itertools module that allows us to prepare our inputs for this in a much more susynct manner.  The product function of itertools will give us every combination of any number of iterables&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import itertoolslist(itertools.product(cars, regions))&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;note that itertools returns a generator for most if not all functions, list() will turn that into a list that we can see.  This works great for small datasets, but might not be advisable on larger ones.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;[('sedan', 'US'), ('sedan', 'CA'), ('sedan', 'MX'), ('coupe', 'US'), ('coupe', 'CA'), ('coupe', 'MX'), ('hatchback', 'US'), ('hatchback', 'CA'), ('hatchback', 'MX')]&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;itertools.procuct for loop&lt;/h2&gt;&lt;p&gt;Now that we have every comination of our two sets of inputs in a single list, we can iterate over that list one time.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;sales = pd.DataFrame()for car, region in itertools.product(cars, regions):   new_sales = get_sales(car, region)   sales = pd.concat([sales, new_sales])&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;itertools.product list comprehension&lt;/h2&gt;&lt;p&gt;The above follows a python anti-pattern, initialize then edit.  In some cases it might be a bit more readable to do it that way, you can be the judge, but in our simple case we can simply achieve the same results using a list comprehension.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;pd.concat([get_sales(cars, region) for cars, region in itertools.product(cars, regions)])&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;dictionaries&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;sales_args = {   'cars': ['sedan', 'coupe', 'hatchback'],   'regions': ['US', 'CA', 'MX'],}pd.concat([get_sales(*sales_arg) for sales_arg in itertools.product(*sales_args.values())])&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;sales_args = {   'cars': ['sedan', 'coupe', 'hatchback'],   'regions': ['US', 'CA', 'MX'],   'month': ['MAR', 'APR', 'MAY']}pd.concat([get_sales(*sales_arg) for sales_arg in product(*sales_args.values())])&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;h2&gt;Chaining&lt;/h2&gt;&lt;p&gt;&lt;em&gt;containers of containers&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;vehicles = {    'cars': ['sedan', 'coupe', 'hatchback'],    'trucks': ['light', 'heavy', 'sport', 'offroad'],    'van': ['box', 'mini', 'full', ],}&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt;for vehicle in vehicles:    for sub_class in vehicles[vehicle]:      new_sales = get_sales(sub_class)      new_sales['sub_class'] = sub_class      new_sales['vehicle'] = vehicle      sales = pd.concat([sales, new_sales])&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt; list(itertools.chain(*[list(itertools.product([k], v)) for k, v in vehicles.items()]))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;output&lt;code&gt;[('cars', 'sedan'), ('cars', 'coupe'), ('cars', 'hatchback'), ('trucks', 'light'), ('trucks', 'heavy'), ('trucks', 'sport'), ('trucks', 'offroad'), ('van', 'box'), ('van', 'mini'), ('van', 'full')]&lt;/code&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/avoid-nesting-loops-in-python</guid></item><item><title>Gitui is a blazing fast terminal git interface</title><link>https://waylonwalker.com/gitui</link><description>Gitui is a terminal-based git user interface (TUI) that will change the way
that you work with git. I have been a long-time user of the git cli, and it's
been hard to beat, mostly because there is nothing that keeps my fingers on the
keyboard quite l</description><content:encoded>&lt;p&gt;Gitui is a terminal-based git user interface (TUI) that will change the waythat you work with git. I have been a long-time user of the git cli, and it'sbeen hard to beat, mostly because there is nothing that keeps my fingers on thekeyboard quite like it, except &lt;code&gt;gitui&lt;/code&gt; which comes with some great ways to veryquickly walk through a git project.&lt;/p&gt;&lt;h2&gt;installation&lt;/h2&gt;&lt;p&gt;Go to their [releases]&lt;a href="https://github.com/extrawurst/gitui/releases"&gt;https://github.com/extrawurst/gitui/releases&lt;/a&gt;) page,download the latest build, and pop it on your PATH.  I have the followingstuffed away in some install scripts to get the latest version.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;install latest release&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;GITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/&amp;gt;.*$//g' | sed 's/^v//')wget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | sudo tar -zxf - -C /usr/bin/&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;run &lt;code&gt;gitui&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It opens blazing fast.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;gitui&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Quick Commits&lt;/h2&gt;&lt;p&gt;Sometimes I edit a number of files and want to commit them one at a time, thisis painful in the git cli and my main use case for &lt;code&gt;gitui&lt;/code&gt;.  &lt;code&gt;gitui&lt;/code&gt; showsunstaged changes at the top, staged changes on the bottom, and a diff on theright.&lt;/p&gt;&lt;p&gt;&lt;img alt="gitui status" src="https://waylonwalker.com/gitui-status.png" /&gt;&lt;/p&gt;&lt;h2&gt;Navigate with hjkl&lt;/h2&gt;&lt;p&gt;By default, &lt;code&gt;gitui&lt;/code&gt; uses arrow keys, but simply copying&lt;a href="https://github.com/extrawurst/gitui/blob/master/assets/vim_style_key_config.ron"&gt;vim_style_key_config.ron&lt;/a&gt;to your config directory will get you vim-like keybindings.&lt;/p&gt;&lt;h2&gt;workflow&lt;/h2&gt;&lt;p&gt;Generally, I pop open &lt;code&gt;gitui&lt;/code&gt;, use j/k to get to the file I want to commit,glance at the diff to the right, press enter to stage the file, sc to switchfocus to the saged files and commit, write my commit message hit enter anddone.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;w/s:   to toggle focus between working and staged changes&lt;/li&gt;&lt;li&gt;j/k:   to scroll each section&lt;/li&gt;&lt;li&gt;h/l:   switch between left and right side&lt;/li&gt;&lt;li&gt;enter: toggle file from working or staging&lt;/li&gt;&lt;li&gt;c:     start a commit message&lt;/li&gt;&lt;li&gt;p:     push&lt;/li&gt;&lt;li&gt;&lt;c-c&gt;: quit&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Other Panes&lt;/h2&gt;&lt;p&gt;I am in the &lt;code&gt;Status [1]&lt;/code&gt; pane 90% of the time, but it also has three otherpanes for &lt;code&gt;Log [2]&lt;/code&gt;, &lt;code&gt;Stashing [3]&lt;/code&gt;, and &lt;code&gt;Stashes [4]&lt;/code&gt;.  I do not really usethe stashes panes, but the &lt;code&gt;Log [2]&lt;/code&gt; pane is quite useful to quickly go throughthe last set of commits and see the diff for each of them.&lt;/p&gt;&lt;h2&gt;What UI do you use for git&lt;/h2&gt;&lt;p&gt;Let me know what ui you use for git, do you stick to the cli, use a gui, or usea similar &lt;code&gt;TUI&lt;/code&gt; interface?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gitui</guid></item><item><title>drawing ascii boxes</title><link>https://waylonwalker.com/drawing-ascii-boxes</link><description>I always struggle to find a good reference of ascii characters.  This is a compilation of my most wanted ascii characters.</description><content:encoded>&lt;p&gt;When creating cli's I often want some nice full-width character.  I find it tough to find them, and when I do half the time it is an image or something that cannot be copied 👿.&lt;/p&gt;&lt;p&gt;I rarely get very complex with my semi-manual ASCII art.  I can do 98% of what I need with bars and corners.  Using some simple full-width characters can really give your cli a nice clean look.&lt;/p&gt;&lt;h1&gt;Example&lt;/h1&gt;&lt;p&gt;I'd say 50% of what I need is just a full-width horizontal bar to give some visual flair or separation.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/static/fw-bar-print.png" /&gt;&lt;/p&gt;&lt;h1&gt;Bars&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;― ⍽ ⎸ ⎹ ␣ ─ ━ │ ┃&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Square Corners&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;┌ ┍ ┎ ┏ ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Round Corners&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;╭ ╮ ╯ ╰ ╱ ╲ ╳&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Harpoons&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt; ⃑ ⃬ ⃭ ↼ ↽ ↾ ↿ ⇀ ⇁ ⇂ ⇃ ⇋ ⇌ ⥊ ⥋ ⥌ ⥍ ⥎ ⥏ ⥐ ⥑ ⥒ ⥓ ⥔ ⥕ ⥖ ⥗ ⥘ ⥙ ⥚ ⥛ ⥜ ⥝ ⥞ ⥟ ⥠ ⥡ ⥢ ⥣ ⥤ ⥥ ⥦ ⥧ ⥨ ⥩ ⥪ ⥫ ⥬ ⥭ ⥮ ⥯&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Double Boxes&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟ ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Dashed Boxes&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋╌ ╍ ╎ ╏&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Connectors&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;├ ┝ ┞ ┟ ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Others&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;☐ ☑ ☒ ⫍ ⫎ ⮹ ⮽ ⺆ ⼌ ⼐ ⼕&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Arrows&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt; ← ↑ → ↓ ↔ ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↜ ↝ ↞ ↟ ↠ ↡ ↢ ↣ ↤ ↥ ↦ ↧ ↨ ↩ ↪ ↫ ↬ ↭ ↮ ↯ ↰ ↱ ↲ ↳ ↴ ↵ ↶ ↷ ↸ ↹ ↺ ↻ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇍ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓ ⇔ ⇕ ⇖ ⇗ ⇘ ⇙ ⇚ ⇛ ⇜ ⇝ ⇞ ⇟ ⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Rounded Box&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;╭――――――――――――――――――╮│                  ││                  ││                  │╰――――――――――――――――――╯&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Resources&lt;/h1&gt;&lt;p&gt;As I was putting this together I stumbled accross a good site to find ascii characters and copy them.&lt;a href="![](/static/ascii-boxes.png)https://xahlee.info/comp/unicode_full-width_chars.html"&gt;Unicode Full-Width Characters&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/drawing-ascii-boxes</guid></item><item><title>Interrogate is a pretty awesome, brand new, cli for Python packages</title><link>https://waylonwalker.com/interrogate</link><description>dead simple docstring coverage for your python project</description><content:encoded>&lt;p&gt;As usual while listening to &lt;a href="https://pythonbytes.fm/episodes/show/181/it-s-time-to-interrogate-your-python-code"&gt;python bytes 181&lt;/a&gt; I heard of a tool that I had to try out right away!&lt;/p&gt;&lt;p&gt;This thing is 🔥 hot off the press folks, we're talking the first release only 3 weeks ago. Its something that the python community needed years ago, and it belongs in your CI &lt;strong&gt;today&lt;/strong&gt;. I had tried several tools that tried to do docstring coverage in the past but they were a bit cumbersome and were quickly forgotten about. Not interrogate, its dead simple!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Nothing I have tried has come close to being this good&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Interrogate&lt;/h2&gt;&lt;p&gt;It runs documentation coverage for your python project. It allows you to set the minimum amount of docstring coverage for your project and has some great setup instructions right in the readme.&lt;/p&gt;&lt;h2&gt;Install it&lt;/h2&gt;&lt;p&gt;Interrogate is on pypi so it is super simple to install with &lt;code&gt;pip&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;pip install interrogate&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;run it&lt;/h2&gt;&lt;p&gt;This is the best part, its super easy to run right from the command line! Just call it, and give it a path to run.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;interrogate -v &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;😲 I have some work to do&lt;/h2&gt;&lt;p&gt;One of my new open source packages &lt;a href="https://find-kedro.waylonwalker.com/"&gt;find-kedro&lt;/a&gt; only hit 71%.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;interrogate find-kedro -v&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="verbose interrogate on find-kedro" src="https://waylonwalker.com/interrogate-python-v.png" /&gt;&lt;/p&gt;&lt;p&gt;Personally I really like the &lt;strong&gt;double verbose&lt;/strong&gt; output that gives you the names of everything missing a docstring and the line they occur on.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;interrogate find-kedro -vv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="double verbose interrogate on find-kedro" src="https://waylonwalker.com/interrogate-python-vv.png" /&gt;&lt;/p&gt;&lt;h2&gt;Give it a ⭐&lt;/h2&gt;&lt;p&gt;Every project this amazing deserves a big ol ⭐ on GitHub! Go over to &lt;a href="https://github.com/econchick/interrogate"&gt;econchick/interrogate&lt;/a&gt; and give it a one... it deserves it! While you are there check out the &lt;strong&gt;wicked&lt;/strong&gt; good readme. It has great examples of how to run it from your command line, as a pre-commit hook, in your ci, with your code, or pyproject.toml.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;While you are there check out the &lt;strong&gt;wicked&lt;/strong&gt; good readme!&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/interrogate</guid></item><item><title>What Are GitHub Actions</title><link>https://waylonwalker.com/what-are-github-actions</link><description>GitHub actions are an amazing tool that allows us to run code based on triggers inside of our repo.  Their is a large and growing community of actions inside the marketplace to use with very little effort.  Best of all they are free for public repositories, and private repos have a very generous free tier.</description><content:encoded>&lt;style&gt;h2 img { width: 100%; box-shadow: .5rem .5rem 3rem #141F2D, -.5rem -.5rem 3rem rgba(255,255,255,.1);}img{ max-width: 100% !important;}&lt;/style&gt;&lt;p&gt;I have been diving deep into Github actions for about a month now and they are wicked good!  They allow you to run any sort of arbitrary code based on events in your repo, webhooks, or schedules.  They are very reasonably priced.  The interface that GitHub hs developed for them is top-notch!  It's so good I have done 90% of my editing of them right from github.com.&lt;/p&gt;&lt;h2&gt;TLDR&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;some interaction to your repository &lt;strong&gt;triggers&lt;/strong&gt; code to run.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;img alt="Online Editor" src="https://waylonwalker.com/gh-actions-header-online-editor.png" /&gt;&lt;/h2&gt;&lt;p&gt;The online editor for actions is pretty amazing.  When creating a new workflow it automatically sets up a new blank workflow or a workflow from the marketplace for you in your &lt;code&gt;.github/workflows&lt;/code&gt; directory.  This is all it takes to get an action running, a &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;yml&lt;/code&gt; file in the &lt;code&gt;.github/workflows&lt;/code&gt; directory.&lt;/p&gt;&lt;p&gt;&lt;img alt="github actions online editor" src="https://waylonwalker.com/gh-actions-editor.png" title="github actions online editor" /&gt;&lt;/p&gt;&lt;p&gt;The editor does a great job of detecting syntax errors, misplaced keys.  It also does a great job at autocompletion.  As you type it will suggest keys that are accepted by the workflow syntax.  There is an embedded side pannel with docs and the marketplace to the right.&lt;/p&gt;&lt;h2&gt;&lt;img alt="Event Triggering" src="https://waylonwalker.com/gh-actions-header-event-triggering.png" /&gt;&lt;/h2&gt;&lt;p&gt;see this article from GitHub for a full set of details: &lt;a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" title="https://help.github.com/en/actions/reference/events-that-trigger-workflows"&gt;https://help.github.com/en/actions/reference/events-that-trigger-workflows&lt;/a&gt;&lt;/p&gt;&lt;p&gt;You can trigger actions to run based on about any interaction with the repo that you can imagine, push, PR, webhooks, follows, create a branch, delete a branch, deployment, fork, wiki, issues, comments, labels, milestones, just check out the GitHub article for the full list.&lt;/p&gt;&lt;h3&gt;&lt;img alt="push/pr" src="https://waylonwalker.com/gh-actions-header-push-pr.png" /&gt;&lt;/h3&gt;&lt;p&gt;The most common and default trigger you will come across is the &lt;code&gt;on push&lt;/code&gt;.  This means that on every push/pull_request the given action will run.  This is typically at the start of the file and will trigger the workflow for the whole file.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;# Trigger the workflow on push or pull requeston: [push, pull_request]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also filter to only run on specific branches.  You probably only want to run your release workflow on the main branch, but want linting and testing on all branches.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;push:  branches:   - mainpull_request:  branches:    - main&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;img alt="schedule" src="https://waylonwalker.com/gh-actions-header-schedule.png" /&gt;&lt;/h3&gt;&lt;p&gt;It is also possible to set up your workflows to run on a schedule.  I have set a few of these up myself to do things such as updating/auditing npm dependencies and checking if the site is up.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;on:  schedule:    # * is a special character in YAML so you have to quote this string    - cron:  '*/15 * * * *'&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;img alt="watch" src="https://waylonwalker.com/gh-actions-header-watch.png" /&gt;&lt;/h3&gt;&lt;p&gt;One issue that I have with GitHub actions is that there really isn't a good way to manually run workflows.  A workaround I found is that you can run a workflow when the repo is starred.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;on:  watch:    types: [ started ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have a public repo with some traction, you might want to avoid this hack, but if you did want to use it on a repo that may potentially get some stars randomly make sure that you filter to only your stars.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;on:  watch:    types: [ started ]jobs:  run-on-star:    runs-on: ubuntu-latest    steps:      - name: ✨ you starred your own repo        if: github.actor == 'WaylonWalker'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="Free for public repositories" src="https://waylonwalker.com/gh-actions-header-free.png" /&gt;&lt;/h2&gt;&lt;p&gt;GitHub offers quite a generous free tier to get you started.&lt;/p&gt;&lt;p&gt;&lt;img alt="gh-actions-free-tier" src="https://waylonwalker.com/gh-actions-free-tier.png" title="github actions free tier" /&gt;&lt;/p&gt;&lt;p&gt;I think that GitHub's pricing just shows its commitment to the open-source.  Any public repo has unlimited build minutes!  I believe this goes for not only Linux actions, but  the more expensive windows and mac actions as well.&lt;/p&gt;&lt;p&gt;&lt;img alt="github actions free for public repos" src="https://waylonwalker.com/gh-actions-free--for-public.png" title="GitHub actions free for public repos" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;img alt="Secrets" src="https://waylonwalker.com/gh-actions-header-secrets.png" /&gt;&lt;/h2&gt;&lt;p&gt;You will find that a lot of actions need things such as a GitHub personal access token.  You may even be hitting a third party API such as twitter or Gmail that require an API key.  These are things that need to be kept secret &lt;strong&gt;DO NOT&lt;/strong&gt; put these as raw text inside your action.  The first tutorial I followed to deploy to GitHub pages did this 🤦‍♂️ and I followed.&lt;/p&gt;&lt;p&gt;&lt;img alt="github built-in secret store" src="https://waylonwalker.com/gh-actions-built-in-secret-store.png" title="GitHub built-in secret store" /&gt;&lt;/p&gt;&lt;p&gt;GitHub offers a wonderful secrets manager.  From your repository go to settings &amp;gt; secrets.  You can just add settings/secrets to the URL of your repo to get there as well.  From there add a new secret.  Now your secret is accessible by secret key using &lt;code&gt;${{ secrets.&amp;lt;your-key&amp;gt; }}&lt;/code&gt; from anywhere in your workflows &lt;code&gt;yml&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;GitHub has done an amazing job at hiding these secrets.  Anywhere that I have seen try to echo these secrets out into the console or anywhere just shows &lt;em&gt;*&lt;/em&gt;.  I am not sure if you can 100% rely on this, but they appear to have done a good job with it.&lt;/p&gt;&lt;h2&gt;&lt;img alt="Live Logs" src="https://waylonwalker.com/gh-actions-header-live-logs.png" /&gt;&lt;/h2&gt;&lt;p&gt;One great feature of actions is the live logs.  As you are developing them it is likely that you are anxiously watching them with anticipation.  Watching those logs go, and turn green is a great experience.&lt;/p&gt;&lt;p&gt;&lt;img alt="github actions live logs" src="https://waylonwalker.com/gh-actions-live-logs.png" title="github actions live logs" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;img alt="Marketplace" src="https://waylonwalker.com/gh-actions-header-marketplace.png" /&gt;&lt;/h2&gt;&lt;p&gt;As with all things open source, much of the power of actions comes through the community and in actions case the marketplace.  Reusable actions can be deployed to the github marketplace.  Here they can be found from search, starred, and example workflows can be copied in one click.&lt;/p&gt;&lt;p&gt;&lt;img alt="github actions marketplace" src="https://waylonwalker.com/gh-actions-marketplace.png" title="github actions marketplace" /&gt;&lt;/p&gt;&lt;p&gt;I find that many times while I can write all of the code necessary in a shell script to do most of what I need, there is already an action in the marketplace that takes care of everything for me.  In fact there are usually several to choose from.&lt;/p&gt;&lt;h1&gt;#Discuss&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;What Actions are you excited about?&lt;/li&gt;&lt;li&gt;Are you using actions today?&lt;/li&gt;&lt;li&gt;What struggles have you encountered with actions?&lt;/li&gt;&lt;li&gt;Do you like these silly image headers I used? Do they kill A11y? I attempted to use good alt text to counter.&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/what-are-github-actions</guid></item><item><title>Minimal Kedro Pipeline</title><link>https://waylonwalker.com/minimal-kedro-pipeline</link><description>How small can a minimum kedro pipeline ready to package be?  I made one within 4 files that you can pip install.  It's only a total of 35 lines of python, 8 in setup.py and 27 in mini_kedro_pipeline.py. I have everything for this post hosted in this </description><content:encoded>&lt;p&gt;How small can a minimum kedro pipeline ready to package be?  I made one within 4 files that you can pip install.  It's only a total of 35 lines of python, 8 in &lt;code&gt;setup.py&lt;/code&gt; and 27 in &lt;code&gt;mini_kedro_pipeline.py&lt;/code&gt;.&lt;/p&gt;&lt;h1&gt;Minimal Kedro Pipeline&lt;/h1&gt;&lt;p&gt;I have everything for this post hosted in this &lt;a href="https://github.com/WaylonWalker/mini-kedro-pipeline"&gt;gihub repo&lt;/a&gt;, you can fork it, clone it, or just follow along.&lt;/p&gt;&lt;h2&gt;Installation&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install git+https://github.com/WaylonWalker/mini-kedro-pipeline&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Caveats&lt;/h2&gt;&lt;p&gt;This repo represents the minimal amount of structure to build a kedro pipeline that can be shared across projects.  Its installable, and drops right into your &lt;code&gt;hooks.py&lt;/code&gt; or &lt;code&gt;run.py&lt;/code&gt; modules.  It is not a runnable pipeline.  At this pointI think the config loader requires to have a logging config file.&lt;/p&gt;&lt;p&gt;This is a sharable pipeline that can be used across many different projects.&lt;/p&gt;&lt;h2&gt;Usage&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# hooks.pyimport mini_kedro_project as mkpclass ProjectHooks:    @hook_impl    def register_pipelines(self) -&amp;gt; Dict[str, Pipeline]:        """Register the project's pipeline.        Returns:            A mapping from a pipeline name to a ``Pipeline`` object.        """        return {"__default__": Pipeline([]), "mkp": mkp.pipeline}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Implemantation&lt;/h2&gt;&lt;p&gt;This builds on another post that I made about creating the minimal python package.  I am not sure if it should be called a package, it's a module, but what do you call it after you build it and host it on pypi?&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/minimal-python-package/"&gt;https://waylonwalker.com/minimal-python-package/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Directory structure&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;.├── .gitignore├── README.md├── setup.py└── my_pipeline.py&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;setup.py&lt;/h2&gt;&lt;p&gt;This is a very minimal &lt;code&gt;setup.py&lt;/code&gt;.  This is enough to get you started with a package that you can share across your team.  In practice, there is a bit more that you might want to include as your project grows.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from setuptools import setupsetup(    name="MiniKedroPipeline",    version="0.1.0",    py_modules=["mini_kedro_pipeline"],    install_requires=["kedro"],)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;mini_kedro_pipeline.py&lt;/h2&gt;&lt;p&gt;The mini kedro pipeline looks like any set of nodes in your project.  Many projects will separate nodes and functions, I prefer to keep them close together.  The default recommendation is also to have a &lt;code&gt;create_pipelines&lt;/code&gt; function that returns the pipeline.&lt;/p&gt;&lt;p&gt;This pattern creates a singleton, if you were to reference the same pipeline in multiple places within the same running interpreter and modify the one you would run into issues.  I don't foresee myself running into this issue, but maybe as more features become available I will change my mind.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;"""An example of a minimal kedro pipeline project"""from kedro.pipeline import Pipeline, node__version__ = "0.1.0"__author__ = "Waylon S. Walker"nodes = []def create_data():    "creates a dictionary of sample data"    return {"beans": range(10)}nodes.append(node(create_data, None, "raw_data", name="create_raw_data"))def mult_data(data):    "multiplies each record of each item by 100"    return {item: [i * 100 for i in data[item]] for item in data}nodes.append(node(mult_data, "raw_data", "mult_data", name="create_mult_data"))pipeline = Pipeline(nodes)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Share your pipelines&lt;/h2&gt;&lt;p&gt;Go forth and share your pipelines across projects.  Let me know, do you share pipelines or catalogs across projects?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/minimal-kedro-pipeline</guid></item><item><title>Create Og Image Covers Using Python</title><link>https://waylonwalker.com/create-og-image-covers-using-python</link><description>There are so many tutorials out there for creating OG images with nodejs or
puppeteer, but I have yet to see many using python.</description><content:encoded>&lt;p&gt;There are so many tutorials out there for creating OG images with &lt;code&gt;nodejs&lt;/code&gt; or&lt;code&gt;puppeteer&lt;/code&gt;, but I have yet to see many using python.&lt;/p&gt;&lt;h2&gt;PIL&lt;/h2&gt;&lt;h2&gt;Template&lt;/h2&gt;&lt;h2&gt;Text&lt;/h2&gt;&lt;h2&gt;Overlays&lt;/h2&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/create-og-image-covers-using-python</guid></item><item><title>Kedro Dependency Management</title><link>https://waylonwalker.com/kedro-dependency-management</link><description>https://kedro.readthedocs.io/en/stable/04_kedro_project_setup/01_dependencies.html?highlight=install</description><content:encoded>&lt;h2&gt;Docs&lt;/h2&gt;&lt;p&gt;&lt;a href="https://kedro.readthedocs.io/en/stable/04_kedro_project_setup/01_dependencies.html?highlight=install"&gt;https://kedro.readthedocs.io/en/stable/04_kedro_project_setup/01_dependencies.html?highlight=install&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;pip-tools&lt;/h2&gt;&lt;h2&gt;pip-compile&lt;/h2&gt;&lt;h2&gt;requirements&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;requirements.in&lt;/li&gt;&lt;li&gt;requirements.txt&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-dependency-management</guid></item><item><title>Stepping Up My SQL Game</title><link>https://waylonwalker.com/datacamp-sql</link><description>none</description><content:encoded>&lt;p&gt;In 2018 I transitioned from a Product Engineering (Mechanical) role to a Data Scientist Role.  I entered this space with strong subject matter expertise with our products, our data, munging through data in pyhon, and data visualization in python.  My sql skills were lacking to say the least.  I had learned what I needed to know to get data from our relational databases, then use pandas to do any further analysis.    Just run something like the following and you have data.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT    *FROM    TableWhere    col_1 = 'col_1_filter'&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This technique works great for small data sets that you only need to run once.  There is no shame to pull in a big dataset and start munging with it in pandas to get some results, and make decisions.  The problem becomes when your dataset becomes too big or you need to run the query on a frequent basis.  Doing the aggregations on the server run much quicker, as it reduces the time spent in io.  My longest running steps are currently io related.  Reducing these steps have improved my workflow.  At the point that I was getting server timeout errors, or using the same long running query in many places I would be searching for examples online, because I just did not have the experience with many more techniques.  I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed.&lt;/p&gt;&lt;h2&gt;Why Learn SQL in 2018??&lt;/h2&gt;&lt;p&gt;SQL is far from the hot topic in 2018, AI, Deep Learning, BIG data, Machine Learning, Natural Language Processing take the win here.  SQL is so simple why would anyone want to spend time learning SQL?  The reason... all of those hot topics in 2018 require data.  My data mostly comes from relational databases which require sql to get data from them.  Without the ability to efficiently get the data I need to do an aanlysis I cannot even start.  Sure I could use an ORM, but I found that to be a bit unwieldy with the thousands of tables  we have in formats that were determined many years ago. Plus raw SQL is more transportable.  I commonly collaborate with other folks who do not use python.  I am proud that I am able to point them to the SQL I use rather than telling them to suck it up an learn python.  I truly believe that people are the most effective when they are able to choose their own stack of tools.  Taking some time to focus on the basics of Data Science will help be build a strong foundation for my career.&lt;/p&gt;&lt;h2&gt;&lt;a href="https://campus.datacamp.com/courses/joining-data-in-postgresql"&gt;Joining Data in Posgres&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Below are my notes from the &lt;a href="https://campus.datacamp.com/courses/joining-data-in-postgresql"&gt;Joining Data in Posgres&lt;/a&gt;course on DataCamp.  I will use these notes as a refresher when I need a quick reference.&lt;/p&gt;&lt;h3&gt;Using()&lt;/h3&gt;&lt;p&gt;When joining two tables on the same column the &lt;code&gt;USING&lt;/code&gt; clause can be used as a shorthand.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;without using&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT *FROM    Table1 as t1LEFT JOIN    Table2 as t2    ON t1.id = t2.id&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;with using&lt;/strong&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT    *FROM    Table1 as t1LEFT JOIN    Table2 as t2    USING (id)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h3&gt;Join Types&lt;/h3&gt;&lt;p&gt;&lt;em&gt;for joining columns of data together into a single table&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;INNER&lt;/code&gt;: Includes only records contained in &lt;strong&gt;both&lt;/strong&gt; tables.&lt;/p&gt;&lt;p&gt;&lt;code&gt;RIGHT&lt;/code&gt;: Inlcudes all records from the &lt;strong&gt;right&lt;/strong&gt;, droping values from the left if non-existent in the right, or leaving nulls if non-existant in the left.&lt;/p&gt;&lt;p&gt;&lt;code&gt;LEFT&lt;/code&gt;: Inlcudes all records from the &lt;strong&gt;left&lt;/strong&gt;, droping values from the right if non-existent in the left, or leaving nulls if non-existant in the right.&lt;/p&gt;&lt;p&gt;&lt;code&gt;FULL&lt;/code&gt;: Combination of &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; Join, leaving nulls where data is missing in one table, and not droping any data.&lt;/p&gt;&lt;p&gt;&lt;code&gt;CROSS&lt;/code&gt;: returns all &lt;strong&gt;pairs&lt;/strong&gt; from two tables, does not have an on or using clause.&lt;/p&gt;&lt;h3&gt;Union&lt;/h3&gt;&lt;p&gt;&lt;em&gt;for concatenating rows of data with the same columns&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Union&lt;/code&gt;: returns only unique records, does not include duplicates.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Union All&lt;/code&gt;: returns all records(including duplicates)&lt;/p&gt;&lt;h3&gt;Intersect&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Intersect&lt;/code&gt;: returns only records appearing in both tables&lt;/p&gt;&lt;h3&gt;Execpt&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Except&lt;/code&gt;: returns only records not in the second table&lt;/p&gt;&lt;h3&gt;Self-Joins&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Semi-Join&lt;/code&gt;: Filters based on results of a subquery.  Does not have direct sql syntax.  This type of join is achieved through a subquery in the where statement.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Anti-Join&lt;/code&gt;: Similar to the Semi-join, but using a &lt;code&gt;not&lt;/code&gt; modifier.  This is particularly useful for debugging situations.&lt;/p&gt;&lt;h3&gt;Subqueries&lt;/h3&gt;&lt;p&gt;This is where I have really stepped up my sql game.  I was able to get practice writing more complex queries. I also learned about different methods of joining tables together.&lt;/p&gt;&lt;h4&gt;WHERE&lt;/h4&gt;&lt;p&gt;Subqueries are commonly found in the where clause to filter data.  Below is an example given in the course to select only the Asian countries with below average fertility rate from the states table.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT   name,   fert_rateFROM    statesWHERE    continent = 'Asia'AND fert_rate &amp;lt;        (SELECT AVG(fert_rate)         FROM states;)&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;SELECT&lt;/h4&gt;&lt;p&gt;Subqueries can be found in the &lt;code&gt;SELECT&lt;/code&gt; clause to create new columns of data.  This is a different technique than I have used in the past.  Previously I have only used &lt;code&gt;GROUPBY&lt;/code&gt; statements to get this effect.  I can see where this can be really useful because it is not constrained by aggregations any data point can be pulled in with this tecnhique.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT DISTINCT    continent,    (SELECT        COUNT(*)     FROM        states     WHERE        prime_ministers.continent = states.continent    ) AS countries_numFrom Prime Ministers&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;FROM&lt;/h4&gt;&lt;p&gt;subqueries found in the &lt;code&gt;FROM&lt;/code&gt; clause can be very helpful to create a new dataset from an existing table.  I find these the easiest to read as it is not much different than creating a new table.  Again this can be very powerful in creating new columns that were not easily available otherwise.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT DISTINCT    monarchs.continent,    subquery.max_percFROM    monarchs,    (SELECT        continent,        MAX(women_parli_perc) AS max_perc    FROM        states    GROUP BY        continent    ) as subqueryWHERE    monarchs.continent = subquery.continentORDER BY    continent;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;ON&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Challenge Problem 1&lt;/strong&gt;  This problem was the one that had me more stumped than any other problem in the course.  I found the subquery inside the on statement very confusing to understand.  In this question we are joining the countries table to a subquery what yields country codes of countries with offial languages from the languages table.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-sql"&gt;SELECT DISTINCT    c.name,    e.total_investment,    e.importsFROM    countries as cLEFT JOIN    economies as e    ON c.code = e.code    AND c.code in (    SELECT        l.code    FROM        languages as l    WHERE        official = true    )WHERE    c.region = 'Central America'AND e.year = 2015ORDER BY    c.name asc;&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/datacamp-sql</guid></item><item><title>Out of Space</title><link>https://waylonwalker.com/out-of-space</link><description>Out of Space! How to remove 65 conda environments in one command.</description><content:encoded>&lt;p&gt;This morning I logged into my machine and was nearly out of space&lt;/p&gt;&lt;ul&gt;&lt;li&gt;64GB miniconda3!&lt;/li&gt;&lt;li&gt;5GB conda cache&lt;/li&gt;&lt;li&gt;4GM pip cache&lt;/li&gt;&lt;li&gt;34GB docker&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Find it&lt;/h2&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LE2KZJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/je7pxcagfs7m23p98kck.jpg"&gt;&lt;img alt="Looking for big files when the weeds are too tall" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LE2KZJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/je7pxcagfs7m23p98kck.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@simonmigaj?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Simon Migaj&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/find?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;These are the commands that I often use to reclaim space.  Its so easy to fill up small vm's in the cloud, or in my case today let your dev machine go way too long without a good cleanup.&lt;/p&gt;&lt;h3&gt;Show Remaining Space on Drives&lt;/h3&gt;&lt;p&gt;This shows us where to start and gives a baseline of how much space we have reclaimed.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;df -h&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;show largest files in current directory&lt;/h3&gt;&lt;p&gt;Next keep drilling into directories that are big and running this command to see whats big inside of it.  When you find somethign that you are willing to part with &lt;code&gt;rm -rf &amp;lt;directory&amp;gt;&lt;/code&gt; it and check &lt;code&gt;df -h&lt;/code&gt; to see if you have enough reclaimed yet.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;du . -h --max-depth=1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Honestly I rarely bother unless the directory is in the GB's of space.  A super simple filter for that is to just grep for G.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;du . -h --max-depth=1 | grep G&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;conda&lt;/h2&gt;&lt;h3&gt;How Many?&lt;/h3&gt;&lt;p&gt;As a first baseline lets see how many enviroments we are starting with. I started with 71. Yeah I have had this machine for 2 years, and dont regularly remove them.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs | tail -n +2 | wc -l&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bash&lt;/p&gt;&lt;h3&gt;Lets batch it out!&lt;/h3&gt;&lt;p&gt;We are devs here surely we can automate this issue! The following four lines will generate a list of existing conda environments, edit them with vim, remove the remaining ones, then remove the text file we created to remove from.&lt;/p&gt;&lt;p&gt;Make sure that you only keep names of environments that you want to &lt;strong&gt;remove&lt;/strong&gt; in &lt;code&gt;conda_envs_to_remove.txt&lt;/code&gt; and delete the environment names you want to keep.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs | tail -n +2 | cut -d ' ' -f1 &amp;gt; conda_envs_to_remove.txtvim conda_envs_to_remove.txtcat ~/.conda_envs_remove | tr '\n' '\0' | xargs -l -0 conda remove --all -y -nrm conda_envs_to_remove.txt&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;📝 Side note&lt;/h3&gt;&lt;p&gt;When I am creating one of these complicated bash pipelines including xargs I generally print out the command first and make sure that it does what I want. The following command will test the above script before doing dangerous things!&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cat ~/.conda_envs_remove | tr '\n' '\0' | xargs -l -0 echo "conda remove --all -y -n "&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Cache&lt;/h2&gt;&lt;p&gt;If your feeling really strained for space, you can &lt;code&gt;rm -rf ~/.cache&lt;/code&gt;. Personally I like the improved speed of installing everything... obviously I install a lot of new environments.&lt;/p&gt;&lt;h2&gt;Docker&lt;/h2&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4NWBxYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olcef3lh31dtrwa51u7g.jpg"&gt;&lt;img alt="Alt Text" src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4NWBxYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olcef3lh31dtrwa51u7g.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@henry_be?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Henry Be&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/dark-fire?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;For more information read this article, &lt;a href="https://docs.docker.com/config/pruning/" title="https://docs.docker.com/config/pruning/"&gt;https://docs.docker.com/config/pruning/&lt;/a&gt;. I have all of the images that I want pushed remotely so I just dumped everything with the following command.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;docker system prunedocker system prune --volumes&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Running these two sets of commands cleared up about &lt;strong&gt;70GB&lt;/strong&gt; of space for me with very little effort on my behalf. I hope others find the first command helpful to batch remove many conda environments at once.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/out-of-space</guid></item><item><title>2020 waylonwalker.com rebrand</title><link>https://waylonwalker.com/2020-rebrand</link><description>I documented the story of my 2020 waylonwalker.com redesign on my blog.  This post walks through the tools and inspiration for the card design.</description><content:encoded>&lt;p&gt;Moving into 2020 I have been really leaning on using purple as my theme color everywhere more and more.   Its time for an update to my personal site, not just because it feels plain, not just because the cover art I am using for dev.to doesn't fit my current card layout, but because I feel &lt;strong&gt;inspired&lt;/strong&gt; and I &lt;strong&gt;want&lt;/strong&gt; to.&lt;/p&gt;&lt;h2&gt;Starting point&lt;/h2&gt;&lt;p&gt;&lt;img alt="This is what we are working with." src="/2020-02-10 12-17-43_Start.png" /&gt;&lt;/p&gt;&lt;p&gt;This is what we are working with.  It has been my card design for at least a year now.  Its not bad but, its a bit play, doesnt fit my new cover art style, and that date is not working over top of the cover art text.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;plain&lt;/li&gt;&lt;li&gt;cover art does not fit&lt;/li&gt;&lt;li&gt;I am not digging the date on cover art that also has text&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Colors&lt;/h2&gt;&lt;p&gt;I have been really into using a deep purple lately.  It is a neutral color that does not get enough respect, i.e. it's not used as frequently and kinda stands out when used.&lt;/p&gt;&lt;h3&gt;How I pick colors&lt;/h3&gt;&lt;p&gt;I am really bad at picking colors that go well together so for this I punt to utilizing others who have a better eye for this.  I commonly used the &lt;a href="https://instant-eyedropper.com/" title="instant-eyedropper website"&gt;instant-eyedropper&lt;/a&gt; desktop app to pick colors out of my text editor theme or colors that &lt;a href="https://canva.com" title="Canva"&gt;canva&lt;/a&gt; recommends.  Really just find soemthing that seems to match up with your taste, goes well with a color that you want to highlight or anything that inspires you.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/how-i-pick-colors.gif" /&gt;&lt;/p&gt;&lt;h3&gt;Tweaking colors&lt;/h3&gt;&lt;p&gt;Once I get a couple of colors working well together its very common that I need to tweak them slightly.  Generally I hold the hue and change only the saturation and lightness.  It would probably make more sense for me to use hsla, but for some reason I always end up with a messy pallet trying to use numbers.  I typically just google color picker and use the one built into google search.  There are probably ones built into vscode now, but I have been doing this for years now.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/how-i-adjust-colors.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Gradient editor&lt;/h2&gt;&lt;p&gt;I heavily used &lt;a href="https://cssgradient.io/" title="https://cssgradient.io/"&gt;cssgradient.io/&lt;/a&gt; to tweak in all of the very subtle gradients it was very common for me to put the same color on both sides and slightly pulling the color a bit darker or lighter until I liked the look.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/how-i-create-gradients.gif" /&gt;&lt;/p&gt;&lt;h3&gt;Matching Gradients&lt;/h3&gt;&lt;p&gt;I had a couple of places that needed to but up gradients against each other seemlessly.  I am sure there are better ways to do it.  I would likerally take instant eyedropper, get the color right on the border, then plug that into cssgradient.io.&lt;/p&gt;&lt;h2&gt;Progress&lt;/h2&gt;&lt;p&gt;So far I have swapped out my card colors, and some of the text colors.  I also moved the date off of the cover image as I have been putting text on my cover images since starting to cross post to dev.to.  I did not like how they clashed and moved the text.   I also swapped over from gatsby fixed and gatsby fluid to make sure that the cover art always fits the card correctly.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/2020-02-15 09-36-31_Start.png" /&gt;&lt;/p&gt;&lt;h2&gt;Feeling Inspired&lt;/h2&gt;&lt;p&gt;Having gradients everywhere has been becoming very popular again.  Not the heavy highly saturated gradients from 00's presentation software. Gentle barely noticeable gradients, and soft gradients that flow smoothly from one color to the next.  So many splash screens and logos include these now.&lt;/p&gt;&lt;p&gt;I have been really inspired by the &lt;strong&gt;sick&lt;/strong&gt; lighting that has been hot on youtube and twitch lately.  As I was gearing up to re-design my cards I saw this post by &lt;a href="https://twitter.com/chrisbiscardi" title="@chrisbiscardi on twitter"&gt;@chrisbiscardi&lt;/a&gt; and knew right then that I needed to do a similar lighting effect on my redesign!  This was literally my jumping off point at which I started the re-design.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/inspiration-for-new-post-card-2020-Chris-Biscardi.png" /&gt;&lt;/p&gt;&lt;h3&gt;Shadows&lt;/h3&gt;&lt;p&gt;For this step I did not use any tooling, though I found some that could have been helpful later.  I literally just started stacking up different colors of box shadow, pulling a big blur, shifting them around, and adjusting the color opacity until everything looks just right.  Again I went really subtle here, comparing back to Chris's backdrop I am a bit more subtle than even that.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;box-shadow:   -8rem -6rem 8rem -6rem rgba(253, 221, 88, .2),   4rem 0 8rem rgba(88, 82, 185, .3),   .2rem .2rem 1rem rgba(0, 0, 0, .2);&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Complete format&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/new-post-card-2020.png" /&gt;&lt;/p&gt;&lt;h2&gt;A few days too late&lt;/h2&gt;&lt;p&gt;A few days later I saw this thread of tweets by &lt;a href="https://twitter.com/sarah_edo"&gt;@sarah_edo&lt;/a&gt; and &lt;a href="https://twitter.com/swyx"&gt;@swyx&lt;/a&gt; and realized that this style is called &lt;strong&gt;neomorphism&lt;/strong&gt;.  There are some sweet tools referenced here, check the&lt;img alt="" src="/static/2020-rebrand-1.png" /&gt;m out if you are going for this design style.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/sarah_edo/status/1227694049118679040?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1227694049118679040&amp;amp;ref_url=http%3A%2F%2F127.0.0.1%3A5500%2Findex.html" title="neomorphism.io tweet from Sarah Drasner"&gt;&lt;img alt="" src="/2020-02-15 11-05-55_Microsoft Text Input Application.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/swyx/status/1227697956587032576" title="follow up list of resources from Shawn swyx Wang"&gt;&lt;img alt="" src="/2020-02-15 11-06-16_Start.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Tool Links&lt;/h1&gt;&lt;p&gt;Links to all of the tools referenced in this article.&lt;/p&gt;&lt;p&gt;&lt;a href="https://instant-eyedropper.com/" title="instant-eyedropper"&gt;https://instant-eyedropper.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://cssgradient.io/" title="https://cssgradient.io/"&gt;cssgradient.io/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://neumorphism.io/" title="https://neumorphism.io/"&gt;https://neumorphism.io/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/sw-yx/spark-joy/blob/master/README.md#pure-css-tricks" title="https://github.com/sw-yx/spark-joy/blob/master/README.md#pure-css-tricks"&gt;https://github.com/sw-yx/spark-joy/blob/master/README.md#pure-css-tricks&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://t.co/EFSSIiSrFj?amp=1" title="https://card.surge.sh/"&gt;card.surge.sh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://t.co/0yyw6wMuGO?amp=1" title="https://brumm.af/shadows"&gt;brumm.af/shadows&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://t.co/tQ9NijDzUI?amp=1" title="https://components.ai/box-shadows"&gt;components.ai/box-shadows&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;Shameless 🔌&lt;/h1&gt;&lt;p&gt;I just started a newsletter &lt;a href="https://waylonwalker.com/newsletter/" title="https://waylonwalker.com/newsletter/"&gt;Join Here&lt;/a&gt; and lets start the discussion.  I want to know about my audience and what they want to hear about from me.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/2020-rebrand</guid></item><item><title>My Content Strategy For 2021</title><link>https://waylonwalker.com/2021-content-strategy</link><description>I am making another push in 2021 to get my content out in the world and meeting users where they are.  See how I plan to execute. My content is written in markdown, all markdown.  I find that markdown does a really great job at getting out of the way</description><content:encoded>&lt;p&gt;I am making another push in 2021 to get my content out in the world and meeting users where they are.  See how I plan to execute.&lt;/p&gt;&lt;h2&gt;Platforms&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;waylonwalker.com&lt;/li&gt;&lt;li&gt;Twitter&lt;/li&gt;&lt;li&gt;DEV&lt;/li&gt;&lt;li&gt;hashnode&lt;/li&gt;&lt;li&gt;Medium&lt;/li&gt;&lt;li&gt;LinkedIn&lt;/li&gt;&lt;li&gt;Anchor&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Markdown&lt;/h2&gt;&lt;p&gt;My content is written in markdown, all markdown.  I find that markdown does a really great job at getting out of the way and letting ideas flow onto the page.  I am never fussing with fonts and formatting while physically writing posts.   Not that I don't spend way more time than I need to tweak these things on my own personal site where everything gets posted.&lt;/p&gt;&lt;h2&gt;Articles&lt;/h2&gt;&lt;p&gt;Much of what I create is inside of short articles that get posted to my personal site &lt;a href="https://waylonwalker.com"&gt;waylonwalker.com&lt;/a&gt;.  These will get cross-posted to &lt;a href="https://dev.to/waylonwalker"&gt;DEV&lt;/a&gt;,&lt;a href="https://h.waylonwalker.com/"&gt;hashnode&lt;/a&gt;, &lt;a href="https://waylonwalker.medium.com/"&gt;Medium&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I have made cross-posting a bit easier for myself by posting the markdown for each article next to the post on my personal site.  Add .md to any post and there is the source.&lt;/p&gt;&lt;p&gt;Should I be giving my articles to Medium??  Personally, I am not a fan of the bait and switch that they did with adding a paywall years after launch.  From what I can tell authors are not getting paid much from it, users are discouraged when they are blocked, and they really only promote articles that are behind the paywall.&lt;/p&gt;&lt;p&gt;In the end, I am a fan of meeting users where they are, if they like Medium I don't want them to miss my content.&lt;/p&gt;&lt;h2&gt;More Catalytic&lt;/h2&gt;&lt;p&gt;&lt;em&gt;soft skills&lt;/em&gt;&lt;/p&gt;&lt;p&gt;My articles are very code-heavy, I do want to transition over to some more evergreen type of posts that are long-lasting.  I want to create some more content around how to be a good developer, data scientist, engineer, whatever you call yourself.&lt;/p&gt;&lt;p&gt;Personally, this is some of the content I enjoy consuming, but for some reason is not something I tend to create.&lt;/p&gt;&lt;h2&gt;Slides&lt;/h2&gt;&lt;p&gt;I am really enjoying the slide output of my articles on&lt;a href="https://www.linkedin.com/in/waylonwalker/detail/recent-activity/shares/"&gt;LinkedIn&lt;/a&gt;. It makes for something that is unique and easy to digest.  I have a pandoc script that takes in the markdown from my posts and kicks out a set of slides, so it's quick and easy to do.  Not every post works well this way by many have sofar.&lt;/p&gt;&lt;p&gt;&lt;img alt="my linked in slideactivity" src="https://waylonwalker.com/linkedin-activity-slides.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Threads&lt;/h2&gt;&lt;p&gt;With less success (shares, views, likes) I have been converting articles over to Twitter threads as they are released, again not every article works well this way, but many do.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/_WaylonWalker/status/1349716127887347717"&gt;https://twitter.com/_WaylonWalker/status/1349716127887347717&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Simplicity&lt;/h2&gt;&lt;p&gt;&lt;em&gt;just write markdown&lt;/em&gt;&lt;/p&gt;&lt;p&gt;In the end, everything needs to be simple and build off of the original markdown post.  Automation should be in a place where it makes sense.  I am no longer manually creating cover art or article descriptions, those are scripted out of the article itself.&lt;/p&gt;&lt;p&gt;I have come cli tooling in place to simplify my process. Expect more of that to come.&lt;/p&gt;&lt;h2&gt;Audio&lt;/h2&gt;&lt;p&gt;I have set up a podcast where I read out my posts, but the time that I have available to read them is very constraining to the process.  It may be something that I figure out how to work out or something that I drop.  It's something that I think would be really nice, but still trying to figure out how to do it.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/audio-for-blog/"&gt;https://waylonwalker.com/audio-for-blog/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I personally really like this as I often find a cool blog article that I want to read, but it's time to cook dinner or drive somewhere.  Articles with audio make it super convenient to consume while doing a task requiring eye contact.&lt;/p&gt;&lt;h2&gt;TLDR&lt;/h2&gt;&lt;p&gt;Meet Users Where They are.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/2021-content-strategy</guid></item><item><title>Do You Hoist</title><link>https://waylonwalker.com/do-you-hoist</link><description>Do you have any use cases that you use hoising?  Why?  It seems like a really cool feature in any language that uses it, but I dont really notice it in use.</description><content:encoded>&lt;p&gt;I am working through Wes Bos's &lt;a href="https://beginnerjavascript.com/"&gt;beginnerjavascript.com/&lt;/a&gt; I just hit module 18 on hoisting.  It's something that I always knew was there, Its not something I typically see used or use myself.&lt;/p&gt;&lt;h1&gt;Do you Hoist?&lt;/h1&gt;&lt;p&gt;Do you have any use cases that you use hoising?  Why?  It seems like a really cool feature in any language that uses it, but I dont really notice it in use.&lt;/p&gt;&lt;h1&gt;What is Hoising&lt;/h1&gt;&lt;p&gt;There are many articles that cover this in far more depth, but its the idea that variable declarations and functions are defined before they are executed.  This means that it doesnt matter if you call a function before or after it is defined.&lt;/p&gt;&lt;h1&gt;Hoisting&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;console.log(`Hello ${getUser()}`)function getUser() {  return 'Waylon'}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Running this code will log out "Waylon"&lt;/p&gt;&lt;h1&gt;What about variable hoisting&lt;/h1&gt;&lt;p&gt;I am most familiar with python which does not variable hoist so this one kinda confused me at first.  It only hoists the variable declaration not the value of the variable.  It defines whether the variable is going to be &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; and sets it to undefined.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It only hoists the variable declaration not the value of the variable.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;console.log('name: ', name)console.log('firstName: ', firstName)const name = "Waylon"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code will log out &lt;code&gt;name: undefined&lt;/code&gt; followed by an &lt;code&gt;Uncaught ReferenceError: firstName is not defined&lt;/code&gt; since &lt;code&gt;name&lt;/code&gt; has been decalared and &lt;code&gt;firstName&lt;/code&gt; has not been decalred.&lt;/p&gt;&lt;h1&gt;I don't Hoist&lt;/h1&gt;&lt;p&gt;Really it feels weird to call function definitions before using them.  I really dont have a better reason.  It just feels more natural to do so.&lt;/p&gt;&lt;h1&gt;Is hoisting more readable?&lt;/h1&gt;&lt;p&gt;I kinda like the idea of putting the 🥩 meat of the file up at the top so that someone reading it will see the good stuff first, then can optionally dig into the weeds if they need to.&lt;/p&gt;&lt;h1&gt;I started a newsletter&lt;/h1&gt;&lt;p&gt;I recently started a newsletter, &lt;a href="https://waylonwalker.com/newsletter"&gt;join in&lt;/a&gt; and let me know what you want to hear about.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/do-you-hoist</guid></item><item><title>Blog Data With Python</title><link>https://waylonwalker.com/blog-data-with-python</link><description>Generating an api for a blog is much simpler than one might expect with python. fix missing data</description><content:encoded>&lt;p&gt;Generating an api for a blog is much simpler than one might expect with python.&lt;/p&gt;&lt;h2&gt;Markdown&lt;/h2&gt;&lt;h2&gt;Frontmatter&lt;/h2&gt;&lt;h2&gt;Fill in the blanks&lt;/h2&gt;&lt;p&gt;fix missing data&lt;/p&gt;&lt;h2&gt;Fast&lt;/h2&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/blog-data-with-python</guid></item><item><title>Ipython Ninjitsu</title><link>https://waylonwalker.com/ipython-ninjitsu</link><description>Stop going to google everytime your stuck and stay in your workflow.  The
ipython ? is a superhero for productivity and staying on task. Note This does jump you into a pager, a j,k or up, down to navigate, q to quit. Docstring not enough for you use </description><content:encoded>&lt;ul&gt;&lt;li&gt;?docstring&lt;/li&gt;&lt;li&gt;??sourcecode&lt;/li&gt;&lt;li&gt;%run&lt;/li&gt;&lt;li&gt;%debug&lt;/li&gt;&lt;li&gt;%autoreload&lt;/li&gt;&lt;li&gt;%history&lt;/li&gt;&lt;li&gt;autoformat&lt;/li&gt;&lt;li&gt;%reset&lt;/li&gt;&lt;li&gt;!shell commands&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;?docstring&lt;/h2&gt;&lt;p&gt;Stop going to google everytime your stuck and stay in your workflow.  Theipython &lt;code&gt;?&lt;/code&gt; is a superhero for productivity and staying on task.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline import PipelinePipeline?Init signature:Pipeline(    nodes: Iterable[Union[kedro.pipeline.node.Node, ForwardRef('Pipeline')]],    *,    tags: Union[str, Iterable[str]] = None,)Docstring:A ``Pipeline`` defined as a collection of ``Node`` objects. This classtreats nodes as part of a graph representation and provides inputs,outputs and execution order.Init docstring:Initialise ``Pipeline`` with a list of ``Node`` instances.Args:    nodes: The iterable of nodes the ``Pipeline`` will be made of. If you        provide pipelines among the list of nodes, those pipelines will        be expanded and all their nodes will become part of this        new pipeline.    tags: Optional set of tags to be applied to all the pipeline nodes.Raises:    ValueError:        When an empty list of nodes is provided, or when not all        nodes have unique names.    CircularDependencyError:        When visiting all the nodes is not        possible due to the existence of a circular dependency.:&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This does jump you into a pager, a j,k or up, down to navigate, q to quit.&lt;/p&gt;&lt;h2&gt;??sourcecode&lt;/h2&gt;&lt;p&gt;Docstring not enough for you use case.  I often run into cases where thedocstring is not clear enough and I need to see the implementation for myselfto see what a function does.&lt;/p&gt;&lt;h2&gt;%run&lt;/h2&gt;&lt;p&gt;I turned my nose up at this one, prior to seeing the famous &lt;a href="https://www.youtube.com/watch?v=7jiPeIFXb6U"&gt;I don't likenotebooks&lt;/a&gt; by &lt;a href="https://joelgrus.com/"&gt;Joel Grus&lt;/a&gt;.  My first snobby reaction was thatdeveloping modules and using autoreload was superior.  I have since realizedthere is a place for &lt;code&gt;%run&lt;/code&gt;, and it can cut down on some keystrokes to import,setup, and run even when developing in modules.&lt;/p&gt;&lt;h2&gt;%debug&lt;/h2&gt;&lt;p&gt;ipython comes with a post-mortem debugger, and it can be a lifesaver.  If wehave a long running function that runs into an error it can be a complete buzzkill.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def long_func():   import time   time.sleep(12)   n = 12   df = pd.Data({'a': range(n)})   return dflong_func()&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;%reset&lt;/h2&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/reset-ipython"&gt;https://waylonwalker.com/reset-ipython&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;%autoreload&lt;/h2&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/autoreload-ipython"&gt;https://waylonwalker.com/autoreload-ipython&lt;/a&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;c.InteractiveShellApp.extensions = ["autoreload"]c.InteractiveShellApp.exec_lines = ["%autoreload 2"]c.InteractiveShellApp.exec_lines.append(    'print("Warning: disable autoreload in ipython_config.py to improve performance.")')&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;place this in your ~/.ipython/profile_default/ipython_config.py to auto reload without needing to run the magic every time&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;autoformat&lt;/h2&gt;&lt;p&gt;This is a relatively new feature to ipython.  I really enjoy it, as the timethat I need the most help autoformatting my code is riffing on an ad hocanalysis at the command line.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;c.TerminalInteractiveShell.autoformatter = "black"&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;place this in your ~/.ipython/profile_default/ipython_config.py to autoformat with black by default&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;new prompt&lt;/h2&gt;&lt;h2&gt;reverse history search&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Control R&lt;/em&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/ipython-ninjitsu</guid></item><item><title>Refactoring your blog urls</title><link>https://waylonwalker.com/how-python-tools-config</link><description>&lt;h2&gt;mypy&lt;/h2&gt;&lt;p&gt;Mypy's config parser seems to be one of the most complex.  This is likely in part to it having the largest backwards compatability of all projects that I looked at.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/python/mypy/blob/master/mypy/config_parser.py"&gt;mypy/config_parser&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;flake8&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/PyCQA/flake8/blob/master/src/flake8/options/config.py"&gt;options/config.py&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;black&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/psf/black/blob/master/src/black/__init__.py#L277-L331"&gt;black&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;portray&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;only uses pyproject.toml&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href="https://github.com/timothycrosley/portray/blob/master/portray/config.py"&gt;portray/config.py&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;interrogate&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;only uses pyproject.toml&lt;/li&gt;&lt;/ul&gt;</description><guid isPermaLink="false">https://waylonwalker.com/how-python-tools-config</guid></item><item><title>My first eight years as a working professional.</title><link>https://waylonwalker.com/eight-years-cat</link><description>This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.</description><content:encoded>&lt;p&gt;This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.&lt;/p&gt;&lt;h2&gt;Keep Learning&lt;/h2&gt;&lt;p&gt;My initial career plans were down a completely different path. I have been very flexible in taking on a new career path. I have been eager to learn new things and respond to life changes that I never would have imagined.&lt;/p&gt;&lt;h2&gt;Life Changes&lt;/h2&gt;&lt;p&gt;Very severe chronic health issues from my family restricted my ability to travel to the facilities I served as a Mechanical Engineer. I was able to stay strong and make it work. But in the meantime, I was learning new skills that enabled me to be more effective remotely.&lt;/p&gt;&lt;h2&gt;I was scared.&lt;/h2&gt;&lt;p&gt;It was in these times that I found a love for data, and taking action from insights I found with data. I learned how to use python to enable me to be more effective. I did this primarily from hospital waiting rooms and many overnight stays. This gave my mind a break from some of the really difficult things in life but also catapulted my career in a new direction.&lt;/p&gt;&lt;p&gt;🔼 Be flexible&lt;/p&gt;&lt;p&gt;🔼 Always be open and ready for change&lt;/p&gt;&lt;p&gt;🔼 Never stop learning&lt;/p&gt;&lt;p&gt;🔼 Keep a positive attitude&lt;/p&gt;&lt;p&gt;🔼 Be kind to others&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;This was originally posted on my LinkedIn, if you enjoy it please connect with me and give the post a 👍&lt;/p&gt;&lt;iframe src="https://www.linkedin.com/embed/feed/update/urn:li:share:6679445409351393280" height="813" width="504" frameborder="0" allowfullscreen="" title="Embedded post"&gt;&lt;/iframe&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/eight-years-cat</guid></item><item><title>understanding python *args and **kwargs</title><link>https://waylonwalker.com/python-args-kwargs</link><description>Python `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.</description><content:encoded>&lt;style&gt;/* h2 {display: block;} */h2&gt;img { margin: auto; width: 100%;}&lt;/style&gt;&lt;p&gt;Python &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power &lt;strong&gt;can&lt;/strong&gt; lead to some really unreadable/unusable code if done wrong.&lt;/p&gt;&lt;h2&gt;*args are for lists&lt;/h2&gt;&lt;p&gt;*args are some magical syntax that will collect function arguments into a list, or unpack a list into individual arguments.&lt;/p&gt;&lt;h2&gt;&lt;img alt="recieving *args" src="https://waylonwalker.com/args-kwargs/1.png" title="sending *args collects all arguments into a list inside of the function" /&gt;&lt;/h2&gt;&lt;p&gt;When recieving variables as a &lt;code&gt;*&amp;lt;varname&amp;gt;&lt;/code&gt;, commonly &lt;code&gt;*args&lt;/code&gt;, the arguments get &lt;strong&gt;packed&lt;/strong&gt; into an ordered list.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Never add *args to your function definition (almost never)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Generally I find &lt;code&gt;*args&lt;/code&gt; poor naming and it only drives confusion to the user looking at your function trying to decide what exactly it does.  Here I have chosen the name &lt;code&gt;printrows&lt;/code&gt; since we are printing each item as a row.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def printer(*printrows: str) -&amp;gt; None:  for i, row in enumerate(printrows):    print(i, row)&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; printer('eggs', 'spam', 'ham')0 eggs1 spam2 ham&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Be Aware of AntiPatterns&lt;/h2&gt;&lt;p&gt;If your &lt;code&gt;*args&lt;/code&gt; collection is distictly different things, then make them separate variables.  Using &lt;code&gt;*args&lt;/code&gt; as a crutch can lead to a really confusing api for your users, even yourself.&lt;/p&gt;&lt;h2&gt;❌&lt;/h2&gt;&lt;p&gt;Here &lt;code&gt;*args&lt;/code&gt; is confusing as we are a bit unsure of what to pass to &lt;code&gt;get_user_data&lt;/code&gt;, or which order it needs to be in without reading the code.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def get_user_data(*args):  "does stuff given a users GitHub and DevTo username"  github = reuqests.get(f'https://api.github.com/users/{args[0]}')  devto = requests.get(f'https://dev.to/api/users/by_username?url={args[1]}')  ...&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;✔&lt;/h2&gt;&lt;p&gt;Here the function signature makes it clear what &lt;code&gt;get_user_data&lt;/code&gt; expects.  Users will not have to read your docstring or worse your source code to understand it each time the reference it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def get_user_data(github_username, devto_username):  "does stuff given a users GitHub and DevTo username"  github = reuqests.get(f'https://api.github.com/users/{github_username}')  devto = requests.get(f'https://dev.to/api/users/by_username?url={devto_username}')  ...&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;img alt="sending *args" src="https://waylonwalker.com/args-kwargs/2.png" title="sending *args unpacks a list into individual arguments to be used in the function" /&gt;&lt;/h2&gt;&lt;p&gt;Inversely we can send a list of things as individual arguments by &lt;strong&gt;unpacking&lt;/strong&gt; them into the function call.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; things_to_print = ['eggs', 'spam', 'ham']&amp;gt;&amp;gt;&amp;gt; printer(*things_to_print)0 eggs1 spam2 ham&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;h2&gt;**kwargs are for dictionaries&lt;/h2&gt;&lt;p&gt;Just like &lt;code&gt;*args&lt;/code&gt; being for lists, &lt;code&gt;**kwargs&lt;/code&gt; are for dictionaries.  When packing them up inside of a function. The argument name passed in becomes the key, then invers happens when unpacking, the key becomes the argument for the function.&lt;/p&gt;&lt;h2&gt;&lt;img alt="recieving **kwargs" src="https://waylonwalker.com/args-kwargs/3.png" /&gt;&lt;/h2&gt;&lt;p&gt;Here is a function accepting &lt;code&gt;**printrows&lt;/code&gt; as it's only input. Any keyword argument that you pass into the function will get packed into a dictionary.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def printer(**printrows: str) -&amp;gt; None:  for key in printrows:    print(key, printrows[key])&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; printer(breakfast='eggs', lunch='spam', dinner='ham')breakfast eggslunch spamdinner ham&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Any arguments passed in will throw a &lt;code&gt;TypeError&lt;/code&gt;, since this &lt;code&gt;printer&lt;/code&gt; does not accept any positional arguments.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt;printer('one')---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&amp;lt;ipython-input-2-f03e96cb5e14&amp;gt; in &amp;lt;module&amp;gt;----&amp;gt; 1 printer("one")TypeError: printer() takes 0 positional arguments but 1 was given&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Avoid Anti-Patterns&lt;/h2&gt;&lt;p&gt;Just as above, if your items are clearly separate things, make them separate things and do not use &lt;code&gt;**kwargs&lt;/code&gt;.  &lt;code&gt;**kwargs&lt;/code&gt; are great when you have collections of things that all get treated exactly the sam, if they get treated differently, or you are expecting certain keys to always exist it will be very confusing to your users what they need to pass in.&lt;/p&gt;&lt;h2&gt;&lt;img alt="sending **kwargs" src="https://waylonwalker.com/args-kwargs/4.png" /&gt;&lt;/h2&gt;&lt;p&gt;Sending &lt;code&gt;**kwargs&lt;/code&gt; is quite useful.  Especially when combining various libraries together.  Often times you can coerse objects into a dictionary, often with something like &lt;code&gt;.to_dict()&lt;/code&gt;, then pass that whole dictionary to another function.  This makes gluing different libraries together a breeze at times.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; things_to_print = {breakfast:'eggs', lunch:'spam', dinner:'ham'}&amp;gt;&amp;gt;&amp;gt; printer(**things_to_print)breakfast eggslunch spamdinner ham&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;p&gt;I setup a repl.it with these examples so that you can quickly jump in, run it, break it, fix it, add breakpoints and really get a feel for them yourself. Check it out 👉 &lt;a href="https://repl.it/@WaylonWalker/args#main.py"&gt;https://repl.it/@WaylonWalker/args#main.py&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;I hope this helps you understand &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; just a bit more.  They can be quite handy to greatly simplify repetative code, expecially if we already have the data setup in the right data structure.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-args-kwargs</guid></item><item><title>pre-commit is awesome</title><link>https://waylonwalker.com/pre-commit-is-awesome</link><description>I recently discovered the ✨ awesomeness that is pre-commit. I steered away from it for so long because it seemed like a big daunting thing to set up, but really it's easy. It will automatically run checks for you. In some cases, it will even automatically fix them for you. Out of the box, it will do things like automatically trim extra whitespace, fix file endings, and ensure file sizes are not too large for git.</description><content:encoded>&lt;p&gt;I recently discovered the ✨ awesomeness that is pre-commit. I steered away from it for so long because it seemed like a big daunting thing to set up, but really it's easy. It will automatically run checks for you. In some cases, it will even automatically fix them for you. Out of the box, it will do things like automatically trim extra whitespace, fix file endings, and ensure file sizes are not too large for git.&lt;/p&gt;&lt;h2&gt;Quickstart&lt;/h2&gt;&lt;p&gt;It comes with a &lt;code&gt;sample-config&lt;/code&gt; that is pretty general purpose and use for just about any project in git.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip instal pre-commitpre-commit sample-config &amp;gt; .pre-commit-config.yamlpre-commit installgit add .git commit -m "added pre-commit"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Cloned Repo&lt;/h2&gt;&lt;p&gt;Once someone has created the &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; everyone on the team will want to be running it for consistency's sake. (make sure everyone agrees with the config you have chosen first). Simply install the existing config.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install pre-commitgit clone &amp;lt;repo&amp;gt;pre-commit installgit add .git commit -m "added pre-commit"&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;sample-config&lt;/h2&gt;&lt;p&gt;The sample configuration does some really basic, file ending, trailing-whitespace fixing. And checks for files too large for git. This one saved me when I tried to commit linux &lt;code&gt;rpm&lt;/code&gt; once 🤦‍♀️.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;# See https://pre-commit.com for more information# See https://pre-commit.com/hooks.html for more hooksrepos:- repo: https://github.com/pre-commit/pre-commit-hooks    rev: v2.4.0    hooks:    - id: trailing-whitespace    - id: end-of-file-fixer    - id: check-yaml    - id: check-added-large-files&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Adding some extras from pre-commit themselves&lt;/h2&gt;&lt;p&gt;Here I have added a couple of extra ones form pre-commit&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;    - id: check-case-conflict # Check for files that would conflict in case-insensitive filesystems    - id: check-merge-conflict # Check for files that contain merge conflict strings.    - id: debug-statements # Check for debugger imports and py37+ `breakpoint()` calls in python source.    - id: requirements-txt-fixer # Sorts entries in requirements.txt    - id: forbid-new-submodules # Check for git submodules    - id: flake8 # runs python flake8&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The submodules one is big. I have seen several folks trying to learn git for the first time mistakenly start nesting all of their projects underneath each other and eventually losing a lot of work. Trying to learn the command line and git all at once can be really confusing.&lt;/p&gt;&lt;h2&gt;skip pre-commit&lt;/h2&gt;&lt;p&gt;So you have a big codebase and you are trying to get pre-commit ready, but you just need your changes in.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;git commit -m "commiting wihout pre-commit" --no-verify&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;manually run pre-commit&lt;/h2&gt;&lt;p&gt;If you have an existing repo and want to run pre-commit on everything, since it was pre-existing, you can do that manually.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;pre-commit run --all-files&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;So pre-commit changed some files&lt;/h2&gt;&lt;p&gt;Since &lt;code&gt;pre-commit&lt;/code&gt; only runs against staged files, but makes changes to the local files you need to add them.&lt;/p&gt;&lt;p&gt;Here is a git status after committing with some trailing whitespace issues.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;❯ git statusOn branch mainChanges to be committed:  (use "git restore --staged &amp;lt;file&amp;gt;..." to unstage)        modified: README.mdChanges not staged for commit:  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)  (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)        modified: README.md&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;pre-commit&lt;/code&gt; will keep yelling at you about &lt;code&gt;trailing whitespace&lt;/code&gt; until you add the files.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git add README.md&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Community Developed plugins&lt;/h2&gt;&lt;p&gt;&lt;em&gt;give me more&lt;/em&gt;&lt;/p&gt;&lt;p&gt;These almost make it &lt;strong&gt;too&lt;/strong&gt; easy. Sharing your process to get up and running without &lt;code&gt;pre-commit&lt;/code&gt; can involve a lot of instructions. Installing several different tools, then running them manually, probably forgetting to do so sometimes. These will automatically install and only run scoped to the files that have changed, not on the whole repo.&lt;/p&gt;&lt;h3&gt;isort&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;- repo: https://github.com/asottile/seed-isort-configrev: v2.1.1hooks:    - id: seed-isort-config- repo: https://github.com/pre-commit/mirrors-isortrev: v4.3.21hooks:    - id: isort&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;.isort.cfg&lt;/h3&gt;&lt;p&gt;In order to get isort to play nicely with black, I found great success with the following config placed in the root of the repo at &lt;code&gt;.isort.cfg&lt;/code&gt;. Without these settings, I found that you commits will consistently fail checks because &lt;code&gt;isort&lt;/code&gt; and &lt;code&gt;black&lt;/code&gt; are fighting each other.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-toml"&gt;[settings]multi_line_output=3include_trailing_comma=Trueforce_grid_wrap=0use_parentheses=Trueline_length=88&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;.flake8&lt;/h3&gt;&lt;p&gt;Just as with &lt;code&gt;isort&lt;/code&gt; flake8 tends to complain about a few things that black does. To get them to play nicely together place this file in the root of the repo at &lt;code&gt;.flake8&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-toml"&gt;# taken from black# added E231 as is conflicts with black formatting[flake8]ignore = E203, E266, E501, W503, E231, F541max-line-length = 88max-complexity = 18select = B,C,E,F,W,T4,B9&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;black&lt;/h3&gt;&lt;p&gt;Black is an amazing CLI tool the python community has been blessed with. It was developed by python core dev Lukasz Langa after deep research of real python projects. It will autoformat your project and will check that the AST before and after remains the same ensuring that the code will run exactly the same. It only makes it more readable. I keep black installed and set to run on save. Many times I will bang out some sloppy code with long lines or poor indentation hit save and let black take care of the easy work.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;- repo: https://github.com/asottile/blacken-docs    rev: v1.7.0    hooks:        - id: blacken-docs        - additional_dependencies: [black]- repo: https://github.com/psf/black    rev: 19.3b0    hooks:        - id: black&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;mypy&lt;/h3&gt;&lt;p&gt;I have recently fallen in love with mypy. It has saved me from shipping some bugs that would not have been caught with tests, even with 100% coverage. I don't have 100% coverage across every possible type entered.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;    - repo: https://github.com/pre-commit/mirrors-mypy      rev: v0.720      hooks:          - id: mypy            exclude: tests/&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Your own plugin&lt;/h2&gt;&lt;p&gt;Sometimes you have a CLI tool that you want to run, but there is no plugin. No worries, you can install manually set the repo to local, and add an entry for your CLI command to run.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;    - repo: local      hooks:          - id: interrogate          name: "Interrogate docstring coverage check"          types: [file, python]          entry: interrogate -f 100 -vv&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;p&gt;I have been writing short snippets about my mentality breaking into the tech/data industry in my newsletter, 👇 check it out and lets get the conversation started.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/newsletter"&gt;&lt;img alt="Sign up for my Newsletter" src="https://waylonwalker.com/waylon-walker-newsletter.png" /&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pre-commit-is-awesome</guid></item><item><title>I finally fixed my Styled-Components in gatsby.js</title><link>https://waylonwalker.com/fix-styled-components-in-gatsby</link><description>I finally fixed my Styled-Components in gatsby.js</description><content:encoded>&lt;p&gt;I am starting a redesign of my website.  I have started cross posting to &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; more regularly.  With that I have been making more detailed cover images at the recommended &lt;code&gt;1000x420&lt;/code&gt;.  These images get cut off on my own site, which is a bit ridiculous to have my own content not look right on my own site.  But before we start a heavy redesign I have a small issue that has plagued the site for at least a year!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I have a small issue that has plagued the site for at least a year!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I have been using styled components in my gatsby.js site for about a year now.  And it has been plagued by styled-components not being in the ssr causing some jank in the styles being loaded.  You can see it in the lighthouse performance report below.  It generally loads super quick, and is only caused on first load.  Anything using the gatsby &lt;code&gt;&amp;lt;Link/&amp;gt;&lt;/code&gt; component typically is fine and unaffected by the issue.&lt;/p&gt;&lt;h2&gt;The fix&lt;/h2&gt;&lt;p&gt;The fix was so simple it was only 2 lines total. One to install &lt;code&gt;gatsby-plugin-styled-components&lt;/code&gt; and one to use it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;npm i gatsby-plugin-styled-components&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;plugins: [   'gatsby-plugin-styled-components',]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Before&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/2020-02-06 15-27-45_Start.png" /&gt;&lt;/p&gt;&lt;h2&gt;After&lt;/h2&gt;&lt;p&gt;&lt;img alt="" src="/2020-02-07 17-20-31_Start.png" /&gt;&lt;/p&gt;&lt;h2&gt;Why did it take so long to Fix?&lt;/h2&gt;&lt;p&gt;The real issue here was that I really didn't understand the problem as I described it above until I found the fix. It really did seem random that at odd times the styles would seem to vanish.  Sometimes never fully rehydrating at all.  Well actually I had fixed some production sites at work with it, but had no idea why it worked and therefore could not remember how I had fixed it, and google searched yielded no help.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/the-moment-i-realized-the-true-problem-1.png" /&gt;&lt;/p&gt;&lt;p&gt;After re-watching Wes Bos's Advanced react course where he describes how to fix this issue for &lt;code&gt;next.js&lt;/code&gt; sites it became clear that the problem was not random at all.  It was that they do not get statically rendered and are only on the page after react is re-hydrated.  The moment I realized the &lt;strong&gt;true&lt;/strong&gt; problem I knew how to google it and quickly found there was a plugin for this.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/fix-styled-components-in-gatsby</guid></item><item><title>Chrome Extensions I use</title><link>https://waylonwalker.com/chrome-extensions-i-use</link><description>There are many useful chrome extensions out there.  I probably have way too many installed, here are four that I am currently using.</description><content:encoded>&lt;p&gt;There are many useful chrome extensions out there.  I probably have way too many installed, here are four that I am currently using.&lt;/p&gt;&lt;p&gt;This post was inspired from Chris over at &lt;a href="https://daily-dev-tips.com/posts/top-10-chrome-extensions-for-developers-%F0%9F%91%80/"&gt;daily-dev-tips&lt;/a&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="#lastpass"&gt;LastPass&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#stylus"&gt;Stylus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#vimium"&gt;Vimium&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#hypothesis"&gt;hypothesis&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr /&gt;&lt;h2&gt;&lt;a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en"&gt;LastPass&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Love it or hate it passwords are hard to manage.  Everyone needs a password manager to avoid the dreaded password reuse, and to be able to quickly rotate them with a service.  I use lastpass, thus it's browser extension is my most used extension.&lt;/p&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en"&gt;&lt;img alt="lastpass" src="https://waylonwalker.com/chrome-extension-lastpass.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;&lt;a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?hl=en"&gt;Stylus&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Stylus is an extension that allows you to add your own CSS to style pages how you want.  There seems to be a full community of folks that really use this to the nth degree to style all of their commonly used sites somewhat similarly or add dark mode to sites without it.&lt;/p&gt;&lt;p&gt;Personally I mostly use it to add my favorite syntax highlighting theme to jupyter, &lt;strong&gt;onedark&lt;/strong&gt;.  I've long lost the original author, but have posted the CSS I use in this &lt;a href="https://gist.github.com/WaylonWalker/b082bda9c1ce1471ea0c940c836e5714"&gt;gist&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne?hl=en"&gt;&lt;img alt="lastpass" src="https://waylonwalker.com/chrome-extension-stylus.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;&lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;Vimium&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Vimium adds vim-like keybindings to chrome.  I don't use it a ton but it comes in handy to fully utilize the keyboard on some sites that aren't well suited to keyboard use.&lt;/p&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;&lt;img alt="vimium" src="https://waylonwalker.com/chrome-extension-vimium.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;&lt;a href="https://chrome.google.com/webstore/detail/hypothesis-web-pdf-annota/bjfhmglciegochdpefhhlphglcehbmek?hl=en"&gt;hypothesis&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Hypothesis is a notetaking app that I am trying to get on board with.  I like that they have a REST API to get your notes from. It allows you to take notes or highlight web pages and share them easily.  I am still trying to remember to use this one more.&lt;/p&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/hypothesis-web-pdf-annota/bjfhmglciegochdpefhhlphglcehbmek?hl=en"&gt;&lt;img alt="hypothesis" src="https://waylonwalker.com/chrome-extension-hypothesis.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;These are my most used extensions.  What are yours?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/chrome-extensions-i-use</guid></item><item><title>Stand With Your Team</title><link>https://waylonwalker.com/stand-with-your-team</link><description>People who are quick to toss team members under a bus are not well trusted or
highly thought of and it will lead to some toxic team dynamics. While collaborating on any project there are going to be decisions made that
aren't necessarily your favorit</description><content:encoded>&lt;p&gt;People who are quick to toss team members under a bus are not well trusted orhighly thought of and it will lead to some toxic team dynamics.&lt;/p&gt;&lt;h2&gt;Building Steam&lt;/h2&gt;&lt;p&gt;While collaborating on any project there are going to be decisions made thataren't necessarily your favorite, during a summer internship my mentor madesome decisions that I was not on board with, but I accepted his wisdom andmoved forward with little push back.&lt;/p&gt;&lt;h2&gt;Full Spead Ahead&lt;/h2&gt;&lt;p&gt;During a review, leadership showed interest in the option that I wanted to gotowards.  I was quick to jump up and say I  told you so right then and thereand pitch reasons why my idea was so much better.&lt;/p&gt;&lt;h2&gt;The Aftermath&lt;/h2&gt;&lt;p&gt;I walked out so &lt;strong&gt;proud&lt;/strong&gt; that leadership recognized my idea, but I will neverforget the look on my teammate's face and what he told me after the meeting.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Wow quick to throw me under the bus in front of everyone 😢".   I&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;~ my teammate&lt;/p&gt;&lt;h2&gt;Realizing what Happened&lt;/h2&gt;&lt;p&gt;It was at this moment that I threw my mentor, a good &lt;strong&gt;friend&lt;/strong&gt; in front of abus that was at full speed.  I will never forget this moment and the importanceof being a good trustworthy team player.&lt;/p&gt;&lt;h2&gt;Speak your Mind, be heard, shut up&lt;/h2&gt;&lt;p&gt;This day I learned that there is a time to speak your mind.  While that bus issitting idle it would have hurt no one.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;There were times to hear out ideas, and there were times that we need to acceptthe decisions the team made.  The team that you were a part of and had a chanceto steer.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;There are times where it's appropriate to sit down and shut up.&lt;/p&gt;&lt;h1&gt;Your Story 👇&lt;/h1&gt;&lt;p&gt;Do you have a story of how not standing with your team caused you pain lateron.  I would love to hear and learn from your experience.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/stand-with-your-team</guid></item><item><title>What's New in Kedro 0.16.4</title><link>https://waylonwalker.com/whats-new-in-kedro-0164</link><description>If we take a look at the release notes I see one **major** feature improvement on the list, auto-discovery of hooks.</description><content:encoded>&lt;p&gt;If we take a look at the &lt;a href="https://github.com/quantumblacklabs/kedro/blob/master/RELEASE.md"&gt;release notes&lt;/a&gt; I see one &lt;strong&gt;major&lt;/strong&gt; feature improvement on the list, auto-discovery of hooks.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;## Major features and improvements* Enabled auto-discovery of hooks implementations coming from installed plugins.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This one comes a bit surprising as it was just casually mentioned in &lt;a href="https://github.com/quantumblacklabs/kedro/issues/435"&gt;#435&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/quantumblacklabs/kedro/issues/435"&gt;&lt;img alt="auto enabled plugins mentioned in issue 435" src="https://waylonwalker.com/kedro-435.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Think pytest&lt;/h2&gt;&lt;p&gt;As mentioned in &lt;a href="https://github.com/quantumblacklabs/kedro/issues/435"&gt;#435&lt;/a&gt; this is the model that pytest uses. Not all plugins automatically start doing things right out of the box but require a CLI argument.&lt;/p&gt;&lt;h2&gt;simplicity&lt;/h2&gt;&lt;p&gt;It feels a bit crazy that simply installing a package will change the way that your pipeline gets executed. I do like that it requires just a bit less reaching into the framework stuff for the average user. Most folks will be able to write in the catalog and nodes without much change to the rest of the project.&lt;/p&gt;&lt;h2&gt;Implementation&lt;/h2&gt;&lt;p&gt;Reading through the &lt;a href="https://kedro.readthedocs.io/en/stable/07_extend_kedro/05_plugins.html#hooks"&gt;docs&lt;/a&gt;, they show us that we can make our hooks automatically register by adding a &lt;code&gt;kedro.hooks&lt;/code&gt; endpoint that points to a &lt;em&gt;singleton&lt;/em&gt; instance of our hook.&lt;/p&gt;&lt;p&gt;&lt;em&gt;from the docs&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;setup(    ...    entry_points={"kedro.hooks": ["plugin_name = plugin_name.plugin:hooks"]},)import loggingfrom kedro.framework.hooks import hook_implclass MyHooks:    @hook_impl    def after_catalog_created(self, catalog): # pylint: disable=unused-argument        logging.info("Reached after_catalog_created hook")hooks = MyHooks()&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Careful with the singletons&lt;/h2&gt;&lt;p&gt;&lt;em&gt;hook authors beware&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I will be a bit cautious before installing a plugin that is automatically registered. I know its not a common pattern, but if you were to leverage any part of two kedro projects at the same time, and project-specific data was stored in the instance of the hook it will likely be broken.&lt;/p&gt;&lt;p&gt;As long as the hook doesn't store data on the instance you will be ok. Hooks like what they have in the examples will be ok. They generally just take some information from the lifecycle arguments and do something at their prescribed lifecycle point.&lt;/p&gt;&lt;p&gt;Many of the hooks I am seeing in the wild are already more complicated and require the hooks author to utilize an &lt;code&gt;__init__&lt;/code&gt; method and store data on the instance. If you were to do this on two pipelines simultaneously it would break.&lt;/p&gt;&lt;h2&gt;Can my hook be auto-discovered&lt;/h2&gt;&lt;p&gt;If your hook doesn't include a &lt;code&gt;__init__&lt;/code&gt; method its a fairly easy yes, otherwise be aware of the potential dangers of passing singleton on to your users.&lt;/p&gt;&lt;h2&gt;Use Virtual environments&lt;/h2&gt;&lt;p&gt;Whatever virtual environment manager you use, it is more important than ever to make sure you &lt;strong&gt;DO NOT&lt;/strong&gt; install plugins in your global environment. Generally, you should always run projects &lt;em&gt;even toys or tests&lt;/em&gt; in a &lt;strong&gt;virtual&lt;/strong&gt;  &lt;strong&gt;environemnt&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;I use conda&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n my-sample-env python=3.8 -y&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Overall&lt;/h2&gt;&lt;p&gt;I think this is a really interesting direction for the project to go to. Hooks are still really early. The implementation is good, but I foresee us getting some more functionality that may require us to rely on the &lt;code&gt;__init__&lt;/code&gt; method a little less.  I think there are going to be some really cool hooks that can leverage the simplicity of auto-discoverability.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/whats-new-in-kedro-0164</guid></item><item><title>Fix git commit author</title><link>https://waylonwalker.com/fix-git-commit-author</link><description>I was 20 commits into a hackoberfest PR when I suddenly realized they they all had my work email on them instead of my personal email 😱.</description><content:encoded>&lt;p&gt;I was 20 commits into a hackoberfest PR when I suddenly realized they they all had my work email on them instead of my personal email 😱.  This is the story of how I corrected my email address on 19 individual commits after already submitting for a PR.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="#change-the-email-for-this-repo"&gt;Change the email for this repo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#prepare-for-rebasing"&gt;Prepare for rebasing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#start-the-rebase"&gt;start the rebase&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#fix-first-wrong-commit"&gt;🛠 Fix First wrong Commit&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#fix-all-commits"&gt;Fix all commits&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#done"&gt;Done&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#recap"&gt;ReCap&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Change the email for this repo&lt;/h2&gt;&lt;p&gt;&lt;em&gt;stop the bleeding&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Before anything else set the email correctly!&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd kedrogit config user.name "Waylon Walker"git config user.email quadmx08@gmail.com&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Prepare for rebasing&lt;/h2&gt;&lt;p&gt;First thing is to find how many commits back this mistake goes.  I opened up the git log, and saw mine went back 19 commits.  I rolled back 20 just to be sure.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ git log...commit a355926b9d7ec4c05659adaa254beefbdb036332Author: WaylonWalker &amp;lt;email@work.com&amp;gt;Date:   Sat Oct 17 10:28:59 2020 -0500    give name of function inside incorrect parameters errorcommit 1756f5d121bd06c459560b2e982e0d7b6879e9caAuthor: Kiyohito Kunii (Kiyo) &amp;lt;8097799+921kiyo@users.noreply.github.com&amp;gt;Date:   Fri Oct 2 15:33:09 2020 +0100    Fix docs reference for registering `pipelines`&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;start the rebase&lt;/h2&gt;&lt;p&gt;Now I start the rebase 20 commits back from HEAD.  THis will pop you into a text file with a list of commits, for this change simply replace all &lt;code&gt;pick&lt;/code&gt; with &lt;code&gt;edit&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git rebase -i HEAD~20&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Note for the first commit&lt;/h2&gt;&lt;p&gt;If you want to rebase back to the start of the repo use the &lt;code&gt;--root&lt;/code&gt; flag.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git rebase -i --root&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run git log to see where we ended up.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ git logcommit 1756f5d121bd06c459560b2e982e0d7b6879e9caAuthor: Kiyohito Kunii (Kiyo) &amp;lt;8097799+921kiyo@users.noreply.github.com&amp;gt;Date:   Fri Oct 2 15:33:09 2020 +0100    Fix docs reference for registering `pipelines`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected we ended up on Kiyo's commit. So we can simply move forward without any edits.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ git rebase --continueStopped at e162ca7...  correct function name in testsYou can amend the commit now, with  git commit --amendOnce you are satisfied with your changes, run  git rebase --continue&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;🛠 Fix First wrong Commit&lt;/h2&gt;&lt;p&gt;Checking the log again I an now on my first commit with a mistake.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ git logcommit 95c209a740d6d0340e19a8fc36298cbf874f8bf7 (HEAD)Author: WaylonWalker &amp;lt;email@work.com&amp;gt;Date:   Sat Oct 3 11:59:44 2020 -0500    correct function name in testscommit cde2e8baa3c1c4a9f1da4135258381466b1da40aAuthor: Waylon Walker &amp;lt;quadmx08@gmail.com&amp;gt;Date:   Sat Oct 17 10:30:07 2020 -0500    update testscommit a355926b9d7ec4c05659adaa254beefbdb036332Author: Waylon Walker &amp;lt;quadmx08@gmail.com&amp;gt;Date:   Sat Oct 17 10:28:59 2020 -0500    give name of function inside incorrect parameters errorcommit 1756f5d121bd06c459560b2e982e0d7b6879e9caAuthor: Kiyohito Kunii (Kiyo) &amp;lt;8097799+921kiyo@users.noreply.github.com&amp;gt;Date:   Fri Oct 2 15:33:09 2020 +0100    Fix docs reference for registering `pipelines`&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Running the following command will reset the author on the current commit.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git commit --amend --reset-author&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Double check with a quick &lt;code&gt;git log&lt;/code&gt; that the author was fixed.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;commit ccaaa56059ee4554731fa83297ca9e8e387a7592 (HEAD)Author: Waylon Walker &amp;lt;quadmx08@gmail.com&amp;gt;Date:   Sat Oct 17 10:35:40 2020 -0500    correct function name in testscommit cde2e8baa3c1c4a9f1da4135258381466b1da40aAuthor: Waylon Walker &amp;lt;quadmx08@gmail.com&amp;gt;Date:   Sat Oct 17 10:30:07 2020 -0500    update testscommit a355926b9d7ec4c05659adaa254beefbdb036332Author: Waylon Walker &amp;lt;quadmx08@gmail.com&amp;gt;Date:   Sat Oct 17 10:28:59 2020 -0500    give name of function inside incorrect parameters errorcommit 1756f5d121bd06c459560b2e982e0d7b6879e9caAuthor: Kiyohito Kunii (Kiyo) &amp;lt;8097799+921kiyo@users.noreply.github.com&amp;gt;Date:   Fri Oct 2 15:33:09 2020 +0100    Fix docs reference for registering `pipelines`&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Fix all commits&lt;/h2&gt;&lt;p&gt;Now to do this for 18 other commits.  I found that chaining the three commands into a bash one-liner was quite helpful.  I turned off pre-commit hooks with &lt;code&gt;--no-verify&lt;/code&gt;.  I also turned off the &lt;code&gt;log&lt;/code&gt; pager by adding &lt;code&gt;--no-pager&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git rebase --continue &amp;amp;&amp;amp; \git commit --amend --reset-author --no-edit --no-verify &amp;amp;&amp;amp; \git --no-pager log -n 3&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Done&lt;/h2&gt;&lt;p&gt;This was quick and easy for 19 commits.  I have tried to loop through changes like this in the past, and it does get a bit hairy.  I find its easier to just setup a one-liner and crank through them one by one.&lt;/p&gt;&lt;h2&gt;A note on changing history...&lt;/h2&gt;&lt;p&gt;Since this was done in a rebase it has changed the history of the repo.  This is ok to do only when you are the only person or are in close communication with everyone using the repo.  One thing I have ran into is that if you do this after you submit a PR, but before its completed it duplicates your commits in a merge.  For this particular change I simply closed the first PR and opened a second.  If someone has a better suggestion, I would be glad to know a better way.&lt;/p&gt;&lt;h2&gt;ReCap&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd kedrogit config user.name "Waylon Walker"git config user.email quadmx08@gmail.comgit loggit rebase -i HEAD~20git loggit rebase --continuegit loggit rebase --continue &amp;amp;&amp;amp; git commit --amend --reset-author --no-edit --no-verify &amp;amp;&amp;amp; git --no-pager log -n 3&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/fix-git-commit-author</guid></item><item><title>D3 Day 4</title><link>https://waylonwalker.com/d3-day4</link><description>none</description><content:encoded>&lt;!--&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;&lt;style&gt;    #content{        max-width: 800px;        margin: 0 auto;    }    .chart {        display: block;        padding: 10px;        background: peachpuff;        /* transition: all 500ms */    }    .bar {        height: 30px;        margin: 5px;        background: teal;    }    .bar:hover{        background: #444;        }    button {        background: rgb(240, 196, 211);        border: none;        font-size: 1.3rem;        border-radius: 5px;        padding: .2rem 1rem;        margin-bottom: 1rem    }    .on {        background: palevioletred;    }    .big {    width: 100%    }    .small {    width: 50%    }&lt;/style&gt; --&gt;&lt;h2&gt;Learn D3 in 5 days&lt;/h2&gt;&lt;p&gt;For what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere!  These are just stepping stones into real custom visualizations that cannot be done in any other tool today.  I still cannot explain how excited I am to say &lt;strong&gt;"I created that in d3!!!"&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;Todays Result&lt;/h3&gt;&lt;p&gt;Today I will be learning about d3 scales, and adding them to the bar chart that we created yesterday.  Follow along as I try to create something interesting.&lt;/p&gt;&lt;p&gt;&lt;img alt="today's_result" src="d3-day4.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Recall Example 3 from yesterday&lt;/h2&gt;&lt;p&gt;&lt;em&gt;maybe a few days ago.... give me a break I have a lot of other priorities&lt;/em&gt;&lt;/p&gt;&lt;p&gt;In &lt;a href="https://waylonwalker.com/d3-day3"&gt;yesterdays&lt;/a&gt; post we created a working example of a horizontal bar chart that shows grades for a set of 5 students that are all in two classes; 'Math' and 'Science'.  The chart is interactive, and will switch subjects at the press of a button.&lt;/p&gt;&lt;p&gt;&lt;img alt="d3 day 3 final result" src="d3-day3.gif" /&gt;&lt;/p&gt;&lt;!--&lt;div id="chart3" class='chart'&gt;    &lt;button class='math' onclick="render3('math')"&gt;Math&lt;/button&gt;    &lt;button class='science' onclick="render3('science')"&gt;Science&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    const data3 = [        { name: 'Alice', math: 93, science: 84 },        { name: 'Bob', math: 73, science: 82 },        { name: 'James', math: 92, science: 78 },        { name: 'Steve', math: 77, science: 93 },        { name: 'Jordan', math: 80, science: 68 },    ]    function render3(subject) {        d3.select('#chart3')            .selectAll('button')            .classed('on', false)        d3.select('#chart3')            .select('.' + subject)            .attr('class', subject + ' on')        const bars = d3.select('#chart3')            .selectAll('div')            .data(data3, function(d) {                return d.name            })        const newBars = bars.enter()            .append('div')                .attr('class', 'bar')                .style('width', 0)        newBars.merge(bars)            .transition()            .style('width', function(d) {                return (d[subject]) + 'px'            })    }    render3('math')&lt;/script&gt; --&gt;&lt;h2&gt;Add Scales&lt;/h2&gt;&lt;p&gt;One issue with that plot was that the scale was created by hand.  In todays example we will let d3 take care of the scale for us.  We will define a linear scale with an input range and an output range.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;let xScale = d3.scaleLinear()    .domain([50, 100])    .range([0, width()]);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we will change the following .style method call from &lt;code&gt;return (d[subject]-50 * 3) + 'px'&lt;/code&gt; to &lt;code&gt;return xScale(d[subject]) = 'px'&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;newBars.merge(bars)    .transition()    .style('width', function(d) {        return xScale(d[subject]) + 'px'    })    .style('height', barHeight())&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Keeping it dry&lt;/h3&gt;&lt;p&gt;Note that if we had many different elements using the same scale with this code it would only exist in one place &lt;code&gt;xScale&lt;/code&gt; and not separately in each style function.  This makes our viz much more maintainable as we may see a need to change the scales in the future.&lt;/p&gt;&lt;h3&gt;Adding Some Flair&lt;/h3&gt;&lt;p&gt;To give this viz some simple flair, and a reason that we might want to use scales.  I added a new set of buttons to allow us to change the chart size and see the viz respond.  Check out the markup in the Final Markup section if your interested in that.  I do want to point out that I used the d3 selectors to add the chart size classes to the chart.&lt;/p&gt;&lt;p&gt;The select api is very jQuery inspired, but the method chaining syntax feels very natural to me as my main data tools is pandas. The d3 methods feel very much like method chaining in python.  In fact, besides the way the function is defined it reads very much like python.  This feels very comfortable to me as I am always loosing track of braces and semicolons when writing javascript!&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;function chart4_size(size) {    d3.select('#sizes')        .selectAll('button')        .classed('on', false)    d3.select('#sizes')        .select('.chart4-' + size + '-btn')        .classed('on', true)    d3.select('#chart4')        .attr('class', 'chart ' + size)    subject = document        .getElementById('subjects')        .querySelector('.on')        .classList[0]    render4(subject)}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the css that we are using to change the size of our chart figure.  Nothing fancy, just make full width or half width to show the responsiveness of our chart.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.big {width: 100%}.small {width: 50%}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Final Result&lt;/h2&gt;&lt;!--&lt;div id='buttons'&gt;    &lt;h3&gt;Subject&lt;/h3&gt;    &lt;div id='subjects'&gt;        &lt;button class='math' onclick="render4('math')"&gt;Math&lt;/button&gt;        &lt;button class='science' onclick="render4('science')"&gt;Science&lt;/button&gt;    &lt;/div&gt;    &lt;h3&gt;Chart Size&lt;/h3&gt;    &lt;div id='sizes'&gt;        &lt;button class='chart4-big-btn' onclick='chart4_size("big")')&gt;Large&lt;/button&gt;        &lt;button class='chart4-small-btn' onclick='chart4_size("small")'&gt;Small&lt;/button&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div id="chart4" class='chart'&gt;&lt;/div&gt;&lt;script&gt;    const data4 = [        { name: 'Alice', math: 93, science: 84},        { name: 'Bob', math: 73, science: 82 },        { name: 'James', math: 92, science: 78},        { name: 'Steve', math: 77, science: 93 },        { name: 'Jordan', math: 80, science: 68 },    ]    chart4 = document.getElementById('chart4')    let width = function() {        return chart4.getBoundingClientRect().width        }    let height = function() {        return chart4.getBoundingClientRect().height        }    let barHeight = function() {        height() /  data4.length + 'px'        }    function chart4_size(size) {        d3.select('#sizes')            .selectAll('button')            .classed('on', false)        d3.select('#sizes')            .select('.chart4-' + size + '-btn')            .classed('on', true)        d3.select('#chart4')            .attr('class', 'chart ' + size)        subject = document            .getElementById('subjects')            .querySelector('.on')            .classList[0]        render4(subject)    }    function render4(subject) {        d3.select('#subjects')            .selectAll('button')            .classed('on', false);        d3.select('#subjects')            .select('.' + subject)            .attr('class', subject + ' on');        let xScale = d3.scaleLinear()            .domain([50, 100])            .range([0, width()]);        const bars = d3.select('#chart4')            .selectAll('div')            .data(data4, function(d) {                return d.name            })        const newBars = bars.enter()            .append('div')                .attr('class', 'bar')                .style('width', 0)        newBars.merge(bars)            .transition()            .style('width', function(d) {                return xScale(d[subject]) + 'px'            })            .style('height', barHeight())    }    render4('math')    chart4_size('big')&lt;/script&gt; --&gt;&lt;p&gt;&lt;img alt="d3 day4 final result" src="d3-day4.gif" /&gt;&lt;/p&gt;&lt;h3&gt;Final Markup&lt;/h3&gt;&lt;p&gt;Most of the markup here is for the buttons and the callbacks.  This is not really the focus of today's exercise.  I have included the html here so that you can see how the buttons are tied in to the Final Script.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;div id='buttons'&amp;gt;    &amp;lt;h3&amp;gt;Subject&amp;lt;/h3&amp;gt;    &amp;lt;div id='subjects'&amp;gt;        &amp;lt;button class='math' onclick="render4('math')"&amp;gt;Math&amp;lt;/button&amp;gt;        &amp;lt;button class='science' onclick="render4('science')"&amp;gt;Science&amp;lt;/button&amp;gt;    &amp;lt;/div&amp;gt;    &amp;lt;h3&amp;gt;Chart Size&amp;lt;/h3&amp;gt;    &amp;lt;div id='sizes'&amp;gt;        &amp;lt;button class='chart4-big-btn' onclick='chart4_size("big")')&amp;gt;Large&amp;lt;/button&amp;gt;        &amp;lt;button class='chart4-small-btn' onclick='chart4_size("small")'&amp;gt;Small&amp;lt;/button&amp;gt;    &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id="chart4" class='chart'&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Final Style&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;#content{    max-width: 800px;    margin: 0 auto;}.chart {    display: block;    padding: 10px;    background: peachpuff;    /* transition: all 500ms */}.bar {    height: 30px;    margin: 5px;    background: teal;}.bar:hover{    background: #444;    }button {    background: rgb(240, 196, 211);    border: none;    font-size: 1.3rem;    border-radius: 5px;    padding: .2rem 1rem;    margin-bottom: 1rem}.on {    background: palevioletred;}.big {width: 100%}.small {width: 50%}&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Final script&lt;/h3&gt;&lt;p&gt;Here is the final script so that you showing everything put together.  Yes this is a lot of code for a bar chart without scales, click events, titles, tooltips, or anything fancy, but I need to start somewhere.  d3.js is the language that builds fully custom vizualizations like no other tool today, and by doing a bit of practice now I will be ready for some serious stuff in the future.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// Setup the dataconst data4 = [    { name: 'Alice', math: 93, science: 84},    { name: 'Bob', math: 73, science: 82 },    { name: 'James', math: 92, science: 78},    { name: 'Steve', math: 77, science: 93 },    { name: 'Jordan', math: 80, science: 68 },]// Create some vanilla js functions to get the size of the chartchart4 = document.getElementById('chart4')let width = function() {    return chart4.getBoundingClientRect().width    }let height = function() {    return chart4.getBoundingClientRect().height    }let barHeight = function() {    height() /  data4.length + 'px'    }// create a function to update the size of the chart// Size is updated by adding a css class big or small// Note: the  render function is called at the end to ensure the scale is re-renderedfunction chart4_size(size) {    d3.select('#sizes')        .selectAll('button')        .classed('on', false)    d3.select('#sizes')        .select('.chart4-' + size + '-btn')        .classed('on', true)    d3.select('#chart4')        .attr('class', 'chart ' + size)    subject = document        .getElementById('subjects')        .querySelector('.on')        .classList[0]    render4(subject)}// render the plot// Note: I did need to bring the xScale and the width() call  into the render// function to ensure that the scale was updated each timefunction render4(subject) {    d3.select('#subjects')        .selectAll('button')        .classed('on', false);    d3.seect('#subjects')        .select('.' + subject)        .attr('class', subject + ' on');    let xScale = d3.scaleLinear()        .domain([0, 100])        .range([50, width()]);    const bars = d3.select('#chart4')        .selectAll('div')        .data(data4, function(d) {            return d.name        })    const newBars = bars.enter()        .append('div')            .attr('class', 'bar')            .style('width', 0)    newBars.merge(bars)        .transition()        .style('width', function(d) {            return xScale(d[subject]) + 'px'        })        .style('height', barHeight())}// create initial render and sizerender4('math')chart4_size('big')&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/d3-day4</guid></item><item><title>Kedro Static Viz 0.3.0 is out with Hooks Support</title><link>https://waylonwalker.com/kedro-static-viz-0-3-0</link><description>kedro-static-viz is out with support for the newly released hooks feature.  This means that you can have `kedro-static-viz` automatically deploy a full gatsby site `before_pipeline_run` keeping your visualization always up to date.</description><content:encoded>&lt;p&gt;&lt;a href="https://github.com/WaylonWalker/kedro-static-viz"&gt;kedro-static-viz&lt;/a&gt; is out with support for the newly released hooks feature.  This means that you can have &lt;code&gt;kedro-static-viz&lt;/code&gt; automatically deploy a full gatsby site &lt;code&gt;before_pipeline_run&lt;/code&gt; keeping your visualization always up to date.&lt;/p&gt;&lt;p&gt;Even though it is a static site there is no functionality lost.  The only thing that's missing is the flask server.  With &lt;a href="https://github.com/WaylonWalker/kedro-static-viz"&gt;kedro-static-viz&lt;/a&gt; you can deploy your visualization to a number of static hosting providers such as GitHub pages free of charge with wicked fast performance&lt;/p&gt;&lt;h2&gt;⚡ It's Fast&lt;/h2&gt;&lt;p&gt;Even though it's built on gatsbyjs the full site builds in under 2s even on slower hardware.  This is because the site is already pre-rendered and stripped of any excess.  It's zipped up right into the python package and is typically used with the cli, but now can be used with python, or as a hook as well.&lt;/p&gt;&lt;blockquote&gt;&lt;h3&gt;What is &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; 🤔&lt;/h3&gt;&lt;/blockquote&gt;&lt;p&gt;Kedro viz is a fantastic kedro plugin that allows you to visualize your data pipeline.  Kedro allows you to quickly build production-ready pipelines where you just configure a catalog, then toss python functions into a big pile.  Kedro figures out the order everything needs ran in for you, allows you to run a datasets dependencies or dependents only.  &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; gives you a great way to see this ordering visually.&lt;/p&gt;&lt;p&gt;&lt;img alt="a visualization of a kedro data pipeline featuring data and functions flowing together." src="https://waylonwalker.com/pipeline_visualisation-1.png" title="kedro visualization" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;kedro visualization from the projects readme&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Check out a live running example&lt;/h2&gt;&lt;p&gt;Using the power of GitHub actions the I have built a kedro iris pipeline visualization that can be found on &lt;a href="https://static-viz.kedro.dev/"&gt;https://static-viz.kedro.dev/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Itching to get started with kedro&lt;/h2&gt;&lt;p&gt;You can be up and running in a matter of minutes if you already have python running on your machine.&lt;/p&gt;&lt;p&gt;Make a virtual environment with your environment manager of choice.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;conda create -n kedro-practice python=3.8 -yconda activate kedro-practice&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install kedro. Then create a new project with their awesome cli template built on cookiecutter. Make sure to answer &lt;code&gt;y&lt;/code&gt; to get a prebuilt example pipeline with data.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;pip install kedro kedro-static-vizkedro new&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Vizualize your pipeline with the cli 〽&lt;/h2&gt;&lt;p&gt;For local use when you already have the full project &lt;code&gt;kedro viz&lt;/code&gt; is a great tool to use, but this is an article about kedro-static-viz.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;kedro-static-viz static-viz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since we used &lt;code&gt;kedro-static-viz&lt;/code&gt; you will have a new directory called &lt;code&gt;public&lt;/code&gt; that you can host on any static web hosting service, like GitHub pages or Netlify.&lt;/p&gt;&lt;h2&gt;Ready to try out the new hooks feature 🙋‍♀️&lt;/h2&gt;&lt;p&gt;Open up your &lt;code&gt;&amp;lt;project&amp;gt;/src/run.py&lt;/code&gt; and add the hook to your &lt;code&gt;ProjectContext&lt;/code&gt; class.  Next time you run your pipeline you will have an updated pipeline.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro_static_viz.hooks import StaticVizclass ProjectContext(KedroContext):   project_name = "kedro0160"   project_version = "0.16.1"   package_name = "kedro0160"   hooks = [ StaticViz() ]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Now Run that pipeline 🏃‍♀️&lt;/h2&gt;&lt;p&gt;Run your pipeline and enjoy that fresh kedro viz each and every time you run your pipeline.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro run&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Want to make your own hooks 🎣&lt;/h2&gt;&lt;p&gt;Check out some of my other articles on building kedro hooks.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/kedro-class-hooks/"&gt;&lt;img alt="creating customizable kedro hooks" src="https://waylonwalker.com/configurable-kedro-hooks.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/creating-the-kedro-preflight-hook/"&gt;&lt;img alt="creating the kedro preflight hook" src="https://waylonwalker.com/kedro-hooks.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Check out the example 👉 &lt;a href="https://static-viz.kedro.dev/"&gt;https://static-viz.kedro.dev/&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-static-viz-0-3-0</guid></item><item><title>Ipython-Config</title><link>https://waylonwalker.com/ipython-config</link><description>I use my ipython terminal daily.  It's my go to way of running python most of
the time.  After you use it for a little bit you will probably want to setup a
bit of your own configuration. Activate your virtual environment of choice and pip install it</description><content:encoded>&lt;p&gt;I use my ipython terminal daily.  It's my go to way of running python most ofthe time.  After you use it for a little bit you will probably want to setup abit of your own configuration.&lt;/p&gt;&lt;h2&gt;install ipython&lt;/h2&gt;&lt;p&gt;Activate your virtual environment of choice and pip install it.  Any time youare running your project in a virtual environment, you will need to installipython inside it to access those packages from ipython.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install ipython&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;You are using a virtual environment right? Virtual environments like venv orconda can save you a ton of pain down the road.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;profile_default&lt;/h2&gt;&lt;p&gt;When you install ipython you start out with no config at all.  Runnign &lt;code&gt;ipythonprofile create&lt;/code&gt; will start a new profile called &lt;code&gt;profile_default&lt;/code&gt; that containsall of the default configuration.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;ipython profile create&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will create a directory &lt;code&gt;~/.ipython/profile_default&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;multiple configurations&lt;/h2&gt;&lt;p&gt;You can run multiple configurations by naming them with &lt;code&gt;ipython profile create[profile_name]&lt;/code&gt; This command will create a directory&lt;code&gt;~/.ipython/[profile_name]&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;ipython profile create my_profileipython --profile=my-profile&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;startup&lt;/h2&gt;&lt;p&gt;Inside the profile there will be a startup directory&lt;code&gt;~/.ipython/profile_default/startup&lt;/code&gt;.  Ipython will execute each of the filesin this directory on startup.  This is particularly handy to create customprompts, search, or import packages automatically for certian profiles.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/custom-ipython-prompt"&gt;https://waylonwalker.com/custom-ipython-prompt&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This post creates a custom ipython prompt by creating a&lt;code&gt;~/.ipython/profile_default/startup/prompt.py&lt;/code&gt; file.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;ipython_config.py&lt;/h2&gt;&lt;p&gt;There are tons of options that are in the &lt;code&gt;ipython_config.py&lt;/code&gt; file.  Myfavorite is to automatically enable my favorite magic command autoreload.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/autoreload-ipython"&gt;https://waylonwalker.com/autoreload-ipython&lt;/a&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;c.InteractiveShellApp.extensions = ['autoreload'c.InteractiveShellApp.exec_lines = []'%autoreload 2']c.InteractiveShellApp.exec_lines.append('print("Warning: disable autoreload in ipython_config.py to improve performance.")')&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/ipython-config</guid></item><item><title>Gracefully adopt kedro, the catalog</title><link>https://waylonwalker.com/graceful-kedro-catalog</link><description>&lt;h2&gt;Why use kedro catalog?&lt;/h2&gt;&lt;p&gt;While using the catalog alone will not reap all of the benefits of the framework, it does get you and your project ready for the full framework eventually.  For me the full benefit of the catalog comes when you combine it with the pipeline and dont even touch read/write steps at all.&lt;/p&gt;&lt;p&gt;Taking a step into kedro by adopting the catalog first will give you a way to organize all of your data loads in one place, and stop manually writing read/write code, which can be different for each data and storage type. You just don't need to think about it.&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;iperitive loading style&lt;/li&gt;&lt;li&gt;organizes your data&lt;/li&gt;&lt;li&gt;all file locations can be quickly identified&lt;/li&gt;&lt;li&gt;can be dropped into kedro later&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;blockquote&gt;&lt;p&gt;"can be dropped into kedro later"Let's talk a bit more about that&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;2 Ways to Gracefully adopt the catalog&lt;/h2&gt;&lt;p&gt;&lt;em&gt;How do I get started with the kedro catalog&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;add with the code api&lt;/li&gt;&lt;li&gt;load from yaml (&lt;strong&gt;recommended&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;1. Adding to the catalog with the code api&lt;/h2&gt;&lt;p&gt;&lt;em&gt;how to use the kedro catalog code api&lt;/em&gt;&lt;/p&gt;&lt;p&gt;It is possible to keep everything inside of one single file if you want by utilizing the code api, which defines the kedro catalog inside of your script with python.  I personally like this method as it is a bit more scriptable to create many layers of datasets with a for loop.  It can still be carried right into a kedro project, but is not the normal way that other kedro users will be used to seeing.  I'll leave it up to you which technique to use.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.io import DataCatalogfrom kedro.extras.datasets.pandas import CSVDataSetio = DataCatalog(    {        "bikes": CSVDataSet(filepath="../data/01_raw/bikes.csv"),    })&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;taken right from the kedro &lt;a href="https://kedro.readthedocs.io/en/stable/04_user_guide/04_data_catalog.html"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;👆 This can be done inside of a single Jupyter cell, and pulled out later.&lt;/p&gt;&lt;h2&gt;2. Creating a catalog config file&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;recommended&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This reccommended method it great since it will simply drop right in to a full kedro project if you were ever ready to adopt the framework as a whole.  The downside to gracefully adopting the framework is that you need to have a bit of an understanding of the internals to do it.  When using the framework as a whole it seemlessly takes care of everything for you.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;# conf/base/catalog.yml# Example 1: Loads / saves a CSV file from / to a local file systembikes:  type: pandas.CSVDataSet  filepath: data/01_raw/bikes.csv&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.config import ConfigLoaderfrom kedro.io import DataCatalogconf_loader = ConfLoader(['conf/base'])conf_catalog = conf_loader.get('catalog*', 'catalog/**')catalog = DataCatalog.from_config(conf_catalog)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;You can even do this 👆 from a Jupyter notebook&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If you do happen to be in a module deeper into an existing library I tend to leverage the use of the &lt;code&gt;__file__&lt;/code&gt; magic.  &lt;code&gt;__file__&lt;/code&gt; is a string containing the location of the current file.  You can initiate a &lt;code&gt;Path&lt;/code&gt; object from this and roll up the necessary number of directories with the &lt;code&gt;parents&lt;/code&gt; attribute then into the &lt;code&gt;conf/base&lt;/code&gt; directory.  I find this more &lt;strong&gt;more robust&lt;/strong&gt; as it does not depend on your current working directory.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from pathlib import Pathconf_loader = ConfLoader([Path(__file__).parents[1] / 'conf/base'])conf_catalog = conf_loader.get("catalog*", "catalog/**")new_catalog = DataCatalog.from_config(conf_catalog)&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;I find leveraging the &lt;code&gt;__file__&lt;/code&gt; magic a bit more robust when possible as it does not depend on your current working directory.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Adhoc adding to an existing kedro catalog&lt;/h2&gt;&lt;p&gt;Let's say that you are already using a kedro project, but you are wanting to develop new features entirely in the context of a notebook.  You can easily create a catalog as shown above.  Since the kedro catalog variable is typically &lt;code&gt;catalog&lt;/code&gt;, we will call it &lt;code&gt;new_catalog&lt;/code&gt; and add it to the existing &lt;code&gt;catalog&lt;/code&gt; below.  If you are not quite sure what that &lt;code&gt;**catalog&lt;/code&gt; syntax is doing check out my article on &lt;code&gt;**kwargs&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;catalog.add_feed_dict(new_catalog.datasets.__dict__)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;&lt;img alt="python args and kwargs" src="https://waylonwalker.com/python-args-kwargs.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;python args and kwargs&lt;/a&gt; article by &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_waylonwalker&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The framework makes appending&lt;/p&gt;&lt;p&gt;&lt;code&gt;` pythoncatalog = DataCatalog({**catalog.datasets.__dict__, **new_catalog.datasets.__dict__})&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;One word of caution&lt;/h2&gt;&lt;p&gt;If you have any hooks running &lt;code&gt;after_catalog_created&lt;/code&gt;, they will not be run on the appended catalog entries.&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/graceful-kedro-catalog</guid></item><item><title>Black Tech Pipeline</title><link>https://waylonwalker.com/pariss-athena-on-black-tech-pipeline</link><description>I was particularly inspired by @chantastic episode 103 of the react podcast with @ParissAthena. They spoke about the black tech pipeline as well as Diversity, Equity, and Inclusion. Pariss is quite an inspiration. She has done so much work to create a better place for POC in tech. I like that not only is she helping them get jobs but acting as a mentor for their first few months on the job to make sure that they are able to find their place and fit in.</description><content:encoded>&lt;p&gt;&lt;em&gt;Based on an episode of react podcast.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;🎙 Listen to the full &lt;a href="https://reactpodcast.simplecast.com/episodes/103"&gt;episode&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;So Inspirational&lt;/h2&gt;&lt;p&gt;I was particularly inspired by &lt;a href="https://twitter.com/chantastic"&gt;@chantastic&lt;/a&gt; episode 103 of the react podcast with &lt;a href="https://twitter.com/ParissAthena"&gt;@ParissAthena&lt;/a&gt;.  They spoke about the black tech pipeline as well as Diversity, Equity, and Inclusion.  Pariss is quite an inspiration.  She has done so much work to create a better place for POC in tech.  I like that not only is she helping them get jobs but acting as a mentor for their first few months on the job to make sure that they are able to find their place and fit in.&lt;/p&gt;&lt;h2&gt;Losing their culture&lt;/h2&gt;&lt;p&gt;One thing that Michael brought up was the feeling he gets when he has other Asian friends to collaborate with at work is just a feeling of fitting in.  All too often he feels like he has to put on this persona of "Hamburgers and Beer are my favorite thing, like all the time" just to fit in.&lt;/p&gt;&lt;h2&gt;Growing up in Rural America (me)&lt;/h2&gt;&lt;p&gt;I grew up in a very rural part of the United States Dominated by Whites with a prominent Mexican community, there was almost no Asian or Black.  I can't tell you how many times I heard, "I have this friend John, He's black, but he's not really black."  I will say that I was never quite this low, but growing up in a region where this was the norm, I probably wasn't the best ambassador either.&lt;/p&gt;&lt;p&gt;Years later I recall taking some training for work that could not have described the people I grew up with better.  It described rural parts of the United States as completely accepting of any POC as long as they completely leave their culture behind.&lt;/p&gt;&lt;hr /&gt;&lt;blockquote&gt;&lt;p&gt;"I have this friend John, He's black, but he's not really black."&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;I heard this statement far too many times coming from rural United States&lt;/em&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Thinking a little bit more into this statement I realize that as a culture Rural America was very open to POC, but &lt;strong&gt;not&lt;/strong&gt; &lt;strong&gt;at&lt;/strong&gt; &lt;strong&gt;all&lt;/strong&gt; open to their &lt;strong&gt;culture&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;This is where a lot of what we were taught in school in the '90s and '00s falls short.  We were so heavily focused on, &lt;em&gt;" I don't see color"&lt;/em&gt;.  We were taught that race was all about color, having friends of color, and treating everyone equally.  But I think that not seeing color puts us in a situation of not really treating everyone equally.  Their color may have been seen as equal, but their culture wasn't.&lt;/p&gt;&lt;p&gt;We have failed to embrace others the way we would want them to embrace us.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Hamburgers and Beer are my favorite thing, like all the time"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is where I really connected with Michael's statement "Hamburgers and Beer are my favorite thing, like all the time".  So often we can look past color, but we completely miss making a real connection with other cultures.&lt;/p&gt;&lt;h2&gt;Welcome Everyone&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Like, really welcome them.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Further, into the episode, Pariss spoke about being hired into tech and feeling left out of the conversation because she didn't feel like she fit in.  She would hire in with a non-POC on the same day and felt like people would stare at her like a zoo animal while treating the other new hire as a real person.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;people would stare at her like a zoo animal&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Take Action&lt;/h2&gt;&lt;p&gt;I know that I do not want to make anyone on my team feel like a zoo animal.  I feel like listening to this episode gave me a bit of perspective into what it might be like to be just a bit different than everyone else.  I really appreciate the both of them for being so open about sharing their experiences.  I will definitely think of ways that I can make any new hire just a bit more welcome next time.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;For this post don't follow me on Twitter, don't join my newsletter.&lt;/p&gt;&lt;p&gt;Share the episode with a friend.&lt;/p&gt;&lt;p&gt;&lt;a href="https://reactpodcast.simplecast.com/episodes/103"&gt;react podcast 103&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Follow &lt;a href="https://twitter.com/ParissAthena"&gt;@ParissAthena&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Follow &lt;a href="https://twitter.com/chantastic"&gt;@chantastic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Sign up for the &lt;a href="https://blacktechpipeline.substack.com/p/coming-soon"&gt;Black Tech Pipeline Newsletter&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;Follow them they are some amazing people.&lt;/h2&gt;&lt;p&gt;I have been trying to build out the content in mine.  I later found this is called a shadow newsletter or evergreen newsletter.  I will say that it gets tough to keep up with.  I've been trying to do it weekly, but have definitely had some folks get ahead of my pace, I'll have to figure out how to split the out and resend articles they missed.&lt;/p&gt;&lt;p&gt;-- for yours --&lt;/p&gt;&lt;p&gt;I like the branding that you have put into it, and how it matches yoru cover images elsewhere.&lt;/p&gt;&lt;p&gt;I like how you have included sections of posts from various places that pull me in and make me want to go see more.&lt;/p&gt;&lt;p&gt;your video to @WellMax81 is amazing, do more of those.&lt;/p&gt;&lt;p&gt;One thing, I am not sure if there is a "right" direction with this, but it doesnt give me any new content.  If I were to have been following you everywhere I would have likely seen a lot of this already.  That might make me wonder why I am subscribed over time.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pariss-athena-on-black-tech-pipeline</guid></item><item><title>Send Emails with GitHub Actions</title><link>https://waylonwalker.com/send-email-with-github-actions</link><description>One useful action that you can utilize no matter what content your repo has is sending email.</description><content:encoded>&lt;p&gt;Here is one useful thing that you can do with GitHub actions no matter what language you use, send email.  You might want to know right away when your ci passes.  You might want to give your team a nice pat on the back when a new release is deployed.  There might be subscribers wanting to see the latest release notes in their inbox as soon as the latest version is deployed.  Whatever it is, its pretty easy to do with an action right out of the actions marketplace.&lt;/p&gt;&lt;h2&gt;Mail on Star&lt;/h2&gt;&lt;p&gt;Here is a silly example that sends an email to yourself anytime someone stars your repo.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;name: Mail on Staron:  watch:    types: [ started ]# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:  # This workflow contains a single job called "email"  email:    # The type of runner that the job will run on    runs-on: ubuntu-latest    # Steps represent a sequence of tasks that will be executed as part of the job    steps:      - name: ✨ Send email, you star        uses: dawidd6/action-send-mail@v1.3.0        with:          server_address: smtp.gmail.com          server_port: 465          username: quadmx08          password: ${{ secrets.GMAIL_PASS }}          subject: Your a star ✨          body: ${{ github.actor }} just starred your mail-on-star repo!!! ${{ github.repository }}          to: ${{ secrets.GMAIL_ADDRESS }}          from: ${{ secrets.GMAIL_ADDRESS }}&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/send-email-with-github-actions</guid></item><item><title>Update Git User</title><link>https://waylonwalker.com/git-update-user</link><description>&lt;p&gt;This morning I log into my VCS and check activity on my projects to find that &lt;strong&gt;someone else&lt;/strong&gt; has been &lt;em&gt;very&lt;/em&gt; active on my projects fo the last few weeks. I quicklyhover over the missing avatar to find that &lt;strong&gt;It's Me&lt;/strong&gt;.  What's wrong here, why do I look like two different people throughout the day!  upon further investigation I see the issue.  while setting up a new terminal environment I mistyped my email address by &lt;strong&gt;one character&lt;/strong&gt;.  After much searching and a few failed attempts I was able to fix it by following this article &lt;a href="https://help.github.com/articles/changing-author-info/"&gt;https://help.github.com/articles/changing-author-info/&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Bare Clone&lt;/h2&gt;&lt;p&gt;Clone the repo, note it must be a &lt;code&gt;--bare&lt;/code&gt; clone.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git clone --bare https://github.com/user/repo.gitcd repo.git&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;git-author-rewrite&lt;/h2&gt;&lt;p&gt;Curl down the &lt;code&gt;git-author-rewrite&lt;/code&gt; script and edit the following variables &lt;code&gt;OLD_EMAIL&lt;/code&gt; &lt;code&gt;CORECT_NAME&lt;/code&gt; &lt;code&gt;CORRECT_EMAIL&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;curl https://gist.githubusercontent.com/octocat/0831f3fbd83ac4d46451/raw/c197afe3e9ea2e4218f9fccbc0f36d2b8fd3c1e3/git-author-rewrite.sh &amp;gt; git-author-rewrite.sh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the script, and push the updates.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;bash git-author-rewrite.shgit push --force --tags origin 'refs/heads/**'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Cleanup&lt;/h2&gt;&lt;p&gt;Delete the &lt;code&gt;--bare&lt;/code&gt; repo from your local machine.&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd ..rm -rf repo.git&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I hope this helps someone, or future me who needs to fix their information in git.&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/git-update-user</guid></item><item><title>Rewrite History with Git</title><link>https://waylonwalker.com/git-rewrite-history</link><description>&lt;ul&gt;&lt;li&gt;rebase&lt;/li&gt;&lt;li&gt;git commit --amend&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Unstage&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;rage&lt;/strong&gt; unstage to wipte out history of staged commit&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset --hard &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Undo file&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;rage quit&lt;/li&gt;&lt;li&gt;git reset HEAD~n &lt;file&gt;&lt;ul&gt;&lt;li&gt;removes modifications&lt;/li&gt;&lt;li&gt;keeps hitsory of changes and undoes them&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;git checkout HEAD~n -- &lt;file&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;keeps modifications&lt;/li&gt;&lt;li&gt;&lt;p&gt;removes history&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;--SOFT&lt;/p&gt;&lt;/li&gt;&lt;li&gt;--HARD&lt;/li&gt;&lt;li&gt;--Mixed&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;undo n commits back&lt;/h2&gt;&lt;p&gt;locally before push&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git reset HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;after push&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git revert HEAD~n&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;update .gitignore&lt;/h2&gt;&lt;p&gt;after push&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git rm -r --cached .git commit -am "Updated .gitignore"&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/git-rewrite-history</guid></item><item><title>Newsboat</title><link>https://waylonwalker.com/newsboat</link><description>Web browsers are a black hole of productivity.  I try to use them as little as
possible when it is time to focus.  I try to use help, ?, or ?? with
ipython, or --help at the command line as much as possible.  What about that
time I am trying to see w</description><content:encoded>&lt;p&gt;Web browsers are a black hole of productivity.  I try to use them as little aspossible when it is time to focus.  I try to use &lt;code&gt;help&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;??&lt;/code&gt; withipython, or --help at the command line as much as possible.  What about thattime I am trying to see what my online friends are posting on their sites?  Iused to used google reader quite heavily before that was taken down.&lt;/p&gt;&lt;h2&gt;Newsboat&lt;/h2&gt;&lt;p&gt;I am going to give a terminal rss reader a try for a bit and see how that goesfor me.  I have really struggled to get into an rss reader since google readerdied.&lt;/p&gt;&lt;h2&gt;installation&lt;/h2&gt;&lt;p&gt;I installed with the reccomended snap for Ubuntu.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;sudo snap install newsboat&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Adding feeds&lt;/h2&gt;&lt;p&gt;&lt;em&gt;super simple&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Running help for newsboat directed me towards their config files at the bottom.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;❯ newsboat --helpnewsboat r2.22usage: /snap/newsboat/3849/usr/local/bin/newsboat [-i &amp;lt;file&amp;gt;|-e] [-u &amp;lt;urlfile&amp;gt;] [-c &amp;lt;cachefile&amp;gt;] [-x &amp;lt;command&amp;gt; ...] [-h]    -e, --export-to-opml        export OPML feed to stdout    -r, --refresh-on-start      refresh feeds on start    -i, --import-from-opml=&amp;lt;file&amp;gt;   import OPML file    -u, --url-file=&amp;lt;urlfile&amp;gt;    read RSS feed URLs from &amp;lt;urlfile&amp;gt;    -c, --cache-file=&amp;lt;cachefile&amp;gt;    use &amp;lt;cachefile&amp;gt; as cache file    -C, --config-file=&amp;lt;configfile&amp;gt;  read configuration from &amp;lt;configfile&amp;gt;    -X, --vacuum            compact the cache    -x, --execute=&amp;lt;command&amp;gt;...  execute list of commands    -q, --quiet         quiet startup    -v, --version           get version information    -l, --log-level=&amp;lt;loglevel&amp;gt;  write a log with a certain loglevel (valid values: 1 to 6)    -d, --log-file=&amp;lt;logfile&amp;gt;    use &amp;lt;logfile&amp;gt; as output log file    -E, --export-to-file=&amp;lt;file&amp;gt; export list of read articles to &amp;lt;file&amp;gt;    -I, --import-from-file=&amp;lt;file&amp;gt;   import list of read articles from &amp;lt;file&amp;gt;    -h, --help          this help        --cleanup           remove unreferenced items from cacheFiles:    - configuration:  /home/nic/snap/newsboat/3849/.newsboat/config    - feed URLs:      /home/nic/snap/newsboat/3849/.newsboat/urls    - cache:          /home/nic/snap/newsboat/3849/.newsboat/cache.dbSupport at #newsboat at https://freenode.net or on our mailing list https://groups.google.com/g/newsboatFor more information, check out https://newsboat.org/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I just need to edit its urls file.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;nvim ~/snap/newsboat/3849/.newsboat/urls&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Urls file is just a list of urls to rss feeds.  Adding mine in allowed me to see all of my posts.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;https://waylonwalker.com/rss.xml&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Config&lt;/h2&gt;&lt;p&gt;I took most of my config from a &lt;a href="http://evantravers.com/articles/2020/04/15/reworking-my-rss-reading/"&gt;blogpost&lt;/a&gt;that I found by Evan Travers.  It set some sane defaults to the reading widthand vim keys.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;# http://evantravers.com/articles/2020/04/15/reworking-my-rss-reading/# Hide feeds where all the items are read.show-read-feeds no# Make the text width readabletext-width 50# Use multiple threads to download all the news faster.reload-threads 11# browser ~/bin/newsboat-browser.sh# browser "/usr/bin/brave-browser %u"# unbind keysunbind-key ENTERunbind-key junbind-key kunbind-key Junbind-key Kunbind-key ^Dunbind-key ^Uunbind-key ounbind-key gunbind-key G# bind keys - vim stylebind-key j downbind-key k upbind-key l openbind-key h quitbind-key ^D pagedownbind-key ^U pageupbind-key b toggle-source-viewbind-key U toggle-show-read-feedsbind-key u show-urlsbind-key g homebind-key G endbind-key b open-in-browser-and-mark-readbind-key B open-in-browserbind-key i sortbind-key I rev-sort&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;GUI Browser&lt;/h2&gt;&lt;p&gt;No matter how many different guides I tried I keedp getting &lt;code&gt;error code 127&lt;/code&gt;when trying to &lt;code&gt;open-in-browser&lt;/code&gt;.  Please let me know if you know how to fixthis. For now I am just going to roll with it.&lt;/p&gt;&lt;h2&gt;Here's how it looks&lt;/h2&gt;&lt;p&gt;&lt;img alt="newsboat feed" src="https://waylonwalker.com/newsboat-feed-waylonwalker-com.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;browsing a feed in newsboat&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img alt="newsboat article" src="https://waylonwalker.com/newsboat-article.png" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;reading an article in newsboat&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/newsboat</guid></item><item><title>Variables names don't need their type</title><link>https://waylonwalker.com/variable-names-don-t-need-their-type</link><description>So often I see a variables `type()` inside of its name and it hurts me a little inside.  Tell me I'm right or prove me wrong below.</description><content:encoded>&lt;p&gt;So often I see a variables &lt;code&gt;type()&lt;/code&gt; inside of its name and it hurts me a little inside.  Tell me I'm right or prove me wrong below.&lt;/p&gt;&lt;h2&gt;Examples&lt;/h2&gt;&lt;p&gt;Pandas &lt;code&gt;DataFrames&lt;/code&gt; are probably the worst offender that I see&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# badsales_df = get_sales()# goodsales = get_sales()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes vanilla structures too!&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# baditems_list = ['sneakers', 'pencils', 'paper', ]# gooditems = ['sneakers', 'pencils', 'paper', ]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Edge Cases?&lt;/h2&gt;&lt;p&gt;It's so common when you need to get inside a data structure in a special way that itsn't provided by the library.... I am not exactly sure of a good way around it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# bad ??sales = get_sales()sales_dict = sales.to_dict()# good🤷‍♀️&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Containers are plural&lt;/h2&gt;&lt;p&gt;Always name your containers plural, so that naming while iterating is simple.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;prices = {}items = ['sneakers', 'pencils', 'paper', ]for item in items:   prices[item] = get_price(item)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before I start fights 🥊 in code review, am I inline here or just being pedantic?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/variable-names-don-t-need-their-type</guid></item><item><title>D3 Day 3</title><link>https://waylonwalker.com/d3-day3</link><description>none</description><content:encoded>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;&lt;style&gt;    #content{        max-width: 800px;        margin: 0 auto;    }    .chart {        display: block;        padding: 10px;        background: peachpuff;    }    .bar {        height: 30px;        margin: 5px;        background: teal;    }    button {        background: rgb(240, 196, 211);        border: none;        font-size: 1.3rem;        border-radius: 5px;        padding: .2rem 1rem;        margin-bottom: 1rem    }    .on {        background: palevioletred;    }&lt;/style&gt;&lt;h2&gt;Learn D3 in 5 days&lt;/h2&gt;&lt;p&gt;I recently subscribed to Ben Clinkinbeard's learn D3.js in 5 days, and am currently on day 3.  I read through the first 2 days, and felt fairly comfortable with selecting elements, so I did not follow along on the first two days.  I probably should have, but there are only so many hours in the day.&lt;/p&gt;&lt;h3&gt;Why Learn D3&lt;/h3&gt;&lt;p&gt;D3 is the ubiquitous dynamic visualization library for building custom interactive visualizations on the web.  It is a bit low level, and more verbose than many other libraries that build upon it, but if you want full control D3 is the way to go.  I have used a few libraries built upon d3 in the past and have been very happy with the results.  For now I want to start learning a bit about how d3 works.  I know that learning it is going to take a long time, so I want to start working on some simple examples now in order to build my understanding so that I can learn quickly when I am ready to dive in.  If I never decide I need to take the deep dive into d3, I think understanding how it works will only help when I am using higher level libraries.&lt;/p&gt;&lt;h2&gt;Final Result&lt;/h2&gt;&lt;p&gt;I cant express how fun it was to build this example. I always saw d3 as being super low level and that I could never build something in it.  It was so cool to watch the magic happen in such a short period of time.&lt;/p&gt;&lt;p&gt;&lt;img alt="final_result" src="d3-day3.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Prep&lt;/h2&gt;&lt;h3&gt;Load D3&lt;/h3&gt;&lt;p&gt;I am going to load d3 from the cloudflare cdn for simplicity&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-HTML"&gt;    script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Base Styles&lt;/h3&gt;&lt;p&gt;I will use this as by stylesheet throughout the examples.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;    &amp;lt;style&amp;gt;        .chart {            display: block;            padding: 10px;            background: peachpuff;        }        .bar {            height: 30px;            margin: 5px;            background: teal;        }        button {            background: rgb(240, 196, 211);            border: none;            font-size: 1.3rem;            border-radius: 5px;            padding: .2rem 1rem;            margin-bottom: 1rem        }        .on {            background: palevioletred;        }    &amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Example one&lt;/h2&gt;&lt;p&gt;This one is a bit cheaty in that it has the exact number of divs already rendered for us, but it is a good learning pointso see how to map data to attributes&lt;/p&gt;&lt;p&gt;By the way this is the first chart that I have ever created with d3, and this silly thing is so exciting!!&lt;/p&gt;&lt;h3&gt;Markup&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-HTML"&gt;&amp;lt;div id="chart1" class='chart'&amp;gt;    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-JavaScript"&gt;const data = [90, 270, 152, 42, 83]d3.select('#chart1')    .selectAll('div')    .data(data)    .attr('class', 'bar')    .style('width', function (d) {        return d + 'px'    })&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Result&lt;/h3&gt;&lt;p&gt;&lt;img alt="d3 day3 example 1" src="d3-day3-1.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;example 1 plot&lt;/em&gt;&lt;/p&gt;&lt;!--&lt;div id="chart1" class='chart'&gt;    &lt;div&gt;&lt;/div&gt;    &lt;div&gt;&lt;/div&gt;    &lt;div&gt;&lt;/div&gt;    &lt;div&gt;&lt;/div&gt;    &lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;    const data = [90, 270, 152, 42, 83]    d3.select('#chart1')        .selectAll('div')        .data(data)        .attr('class', 'bar')        .style('width', function (d) {            return d + 'px'        })&lt;/script&gt; --&gt;&lt;h2&gt;Example 2&lt;/h2&gt;&lt;p&gt;This time we are going to get a bit more dynamic.  The divs will be generated on the fly and will update with the press of a button.&lt;/p&gt;&lt;h3&gt;Markup&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-HTML"&gt;&amp;lt;div id="chart2" class='chart'&amp;gt;    &amp;lt;button class='math' onclick="render('math')"&amp;gt;Math&amp;lt;/button&amp;gt;    &amp;lt;button class='science' onclick="render('science')"&amp;gt;Science&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-JavaScript"&gt;const data2 = [    { name: 'Alice', math: 93, science: 84},    { name: 'Bob', math: 73, science: 82},    { name: 'James', math: 92, science: 78},    { name: 'Steve', math: 77, science: 93},    { name: 'Jordan', math: 80, science: 68},]function render(subject) {    d3.select('#chart2')        .selectAll('button')        .classed('on', false)    d3.select('.' + subject)        .attr('class', subject + ' on')    d3.select('#chart2')        .selectAll('div')        .remove()    d3.select('#chart2')        .selectAll('div')        .data(data2)        .enter()            .append('div')            .attr('class', 'bar')            .style('width', function(d) {                    return (d[subject]-50)*3 + 'px'                })}render('math')&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Result&lt;/h3&gt;&lt;!--&lt;div id="chart2" class='chart'&gt;    &lt;button class='math' onclick="render('math')"&gt;Math&lt;/button&gt;    &lt;button class='science' onclick="render('science')"&gt;Science&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    const data2 = [        { name: 'Alice', math: 93, science: 84},        { name: 'Bob', math: 73, science: 82},        { name: 'James', math: 92, science: 78},        { name: 'Steve', math: 77, science: 93},        { name: 'Jordan', math: 80, science: 68},    ]    function render(subject) {        d3.select('#chart2')            .selectAll('button')            .classed('on', false)        d3.select('.' + subject)            .attr('class', subject + ' on')        d3.select('#chart2')            .selectAll('div')            .remove()        d3.select('#chart2')            .selectAll('div')            .data(data2)            .enter()                .append('div')                .attr('class', 'bar')                .style('width', function(d) {                     return (d[subject]-50)*3 + 'px'                    })    }    render('math')&lt;/script&gt; --&gt;&lt;p&gt;&lt;img alt="d3 day 3 example 2" src="d3-day3-2.gif" /&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;example 2 working buttons&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Example 3&lt;/h2&gt;&lt;p&gt;In Example2 the chart jumped from one state to the next with a complete wipe and redraw in betweeen.  In this example we will retain the same bars and only update their width.  This will allow us to transition/animate them.&lt;/p&gt;&lt;h3&gt;Markup&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;div id="chart3" class='chart'&amp;gt;    &amp;lt;button class='math' onclick="render3('math')"&amp;gt;Math&amp;lt;/button&amp;gt;    &amp;lt;button class='science' onclick="render3('science')"&amp;gt;Science&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-JavaScript"&gt;const data3 = [    { name: 'Alice', math: 93, science: 84 },    { name: 'Bob', math: 73, science: 82 },    { name: 'James', math: 92, science: 78 },    { name: 'Steve', math: 77, science: 93 },    { name: 'Jordan', math: 80, science: 68 },]function render3(subject) {    d3.select('#chart3')        .selectAll('button')        .classed('on', false)    d3.select('#chart3')        .select('.' + subject)        .attr('class', subject + ' on')    const bars = d3.select('#chart3')        .selectAll('div')        .data(data3, function(d) {            return d.name        })    const newBars = bars.enter()        .append('div')            .attr('class', 'bar')            .style('width', 0)    newBars.merge(bars)        .transition()        .style('width', function(d) {            return (d[subject]-50)*3 + 'px'        })}render3('math')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="d3 day3 example 3" src="d3-day3.gif" /&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;example 3 nice and smooth&lt;/em&gt;&lt;/p&gt;&lt;!--&lt;div id="chart3" class='chart'&gt;    &lt;button class='math' onclick="render3('math')"&gt;Math&lt;/button&gt;    &lt;button class='science' onclick="render3('science')"&gt;Science&lt;/button&gt;&lt;/div&gt;&lt;script&gt;    const data3 = [        { name: 'Alice', math: 93, science: 84 },        { name: 'Bob', math: 73, science: 82 },        { name: 'James', math: 92, science: 78 },        { name: 'Steve', math: 77, science: 93 },        { name: 'Jordan', math: 80, science: 68 },    ]    function render3(subject) {        d3.select('#chart3')            .selectAll('button')            .classed('on', false)        d3.select('#chart3')            .select('.' + subject)            .attr('class', subject + ' on')        const bars = d3.select('#chart3')            .selectAll('div')            .data(data3, function(d) {                return d.name            })        const newBars = bars.enter()            .append('div')                .attr('class', 'bar')                .style('width', 0)        newBars.merge(bars)            .transition()            .style('width', function(d) {                return (d[subject]-50)*3 + 'px'            })    }    render3('math')&lt;/script&gt; --&gt;&lt;h2&gt;Final Thoughts&lt;/h2&gt;&lt;p&gt;I express how fun this was.  I have always viewed d3 as something so low level I would never be able to touch.  The tutorial was super fun and very approachable.  Any other resources that I have seen to start learning d3 appear to be very time consuming before you start writing code and digging into it yourself. These examples were great, I was able to get started creating visualizations in no more than 5 minutes of reading.  Now that I feel like I have a shallow understanding of how it works I feel better prepared to dive in.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/d3-day3</guid></item><item><title>Creating Reusable Bash Scripts</title><link>https://waylonwalker.com/reusable-bash</link><description>Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.</description><content:encoded>&lt;p&gt;Bash is a language that is quite useful for automation no matter what language you write in. Bash can do so many powerful system-level tasks. Even if you are on windows these days you are likely to come across bash inside a cloud VM, Continuous Integration, or even inside of docker.&lt;/p&gt;&lt;p&gt;I have three techniques that help me write more composable bash scripts.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="#functions"&gt;functions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#arguments"&gt;Arguments&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#positional-arguments"&gt;positional arguments&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#all-arguments"&gt;All Arguments&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#error-handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#main-script"&gt;main script&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr /&gt;&lt;h2&gt;Functions&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Break scripts down into reusable components&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Functions in bash are quite simple. They are something that I wish I would have started using long ago. They make your code much more reusable. I often use them in my aliases as well since they can simplify the process and allow more flexibility.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;syntax&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;#!/bin/sh# hello_worldhello_world () {    echo "hello world"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Source the file to load the function and run it from the terminal.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;run it&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;source hello_worldhello_world&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;outputs&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;hello world&lt;/code&gt;&lt;/pre&gt;&lt;/h2&gt;&lt;h2&gt;Arguments&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Make functions a little more flexible&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Arguments and options are quite a bit more complex in bash. For now, we will focus on the basics which are not all that bad.&lt;/p&gt;&lt;h3&gt;positional arguments&lt;/h3&gt;&lt;p&gt;&lt;em&gt;easiest and most common to use&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Positional arguments can be pulled out quite easily using &lt;code&gt;$1&lt;/code&gt; for the first one, &lt;code&gt;$2&lt;/code&gt; for the second, and so on.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; &lt;code&gt;$0&lt;/code&gt; is the command that was called. You will see this often used to find the command called to open up your current shell.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;syntax&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;#!/bin/sh# hellohello () {    echo "hello $1"&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;run it&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;source hellohello Waylon&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have a function that accepts positional arguments and we can call it by passing things into it.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;outputs&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;hello Waylon&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More than one argument would be ignored since we are only looking at &lt;code&gt;$1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;run it&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;source hellohello Waylon Walker&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;outputs&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;hello Waylon&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just the same as before since we do not use the second argument.&lt;/p&gt;&lt;h3&gt;All Arguments&lt;/h3&gt;&lt;p&gt;Bash has another special variable &lt;code&gt;$@&lt;/code&gt; that stores &lt;strong&gt;all arguments&lt;/strong&gt; in one.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;syntax&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;#!/bin/sh# hellohello () {    echo "hello $@"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just the same as before.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;run it&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;source hellohello Waylon Walker&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the function will output all arguments that are passed into it since we are using the &lt;code&gt;$@&lt;/code&gt; variable.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;outputs&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;hello Waylon Walker&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;h2&gt;Error Handling&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Super powers in a single line&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The easiest and most common way to handle an error in bash is through the use of the logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and) and &lt;code&gt;||&lt;/code&gt; (or).&lt;/p&gt;&lt;p&gt;Here I have a concrete example from earlier today. I was creating a bash script to run a python script from cron. The bash script is there to make sure that we have the python environment, activate it, and run. If it doesn't have it, it should create it.&lt;/p&gt;&lt;p&gt;``` bash{15-19}{numberLines: true}&lt;/p&gt;&lt;h1&gt;creates the conda environment&lt;/h1&gt;&lt;p&gt;create_env() {    conda create -n "$1" python=3.8    conda activate "$1"    pip install -r requirements.txt}&lt;/p&gt;&lt;h1&gt;checks if the conda environment exists&lt;/h1&gt;&lt;p&gt;env_exists() {conda info --envs | awk '{print $1}' | tail -n +3 | grep -w "$1" &amp;gt; /dev/null}&lt;/p&gt;&lt;h1&gt;creates the conda environment if it doesn't exist&lt;/h1&gt;&lt;p&gt;create_if () {env_exists "$1" &amp;amp;&amp;amp; echo "environment exists" || create_env "$1"}&lt;/p&gt;&lt;p&gt;create_if my_env&lt;pre class="highlight"&gt;&lt;code&gt;If we look at the `create_if` function, it will check if the environment exists if there is a passing status code `0`, then it will run `echo "environment exists"` otherwise it will run `create_env $1`.**note** Inside of `env_exists` grep will look for whole words if there is a match it will give a status code 0 if it finds a match and not 0 if there is no match.---## main script\_`if __name__ == " __main__"`\_The last thing I want to discuss is making a bash script both runnable and sourceable. This makes it so that you can `source filename.sh` and run each function individually, or `bash filename.sh` to run the script. This is a similar concept to `if __name__ == " __main__"` from python.I did try this from bash and zsh with success. The following is an example that would pass all arguments into a main function._&amp;lt;small&amp;gt;&amp;lt;mark&amp;gt;syntax&amp;lt;/mark&amp;gt;&amp;lt;/small&amp;gt;_``` bashif [["${BASH_SOURCE[0]}" == "${0}" ]]; then    main "$@"fi&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Extending the example above that created a python example if necessary we can create the env if necessary, activate the environment, and run the script.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;syntax&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;if [["${BASH_SOURCE[0]}" == "${0}" ]]; thencreate_if my_envconda activate my_envpython script.pyfi&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using this syntax to run our "main" functions will allow us to both runs the script or source the script to utilize the functions that we created.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/reusable-bash</guid></item><item><title>remove git cruft</title><link>https://waylonwalker.com/git-rm-cruft</link><description>&lt;p&gt;cover: "./nathan-dumlao-523529-unsplash-crop.jpg"cover: "./rawpixel-1055774-unsplash.jpg"&lt;/p&gt;&lt;h2&gt;inspiration&lt;/h2&gt;&lt;p&gt;&lt;a href="https://blog.ostermiller.org/removing-and-purging-files-from-git-history/"&gt;https://blog.ostermiller.org/removing-and-purging-files-from-git-history/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git log --all --pretty=format: --name-only --diff-filter=D | sed -r 's|[^/]+$||g' | sort -u&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch FILE_LIST' --prune-empty -f -- --all&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;rm -rf .git/refs/original/git reflog expire --expire=now --allgit gc --aggressive --prune=now&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git push origin --force --allgit push origin --force --tags&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd MY_LOCAL_GIT_REPOgit fetch origingit rebasegit reflog expire --expire=now --allgit gc --aggressive --prune=now&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/git-rm-cruft</guid></item><item><title>Scripting Tmux Layouts</title><link>https://waylonwalker.com/scripting-tmux-layouts</link><description>This is how I script a tmux layout</description><content:encoded>&lt;p&gt;This is how I script a tmux layout&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt; bash -c "tmux new-session -t 'editor' -d;\    tmux split-window -v 'zsh';    tmux send-keys nvim Space /src/ Space +GFiles C-m; \    tmux rotate-window; \    tmux select-pane -U; \    tmux -2 attach-session -d    "&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/scripting-tmux-layouts</guid></item><item><link>https://waylonwalker.com/pyspark-v-pandas</link><description></description><guid isPermaLink="false">https://waylonwalker.com/pyspark-v-pandas</guid></item><item><title>Markdown Cli</title><link>https://waylonwalker.com/markdown-cli</link><description>This is a post that may be a work in progress for awhile, Its a collections of
thoughts on managing my blog, but could be translated into anythiung that is
just a collection of markdown.</description><content:encoded>&lt;p&gt;This is a post that may be a work in progress for awhile, Its a collections ofthoughts on managing my blog, but could be translated into anythiung that isjust a collection of markdown.&lt;/p&gt;&lt;h2&gt;Listing things&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;posts&lt;/li&gt;&lt;li&gt;tags&lt;/li&gt;&lt;li&gt;draft posts&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;data&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;frontmatter&lt;/li&gt;&lt;li&gt;filepath&lt;/li&gt;&lt;li&gt;content&lt;/li&gt;&lt;li&gt;template&lt;/li&gt;&lt;li&gt;html&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;render content&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Markdown.Markdown&lt;/li&gt;&lt;li&gt;support extentsions&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;frontmatter cleaning.&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;provide ways to hook in or clean up the frontmatter&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Markata.Markata methods&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;render&lt;/li&gt;&lt;li&gt;save&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Markata.Post methods&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;load&lt;/li&gt;&lt;li&gt;render&lt;/li&gt;&lt;li&gt;save&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Markata plugins&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;before_load&lt;/li&gt;&lt;li&gt;before_post_load&lt;/li&gt;&lt;li&gt;after_load&lt;/li&gt;&lt;li&gt;after_post_load&lt;/li&gt;&lt;li&gt;before_save&lt;/li&gt;&lt;li&gt;before_post_save&lt;/li&gt;&lt;li&gt;after_save&lt;/li&gt;&lt;li&gt;after_post_save&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Markata plugins&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;cleanse_frontmatter&lt;/li&gt;&lt;li&gt;html_feed&lt;/li&gt;&lt;li&gt;json_feed&lt;/li&gt;&lt;li&gt;rss_feed&lt;/li&gt;&lt;li&gt;save_posts&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;CLI&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ markata list tagspythondata&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$ markata[  {     "title": "post title",    "description": "this is a post",    "filepath": "path_to.md",    "content": "the content of the post",    "html": "&amp;lt;p&amp;gt;the content of the post&amp;lt;/p&amp;gt;"    },    ...]&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/markdown-cli</guid></item><item><title>Vim Notes</title><link>https://waylonwalker.com/vim-notes</link><description>none</description><content:encoded>&lt;h1&gt;vim notes&lt;/h1&gt;&lt;h2&gt;Using c to change text&lt;/h2&gt;&lt;p&gt;I have gone quite awhile without using &lt;code&gt;c&lt;/code&gt; and instead using &lt;code&gt;d&lt;/code&gt;.  The reason that I started using &lt;code&gt;c&lt;/code&gt; is because it automatically places you into insert mode.  This not only saves me one keystroke for commands such as &lt;code&gt;diwi&lt;/code&gt; is now &lt;code&gt;ciw&lt;/code&gt;, but it also works with the repeat &lt;code&gt;.&lt;/code&gt; command!!!  This is huge.  When refactoring a document I had been creating a macro to change one word to another, using &lt;code&gt;c&lt;/code&gt; instead of &lt;code&gt;d&lt;/code&gt; allows the use of the &lt;code&gt;.&lt;/code&gt; rather than needing to create a macro.&lt;/p&gt;&lt;h2&gt;Case for vim&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Sublime/VSCode cannot&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;edit a macro register&lt;/li&gt;&lt;li&gt;register&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;autocomplete&lt;/h2&gt;&lt;p&gt;&lt;C-x&gt; &lt;C-p&gt; repeats previously typed text&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;1. Whole lines                                     |i CTRL-X CTRL-L|2. keywords in the current file                    |i CTRL-X CTRL-N|3. keywords in 'dictionary'                        |i CTRL-X CTRL-K|4. keywords in 'thesaurus', thesaurus-style        |i CTRL-X CTRL-T|5. keywords in the current and included files      |i CTRL-X CTRL-I|6. tags                                            |i CTRL-X CTRL-]|7. file names                                      |i CTRL-X CTRL-F|8. definitions or macros                           |i CTRL-X CTRL-D|9. Vim command-line                                |i CTRL-X CTRL-V|10. User defined completion                        |i CTRL-X CTRL-U|11. omni completion                                |i CTRL-X CTRL-O|12. Spelling suggestions                           |i CTRL-X s|13. keywords in 'complete'                         |i CTRL-N|&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;z-commands&lt;/h2&gt;&lt;p&gt;&lt;code&gt;zn&lt;/code&gt;        Fold none: reset 'foldenable'.  All folds will be open.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/vim-notes</guid></item><item><title>Thanks For Subscribing</title><link>https://waylonwalker.com/thank-you</link><description>You're awesome! Thanks for subscribing to my newsletter.</description><content:encoded>&lt;p&gt;&lt;meta name='og:article:modified_time' content='2020-06-23T14:53:23Z'/&gt;&lt;/p&gt;&lt;h1&gt;✨ You're Awesome&lt;/h1&gt;&lt;p&gt;Thank you so much for subscribing to my newsletter.  It's still early days, please let me know what you want to hear about, I would love to get the conversation started!&lt;/p&gt;&lt;p&gt;My hope is that you find some wicked sweet content here and stay tuned for more, but if you dont like it you can opt-out at any time.&lt;/p&gt;&lt;h2&gt;What to expect&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Weekly inspirational message based on my experiences breaking into the industry&lt;/li&gt;&lt;li&gt;monthly-ish message about what is going on new posts, life, updates&lt;/li&gt;&lt;li&gt;Future annouce premium content ( let me know what you think it should be )&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/thank-you</guid></item><item><title>Quickly Edit Posts</title><link>https://waylonwalker.com/quickly-edit-posts</link><description>Recently I automated starting new posts with a python script.  Today I want to
work on the next part that is editing those posts quickly. https://waylonwalker.com/automating-my-post-starter Check out this post about setting up my posts with python 🐍 </description><content:encoded>&lt;p&gt;Recently I automated starting new posts with a python script.  Today I want towork on the next part that is editing those posts quickly.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/automating-my-post-starter"&gt;https://waylonwalker.com/automating-my-post-starter&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Check out this post about setting up my posts with python 🐍&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Enter Bash&lt;/h2&gt;&lt;p&gt;For the process of editing a post I just need to open the file in vim quickly.I dont need much in the way of parsing and setting up the frontmatter.  I thinkthis is a simple job for a &lt;strong&gt;bash&lt;/strong&gt; script and fzf.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;change to the root of my blog&lt;/li&gt;&lt;li&gt;fuzzy find the post&lt;/li&gt;&lt;li&gt;open it with vim&lt;/li&gt;&lt;li&gt;change back to the directory I was in&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;bash function&lt;/h2&gt;&lt;p&gt;For this I am going to go with a bash function.  This is partly due to beingable to track where I was and get back.  Also the line with nvim will run fzfeverytime you source your &lt;code&gt;~/.alias&lt;/code&gt; file which is not what we want.&lt;/p&gt;&lt;p&gt;Lets setup the &lt;strong&gt;boilerplate&lt;/strong&gt;.  Its going to create a function called ep&lt;code&gt;"edit post"&lt;/code&gt;, track our current directory, create a sub function &lt;code&gt;_ep&lt;/code&gt;.  Thencall that function and cd back to where we were no matter if &lt;code&gt;_ep&lt;/code&gt; fails orsucceeds.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;boilerplate&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ep () {    _dir=$(pwd)    _ep () {        # open file here    }    _ep &amp;amp;&amp;amp; cd $_dir || cd $_dir}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/reusable-bash"&gt;https://waylonwalker.com/reusable-bash&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;check out this post for more information about writing reusable bash scripts.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;FZF&lt;/h2&gt;&lt;p&gt;Let's focus in on that &lt;code&gt;_ep&lt;/code&gt; function here that is going to do the bulk of thework to edit the post.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;cd to where I want to edit from&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd ~/git/waylonwalkerv2/&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Next I need to find all markdown pages within my posts directory.  There isprobably a better way to filter with the &lt;code&gt;find&lt;/code&gt; command directly, but I am notworried about perf here and I knew how to do it without google.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;find all markdown&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;find ~/git/waylonwalkerv2/src/pages/ | grep .md$&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Now that we can list all potential posts, sending the selected post back toneovim is as easy as piping those files into fzf inside of a commandsubstitution that is called with neovim.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;putting together the edit command&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;$EDITOR $(find ~/git/waylonwalkerv2/src/pages/ | grep .md$ | fzf)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Final Script&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;&lt;mark&gt;final ep function&lt;/mark&gt;&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ep () {    _dir=$(pwd)    _ep () {        cd ~/git/waylonwalkerv2/        $EDITOR $(find ~/git/waylonwalkerv2/src/pages/ | grep .md$ | fzf)    }    _ep &amp;amp;&amp;amp; cd $_dir || cd $_dir}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/quickly-edit-posts</guid></item><item><title>Practice your craft</title><link>https://waylonwalker.com/practice-your-craft</link><description>&lt;h2&gt;Show up For Practice&lt;/h2&gt;&lt;h2&gt;how I practice&lt;/h2&gt;&lt;h2&gt;What Works for You&lt;/h2&gt;</description><guid isPermaLink="false">https://waylonwalker.com/practice-your-craft</guid></item><item><title>Minimal Python Package</title><link>https://waylonwalker.com/minimal-python-package</link><description>What does it take to create an installable python package that can be hosted on pypi? This post is somewhat inspired by the bottle framework, which is famously created as a single python module.  Yes, a whole web framework is written in one file. The</description><content:encoded>&lt;p&gt;What does it take to create an installable python package that can be hosted on pypi?&lt;/p&gt;&lt;h2&gt;What is the minimal python package&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;setup.py&lt;/li&gt;&lt;li&gt;my_module.py&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This post is somewhat inspired by the bottle framework, which is famously created as a single python module.  Yes, a whole web framework is written in one file.&lt;/p&gt;&lt;h2&gt;Directory structure&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;.├── setup.py└── my_pipeline.py&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;setup.py&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from setuptools import setupsetup(    name="",    version="0.1.0",    py_modules=["my_pipeline", ],    install_requires=["kedro"],)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;name&lt;/h2&gt;&lt;p&gt;The name of the package can contain any letters, numbers, "_", or "-".  Even if it's for internal/personal consumption only I usually check for discrepancy with pypi so that you don't run into conflicts. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note that pypi treats "-" and "_" as the same thing, beware of name clashes&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;version&lt;/h2&gt;&lt;p&gt;This is the version number of your package.  Most packages follow&lt;a href="semver.org"&gt;semver&lt;/a&gt;.  At a high level its three numbers separated by a &lt;code&gt;.&lt;/code&gt; that follow the format &lt;code&gt;major.minor.patch&lt;/code&gt;.  It's a common courtesy to only break APIs on major changes, new releases on minor, and fixes on patch.  This can become much more blurry in practice so checkout &lt;a href="https://semver.org/"&gt;semver.org&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;py_modules&lt;/h2&gt;&lt;p&gt;Typically most packages use the &lt;code&gt;packages&lt;/code&gt; argument combined with&lt;code&gt;find_packages&lt;/code&gt;, but for this minimal package, we are only creating one &lt;code&gt;.py&lt;/code&gt; file.&lt;/p&gt;&lt;h2&gt;Using packages instead&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from setuptools import setup, find_packagessetup(    name="",    version="0.1.0",    packages=find_packages(),    install_requires=["kedro"],)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;install_requires&lt;/h2&gt;&lt;p&gt;These are your external dependencies that come from pypi.  They go in this list but are often pulled in from a file called &lt;code&gt;requirements.txt&lt;/code&gt;.  Other developers may look for this file and want to do a &lt;code&gt;pip install -rrequirements.txt&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Clean?&lt;/h2&gt;&lt;p&gt;One thing to be careful of here is that everything sits at the top level API, when you users import your module and hit tab they are going to see a lot of stuff unless you hide all of your internal functions behind an &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Minimal&lt;/h2&gt;&lt;p&gt;Can you create a python package with less than two files and less than 8 lines? Should you?  I really like a minimal point to get started from for quick and simple prototypes.  You can always pull a more complicated &lt;code&gt;cookiecutter&lt;/code&gt; template later if the project is successful.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/minimal-python-package</guid></item><item><title>SLIDES - understanding python *args and **kwargs</title><link>https://waylonwalker.com/python-args-kwargs-slides</link><description>Python `*args` and `**kwargs` are super useful tools, that when used properly can make you code much simpler and easier to maintain.  Large manual conversions from a dataset to function arguments can be packed and unpacked into lists or dictionaries. Beware though, this power **can** lead to some really unreadable/unusable code if done wrong.</description><content:encoded>&lt;p&gt;I generally post these as a carousel on LinkedIn based on a full article.  Let mw know what you think of it shown inside of a blog &lt;a href="https://twitter.com/_WaylonWalker"&gt;@_waylonwalker&lt;/a&gt;.&lt;/p&gt;&lt;iframe src="https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:6678285914826911744" height="587" width="504" frameborder="0" allowfullscreen="" title="Embedded post"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;&lt;img alt="python args and kwargs" src="https://waylonwalker.com/python-args-kwargs.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;See the full article &lt;a href="https://waylonwalker.com/python-args-kwargs"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Slides&lt;/h2&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="1" src="/args-kwargs-slide-1.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="2" src="/args-kwargs-slide-2.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="3" src="/args-kwargs-slide-3.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="4" src="/args-kwargs-slide-4.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="5" src="/args-kwargs-slide-5.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="6" src="/args-kwargs-slide-6.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="7" src="/args-kwargs-slide-7.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="8" src="/args-kwargs-slide-8.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="9" src="/args-kwargs-slide-9.png" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;img alt="10" src="/args-kwargs-slide-10.png" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-args-kwargs-slides</guid></item><item><title>reasons-to-kedro</title><link>https://waylonwalker.com/reasons-to-kedro</link><description>There are many reasons that you should be using kedro.  If you are on a team of
Data Scientists/Data Engineers processing DataFrames from many data sources
should be considering a pipeline framework.  Kedro is a great option that
provides many benefi</description><content:encoded>&lt;iframe src="https://anchor.fm/waylon-walker/embed/episodes/reasons-to-kedro-en6kr3" height="102px" width="400px" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;p&gt;There are many reasons that you should be using kedro.  If you are on a team ofData Scientists/Data Engineers processing DataFrames from many data sourcesshould be considering a pipeline framework.  Kedro is a great option thatprovides many benefits for teams to collaborate, develop, and deploy datapipelines&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/what-is-kedro"&gt;https://waylonwalker.com/what-is-kedro&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Starter Template&lt;/h2&gt;&lt;p&gt;Kedro makes it super easy to get started with their cli that utilizescookiecutter under the hood.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n my-new-project -y python=3.8kedro newkedro installkedro run&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/create-new-kedro-project"&gt;https://waylonwalker.com/create-new-kedro-project&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;read more about how to start your first kedro project here&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Collaboration&lt;/h2&gt;&lt;p&gt;Kedro provides many tools that help teams collaborate on a single codebase.While writing monolithic scripts it can be easy to pin yourself in a cornerwhere it is difficult to have multiple people making changes to thenotebook/script at the same time.  Kedro helps guide your team to break yourproject down into small pieces that different members of the team can work onin parallel.&lt;/p&gt;&lt;h3&gt;sharable catalog&lt;/h3&gt;&lt;p&gt;Kedro makes it easy to collaborate with members who aren't even working on thepipeline.  I often see team members who want to investigate datasets fromdifferent points in the pipeline.  Kedro makes it really easy for them to loadit into python.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;for python users&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Share catalog entries with folks doing EDA.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;catalog.load('main_table')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;for non-python users&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For those who may not be using python, we can easily kick out a CSV version ofthat &lt;code&gt;main_table&lt;/code&gt; that they can get from s3 or your cloud storage solution ofchoice.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;master_table:  type: pandas.CSVDataSet  filepath: s3://bucket/data/03_primary/master_table.csv  layer: primary&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;for the SQL folks&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We aren't even constrained to those who only use python or excel, we can kickout any kind of dataset that python can output.  Kedro even comes with manyDataSet types out of the box so that we don't have to write any read/writecode.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;master_table:  type: SQLTableDataSet  table_name: master_table  credentials: postgres&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;small nodes over monolithic scripts&lt;/h3&gt;&lt;p&gt;As I said before single notebooks/scripts are really hard to collaborate on.  Ihave seen Data Engineers sitting idle waiting to get their changes manuallyadded into the master notebook.  When you find yourself in this situation, finda better solution.  It's time to break things down into individual modules andutilize a version control system that can automatically merge changes in.&lt;/p&gt;&lt;p&gt;Kedro encourages the use of git version control and storing all node functionsinside of modules while still making it really easy to load data into anotebook/shell and start trying out new things.&lt;/p&gt;&lt;h2&gt;No More read and write code&lt;/h2&gt;&lt;p&gt;As I said earlier kedro comes with datasets for the most popular outputformats.  It is also backed by a really amazing library called &lt;code&gt;fsspec&lt;/code&gt;, thislibrary makes the filesystem that you are storing agnostic to how you write toit.  This means that the kedro library utilizes &lt;code&gt;fsspec&lt;/code&gt; under the hood andwrites to the file as if it was to disk, but based on the prefix to the file itmay actually be writing to the local filesystem, gcp, azure blob, or s3.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;custom DataSets&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If kedro does not have a &lt;code&gt;DataSet&lt;/code&gt; for the format that you need to read orwrite you can easily create your own custom &lt;code&gt;DataSet&lt;/code&gt;  all you need to do isinherit from &lt;code&gt;kedro.io.AbstractDataSet&lt;/code&gt; and create methods for &lt;code&gt;__init__&lt;/code&gt;,&lt;code&gt;_load&lt;/code&gt;, &lt;code&gt;_save&lt;/code&gt;, &lt;code&gt;_exists&lt;/code&gt;, and &lt;code&gt;_describe&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Check out this example from their docs.  I removed the docstrings for brevity,you can see the entire &lt;code&gt;DataSet&lt;/code&gt; in their&lt;a href="https://kedro.readthedocs.io/en/0.15.2/03_tutorial/03_set_up_data.html?highlight=custom%20dataset#creating-custom-datasets"&gt;docs&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The complete example all in one was only available in an older version, more up to date &lt;a href="https://kedro.readthedocs.io/en/0.16.6/07_extend_kedro/01_custom_datasets.html?highlight=custom%20dataset"&gt;docs&lt;/a&gt; have a good writeup that walks through everything separately.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from os.path import isfilefrom typing import Any, Union, Dictimport pandas as pdfrom kedro.io import AbstractDataSetclass ExcelLocalDataSet(AbstractDataSet):    def _describe(self) -&amp;gt; Dict[str, Any]:        return dict(filepath=self._filepath,                    engine=self._engine,                    load_args=self._load_args,                    save_args=self._save_args)    def __init__(        self,        filepath: str,        engine: str = "xlsxwriter",        load_args: Dict[str, Any] = None,        save_args: Dict[str, Any] = None,    ) -&amp;gt; None:        self._filepath = filepath        default_save_args = {}        default_load_args = {"engine": "xlrd"}        self._load_args = {**default_load_args, **load_args} \            if load_args is not None else default_load_args        self._save_args = {**default_save_args, **save_args} \            if save_args is not None else default_save_args        self._engine = engine    def _load(self) -&amp;gt; Union[pd.DataFrame, Dict[str, pd.DataFrame]]:        return pd.read_excel(self._filepath, **self._load_args)    def _save(self, data: pd.DataFrame) -&amp;gt; None:        writer = pd.ExcelWriter(self._filepath, engine=self._engine)        data.to_excel(writer, **self._save_args)        writer.save()    def _exists(self) -&amp;gt; bool:        return isfile(self._filepath)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Execution order is taken care of&lt;/h2&gt;&lt;p&gt;As you build up complex pipelines containing 10's or 100's of nodes it becomesdifficult to splice in new nodes/steps without messing up or a framework tohelp.  Kedro simply needs a set of nodes that each takes in catalog entries asinput and output to catalog entries and it will figure out the order for you.&lt;/p&gt;&lt;p&gt;These nodes can be made for one-off purposes, take in functions from reusablelibraries, and even be dynamically generated from a configuration.  There isno need to worry about hand curating the execution order, that's all taken careof.&lt;/p&gt;&lt;h2&gt;Easily slice up a pipeline&lt;/h2&gt;&lt;p&gt;Since kedro is a DAG that takes in a pile of nodes and figures out all of thedependencies for you it knows a lot about your pipeline.  You can slice it up toonly the specific pieces that you need.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# single nodespipeline.only_nodes("node1")# single nodes and all of thier dependenciespipeline.to_nodes("node1", "node2")# from a dataset to all of its dependantspipeline.from_inputs("dataset1", "dataset2")# to a an outputs with all of its dependenciespipeline.to_outputs("dataset6", "dataset7")&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;plugins/hooks&lt;/h2&gt;&lt;p&gt;Creating your own modifications to how kedro behaves is made really simplethrough the use of hooks.  There are several hooks that happen at differentpoints in the kedro lifecycle.  For instance, you can hook in before pipelinerun or after pipeline run to do whatever your project needs.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/creating-the-kedro-preflight-hook"&gt;https://waylonwalker.com/creating-the-kedro-preflight-hook&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;pip install plugin&lt;/h3&gt;&lt;p&gt;There is a growing list of plugins available from pypi that is only a &lt;code&gt;pipinstall&lt;/code&gt; away.  Most of them are on&lt;a href="https://github.com/topics/kedro-plugin"&gt;GitHub&lt;/a&gt; and tagged as a&lt;a href="https://github.com/topics/kedro-plugin"&gt;kedro-plugin&lt;/a&gt; topic.&lt;/p&gt;&lt;h2&gt;flexible cli&lt;/h2&gt;&lt;p&gt;In the end, you have a cli for your project that can run your pipeline in allsorts of cool ways since it knows about each node's dependencies.  This makesrunning and scheduling production a breeze.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;# single nodeskedro run --node node1# single nodes and all of their dependencieskedro run --to-nodes node1,node2 # from a dataset to all of its dependentskedro run --from-inputs dataset1,dataset2# to outputs with all of their dependencieskedro run --to-outputs dataset6,dataset7&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Try it out&lt;/h2&gt;&lt;p&gt;Hopefully this post gave you the inspiration to get started today, if it did &lt;code&gt;pip install kedro&lt;/code&gt; and run &lt;code&gt;kedro new&lt;/code&gt; to try it out.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/reasons-to-kedro</guid></item><item><title>Productive one on one</title><link>https://waylonwalker.com/productive-one-on-one</link><description>Inspired by https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones</description><content:encoded>&lt;p&gt;&lt;img alt="" src="/static/Screenshot_20200221-114202.png" /&gt;Inspired by &lt;a href="https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones" title="https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones"&gt;https://m.soundcloud.com/front-end-happy-hour/episode-095-shot-for-shot-one-on-ones&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/productive-one-on-one</guid></item><item><title>⚙ How Python Tools Are Configured</title><link>https://waylonwalker.com/python-tool-config</link><description>There are various ways to configure python tools, config files, code, or
environment variables.  Let's look at a few projects that allow users to
configure them through the use of config files and how they do it. This will not include how they are im</description><content:encoded>&lt;p&gt;There are various ways to configure python tools, config files, code, orenvironment variables.  Let's look at a few projects that allow users toconfigure them through the use of config files and how they do it.&lt;/p&gt;&lt;h2&gt;Motivation&lt;/h2&gt;&lt;p&gt;This will not include how they are implemented, I've looked at a few and itsnot simple.  This will focus on where config is placed and the order in whichduplicates are resolved.&lt;/p&gt;&lt;p&gt;The motivation of this article is to serve as a bit of a reference guide forthose who may want to create their own package that needs configuration.&lt;/p&gt;&lt;h2&gt;Flake8&lt;/h2&gt;&lt;h3&gt;Global&lt;/h3&gt;&lt;p&gt;User settings can exist in the users &lt;code&gt;~/.config/flake8&lt;/code&gt; file to configure howflake8 runs on their machine.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;~/.config/flake8&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Per-Project&lt;/h3&gt;&lt;p&gt;Only One project config file will be considered, but allows for severaloptions.  These files all use the &lt;code&gt;ini&lt;/code&gt; format and must have a &lt;code&gt;[flake8]&lt;/code&gt;section  header to be consideered.&lt;/p&gt;&lt;p&gt;Selection of the config file can also be overridden by the &lt;code&gt;--config&lt;/code&gt; cli option.&lt;/p&gt;&lt;p&gt;An extra config file may be selected as &lt;code&gt;--append-config&lt;/code&gt;.  It will be read inlast and take highest precedence.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;tox.ini&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;setup.cfg&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;.pep8&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;.flake8&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Example Config&lt;/h2&gt;&lt;p&gt;&lt;em&gt;valid in any of the supported files&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-ini"&gt;[flake8]max-line-length = 88extend-ignore = E203, W503&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Options&lt;/h3&gt;&lt;p&gt;The number of options configured through config files is fairly short for &lt;code&gt;flake8&lt;/code&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;exclude&lt;/li&gt;&lt;li&gt;filename&lt;/li&gt;&lt;li&gt;select&lt;/li&gt;&lt;li&gt;ignore&lt;/li&gt;&lt;li&gt;max-line-length&lt;/li&gt;&lt;li&gt;format&lt;/li&gt;&lt;li&gt;max-complexity&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Black&lt;/h2&gt;&lt;p&gt;Black only supports &lt;code&gt;TOML&lt;/code&gt; file formats for configuration.&lt;/p&gt;&lt;h3&gt;Global&lt;/h3&gt;&lt;p&gt;Black provides no global config support.  If you really needed one I guess youcould make a cli alias.&lt;/p&gt;&lt;h3&gt;Per-Project&lt;/h3&gt;&lt;p&gt;Black states that it includes sane defaults that do not need configured, but ifyou need to do so it only supports &lt;code&gt;pyproject.toml&lt;/code&gt; or cli arguments.&lt;/p&gt;&lt;p&gt;Personally I believe that a lot of work went into making these sane defaultsreally good.  I personally do not make any configuration changes to black.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;pyproject.toml&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;&lt;em&gt;pyproject.toml&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-toml"&gt;[tool.black]line-length = 88target-version = ['py37']include = '\.pyi?$'exclude = '''(  /(      \.eggs         # exclude a few common directories in the    | \.git          # root of the project    | \.hg    | \.mypy_cache    | \.tox    | \.venv    | _build    | buck-out    | build    | dist  )/  | foo.py           # also separately exclude a file named foo.py in                     # the root of the project)'''&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Resolution&lt;/h2&gt;&lt;p&gt;Black will use teh &lt;code&gt;pyproject.toml&lt;/code&gt; file for configuration, then make anyaddional overrides through the use of command line arguments.&lt;/p&gt;&lt;h2&gt;MyPy&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mypy&lt;/code&gt; takes the cake for the most complex configuration.  Primarily becauseyou can configure how it treats different modules specifically.  These modulesmay be inside your codebase or installed and imported in.&lt;/p&gt;&lt;h3&gt;Per-Project&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;--config-file&lt;/li&gt;&lt;li&gt;mypy.ini&lt;/li&gt;&lt;li&gt;.mypy.ini&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Global&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;$XDG_CONFIG_HOME/mypy/config&lt;/li&gt;&lt;li&gt;~/.config/mypy/config&lt;/li&gt;&lt;li&gt;~/.mypy.ini&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Resolution&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;--config-file&lt;/li&gt;&lt;li&gt;mypy.ini&lt;/li&gt;&lt;li&gt;.mypy.ini&lt;/li&gt;&lt;li&gt;setup.cfg&lt;/li&gt;&lt;li&gt;$XDG_CONFIG_HOME/mypy/config&lt;/li&gt;&lt;li&gt;~/.config/mypy/config&lt;/li&gt;&lt;li&gt;~/.mypy.ini&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Example&lt;/h3&gt;&lt;p&gt;&lt;em&gt;mypy.ini&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# Global options:[mypy]python_version = 2.7warn_return_any = Truewarn_unused_configs = True# Per-module options:[mypy-mycode.foo.*]disallow_untyped_defs = True[mypy-mycode.bar]warn_return_any = False[mypy-somelibrary]ignore_missing_imports = True&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Kedro - framework&lt;/h2&gt;&lt;p&gt;Kedro is a unique one here.  It offers two distinctly different configurations,one for how the framework behaves and the other for actual project config.&lt;/p&gt;&lt;p&gt;Kedro does utilizes a &lt;code&gt;settings.py&lt;/code&gt; and &lt;code&gt;pyproject.toml&lt;/code&gt; to define a bit moreof the framework settings.  These are the outter layer of your project.&lt;/p&gt;&lt;p&gt;These files sit at the root of the project.&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/quantumblacklabs/kedro/blob/fb88cc2504ddbfc93b9b859ca436130b396b93c4/docs/source/12_faq/02_architecture_overview.md#pyprojecttoml"&gt;pyproject.toml&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This replaces much of what used to be specified in run.py.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;package_name&lt;/li&gt;&lt;li&gt;project_name&lt;/li&gt;&lt;li&gt;project_version&lt;/li&gt;&lt;li&gt;source_dir&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;a href="https://github.com/quantumblacklabs/kedro/blob/fb88cc2504ddbfc93b9b859ca436130b396b93c4/docs/source/12_faq/02_architecture_overview.md#settingspy"&gt;Settings.py&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;DISABLE_HOOKS_FOR_PLUGINS&lt;/li&gt;&lt;li&gt;HOOKS&lt;/li&gt;&lt;li&gt;SESSION_STORE_CLASS&lt;/li&gt;&lt;li&gt;SESSION_STORE_ARGS&lt;/li&gt;&lt;li&gt;CONTEXT_CLASS&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Kedro - project&lt;/h2&gt;&lt;p&gt;Within the project generally in the &lt;code&gt;src/conf&lt;/code&gt; directory kedro allows you toset both local and base configurations.  Local configurations will be gitignored and most commonly used for credentials.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;catalog&lt;/li&gt;&lt;li&gt;logging&lt;/li&gt;&lt;li&gt;credentials&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Config Loader&lt;/h3&gt;&lt;p&gt;Kedro lets you setup the config loader if you choose to do so.  You canconfigure the directories to look in as well as the glob pattern for files.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.config import ConfigLoaderconf_paths = ["conf/base", "conf/local"]conf_loader = ConfigLoader(conf_paths)conf_catalog = conf_loader.get("catalog*", "catalog*/**")&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;additional envs&lt;/h3&gt;&lt;p&gt;Additional to the &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt; config, kedro lets you specify an env atruntime through a &lt;code&gt;--env&lt;/code&gt; argumet or a &lt;code&gt;KEDRO_ENV&lt;/code&gt; variable.  setting this willadditionally tell kedro to reach into &lt;code&gt;conf/&amp;lt;env-name&amp;gt;&lt;/code&gt; for configuration.&lt;/p&gt;&lt;h3&gt;Resolution Order&lt;/h3&gt;&lt;p&gt;kedro will load each config starting from &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, then &lt;code&gt;env&lt;/code&gt; and willoverrite any colllisions along the way.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;precedence heirarchy&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;env&lt;/li&gt;&lt;li&gt;local&lt;/li&gt;&lt;li&gt;base&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Jinja Support&lt;/h3&gt;&lt;p&gt;As of &lt;code&gt;0.17.0&lt;/code&gt; kedro supports jinja2 templates in its yml configuration files.This is quite beneficial as catalogs can become incredebly repetative.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;{% for speed in ['fast', 'slow'] %}{{ speed }}-trains:    type: MemoryDataSet{{ speed }}-cars:    type: pandas.CSVDataSet    filepath: s3://${bucket_name}/{{ speed }}-cars.csv    save_args:        index: true{% endfor %}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;pytest&lt;/h2&gt;&lt;p&gt;Currently pytest is configured &lt;/p&gt;&lt;h2&gt;resolution order&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pytest&lt;/code&gt; will look for the existence of each of these files, if its a match itwill stop looking for new files, even if the file is empty.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;pytest.ini&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt; with &lt;code&gt;[tool.pytest.ini_options]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;tox.ini&lt;/code&gt; with &lt;code&gt;[pytest]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;setup.cfg&lt;/code&gt; with &lt;code&gt;[tool:pytest]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Multiple Config&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pytest&lt;/code&gt; is a bit unique here in that it allows for multiple configs.  There isa complex resolution for module specific configuration, but essentially it doesthe resolution highlighted above through a number of directories and returnsthe config closest to the test module.&lt;/p&gt;&lt;h2&gt;Example pytest config&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-ini"&gt;# pytest.ini[pytest]minversion = 6.0addopts = -ra -qtestpaths =    tests    integration&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Command Line Options&lt;/h2&gt;&lt;p&gt;As far as I am aware every option specified in a config file can also beconfigured or overridden at the command line.&lt;/p&gt;&lt;h2&gt;ipython&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Ipython&lt;/code&gt; is configured completely at a system level with python scripts withinthe users &lt;code&gt;~/.ipython/&lt;/code&gt; directory.  The user may have multiple profiles thatcan be created by running &lt;code&gt;ipython profile create [profilename]&lt;/code&gt; or specifiedby running &lt;code&gt;ipython --profile=[profilename]&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;Config Directory&lt;/h3&gt;&lt;p&gt;By default this is &lt;code&gt;~/.ipython&lt;/code&gt;, but an be configured by setting the&lt;code&gt;IPYTHONDIR&lt;/code&gt; environment variable or &lt;code&gt;--ipython-dir=&amp;lt;path&amp;gt;&lt;/code&gt; command lineoption.&lt;/p&gt;&lt;h3&gt;Example Config&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# sample ipython_config.pyc = get_config()c.TerminalIPythonApp.display_banner = Truec.InteractiveShellApp.log_level = 20c.InteractiveShellApp.extensions = [    'myextension']c.InteractiveShellApp.exec_lines = [    'import numpy',    'import scipy']c.InteractiveShellApp.exec_files = [    'mycode.py',    'fancy.ipy']c.InteractiveShell.autoindent = Truec.InteractiveShell.colors = 'LightBG'c.InteractiveShell.confirm_exit = Falsec.InteractiveShell.deep_reload = Truec.InteractiveShell.editor = 'nano'c.InteractiveShell.xmode = 'Context'c.PromptManager.in_template  = 'In [\#]: 'c.PromptManager.in2_template = '   .\D.: 'c.PromptManager.out_template = 'Out[\#]: 'c.PromptManager.justify = Truec.PrefilterManager.multi_line_specials = Truec.AliasManager.user_aliases = [ ('la', 'ls -al')]&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;CommandLine Overrides&lt;/h3&gt;&lt;p&gt;Every configurable value can be overridden from the command line.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ipython --ClassName.attribute=value&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Config Magic&lt;/h3&gt;&lt;p&gt;Configuration can be overridden at runtime with the &lt;code&gt;%config&lt;/code&gt; magic.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;%config IPCompleter.greedy = True&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Startup&lt;/h3&gt;&lt;p&gt;Every ipython profile has a startup directory where it will execute each &lt;code&gt;.py&lt;/code&gt;and &lt;code&gt;.ipy&lt;/code&gt; file on startup.  You can make additional configuration here, importmodules you want readily available, execute literally any python code you wantto at the startup of that particular profile.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-tool-config</guid></item><item><title>Follow Your Passion</title><link>https://waylonwalker.com/passion</link><description>none</description><content:encoded>&lt;h2&gt;Follow Your Passion&lt;/h2&gt;&lt;p&gt;&lt;em&gt;my journey into data science&lt;/em&gt;&lt;/p&gt;&lt;p&gt;In January 2018 I started work as a full time data scientist turning my passion into a career.  It is something that I didn't see myself doing 5 years ago, but is something that I love to do.  It combines my love of data, visualization, story telling, software development, and writing code.  Most of all it allows me to work in a space that promotes learning and creativity.  As a mechanical engineer for a company that has been building equipment for nearly a century the mechanical engineering is very well established I felt that there was not a lot of room for creativity.&lt;/p&gt;&lt;h2&gt;Find Your Role&lt;/h2&gt;&lt;p&gt;When I first started as a full time  mechanical engineer&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/passion</guid></item><item><title>gatsby-remark-embedder</title><link>https://waylonwalker.com/gatsby-remark-embedder</link><description>Inspired by discourse's link expansion I am rolling out expansions for one line links on the blog</description><content:encoded>&lt;iframe src="https://anchor.fm/waylon-walker/embed/episodes/gatsby-remark-embedder-en6l3j" height="102px" width="400px" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;p&gt;Inspired by discourse's link expansion I am rolling out expansions for one linelinks on the blog &lt;a href="https://waylonwalker.com"&gt;waylonwalker&lt;/a&gt;.  I was able to finda gatsby plugin&lt;a href="https://www.gatsbyjs.com/plugins/gatsby-remark-embedder/?=embed"&gt;gatsby-remark-embedder&lt;/a&gt;that expands one line links for social cards for popular platforms like twitterand YouTube through a repose from Kyle Mathews to my tweet.&lt;/p&gt;&lt;p&gt;&lt;a href="https://twitter.com/kylemathews/status/1329817928666005504"&gt;https://twitter.com/kylemathews/status/1329817928666005504&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Use Cases&lt;/h2&gt;&lt;p&gt;This covers a couple of use cases I have with very little effort.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Twitter&lt;/li&gt;&lt;li&gt;YouTube&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;install&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;npm i gatsby-remark-embedder gatsby-plugin-twitter&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This was super quick and simple to setup, the only thing that was extra was toinstall the &lt;code&gt;gatsby-plugin-twitter&lt;/code&gt; plugin as well as the&lt;code&gt;gatsby-remark-embedder&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;enable&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;// In your gatsby-config.jsmodule.exports = {  // Find the 'plugins' array  plugins: [    `gatsby-plugin-twitter`,    {      resolve: `gatsby-transformer-remark`,      options: {        plugins: [          {            resolve: `gatsby-remark-embedder`,            options: {              customTransformers: [                // Your custom transformers              ],              services: {                // The service-specific options by the name of the service              },            },          },          // Other plugins here...        ],      },    },  ],};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thats it, now I can embed tweets and YouTube videos by just leaving the link on a single line.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gatsby-remark-embedder</guid></item><item><title>It's not all about winning</title><link>https://waylonwalker.com/journey</link><description>This is my story into data science.</description><content:encoded>&lt;p&gt;&lt;em&gt;This is my story into data science.&lt;/em&gt;&lt;/p&gt;&lt;h1&gt;The Journey Begins&lt;/h1&gt;&lt;p&gt;I am addicted to the process of learning and improving my skills nearly to a fault. The reason I say nearly is because my addiction is fueled with results. I crave the output of my work enhance the work of others. I jump with joy as I see users gain insights they could have never imagined before. My mouth starts watering as I see their boring repetitive data mining activites be completed in a matter of seconds, opening up their mind to focus on their expertise. The day I stop learning will be the day that I start looking for another career path.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It's not all about winning.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;~Mom&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This happened to me in 2014. I have a mechanical engineering degree and had a really good position at the time. I owned full engineering control of a small subset of engine components. The problem was that Everything is so proprietary and hardly documented the process of learning did not click with me. I felt like I had learned a lot about the product early on, and was stuck without any more resources to learn more. On the side, I had started learning python and data science techniques to enhance my job.&lt;/p&gt;&lt;p&gt;&lt;img alt="mountains in the fog" src="https://d33wubrfki0l68.cloudfront.net/a093e6c28214bb9556a4e877f5d128cf77b82bd3/9c5c4/static/eberhard-grossgasteiger-382452-unsplash-6f1eb07825ef1b2165ea1a3805fff023.jpg" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;every time I feel like I have reached the peak of anyone topic the fog clears and I can now see a whole new mountain range that I did not know existed.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I was addicted. I felt like there is so much knowledge easily obtained online in my free time, and I was able to take it back to my job and achieve results. Every time I feel like I have reached the peak of anyone's topic the fog clears and I can now see a whole new mountain range that I did not know existed.&lt;/p&gt;&lt;h1&gt;Love the Journey&lt;/h1&gt;&lt;p&gt;By 2017 I was really good at gaining results for our business and decided to make the jump to the data science team. I have achieved great results, and have been recognized as a high contributor to our business. Still, I do not feel like I have won. My goals are always moving and will always be 3-6 months ahead of me. I truly enjoy the process of learning and providing value so much that I will never let myself sit back and think that I have won and its time to reap the rewards of my hard work. I will say that I am winning. Not because of any results, awards, or recognition, but because I am happy. I have found a career path that I really enjoy the journey and I am not just trying to get on the fast track to a destination.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/journey</guid></item><item><title>My favorite pandas pattern</title><link>https://waylonwalker.com/pandas-pattern</link><description>none</description><content:encoded>&lt;h1&gt;My favorite pandas pattern&lt;/h1&gt;&lt;p&gt;I work with a lot of transactional timeseries data that includes categories.  I often want to create timeseries plots with each category as its own line.  This is the method that I use almost data to achieve this result.  Typically the data that am working with changes very slowly and trends happen over years not days or weeks.  Plotting daily/weekly data tends to be noisy and hides the trend.  I use this pattern because it works well with my data and is easy to explain to my stakeholders.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdimport numpy as np% matplotlib inline&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Lets Fake some data&lt;/h2&gt;&lt;p&gt;Here I am trying to simulate a subset of a large transactional data set. This could be something like sales data, production data, hourly billing, anything that has a date, category, and value.  Since we generated this data we know that it is clean.  I am still going to assume that it contains some nulls, and an irregular date range.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;n = 365*5cols = {'level_0': 'date',        'level_1': 'item',        0: 'qty', }data = (pd.DataFrame(np.random.randint(0, 10, size=(n, 4)),                     columns=['paper', 'pencils', 'note cards', 'markers'],                     index=pd.date_range('1/1/2017', periods=n, freq='d'),                     )        .stack()        .to_frame()        .reset_index()        .rename(columns=cols))data.head()&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;qty&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;0&lt;/th&gt;      &lt;td&gt;2017-01-01&lt;/td&gt;      &lt;td&gt;paper&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;1&lt;/th&gt;      &lt;td&gt;2017-01-01&lt;/td&gt;      &lt;td&gt;pencils&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2&lt;/th&gt;      &lt;td&gt;2017-01-01&lt;/td&gt;      &lt;td&gt;note cards&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;3&lt;/th&gt;      &lt;td&gt;2017-01-01&lt;/td&gt;      &lt;td&gt;markers&lt;/td&gt;      &lt;td&gt;9&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;4&lt;/th&gt;      &lt;td&gt;2017-01-02&lt;/td&gt;      &lt;td&gt;paper&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h2&gt;The pattern&lt;/h2&gt;&lt;p&gt;Here I am going to take my groupby date and item, this will take care of duplicate entries with the same time stamp.  Select the value I want to sum on. unstack the items index into columns.  Resample the data by month.  I could easily use any of the &lt;a href="https://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases"&gt;available rules&lt;/a&gt;. Fill any missing months with 0, since there wasnt a transaction during that month. Apply a rolling window to get the annual sum.  I find that this helps to ground values in values that my stakeholders are used to seeing on a regular basis and reduces the need for them to recalculate in their head.  Then I am going to drop the nulls created by the rolling window for the first 11 rows.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = (data             .groupby(['date', 'item'])             .sum()             ['qty']             .unstack()             .resample('m')             .sum()             .fillna(0)             .rolling(12)             .sum()             .dropna()             )plot_data.head()&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;th&gt;note cards&lt;/th&gt;      &lt;th&gt;paper&lt;/th&gt;      &lt;th&gt;pencils&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2017-12-31&lt;/th&gt;      &lt;td&gt;1543.0&lt;/td&gt;      &lt;td&gt;1739.0&lt;/td&gt;      &lt;td&gt;1613.0&lt;/td&gt;      &lt;td&gt;1657.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-01-31&lt;/th&gt;      &lt;td&gt;1572.0&lt;/td&gt;      &lt;td&gt;1744.0&lt;/td&gt;      &lt;td&gt;1635.0&lt;/td&gt;      &lt;td&gt;1635.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-02-28&lt;/th&gt;      &lt;td&gt;1563.0&lt;/td&gt;      &lt;td&gt;1717.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-03-31&lt;/th&gt;      &lt;td&gt;1596.0&lt;/td&gt;      &lt;td&gt;1703.0&lt;/td&gt;      &lt;td&gt;1629.0&lt;/td&gt;      &lt;td&gt;1600.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-04-30&lt;/th&gt;      &lt;td&gt;1557.0&lt;/td&gt;      &lt;td&gt;1693.0&lt;/td&gt;      &lt;td&gt;1648.0&lt;/td&gt;      &lt;td&gt;1581.0&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data.plot(title='Rolling annual sum of Categorical Random Data');&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;For the Visual Learners&lt;/h2&gt;&lt;h3&gt;Groupby&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = (data             .groupby(['date', 'item'])             .sum()             )plot_data.head()&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;qty&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th rowspan="4" valign="top"&gt;2017-01-01&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;td&gt;9&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;note cards&lt;/th&gt;      &lt;td&gt;5&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;paper&lt;/th&gt;      &lt;td&gt;1&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;pencils&lt;/th&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-02&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h3&gt;Select Values&lt;/h3&gt;&lt;p&gt;In this case I chose to do this to avoid working with a multiple levels in the columns that would be created in the unstack() step.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = plot_data['qty']plot_data.head()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code&gt;date        item2017-01-01  markers       9            note cards    5            paper         1            pencils       42017-01-02  markers       4Name: qty, dtype: int32&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;unstack&lt;/h3&gt;&lt;p&gt;transform the last column in the index ('item') into rows.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = plot_data.unstack()plot_data.head()&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;th&gt;note cards&lt;/th&gt;      &lt;th&gt;paper&lt;/th&gt;      &lt;th&gt;pencils&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-01&lt;/th&gt;      &lt;td&gt;9&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;4&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-02&lt;/th&gt;      &lt;td&gt;4&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;7&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-03&lt;/th&gt;      &lt;td&gt;9&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;3&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-04&lt;/th&gt;      &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-05&lt;/th&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h3&gt;resample&lt;/h3&gt;&lt;p&gt;This step is important for irregular data in order to get the data into regular intervals.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = plot_data.resample('m').sum()plot_data.head()&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;th&gt;note cards&lt;/th&gt;      &lt;th&gt;paper&lt;/th&gt;      &lt;th&gt;pencils&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-31&lt;/th&gt;      &lt;td&gt;145&lt;/td&gt;      &lt;td&gt;128&lt;/td&gt;      &lt;td&gt;117&lt;/td&gt;      &lt;td&gt;146&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-02-28&lt;/th&gt;      &lt;td&gt;136&lt;/td&gt;      &lt;td&gt;140&lt;/td&gt;      &lt;td&gt;133&lt;/td&gt;      &lt;td&gt;135&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-03-31&lt;/th&gt;      &lt;td&gt;112&lt;/td&gt;      &lt;td&gt;145&lt;/td&gt;      &lt;td&gt;125&lt;/td&gt;      &lt;td&gt;163&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-04-30&lt;/th&gt;      &lt;td&gt;143&lt;/td&gt;      &lt;td&gt;148&lt;/td&gt;      &lt;td&gt;112&lt;/td&gt;      &lt;td&gt;147&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-05-31&lt;/th&gt;      &lt;td&gt;86&lt;/td&gt;      &lt;td&gt;134&lt;/td&gt;      &lt;td&gt;139&lt;/td&gt;      &lt;td&gt;141&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h3&gt;rolling&lt;/h3&gt;&lt;p&gt;I like to use rolling because it get the data into annual numbers, and reduces noise.  I have found that most of my datasets have patterns and trends that are greater than 1y.  This  is just due to the industry that I am in.  Play with the resample and rolling rules to fit the need of your own data.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = plot_data.rolling(12).sum()plot_data.head(20)&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;th&gt;note cards&lt;/th&gt;      &lt;th&gt;paper&lt;/th&gt;      &lt;th&gt;pencils&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2017-01-31&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-02-28&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-03-31&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-04-30&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-05-31&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-06-30&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-07-31&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-08-31&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-09-30&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-10-31&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-11-30&lt;/th&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;      &lt;td&gt;NaN&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2017-12-31&lt;/th&gt;      &lt;td&gt;1543.0&lt;/td&gt;      &lt;td&gt;1739.0&lt;/td&gt;      &lt;td&gt;1613.0&lt;/td&gt;      &lt;td&gt;1657.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-01-31&lt;/th&gt;      &lt;td&gt;1572.0&lt;/td&gt;      &lt;td&gt;1744.0&lt;/td&gt;      &lt;td&gt;1635.0&lt;/td&gt;      &lt;td&gt;1635.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-02-28&lt;/th&gt;      &lt;td&gt;1563.0&lt;/td&gt;      &lt;td&gt;1717.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-03-31&lt;/th&gt;      &lt;td&gt;1596.0&lt;/td&gt;      &lt;td&gt;1703.0&lt;/td&gt;      &lt;td&gt;1629.0&lt;/td&gt;      &lt;td&gt;1600.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-04-30&lt;/th&gt;      &lt;td&gt;1557.0&lt;/td&gt;      &lt;td&gt;1693.0&lt;/td&gt;      &lt;td&gt;1648.0&lt;/td&gt;      &lt;td&gt;1581.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-05-31&lt;/th&gt;      &lt;td&gt;1624.0&lt;/td&gt;      &lt;td&gt;1674.0&lt;/td&gt;      &lt;td&gt;1632.0&lt;/td&gt;      &lt;td&gt;1592.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-06-30&lt;/th&gt;      &lt;td&gt;1582.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;      &lt;td&gt;1657.0&lt;/td&gt;      &lt;td&gt;1593.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-07-31&lt;/th&gt;      &lt;td&gt;1662.0&lt;/td&gt;      &lt;td&gt;1654.0&lt;/td&gt;      &lt;td&gt;1680.0&lt;/td&gt;      &lt;td&gt;1613.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-08-31&lt;/th&gt;      &lt;td&gt;1654.0&lt;/td&gt;      &lt;td&gt;1617.0&lt;/td&gt;      &lt;td&gt;1650.0&lt;/td&gt;      &lt;td&gt;1616.0&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h3&gt;dropna&lt;/h3&gt;&lt;p&gt;get rid of the first 11 null rows&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;plot_data = plot_data.dropna()plot_data.head(10)&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;style scoped&gt;    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }&lt;/style&gt;&lt;table border="1" class="dataframe"&gt;  &lt;thead&gt;    &lt;tr style="text-align: right;"&gt;      &lt;th&gt;item&lt;/th&gt;      &lt;th&gt;markers&lt;/th&gt;      &lt;th&gt;note cards&lt;/th&gt;      &lt;th&gt;paper&lt;/th&gt;      &lt;th&gt;pencils&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;date&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;      &lt;th&gt;&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;th&gt;2017-12-31&lt;/th&gt;      &lt;td&gt;1543.0&lt;/td&gt;      &lt;td&gt;1739.0&lt;/td&gt;      &lt;td&gt;1613.0&lt;/td&gt;      &lt;td&gt;1657.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-01-31&lt;/th&gt;      &lt;td&gt;1572.0&lt;/td&gt;      &lt;td&gt;1744.0&lt;/td&gt;      &lt;td&gt;1635.0&lt;/td&gt;      &lt;td&gt;1635.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-02-28&lt;/th&gt;      &lt;td&gt;1563.0&lt;/td&gt;      &lt;td&gt;1717.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-03-31&lt;/th&gt;      &lt;td&gt;1596.0&lt;/td&gt;      &lt;td&gt;1703.0&lt;/td&gt;      &lt;td&gt;1629.0&lt;/td&gt;      &lt;td&gt;1600.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-04-30&lt;/th&gt;      &lt;td&gt;1557.0&lt;/td&gt;      &lt;td&gt;1693.0&lt;/td&gt;      &lt;td&gt;1648.0&lt;/td&gt;      &lt;td&gt;1581.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-05-31&lt;/th&gt;      &lt;td&gt;1624.0&lt;/td&gt;      &lt;td&gt;1674.0&lt;/td&gt;      &lt;td&gt;1632.0&lt;/td&gt;      &lt;td&gt;1592.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-06-30&lt;/th&gt;      &lt;td&gt;1582.0&lt;/td&gt;      &lt;td&gt;1645.0&lt;/td&gt;      &lt;td&gt;1657.0&lt;/td&gt;      &lt;td&gt;1593.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-07-31&lt;/th&gt;      &lt;td&gt;1662.0&lt;/td&gt;      &lt;td&gt;1654.0&lt;/td&gt;      &lt;td&gt;1680.0&lt;/td&gt;      &lt;td&gt;1613.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-08-31&lt;/th&gt;      &lt;td&gt;1654.0&lt;/td&gt;      &lt;td&gt;1617.0&lt;/td&gt;      &lt;td&gt;1650.0&lt;/td&gt;      &lt;td&gt;1616.0&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;th&gt;2018-09-30&lt;/th&gt;      &lt;td&gt;1669.0&lt;/td&gt;      &lt;td&gt;1648.0&lt;/td&gt;      &lt;td&gt;1638.0&lt;/td&gt;      &lt;td&gt;1634.0&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pandas-pattern</guid></item><item><title>Review of the git-auto-commit-action</title><link>https://waylonwalker.com/git-auto-commit-action-review</link><description>It's a really cool GitHub action that will automatically commit files changed during the action. I was using this to render a new readme based on a template.</description><content:encoded>&lt;p&gt;Check out the repo for &lt;a href="https://github.com/stefanzweifel/git-auto-commit-action"&gt;git-auto-commit-action&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It's a really cool GitHub action that will automatically commit files changed during the action.  I was using this to render a new readme based on a template.&lt;/p&gt;&lt;p&gt;This has been by far the easiest way to commit back to a repo that I have seen.  Other patterns often require fully setting up the git user and everything.  While it's not all that hard, this action already has all of that covered.&lt;/p&gt;&lt;p&gt;You must give it a commit message and thats it.  Optionally you can configure a number of things.  Its possible to configure the &lt;code&gt;commit_user_name&lt;/code&gt;, &lt;code&gt;commit_user_email&lt;/code&gt;, and &lt;code&gt;commit_author&lt;/code&gt;.  I often also scope the &lt;code&gt;file_pattern&lt;/code&gt; to a certain subset of files.&lt;/p&gt;&lt;hr /&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/github-actions-syntax'&gt;  &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/github-actions-syntax-rm.png"    alt="GitHub Actions Syntax article card"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you're new to actions check out this article on using actions.&lt;/p&gt;&lt;/blockquote&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/github-actions-syntax'&gt;  &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/github-actions-syntax-rm.png"    alt="GitHub Actions Syntax article card"  /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you're new to actions check out this article on using actions.&lt;/p&gt;&lt;/blockquote&gt;&lt;hr /&gt;&lt;p&gt;You do need to be careful to checkout the repo just a bit different than normal.&lt;/p&gt;&lt;h2&gt;Limitations &amp;amp; Gotchas&lt;/h2&gt;&lt;p&gt;&lt;em&gt;directly from the repo&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;Checkout the correct branch&lt;/h3&gt;&lt;p&gt;You must use &lt;code&gt;action/checkout@v2&lt;/code&gt; or later versions to checkout the repository. In non-push events, such as pull_request, make sure to specify the ref to checkout:&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;- uses: actions/checkout@v2  with:    ref: ${{ github.head_ref }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You have to do this do avoid that the &lt;code&gt;checkout&lt;/code&gt;-Action clones your repository in a detached state.&lt;/p&gt;&lt;h2&gt;Usage&lt;/h2&gt;&lt;p&gt;&lt;em&gt;from the repo&lt;/em&gt;&lt;/p&gt;&lt;p&gt;``` yaml- uses: stefanzweifel/git-auto-commit-action@v4  with:    # Required    commit_message: Apply automatic changes&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# Optional branch to push to, defaults to the current branchbranch: feature-123# Optional options appended to `git-commit`# See https://git-scm.com/docs/git-commit for a list of available optionscommit_options: '--no-verify --signoff'# Optional glob pattern of files which should be added to the commit# See the `pathspec`-documentation for git# - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203# - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspecfile_pattern: src/*.js tests/*.js# Optional local file path to the repositoryrepository: .# Optional commit user and author settingscommit_user_name: My GitHub Actions Botcommit_user_email: my-github-actions-bot@example.orgcommit_author: Author &amp;lt;actions@github.com&amp;gt;# Optional tag message# Action will create and push a new tag to the remote repository and the defined branchtagging_message: 'v1.0.0'# Optional options appended to `git-push`push_options: '--force'# Optional: Disable dirty check and always try to create a commit and pushskip_dirty_check: true&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;h2&gt;More Actions&lt;/h2&gt;&lt;p&gt;If you're new to actions check out these articles on using actions.&lt;/p&gt;&lt;TABLE&gt;  &lt;TR&gt;    &lt;TD&gt;      &lt;a href='https://waylonwalker.com/four-github-actions-website'&gt;      &lt;img        style='width:250px; max-width:80%; margin: auto; float: left'        src="https://waylonwalker.com/four-github-actions-website-rm.png"        alt="GitHub Actions Syntax article card"        /&gt;      &lt;/a&gt;    &lt;/TD&gt;    &lt;TD&gt;      &lt;a href='https://waylonwalker.com/four-github-actions-python'&gt;      &lt;img        style='width:250px; max-width:80%; margin: auto; float: right;'        src="https://waylonwalker.com/four-github-actions-python-rm.png"        alt="GitHub Actions Syntax article card"        /&gt;      &lt;/a&gt;    &lt;/TD&gt;  &lt;/TR&gt;&lt;/TABLE&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-auto-commit-action-review</guid></item><item><title>2019 goals</title><link>https://waylonwalker.com/goals-2019</link><description>2019 goals</description><content:encoded>&lt;!-- cover: "./namroud-gorguis-253765-unsplash.jpg" --&gt;&lt;style&gt;strong {    /* color: goldenrod; */    /* text-shadow: 0rem 1px 1px goldenrod; */}&lt;/style&gt;&lt;p&gt;&lt;em&gt;The year of intenionality&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This is a follow up to my previous post &lt;a href="/blog/2018-retrospective/"&gt;2018-retrospective&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;professional&lt;/h2&gt;&lt;p&gt;This year I will become more productive, by intensionally working on a well thought out plan, learning the right technologies, and leave behind a positive legacy.&lt;/p&gt;&lt;h3&gt;Productivity&lt;/h3&gt;&lt;p&gt;Last year I was able to make some great strides in my productivity and focus.  This year I want to be able to bring it up a notch.  &lt;strong&gt;Intentionality&lt;/strong&gt; plays a big part in this.  Taking some time to sit down and think about the tasks you realistically want to complete for the day, then focusing on those tasks one at a time.&lt;/p&gt;&lt;p&gt;I started off the year last year using the &lt;strong&gt;pomodoro&lt;/strong&gt; system to focus on one task and one task only for 25 minutes at a time.  This worked really well for me but I quickly fell off of the train and fell into my old trap of reacting to the loudest customer over the items I put &lt;strong&gt;intensionally&lt;/strong&gt; on my todo list.&lt;/p&gt;&lt;p&gt;A &lt;strong&gt;kanban&lt;/strong&gt; system is key to keeping it intentional.  I currently use a very simple trello system, with very few cards.  This helps to stay on track during those 25 minutes.  During the pomodoro session I move an item from todo, to doing, work that item, then move it to done when it is ready.  The only other thing that I can do during that time is to add items to the todo list.&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;pomodoro&lt;ul&gt;&lt;li&gt;8 pomodori&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Daily session planning&lt;ul&gt;&lt;li&gt;Back on inbox zero&lt;/li&gt;&lt;li&gt;todo's go in kanban not inbox&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;h3&gt;Leave a Legacy&lt;/h3&gt;&lt;p&gt;I want to leave behind a legacy that I can be proud of. I want to be known for bringing a positive attitude that inspires others to do their best work, enourage others, and work as a team.  It is in my blood to help as many people as I can.  I am in a unique role and have a unique skill set that allows me to do what would take some hours and days in minutes and hours.  I really enjoy helping these folks, but I know many of them are smart enough to do it on their own, they just do not know where to get started.  For this reason I really want to amp up my docs this year.  I want people to be able to answer 80% of their questions right from the docs before needing to come to me to get started.  I want this to be part of the legacy that I leave with my projects for the next person that encounters them.&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;better docs&lt;ul&gt;&lt;li&gt;80% oss questions should be answered&lt;/li&gt;&lt;li&gt;finish pea course&lt;/li&gt;&lt;li&gt;all projects have docs page with link by Feb&lt;/li&gt;&lt;li&gt;consistent docs format&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;bring positivity to the workplace&lt;/li&gt;&lt;li&gt;blog weekly (52)&lt;ul&gt;&lt;li&gt;lower barier to entry&lt;/li&gt;&lt;li&gt;consistently work on writing skills&lt;/li&gt;&lt;li&gt;12 Medium/LinkedIn&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;h3&gt;Educational&lt;/h3&gt;&lt;p&gt;Last year I made monumental improvements to my web development while continuing to hone my backend skills.  This year I want to amp up my web front end skills even more. I am finding this to be an area that not very many people in my organization have and I can knock out some simple projects really quick and gain a lot of value.  Last year I started using &lt;strong&gt;react&lt;/strong&gt; as a front end framework.  I want to double down learning the intricicies of how it works, and how to effectively layout a react project. I also want to keep upping my design skills.  As I do more layouts I find that they are easier and easier to layout, and as I am able to get them out faster it give me more time to hone in the design. Lastly I want to continue honing in my backend skills.  Working with data pipelines, Linux command line, the cloud, and database architecture.&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;Advanced React &lt;em&gt;dynamic web applications&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Refactoring UI &lt;em&gt;Rethinking how to layout data in logical ways&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Service Workies&lt;/li&gt;&lt;li&gt;AWS?? &lt;em&gt;we are moving to the cloud&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Continue Leveling up Linux Command Line&lt;/li&gt;&lt;li&gt;Data Pipeline&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;h2&gt;Personal&lt;/h2&gt;&lt;p&gt;At home I want to continue being a positive person.  Home is much harder to keep up a good attitude.  Mostly because I care more about my family and its harder to walk away and forget about a bad interaction with them.  I want to make sure that we keep up more positive interactions together as that will help everyone keep the positive attitude.  Lastly I would like to keep in touch with family better.  Rhiannon really loves a nice message to boost her day.  I would like to send her a few longer messages per week, and to one other family member at least once per week.  This can be in the form of a text, email, or hard copy letter in the mail.&lt;/p&gt;&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;be your best&lt;/li&gt;&lt;li&gt;+3 positives everyday (300+)&lt;/li&gt;&lt;li&gt;gratitude daily (300+)&lt;/li&gt;&lt;li&gt;5 languages&lt;/li&gt;&lt;li&gt;letters to family&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;&lt;strong&gt;Bring it on 2019&lt;/strong&gt;  I am ready to take it on!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/goals-2019</guid></item><item><title>How I Built My GitHub Profile</title><link>https://waylonwalker.com/my-github-profile</link><description>&lt;p&gt;I ran a discussion on dev that collected quite a list of examples in the comment section.  So many great calls to action, animations, memes, and weird tricks.&lt;/p&gt;&lt;p&gt;&lt;a href="https://dev.to/waylonwalker/what-s-on-your-github-profile-40p3"&gt;&lt;img alt="dev.to whats-on-your-github-profile" src="https://waylonwalker.com/whats-on-your-github-profile.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;My current profile&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/waylonwalker/"&gt;&lt;img alt="Waylon Walkers GitHub profile" src="https://waylonwalker.com/github-profile.png" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;social icons&lt;/h2&gt;&lt;p&gt;Upload all of your icons to the repo in a directory such as &lt;code&gt;icons&lt;/code&gt; or &lt;code&gt;assets&lt;/code&gt;, then link them with a &lt;code&gt;height&lt;/code&gt; attribute like below.  I used html for mine, not sure if you can set the &lt;code&gt;height&lt;/code&gt; in markdown.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;&amp;lt;a href="https://dev.to/waylonwalker"&amp;gt;&amp;lt;img height="30" src="https://raw.githubusercontent.com/WaylonWalker/WaylonWalker/main/icon/dev.png"&amp;gt;&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; I did add a bit of &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; (non-breaking-whitespace) between my icons.  Without adding css this seemed like the simplest way to do it.&lt;/p&gt;&lt;h2&gt;Center&lt;/h2&gt;&lt;p&gt;Aligning things in the center of the readme is super simple.  I used this trick to align my social icons in the middle.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;&amp;lt;p align='center'&amp;gt; ...html&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;right&lt;/h2&gt;&lt;p&gt;For my &lt;a href="https://waylonwalker.com/latest"&gt;latest post&lt;/a&gt; I floated it to the right with a little bit of &lt;code&gt;align='right'&lt;/code&gt; action.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;&amp;lt;p&amp;gt;  &amp;lt;a href="https://waylonwalker.com/latest"&amp;gt;&amp;lt;img width="400" align='right' src="https://waylonwalker.com/latest.png?raw=true"&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You may need to play with where you put this in the document, and the size of elements to get things to flow right.&lt;/p&gt;&lt;h2&gt;redirects&lt;/h2&gt;&lt;p&gt;In order to keep my latest post always up to date on my readme I implemented a netlify redirect to always point to my latest post.  As a digital gardener this helps me keep pointed to a the best one in my opinion.  Any automated way would pick up half finished posts.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# /static/_redirects# netlify redirects# latest post/latest            /blog/kedro-catalog-search//latest.png        /kedro-catalog-search.png&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I can reference both the post and the post cover image.&lt;/p&gt;&lt;h2&gt;summary/details&lt;/h2&gt;&lt;p&gt;I also wanted to list out a few of my favorite posts without taking up a ton of space, so I used &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;summary&lt;/code&gt; tags so that it would collapse.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;&amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;&amp;lt;strong&amp;gt;other favorite posts&amp;lt;/strong&amp;gt;&amp;lt;/summary&amp;gt; &amp;lt;a href="https://waylonwalker.com/eight-years-cat/"&amp;gt;&amp;lt;img width="400" src="https://waylonwalker.com/eight-years-cat.png?raw=true"&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href="https://waylonwalker.com/keyboard-driven-vscode/"&amp;gt;&amp;lt;img width="400" src="https://waylonwalker.com/alt%20b.png?raw=true"&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href="https://waylonwalker.com/what-are-github-actions/"&amp;gt;&amp;lt;img width="400" src="https://waylonwalker.com/what-are-github-actions.png?raw=true"&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/details&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go ham on your profile, its your own slice of GitHub to completely personalize and speak your brand.  Give a powerfule call to action, share a funny meme, record a wicked cool GIF, its your space.&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/my-github-profile</guid></item><item><title>Building kedro.dev</title><link>https://waylonwalker.com/building-kedro-dev</link><description>This is my journey to building up the community page.</description><content:encoded>&lt;p&gt;Follow along the Journey as I build out &lt;a href="https://kedro.dev"&gt;kedro.dev&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Building a Community&lt;/h2&gt;&lt;p&gt;I have really enjoyed my own personal journey as I have started to build all of my data pipeline projects with the kedro framework.  I want to start building a place to share resources with the community.  I want to see this community grow and flourish.  They say in front end web development if you are not using a framework you end up building one.  That's exactly what I was doing before I started using kedro.  I want to build out a set of resources that this community can learn from and start to use the framework at their own pace without needing to develop their own from scratch.&lt;/p&gt;&lt;h2&gt;research&lt;/h2&gt;&lt;p&gt;Looking into the front end frameworks to see how they welcome their community.  Much of my inspiration is from them, bringing lessons learned to data.&lt;/p&gt;&lt;h3&gt;pages&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;banner&lt;/li&gt;&lt;li&gt;nav&lt;ul&gt;&lt;li&gt;docs -&amp;gt; readthedocs&lt;/li&gt;&lt;li&gt;tutorial -&amp;gt; kedro-examples&lt;/li&gt;&lt;li&gt;blog -&amp;gt; medium&lt;/li&gt;&lt;li&gt;community&lt;ul&gt;&lt;li&gt;support&lt;/li&gt;&lt;li&gt;team&lt;/li&gt;&lt;li&gt;courses&lt;/li&gt;&lt;li&gt;examples&lt;/li&gt;&lt;li&gt;meetups&lt;/li&gt;&lt;li&gt;conferences&lt;/li&gt;&lt;li&gt;articles&lt;/li&gt;&lt;li&gt;podcasts&lt;/li&gt;&lt;li&gt;videos&lt;/li&gt;&lt;li&gt;external resources&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;search&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;examples&lt;/li&gt;&lt;li&gt;footer&lt;/li&gt;&lt;li&gt;sponsors&lt;/li&gt;&lt;li&gt;newsletter&lt;/li&gt;&lt;li&gt;copyright*&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;components&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;edit this page&lt;/li&gt;&lt;li&gt;scrolling toc&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Stack Overflow Api&lt;/h2&gt;&lt;p&gt;fetch last 5 posts.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;https://api.stackexchange.com/2.2/questions?order=desc&amp;amp;sort=activity&amp;amp;site=stackoverflow&amp;amp;tagged=kedro&amp;amp;pagesize=5&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;DEV.to api&lt;/h2&gt;&lt;p&gt;fetch last 5 posts&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;https://dev.to/api/articles?tag=kedro&amp;amp;per_page=5&amp;amp;page=1&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/building-kedro-dev</guid></item><item><title>Expand One Line Links</title><link>https://waylonwalker.com/expand-one-line-links</link><description>I wanted a super simple way to cross-link blog posts that require as little effort as possible, yet still looks good in vanilla markdown in GitHub.  I have been using a snippet that puts HTML into the markdown.  While this works, it's more manual/dif</description><content:encoded>&lt;p&gt;I wanted a super simple way to cross-link blog posts that require as little effort as possible, yet still looks good in vanilla markdown in GitHub.  I have been using a snippet that puts HTML into the markdown.  While this works, it's more manual/difficult for me does not look the best, and does not read well as&lt;/p&gt;&lt;h2&gt;Goals for new card&lt;/h2&gt;&lt;p&gt;The new card should be fully automated to expand with title, description, andcover image.  Bonus if I am able to attach a comment behind it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fully automated&lt;/li&gt;&lt;li&gt;card expansion&lt;/li&gt;&lt;li&gt;Title&lt;/li&gt;&lt;li&gt;description&lt;/li&gt;&lt;li&gt;cover image&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Old Card&lt;/h2&gt;&lt;p&gt;If you can call it a card 🤣.  This card was just an image wrapped in an anchor tag and a paragraph tag.  I found this was the most consistent way to get an image narrower and centered in both GitHub and dev.to.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-html"&gt;&amp;lt;p style='text-align: center'&amp;gt;  &amp;lt;a href='https://waylonwalker.com/notes/eight-years-cat'&amp;gt;    &amp;lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/eight-years-cat.png"    alt="My first eight years as a working professional article"    /&amp;gt;  &amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style='text-align: center'&gt;  &lt;a href='https://waylonwalker.com/notes/eight-years-cat'&gt;    &lt;img    style='width:500px; max-width:80%; margin: auto;'    src="https://waylonwalker.com/eight-years-cat.png"    alt="My first eight years as a working professional article"    /&gt;  &lt;/a&gt;&lt;/p&gt;&lt;p&gt;The key here is that I have to put the HTML into the markdown.  It looks a bit dirty while editing and quite frankly it's a pain to deal with.&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;New Card&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-markdown"&gt;&amp;lt;a class="onelinelink" href="https://waylonwalker.com/eight-years-cat/"&amp;gt;&amp;lt;img style="float: right;" align='right' src="https://waylonwalker.com/static/29cdf6fcfb17d7fd766fc438144fb3e4/630fb/eight-years-cat-xmas2020.png" alt="article cover for My first eight years as a working professional."&amp;gt;&amp;lt;div class="right"&amp;gt;    &amp;lt;h2&amp;gt;My first eight years as a working professional.&amp;lt;/h2&amp;gt;    &amp;lt;p class="description"&amp;gt;    This day 8 years ago I started my first day as a Mechanical Engineer. I am so grateful for this journey that I have been able to have. There is no way that I could have planned this journey from the beginning.    &amp;lt;/p&amp;gt;    &amp;lt;p class="url"&amp;gt;    &amp;lt;span class="read-more"&amp;gt;read more&amp;lt;/span&amp;gt;  waylonwalker.com    &amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/eight-years-cat/"&gt;https://waylonwalker.com/eight-years-cat/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;First step&lt;/h2&gt;&lt;p&gt;My first attempt was to make my own transformer for &lt;code&gt;gatsby-remark-embedder&lt;/code&gt;. I previously set this up on my site for Twitter and YouTube.  I tried to get some custom transformers going, to do what I wanted for my own website, but failed.  I really struggled to understand what data was coming in and out of the transformer.  My lack of js/node debugging skills was really showing.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/gatsby-remark-embedder/"&gt;https://waylonwalker.com/gatsby-remark-embedder/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;using gatsby-remark-embedder to expand Twitter/YouTube&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Redirects&lt;/h2&gt;&lt;p&gt;It also works with redirects. I have a redirect to my "latest" post.  It's something that I don't do the best job at keeping up to date, but when I feel really proud of a post I make it the latest.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/latest/"&gt;https://waylonwalker.com/latest/&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;this post is a redirect to my "latest post"&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Client Side&lt;/h2&gt;&lt;p&gt;I started out by running this card expansion client side. This was the strategy that I used to find the list of elements that should be transformed.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;get all anchors&lt;/li&gt;&lt;li&gt;get all paragraphs&lt;/li&gt;&lt;li&gt;filter paragraphs where the content is one of the links&lt;/li&gt;&lt;li&gt;filter paragraphs where there is only one element in the paragraph&lt;/li&gt;&lt;li&gt;filter to paragraphs with links that &lt;code&gt;shouldTransform&lt;/code&gt;&lt;/li&gt;&lt;li&gt;These elements should have the &lt;code&gt;oneLineLinkCard&lt;/code&gt; applied.&lt;/li&gt;&lt;/ul&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;const oneLineLinks = () =&amp;gt; {  const linkText = [...document.querySelectorAll('.post-body p a')].map(    (p) =&amp;gt; p.innerText  )  const paragraphs = document.querySelectorAll('.post-body p') //  const regex = /^https?:\/\/waylonwalker\.com\//  const shouldTransform = (url) =&amp;gt; regex.test(url)  const anchorOnly = [...paragraphs].filter(    (p) =&amp;gt; linkText.includes(p.innerText) &amp;amp;&amp;amp; p.childElementCount === 1  )  anchorOnly    .filter((p) =&amp;gt; shouldTransform(p.firstElementChild.href))    .map(      async (p) =&amp;gt;        (p.outerHTML = await oneLineLinkCard(p.firstElementChild.href))    )}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Styles&lt;/h2&gt;&lt;p&gt;CSS is not my strong suit, but I can generally hammer something into a shape that I am happy with.  For this one, I did struggle a bit with how it looked on various screens, particularly because I was holding the cover image size to a hard 300px.  I ended up with more media queries than I needed, but it works.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.onelinelink + blockquote {  position: relative;  left: 2rem;  background: rgba(0, 0, 0, .2);  margin: -6rem auto 1rem;  padding-top: 3rem;  border: 1px solid goldenrod;  border-top: 2px solid goldenrod;  max-width: 300px;  @media (max-width: 350px) {  left: 0rem;  margin-left: .4rem;  margin-right: .4rem;  }  @media (min-width: 800px) {    max-width: 600px;  }  @media (min-width: 900px) {    max-width: 700px;  }  @media (min-width: 1000px) {    max-width: 800px;  }  border-radius: 15px/45px;  display: block;  }}.onelinelink {  position: relative;  z-index: 2;  margin: 4rem;  overflow: hidden;  display: flex;  border: 2px solid rgba(255, 50, 50, .1);  background: rgba(255, 50, 50, .015);  background: #262236;  text-decoration: none;  border-radius: 8px;  max-height: 126px;  @media (max-width: 800px) {    flex-direction: column;    max-height: 800px;    max-width: 300px;    margin: 4rem auto;  }  h2 {    top: -1.2rem;    postition: relative;    margin: 0;    padding: 0;    font-size: .8rem;    font-weight: 400;  }  .right {  width: 100%;    padding: 5px 15px;  }  .description {    font-size: 1rem;    line-height: 1.2rem;    height: calc(100% - 31px - 1rem);    padding: 0;    padding-bottom: 1rem;    padding-top: .1rem;    margin: 0;  }  .url {    padding-right: 30px;    color: rgba(255, 255, 255, .1);    text-align: right;    position: relative;    z-index: 2;    background: #262236;  }  img {    max-width: 300px;    max-height: 126px;    padding: 0;    margin: 0;    border-radius: 8px 0 0 8px;  }  .read-more {    font-size: .6rem;    color: rgba(255, 255, 255, .08);  }}&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Final Look&lt;/h3&gt;&lt;p&gt;On mobile, it renders vertically.&lt;/p&gt;&lt;p&gt;&lt;img alt="mobile" src="https://waylonwalker.com/one-line-link-vertical.png" /&gt;&lt;/p&gt;&lt;p&gt;On desktop, it renders horizontally.&lt;/p&gt;&lt;p&gt;&lt;img alt="desktop" src="https://waylonwalker.com/one-line-link-horizontal.png" /&gt;&lt;/p&gt;&lt;h2&gt;Expansion&lt;/h2&gt;&lt;p&gt;I'm sure that all of this can be better, my js skills are still forming.  It's quite humbling to see how hard it is to think in an unfamiliar language.  The following &lt;code&gt;oneLineLineCard&lt;/code&gt; renders a string template literal from a paragraph with a single anchor to a card that contains some of that pages meta information.  The  getDescription` function uses a fetch to get the metadata right from the content of the page.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-javascript"&gt;const getDescription = (url) =&amp;gt;  fetch(url)    .then((r) =&amp;gt; r.text())    .then((html) =&amp;gt; {      let parser = new DOMParser()      let doc = parser.parseFromString(html, 'text/html')      let meta = doc.querySelectorAll('meta')      const description = [...meta].filter(        (m) =&amp;gt; m.name === 'og:description'      )[0].content      const image = [...meta].filter((m) =&amp;gt; m.name === 'og:image')[0]?.content      const sm_image = [...meta].filter((m) =&amp;gt; m.name === 'og:sm_image')[0]        ?.content      const url = [...meta].filter((m) =&amp;gt; m.name === 'og:url')[0]?.content      const title = [...meta].filter((m) =&amp;gt; m.name === 'title')[0]?.content      return { description, image, url, title, sm_image }    })const oneLineLinkCard = (url) =&amp;gt; {  return getDescription(url).then(    (meta) =&amp;gt;      `&amp;lt;a class="onelinelink" href=${meta.url}&amp;gt;  &amp;lt;img src='${meta.sm_image ? meta.sm_image : meta.image ? meta.image : ''}' alt='cover image for ${meta.title ? meta.title : ''}&amp;gt;  &amp;lt;div class="right"&amp;gt;    &amp;lt;h2&amp;gt;${meta.title ? meta.title : ''}&amp;lt;/h2&amp;gt;    &amp;lt;p class='description'&amp;gt;      ${meta.description ? meta.description : ''}    &amp;lt;/p&amp;gt;    &amp;lt;p class="url"&amp;gt;       &amp;lt;span class='read-more'&amp;gt;read more&amp;lt;/span&amp;gt;  waylonwalker.com    &amp;lt;/p&amp;gt;  &amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;  `  )}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;It works...&lt;/h2&gt;&lt;p&gt;And it works.  Whenever I reference my own blog with just a single link on a line in markdown I get a nice card link out to the other post, with a small image sized for the card, the title, and the description of the post.&lt;/p&gt;&lt;h2&gt;But&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;too much client-side&lt;/li&gt;&lt;li&gt;does not work well with cross-posting&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For every link I do this with the client will pull the full page just to get a bit of metadata.  I am already doing a bit more than I want to do client-side for a blog, so I would prefer to do it ahead of time.&lt;/p&gt;&lt;p&gt;Additionally, since it is done client-side it does not translate well when I copy my markdown to various other blogging platforms.  If it were rendered right into the markdown cross-posting would be much easier.&lt;/p&gt;&lt;h2&gt;Future State&lt;/h2&gt;&lt;p&gt;&lt;em&gt;actually already implemented at this point&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The direction I am going to try is to use python to load each post, look for lines that contain only a link, then render this same markup right in the markdown.  For this I am going to use a language I am more familiar with, python, and do this inside of GitHub actions just before build time so that the markdown I write stays the same, the cards will only be rendered in prod.&lt;/p&gt;&lt;h2&gt;Why Python 🐍&lt;/h2&gt;&lt;p&gt;Python is my every day what I know, I work much more efficiently and cleanly with it.  Also the more I blog the more abstractions I am seeing and the lazier I am getting.  Things like description, SEO, cover images are all getting automated. Gatsby really doesn't like to run when some of those things are missing, probably due to my lack of JS error handling skills.  I find it much easier to load up all the pages and patch up the frontmatter in python beforebuild time.&lt;/p&gt;&lt;p&gt;I am kinda curious if eventually, I can re-create everything I need in python because I am honestly not using react for much more than a glorified templating system, besides search.  If I can pre-render everything in python&lt;/p&gt;&lt;h2&gt;What do you think??&lt;/h2&gt;&lt;p&gt;Do they look good?  Could they be better?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/expand-one-line-links</guid></item><item><title>Conda Build</title><link>https://waylonwalker.com/condabuild</link><description>none</description><content:encoded>&lt;h1&gt;Conda Build&lt;/h1&gt;&lt;h2&gt;Install Conda Build&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda update condaconda install conda-build&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/condabuild</guid></item><item><title>D3 Day 5</title><link>https://waylonwalker.com/d3-day-5</link><description>none</description><content:encoded>&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;&lt;style&gt;    #content{        max-width: 800px;        margin: 0 auto;    }    .chart {        display: block;        padding: 10px;        background: peachpuff;    }    .bar {        height: 30px;        margin: 5px;        background: teal;    }    .bar:hover{        background: #444;        }    button {        background: rgb(240, 196, 211);        border: none;        font-size: 1.3rem;        border-radius: 5px;        padding: .2rem 1rem;        margin-bottom: 1rem    }    .on {        background: palevioletred;    }    .big {    width: 100%    }    .small {    width: 50%    }&lt;/style&gt;&lt;h2&gt;Learn D3 in 5 days&lt;/h2&gt;&lt;p&gt;For what we are creating in these posts d3 is way overkill and very verbose, but I need to start somewhere!  These are just stepping stones into real custom visualizations that cannot be done in any other tool today.  I still cannot explain how excited I am to say &lt;strong&gt;"I created that in d3!!!"&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;Todays Result&lt;/h3&gt;&lt;h2&gt;Recall Example 3 from yesterday&lt;/h2&gt;&lt;div id='buttons'&gt;    &lt;h3&gt;Subject&lt;/h3&gt;    &lt;div id='subjects'&gt;        &lt;button class='math' onclick="render4('math')"&gt;Math&lt;/button&gt;        &lt;button class='science' onclick="render4('science')"&gt;Science&lt;/button&gt;    &lt;/div&gt;    &lt;h3&gt;Chart Size&lt;/h3&gt;    &lt;div id='sizes'&gt;        &lt;button class='chart4-big-btn' onclick='chart4_size("big")')&gt;Large&lt;/button&gt;        &lt;button class='chart4-small-btn' onclick='chart4_size("small")'&gt;Small&lt;/button&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div id="chart4" class='chart'&gt;&lt;/div&gt;&lt;script&gt;    const data4 = [        { name: 'Alice', math: 93, science: 84},        { name: 'Bob', math: 73, science: 82 },        { name: 'James', math: 92, science: 78},        { name: 'Steve', math: 77, science: 93 },        { name: 'Jordan', math: 80, science: 68 },    ]    chart4 = document.getElementById('chart4')    let width = function() {        return chart4.getBoundingClientRect().width        }    let height = function() {        return chart4.getBoundingClientRect().height        }    let barHeight = function() {        height() /  data4.length + 'px'        }    function chart4_size(size) {        d3.select('#sizes')            .selectAll('button')            .classed('on', false)        d3.select('#sizes')            .select('.chart4-' + size + '-btn')            .classed('on', true)        d3.select('#chart4')            .attr('class', 'chart ' + size)        subject = document            .getElementById('subjects')            .querySelector('.on')            .classList[0]        render4(subject)    }    function render4(subject) {        d3.select('#subjects')            .selectAll('button')            .classed('on', false);        d3.select('#subjects')            .select('.' + subject)            .attr('class', subject + ' on');        let xScale = d3.scaleLinear()            .domain([50, 100])            .range([0, width()]);        const bars5 = d3.select('#chart4')            .selectAll('div')            .data(data4, function(d) {                return d.name            })        const newBars = bars5.enter()            .append('div')                .attr('class', 'bar')                .style('width', 0)        newBars.merge(bars5)            .transition()            .style('width', function(d) {                return xScale(d[subject]) + 'px'            })            .style('height', barHeight())    }    render4('math')    chart4_size('big')&lt;/script&gt;&lt;h2&gt;Final Result&lt;/h2&gt;&lt;div id='buttons5'&gt;    &lt;h3&gt;Subject&lt;/h3&gt;    &lt;div id='subjects5'&gt;        &lt;button class='math' onclick="render5('math')"&gt;Math&lt;/button&gt;        &lt;button class='science' onclick="render5('science')"&gt;Science&lt;/button&gt;    &lt;/div&gt;    &lt;h3&gt;Chart Size&lt;/h3&gt;    &lt;div id='sizes5'&gt;        &lt;button class='chart5-big-btn' onclick='chart5_size("big")')&gt;Large&lt;/button&gt;        &lt;button class='chart5-small-btn' onclick='chart5_size("small")'&gt;Small&lt;/button&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div id="chart5" class='chart'&gt;&lt;/div&gt;&lt;script&gt;    const data5 = [        { name: 'Alice', math: 93, science: 84},        { name: 'Bob', math: 73, science: 82 },        { name: 'James', math: 92, science: 78},        { name: 'Steve', math: 77, science: 93 },        { name: 'Jordan', math: 80, science: 68 },    ]    chart5 = document.getElementById('chart5')    let width5 = function() {        return chart5.getBoundingClientRect().width        }    let height5 = function() {        return chart5.getBoundingClientRect().height        }    let barHeight5 = function() {        height5() /  data5.length + 'px'        }    function chart5_size(size) {        d3.select('#sizes5')            .selectAll('button')            .classed('on', false)        d3.select('#sizes5')            .select('.chart5-' + size + '-btn')            .classed('on', true)        d3.select('#chart5')            .attr('class', 'chart ' + size)        subject = document            .getElementById('subjects5')            .querySelector('.on')            .classList[0]        console.log(subject)        render5(subject)    }    function render5(subject) {        d3.select('#subjects5')            .selectAll('button')            .classed('on', false);        d3.select('#subjects5')            .select('.' + subject)            .attr('class', subject + ' on');        let xScale = d3            .scaleLinear()            .domain([50, 100])            .range([0, width5()]);        const bars5 = d3.select('#chart5')            .selectAll('div')            .data(data5, function(d) {                return d.name            })        const newBars = bars5            .enter()            .append('div')                .attr('class', 'bar')                .style('width', 0)        newBars.merge(bars5)            .transition()            .style('width', function(d) {                return xScale(d[subject]) + 'px'            })            .style('height', barHeight5())        d3         .select('#chart5')         .select('svg')         .remove()        const svg5 = d3            .select('#chart5')            .append('svg')            .attr('width', width5())            .attr('height', height5())            .style('position', 'relative')            .append('g')            .call(d3.axisBottom(xScale))    }    render5('math')    chart5_size('big')&lt;/script&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/d3-day-5</guid></item><item><title>Gitui is a blazing fast terminal git interface</title><link>https://waylonwalker.com/gitui.slides</link><description>Gitui is a terminal-based git user interface (TUI) that will change the way
that you work with git.  I have been a long-time user of the git cli, and it's
been hard to beat, mostly because there is nothing that keeps my fingers on the
keyboard quite </description><content:encoded>&lt;h2&gt;GitUI&lt;/h2&gt;&lt;p&gt;Gitui is a terminal-based git user interface (TUI) that will change the waythat you work with git. &lt;/p&gt;&lt;h2&gt;Works alongside the cli&lt;/h2&gt;&lt;p&gt;I have been a long-time user of the git cli, and it'sbeen hard to beat, mostly because there is nothing that keeps my fingers on thekeyboard quite like it, except &lt;code&gt;gitui&lt;/code&gt; which comes with some great ways to veryquickly walk through a git project.&lt;/p&gt;&lt;h2&gt;installation&lt;/h2&gt;&lt;p&gt;Go to their [releases]&lt;a href="https://github.com/extrawurst/gitui/releases"&gt;https://github.com/extrawurst/gitui/releases&lt;/a&gt;) page,download the latest build, and pop it on your PATH.  I have the followingstuffed away in some install scripts to get the latest version.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;small&gt;install latest release&lt;/small&gt;&lt;/em&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;GITUI_VERSION=$(curl --silent https://github.com/extrawurst/gitui/releases/latest | tr -d '"' | sed 's/^.*tag\///g' | sed 's/&amp;gt;.*$//g' | sed 's/^v//')wget https://github.com/extrawurst/gitui/releases/download/v${GITUI_VERSION}/gitui-linux-musl.tar.gz -O- -q | sudo tar -zxf - -C /usr/bin/&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;run &lt;code&gt;gitui&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It opens blazing fast.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;gitui&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Quick Commits&lt;/h2&gt;&lt;p&gt;Sometimes I edit a number of files and want to commit them one at a time, thisis painful in the git cli and my main use case for &lt;code&gt;gitui&lt;/code&gt;.  &lt;code&gt;gitui&lt;/code&gt; showsunstaged changes at the top, staged changes on the bottom, and a diff on theright.&lt;/p&gt;&lt;p&gt;&lt;img alt="gitui status" src="https://waylonwalker.com/gitui-status.png" /&gt;&lt;/p&gt;&lt;h2&gt;Navigate with hjkl&lt;/h2&gt;&lt;p&gt;By default, &lt;code&gt;gitui&lt;/code&gt; uses arrow keys, but simply copying&lt;a href="https://github.com/extrawurst/gitui/blob/master/assets/vim_style_key_config.ron"&gt;vim_style_key_config.ron&lt;/a&gt;to your config directory will get you vim-like keybindings.&lt;/p&gt;&lt;h2&gt;workflow&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;pop open &lt;code&gt;gitui&lt;/code&gt;, &lt;/li&gt;&lt;li&gt;use &lt;strong&gt;j/k&lt;/strong&gt; to get to the file I want to commit,&lt;/li&gt;&lt;li&gt;glance at the diff to the right&lt;/li&gt;&lt;li&gt;press enter to stage the file&lt;/li&gt;&lt;li&gt;sc to switch focus to the saged files and commit&lt;/li&gt;&lt;li&gt;write my commit message hit enter and&lt;/li&gt;&lt;li&gt;q to quit&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Keybindings&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code&gt;w/s:   to toggle focus between working and staged changesj/k:   to scroll each sectionh/l:   switch between left and right sideenter: toggle file from working or stagingc:     start a commit messagep:     push&amp;lt;c-c&amp;gt;: quit&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Other Panes&lt;/h2&gt;&lt;p&gt;I am in the &lt;code&gt;Status [1]&lt;/code&gt; pane 90% of the time, but it also has three otherpanes for &lt;code&gt;Log [2]&lt;/code&gt;, &lt;code&gt;Stashing [3]&lt;/code&gt;, and &lt;code&gt;Stashes [4]&lt;/code&gt;.  I do not really usethe stashes panes, but the &lt;code&gt;Log [2]&lt;/code&gt; pane is quite useful to quickly go throughthe last set of commits and see the diff for each of them.&lt;/p&gt;&lt;h2&gt;What UI do you use for git&lt;/h2&gt;&lt;p&gt;Let me know what ui you use for git, do you stick to the cli, use a gui, or usea similar &lt;code&gt;TUI&lt;/code&gt; interface?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gitui.slides</guid></item><item><title>List the latest files to change in a git repo</title><link>https://waylonwalker.com/last-n-git-files</link><description>&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;while read file; do echo $(git log --pretty=format:%ad -n 1 --date=raw -- $file) $file; done &amp;lt; &amp;lt;(git ls-tree -r --name-only HEAD | grep static/stories) | sort -r | head -n 3 | cut -d " " -f 3&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/last-n-git-files</guid></item><item><title>creating the kedro-preflight hook</title><link>https://waylonwalker.com/creating-the-kedro-preflight-hook</link><description>Kedro Hooks Intro - kedro hooks are an exciting upcoming feature of kedro `0.16.0`.  They allow you to hook into `catalog_created`,`pipeline_run`, and `node_run`(nouns). With a `before`, or `after` (adjective).  This really reminds me of reacts lifecycle hooks, that let you hook into various state of react web components.  This is going to make kedro so extendable by the community.  I am super pumped to see what the community is able to do with this ability.</description><content:encoded>&lt;p&gt;kedro hooks are an exciting upcoming feature of kedro &lt;code&gt;0.16.0&lt;/code&gt;.  They allow you to hook into &lt;code&gt;catalog_created&lt;/code&gt;,&lt;code&gt;pipeline_run&lt;/code&gt;, and &lt;code&gt;node_run&lt;/code&gt;(nouns). With a &lt;code&gt;before&lt;/code&gt;, or &lt;code&gt;after&lt;/code&gt; (adjective).  This really reminds me of reacts lifecycle hooks, that let you hook into various state of react web components.  This is going to make kedro so extendable by the community.  I am super pumped to see what the community is able to do with this ability.&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/what-is-kedro"&gt;https://waylonwalker.com/what-is-kedro&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you are completely unsure what kedro is be sure to check out my what is kedro post&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Docs&lt;/h2&gt;&lt;p&gt;&lt;em&gt;a work in progress&lt;/em&gt;&lt;/p&gt;&lt;p&gt;As this is a part of an upcoming release you will need to look in the &lt;code&gt;latest&lt;/code&gt; docs, &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;stable&lt;/code&gt; and you will find a &lt;a href="https://kedro.readthedocs.io/en/latest/04_user_guide/15_hooks.html?highlight=hooks"&gt;15_hoooks&lt;/a&gt; page.  As these docs are still in development they are not very complete at this point and do require a bit more existing &lt;code&gt;kedro&lt;/code&gt; knowledge to understand.  I am sure they will get much better as we approach the realease of hooks.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This doesn't mean that we can't still install the latest/unstable version and have some fun learning!&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Installation&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Straight from GitHub&lt;/em&gt;&lt;/p&gt;&lt;p&gt;As this is part of an upcoming release you will need to get the library straight from github.  Since this is not a stable release of &lt;code&gt;kedro&lt;/code&gt; I cannot express the importance of using a virtual environment enough.  Trying to install this version in the same place that you are trying to develop a pipeline potentially break your existing working development environment.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n kedro0160 -yconda activate kedro0160 # may also be source activate kedro0160 or activate kedro0160pip install git+https://github.com/quantumblacklabs/kedro.gitpip install colorama&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; the version is still somewhere between &lt;code&gt;0.15.9&lt;/code&gt; and &lt;code&gt;0,16.0&lt;/code&gt;.  &lt;code&gt;kedro.__version__&lt;/code&gt; will still be &lt;code&gt;0.15.9&lt;/code&gt; and wiill not roll until the official release.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Create a sample project&lt;/h2&gt;&lt;blockquote&gt;&lt;h3&gt;Kedro new&lt;/h3&gt;&lt;p&gt;For more details check out my full post on &lt;a href="https://waylonwalker.com/knew"&gt;kedro new&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;For this post I really just want a working pipeline as fast as possible.  For this I am going to use iris pipeline that is generated from the &lt;code&gt;kedro new&lt;/code&gt; command in the cli.  It's &lt;strong&gt;important&lt;/strong&gt; that you answer &lt;code&gt;y&lt;/code&gt; to create an example pipeline.&lt;/p&gt;&lt;blockquote&gt;&lt;h3&gt;Hold On ✋&lt;/h3&gt;&lt;p&gt;Did you create a separate environment for this?  Please do.&lt;/p&gt;&lt;/blockquote&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro new&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After you run the &lt;code&gt;kedro new&lt;/code&gt; command it will ask a series of questions.  👇 Here is how I answered them.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;Project Name:=============Please enter a human readable name for your new project.Spaces and punctuation are allowed. [New Kedro Project]: Kedro HooksRepository Name:================Please enter a directory name for your new project repository.Alphanumeric characters, hyphens and underscores are allowed.Lowercase is recommended. [kedro-hooks]:Python Package Name:====================Please enter a valid Python package name for your project package.Alphanumeric characters and underscores are allowed.Lowercase is recommended. Package name must start with a letter or underscore. [kedro_hooks]:Generate Example Pipeline:==========================Do you want to generate an example pipeline in your project?Good for first-time users. (default=N) [y/N]: yChange directory to the project generated in /mnt/c/temp/kedro-hooks/A best-practice setup includes initialising git and creating a virtual environment before running `kedro install` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Install the Project&lt;/h3&gt;&lt;p&gt;Next install the project itself and all of its dependencies with the &lt;code&gt;kedro install&lt;/code&gt; command.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd kedro-hookskedro install&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;🏃‍♀️ Run the pipeline&lt;/h3&gt;&lt;p&gt;Before we start developing any hooks lets make sure everything is setup correctly by running the pipeline with &lt;code&gt;kedro run&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro run&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Let's make a hook&lt;/h2&gt;&lt;p&gt;&lt;em&gt;getting to the meat of the post&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Now that we have a project scaffolded up and running we can develop a hook for it.  As far as I can tell hooks can be implemented one of &lt;strong&gt;two ways&lt;/strong&gt;.  As a &lt;strong&gt;function&lt;/strong&gt; inside of a module, then import that module and pass it into the hooks list, or implemented as a method on a &lt;strong&gt;class&lt;/strong&gt;, then the class is passed into the hooks list.  Either method must follow the naming convention with the &lt;code&gt;@hook_impl&lt;/code&gt; decorator.  Each module/class can implement more than one hook, but not more than one of the same type. One of each kind will be created below.&lt;/p&gt;&lt;h3&gt;Full list of hooks available&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;before_catalog_created&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;after_catalog_created&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;before_pipeline_run&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;after_pipeline_run&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;before_node_run&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;after_node_run&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;debug_hook (class)&lt;/h2&gt;&lt;p&gt;&lt;em&gt;quick and dirty&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I highly recommend this as your first hook.  It's super easy to make and lets you explore the arguments passed into the hook.  For this one I am going to pop the following class right into &lt;code&gt;kedro-hooks/src/kedro-hooks/run.py&lt;/code&gt;, remember that I chose &lt;code&gt;kedro-hooks&lt;/code&gt; as my project name.  Your path might be slightly different.  If you wanted to make a real hook it might make sense to put it in its own module, but for simplicity of your first hook you can put it directly in the same module that it gets implemented.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class debug_hook:    @hook_impl    def before_pipeline_run(run_params, pipeline, catalog):        "pops into a debugger before pipeline run"        print('I hooked in right before the pipeline run')        breakpoint()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is really that easy to create a kedro hook!  Now lets apply it to our project.  All we need to do is add one line (&lt;code&gt;hooks = [debug_hook]&lt;/code&gt;) to the existing &lt;code&gt;ProjectContext&lt;/code&gt; class within &lt;code&gt;kedro-hooks/src/kedro-hooks/run.py&lt;/code&gt;.  Once we do that our &lt;code&gt;ProjectContext&lt;/code&gt; will look like this.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class ProjectContext(KedroContext):    """Users can override the remaining methods from the parent class here,    or create new ones (e.g. as required by plugins)    """    project_name = "kedro-hooks"    # `project_version` is the version of kedro used to generate the project    project_version = "0.15.9"    package_name = "kedro-hooks"    hooks = [ debug_hook ] # 👈 This is where you implement the hook    def _get_pipelines(self) -&amp;gt; Dict[str, Pipeline]:        return create_pipelines()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run it!  While you are in the debugger, explore what the &lt;code&gt;run_params&lt;/code&gt;, &lt;code&gt;pipeine&lt;/code&gt;, and &lt;code&gt;catalog&lt;/code&gt; arguments give you.  This will give you some insight to what to expect when creating your next hook.&lt;/p&gt;&lt;h2&gt;preflight hook (module)&lt;/h2&gt;&lt;p&gt;&lt;em&gt;giving it a bit more flair&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Create a new file &lt;code&gt;kedro-hooks/src/kedro-hooks/preflight.py&lt;/code&gt; and place the following content into the file.  This will raise a &lt;code&gt;DataSetNotFoundError&lt;/code&gt; before wasting time running any of the pipeline.  This could be useful to save some developer time for long running pipelines by warning them that they don't have all of the raw data they need before running.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# kedro-hooks/src/kedro-hooks/preflight.pyfrom kedro.hooks import hook_implfrom kedro.io.core import DataSetNotFoundErrorfrom colorama import Foreimport textwrap@hook_impldef before_pipeline_run(run_params, pipeline, catalog):    missing_input = [i for i in pipeline.inputs() if not getattr(catalog.datasets, i)._exists()]    if len(missing_input) != 0:        raise DataSetNotFoundError(textwrap.dedent(f'''    {Fore.LIGHTBLACK_EX}――――――――  {Fore.RED}PREFLIGHT ERROR {Fore.LIGHTBLACK_EX}―――――――――    {Fore.RESET} preflight of pipeline failed due to {Fore.YELLOW}missing datasets    {Fore.BLUE} {missing_input}{Fore.RESET}    '''))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we are happy with this hook, it can live anywhere.  It can be a module inside our project.  It can be a separate libarary that gets handed out as a back ally wheel, or we can even publish it as its own package to pypi so that anyone can easily pip install it.&lt;/p&gt;&lt;h3&gt;One Step Back&lt;/h3&gt;&lt;p&gt;&lt;em&gt;a bit of explanation of preflight&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If you are not familiar, &lt;code&gt;pipeline.inputs()&lt;/code&gt; gives us all of the edge inputs into the pipeline.  kedro does also have a &lt;code&gt;pipeline.all_inputs()&lt;/code&gt; that tells us all of the edge and internal pipeline inputs that will be called throughout the pipeline run.  For this hook we are just concerned with the edge inputs as internal inputs will be generated during the run.&lt;/p&gt;&lt;p&gt;Also each one of the kedro datasets have an &lt;code&gt;_exists()&lt;/code&gt; method attached to them to check if the dataset exists or not.  For a more robust implementation of &lt;code&gt;preflight&lt;/code&gt; it would probably be best to ignore &lt;code&gt;AttributeError&lt;/code&gt;s, i.e the dataset type does not have an implementation of &lt;code&gt;_exists&lt;/code&gt;.  It would probably also be a good idea to filter for types such as &lt;code&gt;SQLQueryDataSet&lt;/code&gt;s that assume &lt;code&gt;_exists&lt;/code&gt; is False by default.&lt;/p&gt;&lt;h2&gt;Ideas&lt;/h2&gt;&lt;p&gt;Now that the juices are flowing what ideas do you have for &lt;code&gt;kedro&lt;/code&gt; hooks?&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/creating-the-kedro-preflight-hook</guid></item><item><title>Save Vim Macro</title><link>https://waylonwalker.com/save-vim-macro</link><description>If you are like me, you have created a macro or two that is pure glory, and you forget how you made it after a day or so, or you immediately want to store it away as a custom keybinding. As with most things with vim, it's easy to do once you understa</description><content:encoded>&lt;p&gt;If you are like me, you have created a macro or two that is pure glory, and you forget how you made it after a day or so, or you immediately want to store it away as a custom keybinding. As with most things with vim, it's easy to do once you understand it.&lt;/p&gt;&lt;h2&gt;Creating a Macro&lt;/h2&gt;&lt;p&gt;One of the earliest things we all learn to do in vim is to create macros, custom sets of functionality stored in a register that can be replayed later.&lt;/p&gt;&lt;p&gt;To create a macro, get into normal mode, then type &lt;code&gt;q&lt;/code&gt; followed by a letter that you want to store the macro under.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;qq&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Note: a common throw-away macro register is q because it's easy to hit qq from normal mode to start recording.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Replaying a Macro&lt;/h2&gt;&lt;p&gt;Macros can be replayed using &lt;code&gt;@&lt;/code&gt; followed by the letter that you stored the macro under.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;@q&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Registers&lt;/h2&gt;&lt;p&gt;Registers are nothing more than a single character key mapping to a value of some text. As you &lt;code&gt;yank&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, or create macros in vim, it automatically stores text into these registers.&lt;/p&gt;&lt;p&gt;When you hit &lt;code&gt;p&lt;/code&gt; paste it's simply pasting in the default register. You can also paste in any other register by hitting &lt;code&gt;"qp&lt;/code&gt; where q is the register that you want to paste in.&lt;/p&gt;&lt;h2&gt;Listing Registers&lt;/h2&gt;&lt;p&gt;To see what you have stored in each register, use the &lt;code&gt;:reg&lt;/code&gt; command. This is a powerful tool that I have underutilized for a long time. It is really great to see what you have in each register.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;:reg&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;making a macro into a shortcut&lt;/h2&gt;&lt;p&gt;&lt;em&gt;a little &lt;c-r&gt; magic&lt;/c-r&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The magical shortcut that makes it easy is that control + r &lt;code&gt;&amp;lt;C-R&amp;gt;&lt;/code&gt; followed by a register will paste that register wherever you currently are, including the command mode.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;:nnoremap {binding} &amp;lt;C-R&amp;gt;{register}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Editing a Macro&lt;/h2&gt;&lt;p&gt;&lt;em&gt;relieve some of that Macro Pressure&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Now that we understand that macros are simply strings of text placed into a register, it becomes a bit more intuitive to edit them after being created.&lt;/p&gt;&lt;p&gt;First, paste the contents of the register into your current working buffer.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;&amp;lt;C-R&amp;gt;q&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then edit the macro and add it back to that buffer and delete it.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;"qdd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If your macro had multiple lines in it, you might need to.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;"qdj"qd2j&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Make it recursive&lt;/h2&gt;&lt;p&gt;One use case of editing a macro may be making it recursive after trying it out a few times. Macros can become recursive by simply calling themselves after running.&lt;/p&gt;&lt;p&gt;Paste in the macro.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;&amp;lt;C-R&amp;gt;q&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go to the end of the line and add &lt;code&gt;@q&lt;/code&gt; to get called again.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;A @q&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace the &lt;code&gt;q&lt;/code&gt; register with the updated macro.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;"qd&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;Note: don't use this in a shortcut as the macro may change. If you want to call the keybinding again, you will have to use noremap instead of nnoremap, but be careful as recursive remaps can be dangerous.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Recap&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-vim"&gt;" record a macroq{register}" play a macro@{register}" list registers:reg" map a macro to a keyboard shortcut:nnoremap {binding} &amp;lt;C-R&amp;gt;{register}" edit a macro&amp;lt;C-R&amp;gt;{register}"{register}dd" make a macro recursive&amp;lt;C-R&amp;gt;{register}A@q&amp;lt;esc&amp;gt;"{register}dd&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/save-vim-macro</guid></item><item><title>Create New Kedro Project</title><link>https://waylonwalker.com/create-new-kedro-project</link><description>Getting up and going with a brand new [kedro](https://kedro.readthedocs.io) project is super simple, thanks to the help of the `kedro new` command.  The ability to add an example pipeline from the start makes it that much easier to get going and have a template to follow for your own projects.</description><content:encoded>&lt;p&gt;This is a quickstart to getting a new &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; pipeline up and running.  After this article you should be able to understand how to get started with &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt;.  You can learn more about this &lt;a href="https://kedro.readthedocs.io/en/stable/02_getting_started/04_hello_world.html"&gt;Hello World Example&lt;/a&gt; in the &lt;a href="https://kedro.readthedocs.io/en/stable/02_getting_started/04_hello_world.html"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;🧹 Install &lt;a href="https://kedro.readthedocs.io"&gt;Kedro&lt;/a&gt;&lt;/p&gt;&lt;p&gt;🛢 Create the Example Pipeline&lt;/p&gt;&lt;p&gt;💨 Run the example&lt;/p&gt;&lt;p&gt;📉 Show the pipeline visualization&lt;/p&gt;&lt;h2&gt;Create a Virtual Environment&lt;/h2&gt;&lt;p&gt;I use conda to control my virtual environments and will create a new environment called &lt;code&gt;kedro_iris&lt;/code&gt; with the following command.  &lt;strong&gt;note&lt;/strong&gt; the latest compatible version of python is 3.7.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: as of kedro 0.16.0 kedro supports up to 3.8&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n kedro_iris python=3.8 -y&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/conda-create-kedro-iris.gif" /&gt;&lt;/p&gt;&lt;p&gt;Options&lt;/p&gt;&lt;h2&gt;Activate your conda environment&lt;/h2&gt;&lt;p&gt;I try to keep my base environment as clean as possible.  I have ran into too many issues installing things in the base environment.  Almost always its some dependency that starts causing issues making it even harder to realize where its coming from as I never even installed it in base.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;source activate kedro_iris&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Install &lt;a href="https://kedro.readthedocs.io"&gt;Kedro&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Currently &lt;code&gt;kedro==0.15.5&lt;/code&gt; is available on pypi and can be pip installed.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; kedro is up to &lt;a href="https://pypi.org/project/kedro/"&gt;&lt;img alt="PyPI version" src="https://badge.fury.io/py/kedro.svg" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install kedro&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Make sure you are in the directory that you want your project in&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;cd /mnt/c/temp&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create a new &lt;a href="https://kedro.readthedocs.io"&gt;Kedro&lt;/a&gt; project&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro newcd kedro-irisgit initkedro install&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/kedro-new-iris.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Run the pipeline&lt;/h2&gt;&lt;p&gt;This will tell kedro to run your pipeline.  It will look at all of your nodes and determine the correct execution order for you, then run each one of them.  You can do this from a python script, python terminal session, or from the &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; cli.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;✨ It will look at all of your nodes and determine the correct execution order for you&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Lets run from the cli while in the same directory as kedro-iris&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro run&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/kedro-new-iris.gif" /&gt;&lt;/p&gt;&lt;h2&gt;Viz&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; is a priceless feature of &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt;.  It's like x-ray vision into your pipeline.  I can't imagine working without it after having it over the past year.  Unlike traditional documentation &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; cannot lie to you.  It will help guarantee your changes line up properly, plan out adding nodes, and identify dependencies of deprecating nodes.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Unlike traditional documentation &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; cannot lie to you.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Install &lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; is also on pypi and can be installed just like any other python package with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install kedro-viz&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Visualize the pipeline&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/quantumblacklabs/kedro-viz"&gt;kedro-viz&lt;/a&gt; is ran from the command line in the same directory as your kedro project.  There are ways to store your pipeline data as json, then load them from outside your project, but we will follow the standard practice for now.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro viz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt="" src="https://waylonwalker.com/kedro-viz-iris.gif" /&gt;&lt;/p&gt;&lt;h2&gt;🏗 Docker&lt;/h2&gt;&lt;p&gt;There is another package that makes creating docker images from kedro projects super simple &lt;a href="https://github.com/quantumblacklabs/kedro-docker"&gt;kedro-docker&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you dont already have docker installed on your machine, feel free to skip this section.&lt;/p&gt;&lt;h3&gt;install &lt;a href="https://github.com/quantumblacklabs/kedro-docker"&gt;kedro-docker&lt;/a&gt;&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pip install kedro-docker&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;build the image&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro docker build&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;run the image&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;kedro docker run&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Simple Huh&lt;/h2&gt;&lt;p&gt;Getting up and going with a brand new &lt;a href="https://kedro.readthedocs.io"&gt;kedro&lt;/a&gt; project is super simple, thanks to the help of the &lt;code&gt;kedro new&lt;/code&gt; command.  The ability to add an example pipeline from the start makes it that much easier to get going and have a template to follow for your own projects.&lt;/p&gt;&lt;h2&gt;Recap&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda create -n kedro_iris python=3.7 -ysource activate kedro_irispip install kedrocd /mnt/c/tempkedro new# give it a project name Kedro Iris# accept default package name kedro_iris# addept default directory name kedro-iris# yes for an example pipelinecd kedro-irisgit initgit add .git commit -m "initialized new kedro project"kedro installkedro runpip install kedro-vizkedro vizpip install kedro-dockerkedro docker buildkedro docker run&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Other resources&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://kedro.readthedocs.io/"&gt;kedro docs&lt;/a&gt; have a ton of great resources.  They are searchable, but can be a bit of an overwhelming amount of data.&lt;/p&gt;&lt;p&gt;I keep adding to my &lt;a href="https://waylonwalker.com/notes/kedro/"&gt;kedro notes&lt;/a&gt; as I find new and interesting things.&lt;/p&gt;&lt;p&gt;I tweet out most of those snippets as I add them, you can find them all here &lt;a href="https://twitter.com/search?q=%23kedrotips"&gt;#kedrotips&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;More to come&lt;/h2&gt;&lt;p&gt;I am planning to do more articles like this, you can stay up to date with them by following me on &lt;a href="https://dev.to/waylonwalker"&gt;dev.to&lt;/a&gt;, subscribing to my &lt;a href="https://waylonwalker.com/rss.xml"&gt;rss feed&lt;/a&gt;, or subscribe to my &lt;a href="https://waylonwalker.com/newsletter"&gt;newsletter&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/create-new-kedro-project</guid></item><item><title>git push without setting upstream</title><link>https://waylonwalker.com/git-push-without-setting-upstream</link><description>git config --global push.default current</description><content:encoded>&lt;p&gt;Finally after years of hand typing out a full &lt;code&gt;git push --upstream my\_really\_long\_and\_descriptive\_branch\_name&lt;/code&gt; I foudn there is a setting to automatcally push to the current branch. More realisitically I just did a &lt;code&gt;git push&lt;/code&gt; let git yell at me, and copying the suggestion.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git config --global push.default current&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This one setting will now &lt;code&gt;git push&lt;/code&gt; to the current branch without yelling at you that your upstream does not match your current branch.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/git-push-without-setting-upstream</guid></item><item><title>Adding Audio to my blog posts</title><link>https://waylonwalker.com/audio-for-blog</link><description>This is episode 1 of the Waylon Walker Audio experience, posts from
waylonwalker.com in audio form. So I have had this idea for awhile to add audio to my blog posts.  The idea
partly comes from the aws blog, if you have ever been on their blog you wi</description><content:encoded>&lt;iframe src="https://anchor.fm/waylon-walker/embed/episodes/Launching-Audio-for-the-Blog-en6kof" height="102px" width="400px" frameborder="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;p&gt;This is episode 1 of the Waylon Walker Audio experience, posts from&lt;a href="https://waylonwalker.com"&gt;waylonwalker.com&lt;/a&gt; in audio form.&lt;/p&gt;&lt;p&gt;So I have had this idea for awhile to add audio to my blog posts.  The ideapartly comes from the aws blog, if you have ever been on their blog you willhave noticed that they have a &lt;em&gt;voiced by amazon polly&lt;/em&gt; section.&lt;/p&gt;&lt;h2&gt;What to Expect&lt;/h2&gt;&lt;p&gt;Honestly I don't know this is all new to me and I dont have much to go off of.For now its a test that may or may not work out.&lt;/p&gt;&lt;p&gt;I will say that the time that I have available for clean audio is a bit limitedso expect these to come out in batches as I get time to go back and record.&lt;/p&gt;&lt;h2&gt;What Not to Expect&lt;/h2&gt;&lt;p&gt;One thing that makes the aws blog really hard to listen to is the roboticvoice, I definitely don't want that.  This will be voiced by a real human, Me.At the same time written text doesn't translate directly to audio well so don'tnecessarily expect the audio to beword for word.&lt;/p&gt;&lt;h2&gt;Code blocks&lt;/h2&gt;&lt;p&gt;There are a lot of code blocks in my blog, which don't translate directly intoI will do my best to read short one liners or describe larger blocks, but don'texpect a boring three minute read of large code blocks.&lt;/p&gt;&lt;h2&gt;Updates&lt;/h2&gt;&lt;p&gt;Expect to see these at the top of finished posts once I consider them done.  Iwill not likely come back to edit the audio if there is an edit to the postunless its major.  I will do my best to highlight changes in a note next to theembeded audio on the post.&lt;/p&gt;&lt;h2&gt;Lets do this&lt;/h2&gt;&lt;p&gt;If you like this idea give the posts a listen, share them with your friends,give me a shout out on twitter&lt;a href="https://twitter.com/_WaylonWalker"&gt;@_waylonwalker&lt;/a&gt;.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/crush-dev-to-posts"&gt;https://waylonwalker.com/crush-dev-to-posts&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;If you enjoyed this post you may enjoy another "meta" post&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/audio-for-blog</guid></item><item><title>Python Tips</title><link>https://waylonwalker.com/python-tips</link><description>&lt;h2&gt;Dictionaries&lt;/h2&gt;&lt;h3&gt;Unpacking&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;**kwargs&lt;/li&gt;&lt;li&gt;func(**input)&lt;/li&gt;&lt;li&gt;locals().update(d)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;###&lt;/p&gt;</description><guid isPermaLink="false">https://waylonwalker.com/python-tips</guid></item><item><title>FlexBox</title><link>https://waylonwalker.com/flexbox-zombies</link><description>none</description><content:encoded>&lt;style&gt;    em {        color: #ff9966;    }    code {        background: #FF06050A;        color: #6394C8;    }    .item {        color: #6394C8;        font-size: 1.5rem;        padding: 1rem;        display: flex;        justify-content: center;        align-items: center;        height: 100px;        width: 100px;        background: #351D57;        margin: 5px;        border: 2px solid #A83E75;        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);    }    .flex_container {        padding: 1rem;        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);        background: rgba(99, 148, 200, .2);        animation: animate_container 2s cubic-bezier(.66, -0.0, .28, 1.0) infinite both alternate;    }    .flex_container:hover {        animation: none    }    @keyframes animate_container {        0%{            width: 95%;        }        20% {            width: 95%;        }        80% {            width: 200px;        }        100% {            width: 200px;        }    }    h3 {        padding: 1rem;        margin: 2rem;        display: block;        width: 100vw;        background: white;        color: white;        background: #333;        position: sticky;        top: 0px;        box-shadow:  0 0 #333,                     -100vw 0 #333,                     100vw 0 #333;    }&lt;/style&gt;&lt;h1&gt;Flexbox-zombies&lt;/h1&gt;&lt;p&gt;I recently finished up the flexbox-zombies course to learn more about flexbox, and to become proficient with it.  I can truly say that this course has changed the way that I create layouts.  Flexbox is very intuitive now.  What this course does really well at is explaining the concepts and hitting you with a ton of examples that you can work through really quickly.&lt;/p&gt;&lt;p&gt;&lt;img alt="flexbox-zombies" src="./flexbox-zombies-12.gif" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A clip from the final round against Dave&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Basic Setup&lt;/h2&gt;&lt;p&gt;Flexbox requires a wrapper container to work  I will refer to this as the  flex container, and the items in that container as items.&lt;/p&gt;&lt;h3&gt;Markup&lt;/h3&gt;&lt;p&gt;I will use the following markup throughout the article, each with different css applied.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;  The animated container is inspired by the flexbox-zombies course.  I really like how it allows you to see the responsiveness of each layout.  In the early example the reasoning may not be aparent, but as we go along some of the flexbox parameters will make more sense if we are viewing them on a dynamic layout since flexbox is designed for building responsive design.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-HTML"&gt;&amp;lt;div class='flex_container'&amp;gt;    &amp;lt;div class='item'&amp;gt;1&amp;lt;/div&amp;gt;    &amp;lt;div class='item'&amp;gt;2&amp;lt;/div&amp;gt;    &amp;lt;div class='item'&amp;gt;3&amp;lt;/div&amp;gt;    &amp;lt;div class='item'&amp;gt;4&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div id="c0"&gt;    &lt;div class='flex_container'&gt;        &lt;div class='item'&gt;1&lt;/div&gt;        &lt;div class='item'&gt;2&lt;/div&gt;        &lt;div class='item'&gt;3&lt;/div&gt;        &lt;div class='item'&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;h3&gt;Base Style&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;    .item {        color: #6394C8;        font-size: 1.5rem;        padding: 1rem;        display: flex;        justify-content: center;        align-items: center;        height: 100px;        width: 100px;        background: #351D57;        margin: 5px;        border: 2px solid #A83E75;        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);    }    .flex_container {        padding: 1rem;        box-shadow: 5px 5px 10px -5px rgba(0, 0, 0, .6);        background: rgba(99, 148, 200, .2);        animation: animate_container 2s cubic-bezier(.66, -0.0, .28, 1.0) infinite both alternate;    }    /* Animate the .flex_container to show responsiveness */    .flex_container:hover {    /* But not on hover, let the user pause the annimation*/        animation: none    }    @keyframes animate_container {        0%{            width: 95%;        }        20% {            width: 95%;        }        80% {            width: 200px;        }        100% {            width: 200px;        }    }&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Basic Technique&lt;/h2&gt;&lt;h3&gt;1. Turn on the crossbow&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;&lt;code&gt;display: flex;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Turning on flexbox on the flex container will cause all child elements to align in a row at the top left corner of the parent container.  By defualt they will shrink to the minimum content size, but not automatically grow larger than their specified size.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;    .flex_container {                display: flex;        }&lt;/code&gt;&lt;/pre&gt;&lt;style&gt;    .c1 .flex_container {            display: flex;            flex-direction: row;    }&lt;/style&gt;&lt;div class='c1'&gt;    &lt;div class='c1 flex_container'&gt;        &lt;div class='item'&gt;1&lt;/div&gt;        &lt;div class='item'&gt;2&lt;/div&gt;        &lt;div class='item'&gt;3&lt;/div&gt;        &lt;div class='item'&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;h3&gt;2. Aim it if necessary&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This parameter determines the direction that the flexbox container will orient the flex items.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;example&lt;/strong&gt; &lt;code&gt;flex-direction: row&lt;/code&gt;&lt;strong&gt;options&lt;/strong&gt; = &lt;code&gt;('row'(default), 'column',  'row-reverse', 'column-reverse')&lt;/code&gt;&lt;/p&gt;&lt;h4&gt;row&lt;/h4&gt;&lt;style&gt;    .c2a .flex_container {            display: flex;            flex-direction: row;    }&lt;/style&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            flex-direction: row;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c2a'&gt;    &lt;div class='c1 flex_container'&gt;        &lt;div class='item'&gt;1&lt;/div&gt;        &lt;div class='item'&gt;2&lt;/div&gt;        &lt;div class='item'&gt;3&lt;/div&gt;        &lt;div class='item'&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;h4&gt;column&lt;/h4&gt;&lt;style&gt;    .c2b .flex_container {            display: flex;            flex-direction: column;    }&lt;/style&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            flex-direction: column;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c2b'&gt;    &lt;div class='c1 flex_container'&gt;        &lt;div class='item'&gt;1&lt;/div&gt;        &lt;div class='item'&gt;2&lt;/div&gt;        &lt;div class='item'&gt;3&lt;/div&gt;        &lt;div class='item'&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;h4&gt;row-reverse&lt;/h4&gt;&lt;style&gt;    .c2c .flex_container {            display: flex;            flex-direction: row-reverse;    }&lt;/style&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            flex-direction: row-reverse;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c2c'&gt;    &lt;div class='c1 flex_container'&gt;        &lt;div class='item'&gt;1&lt;/div&gt;        &lt;div class='item'&gt;2&lt;/div&gt;        &lt;div class='item'&gt;3&lt;/div&gt;        &lt;div class='item'&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;h4&gt;column-reverse&lt;/h4&gt;&lt;style&gt;    .c2d .flex_container {            display: flex;            flex-direction: column-reverse;    }&lt;/style&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            flex-direction: column-rerverse;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c2d'&gt;    &lt;div class='c1 flex_container'&gt;        &lt;div class='item'&gt;1&lt;/div&gt;        &lt;div class='item'&gt;2&lt;/div&gt;        &lt;div class='item'&gt;3&lt;/div&gt;        &lt;div class='item'&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;h3&gt;3. Line them up along the red Justify Laser&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;&lt;/p&gt;&lt;p&gt;This parameter determines justification of the flex items within the flex container.  Think spacing or positioning around the flex items.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;example&lt;/strong&gt; &lt;code&gt;justify-content: flex-end;&lt;/code&gt;&lt;strong&gt;options&lt;/strong&gt; = &lt;code&gt;('flex-start', 'flex-end', 'space-between', 'space-around', 'space-evenly', 'stretch', 'center', 'start', 'end', 'left', 'right')&lt;/code&gt;&lt;/p&gt;&lt;style&gt;.c3a .flex_container { display: flex; justify-content: flex-start; }&lt;/style&gt;&lt;style&gt;.c3b .flex_container { display: flex; justify-content: flex-end; }&lt;/style&gt;&lt;style&gt;.c3c .flex_container { display: flex; justify-content: space-between; }&lt;/style&gt;&lt;style&gt;.c3d .flex_container { display: flex; justify-content: space-around; }&lt;/style&gt;&lt;style&gt;.c3e .flex_container { display: flex; justify-content: space-evenly; }&lt;/style&gt;&lt;style&gt;.c3f .flex_container { display: flex; justify-content: center; }&lt;/style&gt;&lt;h4&gt;flex-start&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: flex-start;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c3a'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;flex-end&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: flex-end;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c3b'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;space-between&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content:space-between;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c3c'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;space-around&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: space-around;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c3d'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;space-evenly&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: space-evenly;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c3e'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;center&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: center;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c3f'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;3b. Align them along the  blue Alignment Laser&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;* &lt;code&gt;align-items: flex-end;&lt;/code&gt;* options = ('flex-start', 'flex-end', 'normal', 'end', 'self-start', 'self-end', 'center', 'start' 'end')&lt;/p&gt;&lt;style&gt;.c4a .flex_container { height: 200px; display: flex; align-items: flex-start; }&lt;/style&gt;&lt;style&gt;.c4b .flex_container { height: 200px; display: flex; align-items: flex-end; }&lt;/style&gt;&lt;style&gt;.c4c .flex_container { height: 200px; display: flex; align-items: center; }&lt;/style&gt;&lt;h4&gt;flex-start&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: flex-start;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c4a'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;flex-end&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: flex-end;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c4b'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;center&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: center;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c4c'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;4. Take care of any one-off alignments&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to items&lt;/em&gt;* &lt;code&gt;align-self: flex-start;&lt;/code&gt;* options = ('flex-start', 'flex-end', 'normal', 'end', 'self-start', 'self-end', 'center', 'start' 'end')&lt;/p&gt;&lt;style&gt;    .c5d .flex_container { height: 200px; display: flex; align-items: stretch; }    .c5d .item:nth-of-type(1){ align-self: flex-start  }    .c5d .item:nth-of-type(2){ align-self: center}    .c5d .item:nth-of-type(3){ height: auto; align-self: stretch;}    .c5d .item:nth-of-type(4){ height: auto; align-self: flex-end;}&lt;/style&gt;&lt;h4&gt;combine&lt;/h4&gt;&lt;p&gt;the align-self property is used to take care of one off alignments and is applied to the item itself.  All of the parameters are the same as &lt;code&gt;align-items&lt;/code&gt;.  In this example we will apply all of the previous example alignment types into one.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {    display: flex;     }.item:nth-of-type(1){     align-self: flex-start     }.item:nth-of-type(2){     align-self: center     }.item:nth-of-type(3){     height: auto; align-self: stretch;     }.item:nth-of-type(4){     height: auto; align-self: flex-end;     }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c5d'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;6. growth along the red Justify Laser&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to items&lt;/em&gt;* &lt;code&gt;flex-grow: 1&lt;/code&gt;&lt;/p&gt;&lt;style&gt;.c6a .flex_container { display: flex; align-items: flex-start; } .c6a .item:nth-of-type(3){background: #B5F685; flex-grow: 1;}&lt;/style&gt;&lt;style&gt;.c6b .flex_container { display: flex; align-items: flex-start; } .c6b .item:nth-of-type(3){background: #B5F685; flex-grow: 1;} .c6b .item:nth-of-type(1){background: #B5F685; flex-grow: 2;}&lt;/style&gt;&lt;h4&gt;flex-grow&lt;/h4&gt;&lt;p&gt;By setting &lt;code&gt;flex-grow: 1;&lt;/code&gt; on item &lt;code&gt;3&lt;/code&gt; it will take up any available free space.&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;    }.item:nth-of-type(3) {    flex-grow: 1}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;div class='c6a'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;multiple flex-grow&lt;/h4&gt;&lt;p&gt;By setting &lt;code&gt;flex-grow: 2;&lt;/code&gt; on item  &lt;code&gt;1&lt;/code&gt; will take up the available free space 2x faster than &lt;code&gt;3&lt;/code&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            justify-content: flex-start;    }.item:nth-of-type(3) {    flex-grow: 1}.item:nth-of-type(1) {    flex-grow: 2}&lt;/code&gt;&lt;/pre&gt;&lt;div class='c6b'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;7. setting length of items along the red Justify Laser&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to items&lt;/em&gt;&lt;em&gt;in order of importance&lt;/em&gt;* &lt;code&gt;min-width&lt;/code&gt;* &lt;code&gt;max-width&lt;/code&gt;* &lt;strong&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/strong&gt;* &lt;code&gt;width&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;8. Out of Order&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to items&lt;/em&gt;&lt;em&gt;behaves similar to z-index&lt;/em&gt;* &lt;code&gt;order&lt;/code&gt; - takes an integer value&lt;/p&gt;&lt;style&gt;.c8a .flex_container { display: flex;} .c8a .item:nth-of-type(3){background: #B5F685; order: 1;}&lt;/style&gt;&lt;style&gt;.c8b .flex_container { display: flex;} .c8b .item:nth-of-type(3){background: #B5F685; order: -1;}&lt;/style&gt;&lt;h4&gt;order 1&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;    }.item:nth-of-type(3) {    order: 1}&lt;/code&gt;&lt;/pre&gt;&lt;div class='c8a'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h4&gt;order -1&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;    }.item:nth-of-type(3) {    order: -1}&lt;/code&gt;&lt;/pre&gt;&lt;div class='c8b'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;9. Get your own Line&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt; - options= &lt;code&gt;(wrap, nowrap(default))&lt;/code&gt;&lt;/li&gt;&lt;li&gt;prefers wrap over shrink&lt;/li&gt;&lt;li&gt;but will still shrink after fully wraped&lt;/li&gt;&lt;/ul&gt;&lt;style&gt;.c9a .flex_container { display: flex; flex-wrap: wrap;} .c9a {height: 700px;}&lt;/style&gt;&lt;h4&gt;wrap&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            flex-wrap: wrap;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c9a'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;10. Aligning wrapped content&lt;/h3&gt;&lt;p&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;align-content&lt;/code&gt; - same specs as align-items but works on wrapped content.&lt;/li&gt;&lt;/ul&gt;&lt;style&gt;.c10a .flex_container { display: flex; flex-wrap: wrap; align-content: center;} .c10a .flex_container{height: 700px;}&lt;/style&gt;&lt;h4&gt;wrap&lt;/h4&gt;&lt;pre class="highlight"&gt;&lt;code class="language-css"&gt;.flex_container {            display: flex;            height: 700px;            flex-wrap: wrap;            align-content: center;    }&lt;/code&gt;&lt;/pre&gt;&lt;div class='c10a'&gt; &lt;div class='flex_container'&gt; &lt;div class='item'&gt;1&lt;/div&gt; &lt;div class='item'&gt;2&lt;/div&gt; &lt;div class='item'&gt;3&lt;/div&gt; &lt;div class='item'&gt;4&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3&gt;11. Shortcuts&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;flex&lt;/strong&gt;&lt;em&gt;applied to the flex items&lt;/em&gt;*  &lt;code&gt;flex: grow, shrink, basis&lt;/code&gt;* defaults - &lt;code&gt;flex: 1 1 0px&lt;/code&gt;* setting &lt;code&gt;flex: none&lt;/code&gt; is equivalent to &lt;code&gt;flex: 0 0 auto&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;flex-flow&lt;/strong&gt;&lt;em&gt;applied to the flex container&lt;/em&gt;* &lt;code&gt;flex: flex-direction flex-wrap&lt;/code&gt;*&lt;/p&gt;&lt;h3&gt;Chapter 7: In a Perfect World (flex-basis)&lt;/h3&gt;&lt;p&gt;&lt;code&gt;flex-basis&lt;/code&gt;* Starting point, ideal size, hypothetical size* applied to items* overrides width* shinks if necessary&lt;/p&gt;&lt;p&gt;When Shooting Horizontally it controls width&lt;/p&gt;&lt;p&gt;When Shooting Vertically it controls height&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/flexbox-zombies</guid></item><item><title>automate your deploys</title><link>https://waylonwalker.com/automate-your-deploys</link><description></description><guid isPermaLink="false">https://waylonwalker.com/automate-your-deploys</guid></item><item><title>Compare Directories In Bash</title><link>https://waylonwalker.com/compare-directories-in-bash</link><description>Today I needed to check for articles that used the same slug from two directories, bash made it super simple.</description><content:encoded>&lt;p&gt;Today I needed to check for articles that used the same slug from two directories, bash made it super simple.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;diff -rq src/pages/blog src/pages/notes&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/compare-directories-in-bash</guid></item><item><title>No More Death By PowerPoint</title><link>https://waylonwalker.com/death-by-powerpoint</link><description>none</description><content:encoded>&lt;h1&gt;No More Death By PowerPoint&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec &lt;strong&gt;DEATH BY POWERPOINT&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If you have not seen David JP Phillips &lt;a href="https://www.youtube.com/watch?v=Iwpi1Lm6dFo"&gt;Death By PowerPoint&lt;/a&gt;  TEDx, stop now and watch it.  You will never look at slides the same again.  Watching this video ruined me for watching presentations with these issues.  Reveal is a tool that makes it very easy to follow these principles&lt;/p&gt;&lt;p&gt;I currently work in a company that employs over 100K employees, and to this day I cannot recall a single presentation given where the slides did not violate the rules stated in David's Talk.  This year I am putting a stop to this starting with myself.  I am starting a new job role in 2018 and there is no better time to make some drastic changes to my workflow than now.  I expect there to be a few followers and many naysayers, but I dont care.  I will employ the directives listed below.&lt;/p&gt;&lt;h2&gt;1+1=0&lt;/h2&gt;&lt;p&gt;Very few people (&lt;em&gt;if any&lt;/em&gt;) in your will be able to multi-task.  The human brain is just not built to truly multi-task.  Some folks can be good at task switching quickly but very few of us can truly multi-task.  By overwhelming your audience with more than one distinct message, you have successfully overwhelmed your audience and successfully delivered 0 messages to your audiance.&lt;/p&gt;&lt;h2&gt;6 items&lt;/h2&gt;&lt;p&gt;The human brain is very capable of processing up to 6 items very efficiently, beyond this becomes an exponential rate of processing.  Watch David's video and you will see a remarkable example.&lt;/p&gt;&lt;h2&gt;Size and Contrast&lt;/h2&gt;&lt;p&gt;The most important points should be the fist thing that your eye goes to on the screen.&lt;/p&gt;&lt;h2&gt;More Slides&lt;/h2&gt;&lt;p&gt;No one ever said the sheer amount of slides was ever the problem.&lt;/p&gt;&lt;h2&gt;Supporting Material&lt;/h2&gt;&lt;p&gt;Sentences, Notes, reference material, etc belong in the speaker notes.  This is the part that took the longest for me to realize.  In my company PowerPoint documents as living documents that folks will reference long after the presentation is over.  For this reason we tend to put every point that we want to discuss on the slides, so that they are there weeks, months, even years later when someone goes back to review your slides.  Placing this material in the speaker notes will allow you to utilize your presentation as reference material if you need to, and refrain from placing it on the screen.&lt;/p&gt;&lt;h2&gt;Tools&lt;/h2&gt;&lt;p&gt;A tool that is becoming very popular outside of the PowerPoind world is &lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal js&lt;/a&gt;.  It is a fantastic framework to build beautiful slides using html.  I find that maintaining html to be a bit cumbersome. And the templating language &lt;a href="https://pugjs.org/"&gt;pug&lt;/a&gt; to be much more simple.  I will be using my own fork of &lt;a href="https://github.com/jlengstorf/reveal.js-jade"&gt;reveal.js-jade&lt;/a&gt; in 2018.  It will allow me to have interactive visualizations right in my slides.  Reveal also does a really nice job at making it hard to break the Death By PowerPoint rules.  It tends to be hard to jam a ton of information into them.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/death-by-powerpoint</guid></item><item><title>Gratitude 033</title><link>https://waylonwalker.com/gratitude_033</link><description>Today started out like most days, morning routine, kids in the car and headed to preschool.  Since Rhiannon got the January mug at Starbucks we have been stopping there for the morning coffee on the way to preschool.  As we were leaving a police car </description><content:encoded>&lt;h4&gt;Safety&lt;/h4&gt;&lt;p&gt;Today started out like most days, morning routine, kids in the car and headed to preschool.  Since Rhiannon got the January mug at Starbucks we have been stopping there for the morning coffee on the way to preschool.  As we were leaving a police car came roaring from the parking lot lights on right behind us.  There was an accident at the intersection right in front of Starbucks.  Passing by the accident it clearly looked like one car took more damage than the other, and that it was from being hit by another car and pushed into a pole at a high speed.  My heart goes out to them! It made me really grateful that we have not been in any accidents, especially because we typically drive down a very crazy road in the mornings.  It is not uncommon to come accross accidents along the way.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_033</guid></item><item><title>Gratitude 055</title><link>https://waylonwalker.com/gratitude_055</link><description>Ayla was born 4 years ago with her fair share of medical issues.  Most of which are resolved... potty training continues to be a source of difficulty for us.   We have relaxed and are letting her take the wheel at the moment.  It is slow going, but e</description><content:encoded>&lt;h4&gt;Signs of Improvement&lt;/h4&gt;&lt;p&gt;Ayla was born 4 years ago with her fair share of medical issues.  Most of which are resolved... potty training continues to be a source of difficulty for us.   We have relaxed and are letting her take the wheel at the moment.  It is slow going, but every once in awhile she shows us a spark of hope that she will get it. Yesterday was one of those days.  It is good to continue to let these moments revive our hope that she can do it and that when we are ready to push her again she will be ready to take charge.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_055</guid></item><item><title>Gratitude 053</title><link>https://waylonwalker.com/gratitude_053</link><description>We recently (today) found out that that Wyatt has moderatly severe Sleep apnea.  This explains a  lot for him, and is a bit scary for us at the moment, and we are hoping for the best for him.  We wouldnt have found out any of this if it wasnt for Rhi</description><content:encoded>&lt;h4&gt;She is a RockStar&lt;/h4&gt;&lt;p&gt;We recently &lt;em&gt;(today)&lt;/em&gt; found out that that Wyatt has moderatly severe Sleep apnea.  This explains a  lot for him, and is a bit scary for us at the moment, and we are hoping for the best for him.  We wouldnt have found out any of this if it wasnt for Rhiannon.  She is an advocate for these kids like nothing else.  The mom gene is strong wiht this one.  When she knows something is wrong in her gut, she stops at nothing to find answers.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_053</guid></item><item><title>Gratitude 089</title><link>https://waylonwalker.com/gratitude_089</link><description>Lately has seemed incredibly busy.  I feel like I just dont quite have enough time to the things done that I want to get done. Key word to remember is want.  I am extremely grateful that my opinion is valued so much that it keeps me this busy.  I am </description><content:encoded>&lt;h4&gt;Keeping Busy&lt;/h4&gt;&lt;p&gt;Lately has seemed incredibly busy.  I feel like I just dont quite have enough time to the things done that I want to get done. Key word to remember is want.  I am extremely grateful that my opinion is valued so much that it keeps me this busy.  I am gratful that the things that &lt;strong&gt;need&lt;/strong&gt; to get done, do get done.  I am grateful that I am still able to get &lt;strong&gt;some&lt;/strong&gt; of the things that I &lt;strong&gt;want&lt;/strong&gt; to get done each day.  Each day is a new one, with exciting challenges along the way.  It's what keeps life exciting.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_089</guid></item><item><title>Gratitude 037</title><link>https://waylonwalker.com/gratitude_037</link><description>I cannot express how grateful I am for Rhiannon's smarts when it comes to raising small children.  These things are complicated and only continue to get more complicated as they grow!  There are times where I am just not quite sure what to do or how </description><content:encoded>&lt;h4&gt;Kid Smarts&lt;/h4&gt;&lt;p&gt;I cannot express how grateful I am for Rhiannon's smarts when it comes to raising small children.  These things are complicated and only continue to get more complicated as they grow!  There are times where I am just not quite sure what to do or how to handle certain situations, and she will come back with an answer that makes sense.  Giving an understanding about how that would make the child feel in the moment and what it will do to them in the long term.  As I am growing these understandings things are making more sense, but I still feel like I have a lot to learn when it comes to parenting.  I am not only grateful that she takes the lead on the research and develops new strategies as they grow, but she is also able to present to me in a way that makes sense.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_037</guid></item><item><title>Gratitude 009</title><link>https://waylonwalker.com/gratitude_009</link><description>Today we are nearing the last week before Rhiannon's Next Treatment in chemotherapy.  It was a rough day, she had a bad carcinoid attack last night and was on edge of another all day today.  I am grateful that we were able to get in with a really goo</description><content:encoded>&lt;h4&gt;Good Doctors&lt;/h4&gt;&lt;p&gt;Today we are nearing the last week before Rhiannon's Next Treatment in chemotherapy.  It was a rough day, she had a bad carcinoid attack last night and was on edge of another all day today.  I am grateful that we were able to get in with a really good oncologist.  The best in the area in terms of carcinoid cancer.  I am really glad that he has a plan for us and it is helping get through most of the month between doses.  Since it is such a rare type of cancer there are few knowledgeable in the subject, which just makes it that much better that we are in with the best.   It allows us to have some really good days.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_009</guid></item><item><title>Gratitude 015</title><link>https://waylonwalker.com/gratitude_015</link><description>I love having those special moments of time with the kids.  Today we had a few minutes to play before supper time, and we decided to go down to the basement to play some imagination action adventure game.  The kids are really into minecraft at the mo</description><content:encoded>&lt;h4&gt;Special Moments&lt;/h4&gt;&lt;p&gt;I love having those special moments of time with the kids.  Today we had a few minutes to play before supper time, and we decided to go down to the basement to play some imagination action adventure game.  The kids are really into minecraft at the moment so its always very centered around minecraft.  Tonight there was an extra special moment where Wyatt on his own gave Ayla his brand new nerf gun to play with.  At this point he has not alowed her to play with it because it was a new Christmas toy.  She was extatic, and we all enjoyed running from her as she shot towards us.  I thought it was extra special because we were all having fun and no one was arguing about who got the new toy.  I am so proud of Wyatt, because he is really growing up and growing out of the not sharing phase. I have really seen him open up to share an play with Ayla in new ways lately.  It really makes you feel like a good parent when you can watch them grow up like this.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_015</guid></item><item><title>Gratitude 046</title><link>https://waylonwalker.com/gratitude_046</link><description>I am very grateful that we have help with the kids when we need it on a moments notice.  Today I came home with a migrane, and was able to rest up for a little while before helping them with bedtime.  Rather than pushing though and being miserable, I</description><content:encoded>&lt;h4&gt;Kid Help&lt;/h4&gt;&lt;p&gt;I am very grateful that we have help with the kids when we need it on a moments notice.  Today I came home with a migrane, and was able to rest up for a little while before helping them with bedtime.  Rather than pushing though and being miserable, I was able to take a short break then proceed with a nice night with the kids and Rhiannon.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_046</guid></item><item><title>Gratitude 095</title><link>https://waylonwalker.com/gratitude-095</link><description>Its been 8 great years so far.  We have grown together so much along the way.  I don't think that we could have every planned out our path to get where we are today 8 years ago.  We did know one thing, that we would be here together.  We fight whatev</description><content:encoded>&lt;h4&gt;Happy Anniversary&lt;/h4&gt;&lt;p&gt;Its been 8 great years so far.  We have grown together so much along the way.  I don't think that we could have every planned out our path to get where we are today 8 years ago.  We did know one thing, that we would be here together.  We fight whatever challenges come our way together.  We can beat anything as long as we stick together on the same page.  trouble comes as soon as we loose sight  of that and work alone.  Together we have grown so much more than either of us could have done alone. There are challenges that neither of us could have conquered alone.  I cannot imagine myself facing these challenges with anyone else.  I know that we can defeat whatever comes our way in the future, because together we are strong.  I Love you Rhiannon Walker, &lt;em&gt;Forever and Ever&lt;/em&gt;.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude-095</guid></item><item><title>Gratitude 074</title><link>https://waylonwalker.com/gratitude_074</link><description>I am so grateful that even during a rough time, a time where I feel that I struggle to get things accomplished.  I feel that I dont put the time in, people recognize me for my work.  There are days that I feel that I cannot get the simplest of thing </description><content:encoded>&lt;h4&gt;Anti-Imposter&lt;/h4&gt;&lt;p&gt;I am so grateful that even during a rough time, a time where I feel that I struggle to get things accomplished.  I feel that I dont put the time in, people recognize me for my work.  There are days that I feel that I cannot get the simplest of thing to work, and wonder what am I doing here, I feel like I dont know how to do what I need to, someone pops in to say thanks for my work for them.  Sometimes I feel that I stretch myself too broad and I do too many different types of things to get good at any of them.  Then someone comes my way to ask me how to do it because they know I am one of the few in our area that knows the full spectrum from end to end.  These gentle reminders keep me going.  They remind me that I can do it.  They remind me that no everyone knows what they are doing 100% of the time.  They remind me where I was, and where I am.  They remind me of the progress that I have already made.  They remind me that my goals are always changing and moving, but along the way I have reached so many.  So today, tell someone about the great work that they did, and how it helped you.  Tell them that you have confidence in their work and their hard work is appreciated.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_074</guid></item><item><title>Gratitude 088</title><link>https://waylonwalker.com/gratitude_088</link><description>It's been a bit of a rough go in our family.  Above the normal advanced someone or several of us have been sick nearly all winter.  Rhiannon has seen the worst of the struggle with a very long running congestion.  Through all of this we are here to s</description><content:encoded>&lt;h4&gt;Helping each other&lt;/h4&gt;&lt;p&gt;It's been a bit of a rough go in our family.  Above the normal advanced someone or several of us have been sick nearly all winter.  Rhiannon has seen the worst of the struggle with a very long running congestion.  Through all of this we are here to support each other.  The mental toll of being sick and tending to others who are sick takes a lot out of each of us.  We are still able to work together, pick each other up and keep going. Some days are harder than others, some days we do not feel at our best be we still find the strength to help the others through.  Yesterday Rhiannon helped me through a very rough time.  I am so grateful for her abilitiy to dig into the menal stuff and help out.  This is something that I find very hard to do.  She is great at it.  She is rally able to help me and the kids when we are feeling overwhelmed.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_088</guid></item><item><title>Gratitude 017</title><link>https://waylonwalker.com/gratitude_017</link><description>Breaks are a good time for refresh and focus on some other things.  During this holiday break I have been able to spend quite a bit of time with my beautiful wife Rhiannon.  I have really enjoyed helping her setup her new adventure Cuttin Scrap.  It </description><content:encoded>&lt;h4&gt;Breaks&lt;/h4&gt;&lt;p&gt;Breaks are a good time for refresh and focus on some other things.  During this holiday break I have been able to spend quite a bit of time with my beautiful wife Rhiannon.  I have really enjoyed helping her setup her new adventure &lt;a href="www.cuttinscrap.com"&gt;Cuttin Scrap&lt;/a&gt;.  It will be a nice creative outlet for her to combine her love of sewing and crafting with her love of speech and writing.  I am really excited to see her get going.&lt;/p&gt;&lt;p&gt;We have also spent some time at nights playing games and watching YouTube.  Its really nice to not have to worry about anything work related and focus on the family.  The extra time has helped strengthen our marriage and allow us to discuss some things that have been on our minds for awhile.  Now its time to start 2018 Fresh and Strong.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_017</guid></item><item><title>Gratitude 049</title><link>https://waylonwalker.com/gratitude_049</link><description>Today I woke up to find a very inspiring note from Rhiannon.  It was hand writtent front and back!  In the note she talked about the stuggles that we have had over the last 2 years, and that while reading through her journal there was one thing that </description><content:encoded>&lt;h4&gt;Support&lt;/h4&gt;&lt;p&gt;Today I woke up to find a very inspiring note from Rhiannon.  It was hand writtent front and back!  In the note she talked about the stuggles that we have had over the last 2 years, and that while reading through her journal there was one thing that kept her going day in and day out, me.  I have been there through the hard times for her.  Yesterday I heard some news that was very sad for me to hear, and made me very unsure of the future.  She left me this note to let me know that no matter what happens she will be there by my side and we will get through it together.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_049</guid></item><item><title>Gratitude 013</title><link>https://waylonwalker.com/gratitude_013</link><description>This Christmas we had two events on Christmas day, with 5 hours of travel, and a final destination to sleep at.  I am very grateful that we were able to get through all of the travel in one piece.  THe kids had a blast!  It was a very fun Christmas f</description><content:encoded>&lt;h4&gt;Long Days, Good Times&lt;/h4&gt;&lt;p&gt;This Christmas we had two events on Christmas day, with 5 hours of travel, and a final destination to sleep at.  I am very grateful that we were able to get through all of the travel in one piece.  THe kids had a blast!  It was a very fun Christmas for them.  Wyatt got his most wished for gift this year, Maui's hook from Moana.  It was so fun to watch him open it.  He was absolutely speechless.&lt;/p&gt;&lt;p&gt;I am glad everyone was able to enjoy the food.  Both events were very accomodating to our family allergies.  The first event was a potato bar where everything was kept separate and you could personalize your dish.  The kids really just wanted to snack all day.  At the second event they went out of their way to find dairy free butter to cook wtih.  There were only one or two items that had dairy in them.  It feels good to be supported by your family.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_013</guid></item><item><title>Gratitude 034</title><link>https://waylonwalker.com/gratitude_034</link><description>Today I am grateful that I am able to communicate with my beautiful wife Rhiannon. I am so glad that we are able to help each other out on our worst days, and keep going even after our bad moments.  We are able to grow and build off of each other.  I</description><content:encoded>&lt;h4&gt;Communication&lt;/h4&gt;&lt;p&gt;Today I am grateful that I am able to communicate with my beautiful wife Rhiannon. I am so glad that we are able to help each other out on our worst days, and keep going even after our bad moments.  We are able to grow and build off of each other.  I am grateful that we have an open and honest relationship that we are able to talk about anything.  We have had a rough month, and will continue to have a rough patch until after Feb. 20.  Its to be expected that we have these patches with her illness. I am really grateful that we are able to get through them together, so that we can enjoy the good days.  Good days are coming, lets make the best out of the rough ones together.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_034</guid></item><item><title>Gratitude 042</title><link>https://waylonwalker.com/gratitude_042</link><description>Today I am very grateful for all of the wonderful birthday wishes.  I started off the day with two very excited kids.  They couldn't wait to wake up, give daddy a big hug and wish him happy birthday today.  My kids love them some birthday wishes and </description><content:encoded>&lt;h4&gt;Happy Birthday&lt;/h4&gt;&lt;p&gt;Today I am very grateful for all of the wonderful birthday wishes.  I started off the day with two very excited kids.  They couldn't wait to wake up, give daddy a big hug and wish him happy birthday today.  My kids love them some birthday wishes and do all they can to make the birthday person  feel special.  Next the text messages started to roll in.  It is nice to hear from everyone that I havent heard from in awhile.  At night Scott Volunteered to bathe the kids, and get pajammas on them, while I was able to spend a  bit more time with Rhiannon.  Speaking of which...&lt;/p&gt;&lt;p&gt;I didnt forget the most special of all.  Rhiannon, my beautiful wife, was a soldier  today.  She got up, forgone the medicine, and headed out with me bright and early to take the kids to Pre-K, get coffee, and run various errands.  In which we ran into smoke on several occassions that nearly took her down.  While I was out taking Wyatt to therapy, and picking up Ayla.  She muscled through and finished my quilt, wrapped my presents, and cooked an amazing jumbalya!!&lt;/p&gt;&lt;p&gt;All in all this was one of the best days I have had in awhile, Thanks everyone!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_042</guid></item><item><title>Gratitude 051</title><link>https://waylonwalker.com/gratitude_051</link><description>Today I am grateful for the fact that I have someone to talk about my problems with.  Rhiannon is very influential when it comes to mental health.   She has conconcoured several very difficult issues of her own and is able to guide me through mine.  </description><content:encoded>&lt;h4&gt;Talking&lt;/h4&gt;&lt;p&gt;Today I am grateful for the fact that I have someone to talk about my problems with.  Rhiannon is very influential when it comes to mental health.   She has conconcoured several very difficult issues of her own and is able to guide me through mine.  I am glad that we are able to talk through these things and come up with actionable things to correct.&lt;/p&gt;&lt;p&gt;Life remains a rollar coaster and these issues will come  and go, new ones will rise and fall, old ones will creep in.  It is important to keep someone like this who you can talk to.  For me it is &lt;strong&gt;very&lt;/strong&gt; difficult to identify what the root issue is to begin with let alone try to fix it.  Recently I was really struggling and it came down to confidence/imposter syndrome.  She was able to identify that, and point out some really amazing feedback that I have recieved as truth that I am achieving great standards, even if I dont feel that way when I am lost in the weeds of everything.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_051</guid></item><item><title>Gratitude 045</title><link>https://waylonwalker.com/gratitude_045</link><description>Yesterday Rhiannon and I were able to get some much needed time away for some  very overdue haircuts.  It was really nice to be able to just take off and leave the kids with friends on a whim. While it takes all that she's got to go anywhere I am sti</description><content:encoded>&lt;h4&gt;Time Out&lt;/h4&gt;&lt;p&gt;Yesterday Rhiannon and I were able to get some much needed time away for some  very overdue haircuts.  It was really nice to be able to just take off and leave the kids with friends on a whim. While it takes all that she's got to go anywhere I am still very grateful that she is able to get out of the house.  It was nice to spend a dreary day out with her.  Dreary days are the best because the air is always fresh and clear of most environmental smoke.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;While it takes all that she's got to go anywhere I am still very grateful that she is able to get out of the house.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_045</guid></item><item><title>Gratitude 014</title><link>https://waylonwalker.com/gratitude_014</link><description>I am currently in the middle of a week long holiday break.  Its nice to take some time off from the everyday hustle to refresh the brain and focus on some other things.  We are able to do quite a bit of traveling and see family that we do not get to </description><content:encoded>&lt;h4&gt;Time Off&lt;/h4&gt;&lt;p&gt;I am currently in the middle of a week long holiday break.  Its nice to take some time off from the everyday hustle to refresh the brain and focus on some other things.  We are able to do quite a bit of traveling and see family that we do not get to see very often.  I am able to spend more time with my wife and the kids.  I have also started making a website for my wife.  Its probably something that I would not otherwise have time to dig deeply into and make nearly the same progress as quickly.&lt;/p&gt;&lt;p&gt;The time in the car can be a nice time to connect.  We have taken quite a bit of time to plan out Rhiannon's new adventure, CuttinScrap.  It is a YouTube channel that will serve as her creative outlet, combining her love of speech and Drama with Crafting.  I am really excited to see her find her voice and get into a rhythm with the channel.  She is really excited as well.  We have been doing a lot of planning and behind the scenes work and anxiously awaiting time to make episode 0.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_014</guid></item><item><title>Gratitude 077</title><link>https://waylonwalker.com/gratitude_077</link><description>It's the dead of winter, the cold January months, so cold in fact schools closed down for two days due to an arctic wind.  For these two days Wyatt brought home homework to do at home.  Nothing big just a few simple things.  This really opened my eye</description><content:encoded>&lt;h4&gt;Teacher Appreciation&lt;/h4&gt;&lt;p&gt;It's the dead of winter, the cold January months, so cold in fact schools closed down for two days due to an arctic wind.  For these two days Wyatt brought home homework to do at home.  Nothing big just a few simple things.  This really opened my eyes up to what teachers have to go through every day.  It is really tough to get him focused on doing the work for very long at all.  It is tough as an adult when you are &lt;em&gt;sooo&lt;/em&gt; close to the end of the task to let go and give a break, or to let him do it his way when you know he is capable of doing better.  For this I am grateful that we have teachers that are experts at working with kids like Wyatt to give him the best education possible, because without them I would loose my mind!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_077</guid></item><item><title>Gratitude 023</title><link>https://waylonwalker.com/gratitude_023</link><description>This year I started a new position at work.  Everything about it is enjoyable.  Not sure if that is jut the honeymoon phase or not.  I am working as a data scientist.  Its exciting that there is so much low hanging fruit to be had.  In my previous ro</description><content:encoded>&lt;h4&gt;Excitement&lt;/h4&gt;&lt;p&gt;This year I started a new position at work.  Everything about it is enjoyable.  Not sure if that is jut the honeymoon phase or not.  I am working as a data scientist.  Its exciting that there is so much low hanging fruit to be had.  In my previous role as an engineer I was in a very established role.  While this role was great,  I really enjoyed it, and had no intentions of moving until  this oppotunity landed in my lap.  I felt like being in such an establishd role the job was to follow the processes that had been previously set up.  Now being in a much less established role there is a lot more room for creativity.  I like getting to work and really being excited to get to work creating things that add value to the organization.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_023</guid></item><item><title>Gratitude 024</title><link>https://waylonwalker.com/gratitude_024</link><description>Over the past few years we have recieved tons of support from other people.   This is something that I am very grateful for and we would not be where we are today without it.  Along our journey we have came in contact with some very generous folks.  </description><content:encoded>&lt;h4&gt;Support&lt;/h4&gt;&lt;p&gt;Over the past few years we have recieved tons of support from other people.   This is something that I am very grateful for and we would not be where we are today without it.  Along our journey we have came in contact with some very generous folks.  Yesterday was our opportunity to give a little back  to another.  One of Rhiannon's close friends boyfriends had passed away.  While we did not know him very well, he meant a whole lot to someone who means a whole lot to us.  I am very grateful that we were able to take the day off and make the long trip in good health.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_024</guid></item><item><title>Gratitude 070</title><link>https://waylonwalker.com/gratitude_070</link><description>Today is kicking off as a pretty amazing morning so far.  The whole family was in a really happy mood, even right after waking up.  I enjoyed the start of sunrise running around with Wyatt at the bus stop, and continuing now while writing my gratitud</description><content:encoded>&lt;h4&gt;Great Morning&lt;/h4&gt;&lt;p&gt;Today is kicking off as a pretty amazing morning so far.  The whole family was in a really happy mood, even right after waking up.  I enjoyed the start of sunrise running around with Wyatt at the bus stop, and continuing now while writing my gratitude and daily planning.  Even though I was 10 minutes or so behind getting out the door this morning everything else has been going flawlessly, especially the most important things; family, mind, mood, and gratitude.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_070</guid></item><item><title>Gratitude 016</title><link>https://waylonwalker.com/gratitude_016</link><description>Last night we made a long trip back from my In-Laws.  Which was a great day by the way.  Sometimes we struggle with Wyatt's energy in a house with lots of breakable items, but he did great yesterday.  When we got home Wyatt just finished up with a go</description><content:encoded>&lt;h4&gt;One on One time&lt;/h4&gt;&lt;p&gt;Last night we made a long trip back from my In-Laws.  Which was a great day by the way.  Sometimes we struggle with Wyatt's energy in a house with lots of breakable items, but he did great yesterday.  When we got home Wyatt just finished up with a good two hour nap and was wired... at 11:00 PM.  He was hungry, as he was too excited to play while at grandmas house and did not eat much.  I sat up with him,  we shared a peanut butter sandwich and got out a new pack of trolls characters and worked on finding all of their names.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;When we got home Wyatt just finished up with a good two hour nap and was wired... at 11:00 PM&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Moments like these do not seem to come often enough.  I really enjoy playing with the whole family and the full level of craziness that it brings, but having a calm one on one time with one member of the family seems extra special.  It was the perfect ending to a long day with lots of packing, travel, and excitement.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_016</guid></item><item><title>Gratitude 044</title><link>https://waylonwalker.com/gratitude_044</link><description>Over the course of the winter the kids and I have been creating trails through the woods behind our house.  It has been really fun.  The forrest is really thick with lots of small bits of brush,  a stream, logs and various old junk.  The kids have en</description><content:encoded>&lt;h4&gt;Running&lt;/h4&gt;&lt;p&gt;Over the course of the winter the kids and I have been creating trails through the woods behind our house.  It has been really fun.  The forrest is really thick with lots of small bits of brush,  a stream, logs and various old junk.  The kids have enjoyed having a place to get out of the house and stop around.  It has been a great outlet for us.&lt;/p&gt;&lt;p&gt;Recently I have started running on them.  I have been getting better and better.  I feel like I am starting to get back inot a bit of shape where I am not winded within minutes, but can at least make a few laps.  I find the trails really fun to run on, as I have always really struggled running on a track or even sidewalk.  I am always looking for something to make it more exciting.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_044</guid></item><item><title>Gratitude 048</title><link>https://waylonwalker.com/gratitude_048</link><description>Today We had a playdate for the kids.  While its good to get the kids out and interacting with others, its good for the adults as well.  I am not typically one to spring up an event with other adults, so its great that the kids drive that for us.  Th</description><content:encoded>&lt;h4&gt;Playdate&lt;/h4&gt;&lt;p&gt;Today We had a playdate for the kids.  While its good to get the kids out and interacting with others, its good for the adults as well.  I am not typically one to spring up an event with other adults, so its great that the kids drive that for us.  The adults were able to play a board game while the kids were playing.  I am very grateful that I was able to get out and enjoy some time with other adults, and that the kids had a really good afternoon.  The game we played was new to me and was a blast to play.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_048</guid></item><item><title>Gratitude 054</title><link>https://waylonwalker.com/gratitude_054</link><description>Through everything we have gone through we have always came out on top.  Nothing has knocked us down so bad that we cannot get back up.  Some days it may feel like we will never recover, but we always do.  Some days everything just is too much and is</description><content:encoded>&lt;h4&gt;Hanging in there...&lt;/h4&gt;&lt;p&gt;Through everything we have gone through we have always came out on top.  Nothing has knocked us down so bad that we cannot get back up.  Some days it may feel like we will never recover, but we always do.  Some days everything just is too much and is too overwhelming, but we find our way to the top.  Some days we feel crushed, but somehow we find the strength to kick that boulder off of our chest and rise above.  We are human, we have our good days and out bad days.  Our bad days feel so low we think it may never end, but it always does.  We rise back to the top and crush this thing we call life.  Everyone has their own struggles that they deal with every day, and their own battles to fight.  Next time your down, just remember it will &lt;strong&gt;not&lt;/strong&gt; last forever and your day will come to crush it.  We will stand strong, concour our enemies, and rise to the top.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Forever and Ever.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_054</guid></item><item><title>Gratitude 035</title><link>https://waylonwalker.com/gratitude_035</link><description>Today I am strugging to come up with a new topic for my gratitude journal.  I feel like I have written about many of the things I am grateful for recently.  As I am sitting here with a nice display of color and listening to the frogs, from our kids's</description><content:encoded>&lt;h4&gt;Peace&lt;/h4&gt;&lt;p&gt;Today I am strugging to come up with a new topic for my gratitude journal.  I feel like I have written about many of the things I am grateful for recently.  As I am sitting here with a nice display of color and listening to the frogs, from our kids's lighted sound machine of course.  I realize that I am just enjoying this moment of peace.  It is nice to not have to worry about anything for a few minutes and just let the words flow.  I think this is why I enjoy doing this gratitude journal, becuase I feel a nice sense of peace after completeing it for the day.  Sometimes the days are crazy, sometimes they are normal, sometimes they are quiet each day is new and none like the other.  But whatever the day brings most of them have included this 5 minutes of peace for the last 35 days.  Thank you Rhiannon for pushing me to start this journal.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Sometimes the days are crazy, sometimes they are normal, sometimes they are quiet each day is new and none like the other.&lt;/p&gt;&lt;/blockquote&gt;&lt;style&gt;@import url("https://goo.gl/RrPQm5")&lt;/style&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_035</guid></item><item><title>Gratitude 075</title><link>https://waylonwalker.com/gratitude_075</link><description>We are tired, short on sleep, bodies tired from lifting, but we remain high on the excitement of what is to come.  We are pushing through day by day to ensure that we meet our deadlines.  Our kids are missing the amount of time that we play with them</description><content:encoded>&lt;h4&gt;Calm&lt;/h4&gt;&lt;p&gt;We are tired, short on sleep, bodies tired from lifting, but we remain high on the excitement of what is to come.  We are pushing through day by day to ensure that we meet our deadlines.  Our kids are missing the amount of time that we play with them, and starting to struggle emotionally, heck I think we are all struggling emotionally.  We have packed everything we own into a truck ready to move to a new place.  All of our favorite things are packed in, not surrounding us, and not giving us the compfort that we are used to.  This has been our life over the past week.  Now we take a deep breath and appreciate all of the help we have recieved this week.  The help that we recieved from our friends, to the landlords, my coworkers, and most of all each other.  Our favorite things are starting to surround us in our new place.  We have room, and time, to play.  Some things are not yet set up, but enough is setup to breathe.  Let's embrace the &lt;strong&gt;calm&lt;/strong&gt; as we roll into the final phase of this move.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_075</guid></item><item><title>Gratitude 022</title><link>https://waylonwalker.com/gratitude_022</link><description>Sometimes you just need some time to be a kid.  Today was that day... it was a snow day.  During which the kids were very generous at letting me work, but we were also able to have some quality moments.  First of which happened at lunch.  Wyatt decid</description><content:encoded>&lt;h4&gt;Kid Time&lt;/h4&gt;&lt;p&gt;Sometimes you just need some time to be a kid.  Today was that day... it was a snow day.  During which the kids were very generous at letting me work, but we were also able to have some quality moments.  First of which happened at lunch.  Wyatt decided that we were having pancakes, and the kids would help make them.   I was really impressed at their cooperation.  They did really well at taking turns putting ingredients into the batter, and stirring.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I was really impressed at their cooperation.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The second bit of kid time came late in the afternoon after the kids had a nap.  We went outside to go sledding.  They were both a bit crabby to get clothes on, but cheered up once we got outside.  We all had a blast, Even Ayla who has had a terrible fear of the snow this year.  She just stood in it for the longest time before warming up to it.  Eventually she braved up enough, aka was forced on to the sled with daddy.  She loved it! She was absolutely smiling ear to ear when we hit the bottom.  From there on the kids took turns riding down with daddy for the next 2 hrs!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_022</guid></item><item><title>Gratitude 066</title><link>https://waylonwalker.com/gratitude_066</link><description>Today we are getting ready for  our big move.  I am very gratefull to have such great friends to help us pack up our junk, and get rid of the things we dont need.  We started our minalist journey 2 years ago and during the last move we ended up with </description><content:encoded>&lt;h4&gt;Great Friends&lt;/h4&gt;&lt;p&gt;Today we are getting ready for  our big move.  I am very gratefull to have such great friends to help us pack up our junk, and get rid of the things we dont need.  We started our minalist journey 2 years ago and during the last move we ended up with a bunch of boxes that were maybies that we are now getting rid of.  Anyways.  We just finished up a full day of prepping for a move, and our friends were so awesome.  Everyone was super helpful, positive, encouraging and no complaints from anyone.  Some even offered to take some things off of our hands as they would get more use out of them than we would in our new place, much better than seeing them hit the landfill.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_066</guid></item><item><title>Gratitude 010</title><link>https://waylonwalker.com/gratitude_010</link><description>A few months ago my wife and I decided to start going to family therapy, to talk about some things that we could see were only going to get worse without giving them some attention.  This is the best decision we have made in our marriage.  We have re</description><content:encoded>&lt;h4&gt;Strong Relationships&lt;/h4&gt;&lt;p&gt;A few months ago my wife and I decided to start going to family therapy, to talk about some things that we could see were only going to get worse without giving them some attention.  This is the best decision we have made in our marriage.  We have really learned to relate to the other person, and put ourself in their shoes.  We are learning about how our actions effect the other.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This is the best decision we have made in our marriage.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Without taking steps in the right direction our marriage was heading downhill.  Medical needs were taking precidence, and we were both fighing through a dark hole of depression.  After the first session we saw great improvement.  I am grateful that we took the steps to work on our marriage in such a dark time for us on every other aspect of life.  I am grateful that we got a great therapist on first try.  I feel like you rarely get a medical professional that works for you on the first try.  I am grateful that we are both devoted to making it work, and have made great strides in our relationship.  Most of all I am grateful to see how taking the right steps to strengthen our marriage has improved other parts of our life, and made it easier to handle events as they come up.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_010</guid></item><item><title>Gratitude 031</title><link>https://waylonwalker.com/gratitude_031</link><description>Sometimes you just need a bit of help and it is hard to pick yourself up.  This morning was one of those days.  I just felt overwhelmed and like there was no stopping it.  Rhiannon gave me a call and after talking through some things I felt a huge we</description><content:encoded>&lt;h4&gt;Pick me up&lt;/h4&gt;&lt;p&gt;Sometimes you just need a bit of help and it is hard to pick yourself up.  This morning was one of those days.  I just felt overwhelmed and like there was no stopping it.  Rhiannon gave me a call and after talking through some things I felt a huge weight lifted.  I wouldn't say that I was healed, but I would say I was on a good trajectory.  It's really hard to battle things as a family. We are all in it together and that picking each other up will help everyone.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_031</guid></item><item><title>Gratitude 080</title><link>https://waylonwalker.com/gratitude_080</link><description>This morning Wyatt had a 2 hr delay.  I still took Ayla to school on time.  I did some work, but still had some time for fun on the MineCraft server.  This is a new world that Wyatt named Nathan.  We did a 20 minute mining session, and at the end wya</description><content:encoded>&lt;h4&gt;Fun&lt;/h4&gt;&lt;p&gt;This morning Wyatt had a 2 hr delay.  I still took Ayla to school on time.  I did some work, but still had some time for fun on the MineCraft server.  This is a new world that Wyatt named Nathan.  We did a 20 minute mining session, and at the end wyatt found the first diamonds of the server.  He was in a really fun mood, and we were chatting it up the whole time, working together towards a common goal.  He was so cooperative, taking on tasks of his own, giving me tasks, divying up materials along the way to make sure each could accomplish their task.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_080</guid></item><item><title>Gratitude 072</title><link>https://waylonwalker.com/gratitude_072</link><description>Yesterday was packing day for a big move.  We have been getting ready for a few weeks now... Rhiannon has been getting ready for a few weeks and I kinda helped.  She really nocked this one out of the park.  Everything was so well organized into boxes</description><content:encoded>&lt;h3&gt;Preparation&lt;/h3&gt;&lt;p&gt;Yesterday was packing day for a big move.  We have been getting ready for a few weeks now... Rhiannon has been getting ready for a few weeks and I kinda helped.  She really nocked this one out of the park.  Everything was so well organized into boxes and labeled we were able to load the truck really fast. She has been pushing herself really hard for a few weeks now.  We were both really impressed with how little the truck was filled.  We got the largest size Uhaul and only filled it half way.  We have had this same truck in the past, and filled it.  We have expanded our family, and yet trimmed down on the stuff.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_072</guid></item><item><title>Gratitude 058</title><link>https://waylonwalker.com/gratitude_058</link><description>Lately there has been a rollar coaster running through our house.  So much going on that its hard for everyone ot keep their head above water at all times.  I am grateful that we all have remained on each others team.  Sometimes when we fall we have </description><content:encoded>&lt;h4&gt;Pick me up when I Fall&lt;/h4&gt;&lt;p&gt;Lately there has been a rollar coaster running through our house.  So much going on that its hard for everyone ot keep their head above water at all times.  I am grateful that we all have remained on each others team.  Sometimes when we fall we have to help ourselves back up, but it is really nice when there are others there to help us up.  That's what family is for isn't it?  It is amazing to see how others respond when they see you down and jump in with all they can do to help. I recently had a fall (&lt;em&gt;mental&lt;/em&gt;), and after getting through it felt rediculous.  It has really opened my eyes to how to help people, and how to spot someone who is just having a rough day.  Most people do not have poor intentions, but they can come off that way when they are in a bad place.  Spot these moments in someones day and try to pick them back up.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_058</guid></item><item><title>Gratitude 012</title><link>https://waylonwalker.com/gratitude_012</link><description>Good days are the best.  I enjoy the days where everything seems to fall into place seemingly without effort.  The air is clean and easy to breathe.  The kids are cooperating.  I am working on a project with my best friend in the world.  I play with </description><content:encoded>&lt;h4&gt;The Good Days&lt;/h4&gt;&lt;p&gt;Good days are the best.  I enjoy the days where everything seems to fall into place seemingly without effort.  The air is clean and easy to breathe.  The kids are cooperating.  I am working on a project with my best friend in the world.  I play with my kids, and we all have a great time together.&lt;/p&gt;&lt;p&gt;Today was one of those days.  I spent much of the day helping Rhiannon set up the Cuttin Scrap channel.  We are setting up a really nice area for her to work on a craft that she is very passionate about.  It is the place that she has dreamed of for years.  No its not perfect with the most space available, but it is the best with what we have got, and it is all hers.  At the end of the day we were able to sit down and begin working through her website and socials.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It is the place that she has dreamed of for years.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I also really enjoyed getting to play in the fresh snow with Wyatt.  He loved it.  We shoveled it into big piles to jump in, threw snowballs, and just had the best of adventure.  Ayla and Rhiannon came to the window to watch, and they laughed at us while we acted silly.  Today was Christmas, one of the most magical days of the year to spend with the ones you love most.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_012</guid></item><item><title>Gratitude 069</title><link>https://waylonwalker.com/gratitude_069</link><description>Alright I do not usually mix gratitude with material things, but hear me out here.  Today is the second day with my new to me refurbished three year old phone, and I am really enjoying it.  I wanted to pay cash, didn't want to pay $800, wanted good p</description><content:encoded>&lt;h4&gt;New Devices&lt;/h4&gt;&lt;p&gt;Alright I do not usually mix gratitude with material things, but hear me out here.  Today is the second day with my new to me refurbished three year old phone, and I am really enjoying it.  I wanted to pay cash, didn't want to pay $800, wanted good performance, and didnt really care about having the Latest show room floor tech.  So far it is treating me really well.  The biggest reason that I got a new phone was that my signal was cutting out, and with our crazy lifestyle with lots of emergencies that I need to respond to I need somehing reliable.  Today I was at work and this phone had signal in places within my work that none of my last 2-3 devices could get signal in.  I was blown away when I could walk anywhere in the building and hold a conversation with my wife.  This gives me the confidence that my phone will have signal when I need it and I can respond to any emergency that I need to.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_069</guid></item><item><title>Gratitude 032</title><link>https://waylonwalker.com/gratitude_032</link><description>This weekend was an abnormally warm January weekend, which meant that we were able to ge the kids out and moving more than normal.  On Saturday we started to build Wyatt Walkers Walking path through the thick brush.  Both kids were really into it and</description><content:encoded>&lt;h4&gt;Get out and move&lt;/h4&gt;&lt;p&gt;This weekend was an abnormally warm January weekend, which meant that we were able to ge the kids out and moving more than normal.  On Saturday we started to build Wyatt Walkers Walking path through the thick brush.  Both kids were really into it and were guiding me through the thick brush letting me know where the path should turn next.  Wyatt kept very busy with his tree pruners trimming the leftover branches.&lt;/p&gt;&lt;p&gt;On Sunday the kids and I went out to the skate park while mommy had a lunch date with a friend.  Ayla enjoyed throwing a small frisbee off of the top of the pyramid while Wyatt rode his scooter and daddy's skateboard around the park.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_032</guid></item><item><title>Gratitude 079</title><link>https://waylonwalker.com/gratitude_079</link><description>Recently I have been thinking about all of the resources that have been available for me to learn.  I am so grateful to have these at my disposal.  Learning how to improve myself, and increase my productivity in the long run is a  passion of mine.  I</description><content:encoded>&lt;h4&gt;Learning Resources&lt;/h4&gt;&lt;p&gt;Recently I have been thinking about all of the resources that have been available for me to learn.  I am so grateful to have these at my disposal.  Learning how to improve myself, and increase my productivity in the long run is a  passion of mine.  I spend many days spinning my wheels with something, but I am always learning.  Even though those few hours were lost in the short term, in the long term I always come away having learned something.  These small wins each day cumulativly add up to something that gives me a lot of productivity in my daily work and allows me to succeed.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_079</guid></item><item><title>Gratitude 0040</title><link>https://waylonwalker.com/gratitude_041</link><description>Today has been a really relaxing day!  I woke up this morning Rhiannon was with Ayla, and Wyatt was downstairs with some friends staying in the house, so I continued sleeping until I was ready to get up.  After getting up I helped Ayla with potty tra</description><content:encoded>&lt;h4&gt;I slept in&lt;/h4&gt;&lt;p&gt;Today has been a really relaxing day!  I woke up this morning Rhiannon was with Ayla, and Wyatt was downstairs with some friends staying in the house, so I continued sleeping until I was ready to get up.  After getting up I helped Ayla with potty training for awhile,  in which we racked up 3 sticker! Then Wyatt and I went out sledding in this epic snow that we were blessed with today.  It was a thick heavy, and perfect sledding snow.  We built a tall takeoff ramp, and continued sledding for quite awile.  It was a bit tiring from the weight of the snow, but it was super fun.  The reason that I say that we were blessed with this snow is that the fires have stopped.  Every trip we  leave the house this past week has ended up with us running into a thick smoke from folks burning grass and brush.  This landed us in the hospital once, and Rhiannon in strong pain the other times.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_041</guid></item><item><title>Gratitude 011</title><link>https://waylonwalker.com/gratitude_011</link><description>I am grateful that we have been able to make it to my family for Christmas time.  I am so glad to see how much fun my parents and the kids have together.  They all get along so well. I am glad to see some of the changes that my parents are making to </description><content:encoded>&lt;h4&gt;Happy Holidays Round 1&lt;/h4&gt;&lt;p&gt;I am grateful that we have been able to make it to my family for Christmas time.  I am so glad to see how much fun my parents and the kids have together.  They all get along so well. I am glad to see some of the changes that my parents are making to get through their tough times at home.  They seem to be quite a bit happier that the past few times that we have been home.   We all got some really nice gifts, and I am glad that everyone was able to at least get something that they enjoy, even if it wasn't much.  The kids were so excited to see all of the gifts, and had such fun opening them.  They have been playing with them all day.  I am very grateful to see them sharing and having fun together rather than fighting over who gets what.  Wyatt has really been stepping it up as a big brother, and even spent his own hard earned money to buy Ayla a gift!&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I am very grateful to see them sharing and having fun together&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_011</guid></item><item><title>Gratitude 082</title><link>https://waylonwalker.com/gratitude_082</link><description>I am so grateful that I am working in a space in which I can work remotely often.  As a mechanical engineer I really struggled.  Our team was really structured for onsite work, and did not play well for remote folks.  Moving into data science, as lon</description><content:encoded>&lt;h4&gt;Working Remotely&lt;/h4&gt;&lt;p&gt;I am so grateful that I am working in a space in which I can work remotely often.  As a mechanical engineer I really struggled.  Our team was really structured for onsite work, and did not play well for remote folks.  Moving into data science, as long as I have a good connection to the data I need I can be productive from anywhere.  Actually Sometimes I find there to be fewer distractions at home.  Generally I work from home due to someone else's medical needs.  Today was different, my voice is completely gone.  This winter has been a rough one.  I am so grateful that I can cancel all of my meetings, push them to next week and take time to heal.  I can also put my head down and get some great work done without needing to use my voice.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_082</guid></item><item><title>Gratitude 025</title><link>https://waylonwalker.com/gratitude_025</link><description>I am so grateful that I have Rhiannon in my life.  Last night we were able to go out of our way to help a family member in  need.  I am so proud that she is able to stand up for what is right and help someone who really needs it.  This family member </description><content:encoded>&lt;h4&gt;Support&lt;/h4&gt;&lt;p&gt;I am so grateful that I have Rhiannon in my life.  Last night we were able to go out of our way to help a family member in  need.  I am so proud that she is able to stand up for what is right and help someone who really needs it.  This family member was in a really dark place and Rhiannon was able to spot that and stand up to help her.  This person really just needed someone there for her, to give her a hug, and not feel alone.  I am so proud of Rhiannon for being able to hold this persons hand, and walk her to a better place in life.&lt;/p&gt;&lt;p&gt;I think there is a real sense of maturity that comes with being there yourslef and climbing out of that hole and realizing how much better life is on the other side if you can just put your head down, make some hard decisions and consiously control your life and direct it to where you want it to be.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_025</guid></item><item><title>Gratitude 047</title><link>https://waylonwalker.com/gratitude_047</link><description>Its not something that is handed out by participation.  Being part of the battle does not earn bravery.  Defeating the odds,  going into a battle with passion for the end result, and putting all of your heart into it.  Thats what defines bravery to m</description><content:encoded>&lt;h4&gt;Bravery&lt;/h4&gt;&lt;p&gt;Its not something that is handed out by participation.  Being part of the battle does not earn bravery.  Defeating the odds,  going into a battle with passion for the end result, and putting all of your heart into it.  Thats what defines bravery to me.  Last night I saw two family members give excelent examples of bravery.  Last night was the preschool prom night.  Ayla was unable to go, and Rhiannon was very passionate about going with Wyatt.  She has not been feeling well, and being around lots of poeple can make it very difficult at times, but she did it.  She was able to overcome the odds and make it through the prom for him. The other great example of bravery was Wyatt.  While in a very excited mood, with a lot going on around him.  He was able to stand by his mothers side, hold her hand, ask her if she was ok, and ask if there was anything he could do to help her through a rough spot.  He was able to overcome his ADHD, take a deep breath and stand strong for his mother.  This is not the first time that he has done this.  He has been growing up into a brave boy lately.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;He was able to overcome his ADHD, take a deep breath and stand strong for his mother.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_047</guid></item><item><title>Gratitude 067</title><link>https://waylonwalker.com/gratitude_067</link><description>Today I got a meeting invite with two folks that I do not usually get to interact with.  The title, recognition for Waylon Walker... I am very excited to see what it is, and very grateful to have the chance to meet these folks in person.  I do a lot </description><content:encoded>&lt;h4&gt;Recognition from unexpected places&lt;/h4&gt;&lt;p&gt;Today I got a meeting invite with two folks that I do not usually get to interact with.  The title, recognition for Waylon Walker... I am very excited to see what it is, and very grateful to have the chance to meet these folks in person.  I do a lot of work that is not necessarily fit my job role, but is something that I know I have skills to do very quickly that many other folks do not.  I fill many of these requests throughout the year, and every once in awhile I get a VERY nice thank you from the person, or their boss.  I am grateful to be able to interact with these positive folks.  It makes me feel really good, and like I am doing a good job.  This particular on is different, and I will not know exactly what it is until Monday.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_067</guid></item><item><title>Gratitude 019</title><link>https://waylonwalker.com/gratitude_019</link><description>Last night stared like any other night. Put the kids to bed, hang out with my Beautiful wife for a while, off to sleep, then Wyatt comes in at the wee hours of the morning ready to start his day.  The only difference last night was that it was not th</description><content:encoded>&lt;h4&gt;My Parter&lt;/h4&gt;&lt;p&gt;Last night stared like any other night. Put the kids to bed, hang out with my Beautiful wife for a while, off to sleep, then Wyatt comes in at the wee hours of the morning ready to start his day.  The only difference last night was that it was not the wee hours of the day, it was &lt;strong&gt;11:30 PM&lt;/strong&gt;.  He was wired and ready to go as if he slept the whole night through.  I am very grateful that I was able to tag team the situation with Rhiannon, as he did not go back to sleep.  We were both able to get some rest through the night.  It may not have been the best, but we were able to make the best out of a tough situation.  In the Morning we had to take the van into the repair shop, and on the way home we were able to discuss some solutions to the problem when it happens in the future.  Rhiannon was able to get the ball rolling with the pediatrician to see their recommendations.  Man I love her, long before I would have even thought to go that route she had already sent the message out.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_019</guid></item><item><title>Gratitude 029</title><link>https://waylonwalker.com/gratitude_029</link><description>Last night was a night that I had to run back into work late at night to run some analysis.  I was able to get in and get it done fairly quickly, and it felt really good to have it done and not have to worry about it in the last hour before the prese</description><content:encoded>&lt;h4&gt;Finishing&lt;/h4&gt;&lt;p&gt;Last night was a night that I had to run back into work late at night to run some analysis.  I was able to get in and get it done fairly quickly, and it felt really good to have it done and not have to worry about it in the last hour before the presentation.  I also stuck to my No More Death by powerpoint rule, and did not include an eye chart in the slides.  This was something that I always said I would change when I took over the role, but never did.  Now that I have vowed to never again break the principles of Death by PowerPoint I had to change.&lt;/p&gt;&lt;p&gt;Secondly my wife is a rockstar.  She was up with our crazy son most of the night, as he was really struggling to sleep.  He was just up and ready to go really early in the morning.  I am grateful that I was able to get somme sleep, and really hope that she is able to get some rest while the house is quiet today.&lt;/p&gt;&lt;style&gt;@import url("https://goo.gl/RrPQm5")&lt;/style&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_029</guid></item><item><title>Gratitude 090</title><link>https://waylonwalker.com/gratitude_090</link><description>Kiddos are all back in school, and doing better.  Wyatt is still running a bit slower than his normal 110% energetic self, but is hanging in there.  I am grateful that we are back on track with a regular schedule and we are all able to do our own thi</description><content:encoded>&lt;h4&gt;Back to School&lt;/h4&gt;&lt;p&gt;Kiddos are all back in school, and doing better.  Wyatt is still running a bit slower than his normal 110% energetic self, but is hanging in there.  I am grateful that we are back on track with a regular schedule and we are all able to do our own things that we need to throughout the day.  I really enjoy being able to help everyone while they are down, but it really wears on me as everyone stacks up their down days back to back.  It felt good to have some quiet time to get some work done and feel productive.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_090</guid></item><item><title>Gratitude 065</title><link>https://waylonwalker.com/gratitude_065</link><description>Today was filled with Dr. appointments... and Wyatt was still out of school.  Days like this can terrify my sometimes, but Wyatt was completely on board with it and we had a blast the entire day.  We played minecraft pocket edition in the wating room</description><content:encoded>&lt;h4&gt;We played hard&lt;/h4&gt;&lt;p&gt;Today was filled with Dr. appointments... and Wyatt was still out of school.  Days like this can terrify my sometimes, but Wyatt was completely on board with it and we had a blast the entire day.  We played minecraft pocket edition in the wating room in apt 1, followed by some errands, a wonderful family lunch.  Then we played around a fountain at the last one, and it was a blast.  As he had surgery a week ago it has been awhile since we played this hard... and stayed completely positive the whole time.  We just went with the flow starting with some simple toys we had, to ninja moves, to an epic ninja Herobrine battle.  These are the moments that I yearn for as a parent.  Playing one on one, completely positive, in the flow, no fights, and having a blast.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_065</guid></item><item><title>Gratitude 061</title><link>https://waylonwalker.com/gratitude_061</link><description>I research everything to DEATH.  This includes my work.  I am constantly looking for inspiration, and learning from others in how they do their work. I love seeing the results that can be achieved by someone who is dedicated fully to their craft, and</description><content:encoded>&lt;h4&gt;Inspirational Work&lt;/h4&gt;&lt;p&gt;I research everything to &lt;em&gt;DEATH&lt;/em&gt;.  This includes my work.  I am constantly looking for inspiration, and learning from others in how they do their work. I love seeing the results that can be achieved by someone who is dedicated fully to their craft, and try to understan how I can achieve 80% of that with 20% of the effort, so that I dont need to be a full time designer, front end developer, dev ops... you get the picture.  Over the last couple of months we have had a Data Scientist on rotation in our group and its time to get it into production and start getting  some feedback.  As he is learning how the web works its cool to see the light come on for someone else, and have that ah ha moment.  The web is an overly complicated beast these days with far too many options.  It is&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_061</guid></item><item><title>Gratitude 036</title><link>https://waylonwalker.com/gratitude_036</link><description>This morning Wyatt came into our room just as normal, chipper as can be ready to go.  But something was different than normal.  I felt like I had just hit the pillow.  I grabbed a phone so that he could go watch something on his own, when I relized t</description><content:encoded>&lt;h4&gt;Special Time&lt;/h4&gt;&lt;p&gt;This morning Wyatt came into our room just as normal, chipper as can be ready to go.  But something was different than normal.  I felt like I had just hit the pillow.  I grabbed a phone so that he could go watch something on his own, when I relized that it was 2:30AM.  This is not out of the ordinary for him to have a few days that he is ready to go.  We have learned that this is part of his ADHD and his mind is just running and ready to go.  Fighting  it only makes for starting off what could have been a good day on a bad note.  I let him go downstairs and he stayed quiet for the most part and let everyone sleep.  When I came down just before 6 he greeted me with cheer, let me have my coffee and we proceeded to have some special time.  We build with magnet tiles, legos, played a game, and even went outside to continue carving our path through the woods.  I cherish our special time together in happiness and am glad that we are learning to work with his disorder and have more good days like this.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_036</guid></item><item><title>Gratitude 052</title><link>https://waylonwalker.com/gratitude_052</link><description>The past 6 years have taught me a lot about life. Especially about the most important part  Family.  Family are those who have your back at any moment, and you have their back at any given moment.  6 years ago we expanded our family when we brought o</description><content:encoded>&lt;h4&gt;6 years&lt;/h4&gt;&lt;p&gt;The past 6 years have taught me a lot about life. Especially about the most important part  &lt;strong&gt;Family&lt;/strong&gt;.  Family are those who have your back at any moment, and you have their back at any given moment.  6 years ago we expanded our family when we brought our first child into it.  Since then has been quite the journey.  Throughout those 6 years every single one of use have had our ups and downs, but the others always have our backs and help us through anything.  Not only is that sweet boy turning 6 today, but he is the one that needs a bit of extra attention right now.  We have his back and will help him through his journey.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_052</guid></item><item><title>Gratitude 060</title><link>https://waylonwalker.com/gratitude_060</link><description>Every once in awhile its time to take a deep breath..  Seriously do it with me stop,  take a deep breath, exhale.  Understand that you cannot do everything.  Sometimes life throws you a loop that is out of your control.  Today was one of those days. </description><content:encoded>&lt;h4&gt;Chill&lt;/h4&gt;&lt;p&gt;Every once in awhile its time to take a deep breath..  Seriously do it with me stop,  take a deep breath, exhale.  Understand that you cannot do everything.  Sometimes life throws you a loop that is out of your control.  Today was one of those days.  Getting down to the end of the year I get really excited to work on my projects at work for me.  I take full advantage of the reduced workforce, reduced desk stops, reduced chit chat, and I GTD.  Getting down within the last week I am starting to prioritize projects to ensure I get everything done that really needs done while I have this time to ensure full productivity in the next year.  My son stayed home sick and I was with him.  As much as I wanted to stress out about the things I wasnt getting done we came to a comprimise.  I was able to work from home for a good chunk of the day, but we also spent some time chilling together on our Minecraft server.  It was really fun.  We were working through projects together, taking out mobs, building structures, the stresses of life seemed to melt away for awhile.  And you know what we both loved it.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_060</guid></item><item><title>Gratitude 027</title><link>https://waylonwalker.com/gratitude_027</link><description>CuttinScrap.com was released last night!!!  I am very excited with how it is turning out.  I am even more excited to see Rhiannon start using it and getting some more content built up.  This is the by far the biggest front end project that I have eve</description><content:encoded>&lt;h4&gt;Encouragement&lt;/h4&gt;&lt;p&gt;&lt;a href="https://www.cuttinscrap.com"&gt;CuttinScrap.com&lt;/a&gt; was released last night!!!  I am very excited with how it is turning out.  I am even more excited to see Rhiannon start using it and getting some more content built up.  This is the by far the biggest front end project that I have ever done.  I think most of all I really like seeing how much Rhiannon likes site.   She seems blown away and has commented that she did not think that it would turn out anywhere close to this good. She would have been proud to own it either way just knowing that I built it for her.  Seeing her face light up during each preview that we did really kept me going to finish.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_027</guid></item><item><title>Gratitude 049</title><link>https://waylonwalker.com/gratitude_050</link><description>Today was Ayla's fourth birthday, what an adventure it took to get here.  I am so grateful for how far she has came.  Her medical issues are all resolved, her speech is on point, and she is overall a very happy and healthy four year old girl.  Today </description><content:encoded>&lt;h4&gt;Happy Birthday Ayla&lt;/h4&gt;&lt;p&gt;Today was Ayla's fourth birthday, what an adventure it took to get here.  I am so grateful for how far she has came.  Her medical issues are all resolved, her speech is on point, and she is overall a very happy and healthy four year old girl.  Today we were able to celebrate her birthday at home as a family.  She absolutely loved the presents that we got her.  It was very fun to watch the excitement on her face all day long.  She is very attached to her new toys and hasnt stopped playing with them yet.  It has been a long journey for us to get here with us, and it was worth all of the effort!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_050</guid></item><item><title>Gratitude 022</title><link>https://waylonwalker.com/gratitude_021</link><description>There is something special about having pure uninterrupted adult time with your spouse.  Last night I went out with Rhiannon and we had an absolute blast.  We went to the brand new brewery in town "Industry Brewing Company".  It was absolutely amazin</description><content:encoded>&lt;h4&gt;Adult Time&lt;/h4&gt;&lt;p&gt;There is something special about having pure uninterrupted adult time with your spouse.  Last night I went out with Rhiannon and we had an absolute blast.  We went to the brand new brewery in town "Industry Brewing Company".  It was absolutely amazing.  The food was good, but the beer was completely flawless.  There is just something beautiful about something that is so flawless.  Each style I had was brewed to a T.  My favorite of course was the "Industry Standard", a super hoppy pale ale.&lt;/p&gt;&lt;p&gt;Next we were off to the local big box quilting store to get some supplies for Rhiannon's next project on Cuttin Scrap.  It was fun, we looked at a bunch of different stuff.  And she was able to talk shop.&lt;/p&gt;&lt;p&gt;After that we were off to see the latest Pitch perfect movie. before we were able to do that I required coffee to stay up through the whole thing.  So we went downtown to check out Zion coffee roasters for the first time.  It was a beautiful shop that reminded me of Horizon Line Coffee in downtown Des Moines, Iowa.  We finished the night off in the movies and headed home.&lt;/p&gt;&lt;p&gt;I am so grateful to be able to spend such quality time with my best friend.  We have great friends that are able to watch the crazy kids.  We are able to afford a simple night out.  Lastly Rhiannon and I are getting closer than we ever have before.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_021</guid></item><item><title>Gratitude 078</title><link>https://waylonwalker.com/gratitude_078</link><description>We have been moved into the new apartment now for about 2 weeks, and I am really amazed how it feels to have simplified a lot of things along the way. There is a lot less clutter.  Cleaning is a breeze.  The kids are able to find their things and put</description><content:encoded>&lt;h4&gt;Simplicity&lt;/h4&gt;&lt;p&gt;We have been moved into the new apartment now for about 2 weeks, and I am really amazed how it feels to have simplified a lot of things along the way. There is a lot less clutter.  Cleaning is a breeze.  The kids are able to find their things and put them away with ease (for the most part).  There feels to be much less of a weight in each room.  Everywhere in the place feels light, clean, and easy to breathe.  There is very little in the way of stress of clutter and cleanliness.  The daily burden is quite minimal and everything can be cleaned up with very little effort.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_078</guid></item><item><title>gratitude 073</title><link>https://waylonwalker.com/gratitude_073</link><description>We're officially moved into ouur new place today.  I cannot thank all of our great friends enough for helping us get through the move.  They helped us get the truck on the coldest and snowiest day of the year, pack it up in the snow, unload it, and r</description><content:encoded>&lt;h4&gt;Great Friends&lt;/h4&gt;&lt;p&gt;We're officially moved into ouur new place today.  I cannot thank all of our great friends enough for helping us get through the move.  They helped us get the truck on the coldest and snowiest day of the year, pack it up in the snow, unload it, and return the truck.  But they did not leave before helping with the kids's number one concern.... &lt;strong&gt;bunk beds&lt;/strong&gt;.  Last night two of them pulled a very late night to assemble the kids's bed so they could sleep.  These kids have been talking non-stop for a long time about these bunk beds and they were so excited when they saw them.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Thank You&lt;/strong&gt; everyone who helped us throughout our move!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_073</guid></item><item><title>Gratitude 056</title><link>https://waylonwalker.com/gratitude_056</link><description>Today is Thanksgiving here in the United States, what a great day to take a reflection on the past year, and think about what I am grateful for. Ayla is a singing, speaking, yelling, and screeeeeming pro.  Over this last year she has gone from nearly</description><content:encoded>&lt;h4&gt;Reflection&lt;/h4&gt;&lt;p&gt;Today is Thanksgiving here in the United States, what a great day to take a reflection on the past year, and think about what I am grateful for.&lt;/p&gt;&lt;p&gt;Ayla is a singing, speaking, yelling, and screeeeeming pro.  Over this last year she has gone from nearly mute to graduating from Speech therapy!  Her progress has been astounding, and seeing her now you would have no idea where she was one year ago.  I would say she has some of the best enunciation I have heard from a 4 year old.&lt;/p&gt;&lt;p&gt;Wyatt got his CPAP, and has a plan to help him start sleeping better.  We are all hoping for the best for this little boy.  Fingers crossed that some sleep will help his ADHD.&lt;/p&gt;&lt;p&gt;I am also very grateful for where our marriage is and where it has came from over the last year.  It has been rocky, but what relationship isn't &lt;em&gt;we're people&lt;/em&gt;.  But we have learned so much about each other, and continue to get better each and every day.  I think that it's pretty amazing that we can take everything that life throws at us and stay on top!.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_056</guid></item><item><title>Gratitude 062</title><link>https://waylonwalker.com/gratitude_062</link><description>It's nearing the end of the annual shutdown. We have had a lot of illness running through the house over the course of the break, but the last couple of days have been very productive.  We have been Spring Cleaning.  We have cleared out a lot of unne</description><content:encoded>&lt;h4&gt;Productive Break&lt;/h4&gt;&lt;p&gt;It's nearing the end of the annual shutdown. We have had a lot of illness running through the house over the course of the break, but the last couple of days have been very productive.  We have been &lt;strong&gt;Spring Cleaning&lt;/strong&gt;.  We have cleared out a lot of unnecessary things, scrubbed the house, and packed up a lot of things in preparation for the upcoming move.  It feels great to finally start to see some progress on these tasks after talking about them for so long.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_062</guid></item><item><title>Gratitude 076</title><link>https://waylonwalker.com/gratitude_076</link><description>The Boxes are slowly disappearing, the laundry pile is creeping down to the final pieces.  We are nearing the final stages of the move thanks to some great teamwork.  We have been working though the day and late into the night, consistently putting t</description><content:encoded>&lt;h4&gt;Team Work&lt;/h4&gt;&lt;p&gt;The Boxes are slowly disappearing, the laundry pile is creeping down to the final pieces.  We are nearing the final stages of the move thanks to some great teamwork.  We have been working though the day and late into the night, consistently putting the hours in.   Each day we creep closer to our final goal that seemed like it would never come.   Our  things are slowly finding their way to their home, placed with care  and precision.  Getting all of our things that we love brings us joy.  Some of these things were not seen since the last move.  I cannot wait to see the day's progress.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_076</guid></item><item><title>The Good Old Days</title><link>https://waylonwalker.com/the-good-old-days</link><description>When I think of the good old days, you are the first person to come to mind.  Back in those days I was up before the sun every day... No Excuses.  I remember I would start asking to go to your house almost immediately when I woke up on weekends that </description><content:encoded>&lt;p&gt;When I think of the good old days, you are the first person to come to mind.  Back in those days I was up before the sun every day... No Excuses.  I remember I would start asking to go to your house almost immediately when I woke up on weekends that I knew you had at your dad's.  Mom usually held me back until at least 10 AM before I was allowed to start knocking on the door.  At that point I would jump on my bike for the 1/4 mile trek down the gravel road, usually to find out that you were not quite up yet.  From there I would keep stopping by every 30 minutes until you were ready to play.  Which could only be in 30 minute increments... Do you remember that?  We had 30 minute curfew's to that we were allowed to play at each others house. At which point we would just ask to go play at the others house.&lt;/p&gt;&lt;p&gt;I remember playing in the mudhole in front of my house chasing the tiniest frogs imaginable, to look behind and you had lost your boots completely stuck in the mud ready to loose your things.  I was full outdoors man back in those days.  Wanted to be just like dad.  Spending all of my free time riding my bike and chasing some sort of animal.  I would go back to help and get myself stuck.  By the end of it I'm sure we both had gone head first in the mud trying to get out!  At this point we were probably told that it was time to stop playing together for the day as we were both a complete wreck.  I'm sure that I was angry that I made it through on my own fine, only to get messy trying to help you.  In reality It was just about impossible to get through that mudhole if you weren't the first one through it.&lt;/p&gt;&lt;p&gt;Years later our bikes turned to mopeds, three-wheelers, and go carts.  I have nearly forgotten about the go-carts by this point.  I remember that you always had this big BA oddessy, and It was all I could do to keep up on the grasshopper.  I remember desperately trying to keep up one day coming from our soon to be motocross track to Mark's house when I hit big hole sideways and went rolling.  I had no helmet on our anything.  I am pretty sure that I hurt myself pretty good, but I was too tough to let that stop me.  Besides that I was probably too proud of my amazing go-carting skills to even admit that I would have crashed.   By the time I caught up I just played it off like I needed a break.  Which would be completely obvious because there was nothing that made me want to take a break from riding back in those days.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/the-good-old-days</guid></item><item><title>Gratitude 026</title><link>https://waylonwalker.com/gratitude_026</link><description>On Thursday I got the call that Rhiannon had passes out during physical therapy.  I went right to her therapy office to find her rehydrating in a chair.  She seemed ok and that this would pass and be ok.  When trying to get up again she passed out.  </description><content:encoded>&lt;h4&gt;Calm&lt;/h4&gt;&lt;p&gt;On Thursday I got the call that Rhiannon had passes out during physical therapy.  I went right to her therapy office to find her rehydrating in a chair.  She seemed ok and that this would pass and be ok.  When trying to get up again she passed out.  Three days later we are back home from the hospital and she is still passing out.  All we know is that she has cancer and she is struggling to keep her blood pressure up while standing.  I am very grateful that we have the friends we have to take care of everything at home for us.  Most of all I am grateful that we are able to keep it calm and collected.  Too many folks get very worked up through these events and it is not productive.  Our job is to remain calm, stay focused on the things that we are able to do that help her, and let the doctors do their job.  We have enough doctors involved that if there was something to find, it would have been found.  I really hope that we can get her back on her feet where she is not passing out everytime that she stands up.  But for now, I am keeping my calm, staying positive, spending time with the kids, and doing the tasks that help us function through the day.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_026</guid></item><item><title>Gratitude 028</title><link>https://waylonwalker.com/gratitude_028</link><description>I am not sure that time heals all wounds, but some wounds just take time.  Yesterday during therapy Rhiannon finally had a chance to talk about some very tough topics.  It was very tough to talk about at the time, and I did have a bit of a rough afte</description><content:encoded>&lt;h4&gt;Time&lt;/h4&gt;&lt;p&gt;I am not sure that time heals all wounds, but some wounds just take time.  Yesterday during therapy Rhiannon finally had a chance to talk about some very tough topics.  It was very tough to talk about at the time, and I did have a bit of a rough afternoon following the appointment.  I am not sure why, but I just needed some space and time.  Today I feel quite a bit better and am ready to start my day on a good note!  I am not sure how long it will take for these wounds to heal but time will help.&lt;/p&gt;&lt;p&gt;I am very grateful that Rhiannon was able to give me some space and time yesterday after our appointment.  I know that it is very difficult for her to see me down.  I am also very grateful that she setup therapy for us and has given us this outlet to discuss topics like this.  I am grateful that we were able to bring it up and talk about it with a neutral party.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_028</guid></item><item><title>Gratitude 043</title><link>https://waylonwalker.com/gratitude_043</link><description>I have recently found a new podcast, The Ken Coleman Show, from the Ramsey network.  I really like Ken's style.  He recently talked about 2 two things that you should do everyday.  Prepare and reflect. If you are not doing these things it is very dif</description><content:encoded>&lt;h4&gt;Prep and Reflect&lt;/h4&gt;&lt;p&gt;I have recently found a new podcast, The Ken Coleman Show, from the Ramsey network.  I really like Ken's style.  He recently talked about 2 two things that you should do everyday.  Prepare and reflect. If you are not doing these things it is very difficult to progress in your goals.  I really like how the gratitude journal works into the reflect piece of life.  It brings me positivity and a chance to look back on the day.  I like how I am able to reflect on the day, or last few days and find something positive that happened.  It also helps me think about how I can improve myself.  I am  also reflecting throughout the day as I think about things that I might write about in the journal.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_043</guid></item><item><title>Gratitude 64</title><link>https://waylonwalker.com/gratitude_064</link><description>This morning I was graced with the greatest mood that my son could possibly have.  He was incredibly courteous, grateful, willing to do things on his own.  He got himself dressed, put his own shoes on, and when I told him that we had an early morning</description><content:encoded>&lt;h4&gt;Good Moods&lt;/h4&gt;&lt;p&gt;This morning I was graced with the greatest mood that my son could possibly have.  He was incredibly courteous, grateful, willing to do things on his own.  He got himself dressed, put his own shoes on, and when I told him that we had an early morning Dr. appointment he did not throw a fit and was 100% on board with going.  He was at the top of his game, and as happy as could be.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Watching his gratitude and positivity shine this morning was more thatn enough motivation to start my day off on the right foot.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;These are the moments that we long for as parents, and it is important to not brush over them and forget them.  It's important to to watch him grow into a great meaningful member of society.  Watching his gratitude and positivity shine this morning was more thatn enough motivation to start my day off on the right foot, and we did. We dropped off Ayla at preschool, attended his Dr. Appointment then came back to play and continue our wonderful morning.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_064</guid></item><item><title>Gratitude 068</title><link>https://waylonwalker.com/gratitude_068</link><description>This morning we informed Wyatt's bus diver that we were going to be moving and this was his last week riding the bus with her.  It was sad to let her know that we are leaving.  She has done so well with him, and they have become the best of friends. </description><content:encoded>&lt;h4&gt;Amazing People&lt;/h4&gt;&lt;p&gt;This morning we informed Wyatt's bus diver that we were going to be moving and this was his last week riding the bus with her.  It was sad to let her know that we are leaving.  She has done so well with him, and they have become the best of friends.  He is the first one on the bus in the morning and sits right next to her.  She is able to start her day off early with a level of energy that is only parallelled by him, which is something that he needs.  He really attracts to positive people that can match his level of energy and enthusiasm for the day.  I am so grateful for people like her, who can bring so much positivity and gratitude to our life.  Some people are repelled by Wyatt's level of enthusiasm, so it is always exciting to see this.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_068</guid></item><item><title>Gratitude 094</title><link>https://waylonwalker.com/gratitude-093-1</link><description>The weather outside lately has been rainy and dreary, making it difficult for us to get outside much.  Yesterday there was a break of great weather.  The kids and I took advantage of the opportunity.  We got outside to go on walks, to parks, and even</description><content:encoded>&lt;h3&gt;Let's get outside&lt;/h3&gt;&lt;p&gt;The weather outside lately has been rainy and dreary, making it difficult for us to get outside much.  Yesterday there was a break of great weather.  The kids and I took advantage of the opportunity.  We got outside to go on walks, to parks, and even was able to try to fly a little bit, though it was a bit windy for flying.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude-093-1</guid></item><item><title>Gratitude 0040</title><link>https://waylonwalker.com/gratitude_040</link><description>Let's face it we all know that credit cards are bad and we should not let them get out of control, but you know what life happens and when you dont have an emergency fund in order using one is better than being stranded with a broken car, or missing </description><content:encoded>&lt;h4&gt;No More Credit Cards&lt;/h4&gt;&lt;p&gt;Let's face it we all know that credit cards are bad and we should not let them get out of control, but you know what life happens and when you dont have an emergency fund in order using one is better than being stranded with a broken car, or missing out on a very important family event.  I am very grateful to say that today we not only do we have a good emergency fund in place, but we also have our last credit card paid off.  I cannot explain how great this feels.   We had stretched ourselves too thin and were using debt for emergencies for a few years, and it had gotten to the point that I felt like we were in an endless cycle that we could never get out of.&lt;/p&gt;&lt;p&gt;This would not have been possible without the help of several folks.  First off Rhiannon, as if you are not on the same page as your wife with finances, you will never fix your financial problems.  Second Dave Ramsey for showing us the light. And finally our friends who have supported us more than we can even thank them for.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_040</guid></item><item><title>Gratitude 087</title><link>https://waylonwalker.com/gratitude_087</link><description>Lateley I have found myself inside of a few niche communities becoming very well respected for my opinion.  I rememver back a few years as I started getting more and more in to programming, I joined these communities within my company.  I came in kno</description><content:encoded>&lt;h4&gt;Community&lt;/h4&gt;&lt;p&gt;Lateley I have found myself inside of a few niche communities becoming very well respected for my opinion.  I rememver back a few years as I started getting more and more in to programming, I joined these communities within my company.  I came in knowing very little and obsorbing all that I could.  I would seek out the advice of others when my google searches left me lost.  Over the years I absorbed quite a bit of this internal knowlege base and a heap of knowlege from open sources.  As the years have gone by many of the folks I looked up to are gone or absent from the community.  I am finding others seeking my attention more and more.  It is really an amazing feeling of respect when folks not only seek out your help, but respond back hours later with a big thank you and a check out the latest version that includes your ideas.  I am also very grateful for those who have helped along the way, I cannot thank them enough, and owe my getting started on the path I am on to them.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_087</guid></item><item><title>Gratitude 084</title><link>https://waylonwalker.com/gratitude_084</link><description>Today I am very proud of the reputation that I have buit.  I am very well respected inside my community.  My opinions are valued.  I am known to be very reliable.  I will deliver what I have promised on time, or give plenty heads up that it's not goi</description><content:encoded>&lt;h4&gt;Reputation&lt;/h4&gt;&lt;p&gt;Today I am very proud of the reputation that I have buit.  I am very well respected inside my community.  My opinions are valued.  I am known to be very reliable.  I will deliver what I have promised on time, or give plenty heads up that it's not going to happen.  I work in an organization that is very closed doors.  Folks keep their knowledge to themselves, and are generally not willing to help others accross the organization without a kick back.  I give out all of my best knowledge for free, and will at lease give anyone a few mintutes of time to point them in the right direction. I am really proud of where this has lead me, and the reputation I have gained.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_084</guid></item><item><title>Gratitude 018</title><link>https://waylonwalker.com/gratitude_018</link><description>Tonight was the last night of the big holiday vacation and I finally got that special moment with every single family member over break.  It was Ayla's turn tonight.  We had our break when Wyatt wanted mommy to play MineCraft with him and did not wan</description><content:encoded>&lt;h4&gt;My First French Braid&lt;/h4&gt;&lt;p&gt;Tonight was the last night of the big holiday vacation and I finally got that special moment with every single family member over break.  It was Ayla's turn tonight.  We had our break when Wyatt wanted mommy to play MineCraft with him and did not want daddy to play.  Ayla's hair looked like a bird was trying to built its nest in it.  We made our way upstairs with a spray bottle, comb, brush and a whole lot of excitement.  We filled the spray bottle with water, and I let Ayla start going to town spraying everything in sight.  Although it was explicitly stated that it would not be used for its intended purpose, detangling hair.  Thats ok though as I was able to get some moisture in with my hands.  I continued to do my first french braid on her.  The first attempt was a fail as Ayla was moving too much and I lost it.  The second attemt was a success.  After this Ayla proceeded to water, brush, wipe, and comb daddy's har over the next hour!&lt;/p&gt;&lt;p&gt;I ran out of time, but I will still mention that she painted her first set of toes.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="/static/toes.jpg" /&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_018</guid></item><item><title>Gratitude 020</title><link>https://waylonwalker.com/gratitude_020</link><description>Recently the kids have really been into singing in the car with Daddy on the way to and from Preshool.  It is so fun, because we are all belting it out so loud, and each take over for our special parts.  It's interesting how Ayla has grown into likin</description><content:encoded>&lt;h4&gt;Good Tunes&lt;/h4&gt;&lt;p&gt;Recently the kids have really been into singing in the car with Daddy on the way to and from Preshool.  It is so fun, because we are all belting it out so loud, and each take over for our special parts.  It's interesting how Ayla has grown into liking it.  For the longest time I thought that she did not like Wyatt and I being so loud, but she never complained about it.  Then over the past week I noticed during some parts of the songs she is the &lt;strong&gt;LOUDEST&lt;/strong&gt; one in the car.  After each song the kids both ask, "Did I sing the whole song?", and I try to get super into it and have a very motivational Radio DJ style of voice encouraging them to continue and tell them how well they did.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;during some parts of the songs she is the &lt;strong&gt;LOUDEST&lt;/strong&gt; one in the car.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;Kids Current Favorite songs&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Californication by Red Hot Chili Peppers&lt;/li&gt;&lt;li&gt;Stressed Out by Twenty One Pilots&lt;/li&gt;&lt;li&gt;Emperor's New Clothes by Panic! at the Disco&lt;/li&gt;&lt;li&gt;An 11 Year Old Wrote This About His Bully by Mac Lethal&lt;/li&gt;&lt;li&gt;Ride by Twenty One Pilots&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;P.S. Its so awesome to see how into the Mac Lethal song they are.  It has a really cool message about being kind to others, and treating everyone with respect.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_020</guid></item><item><title>Gratitude 039</title><link>https://waylonwalker.com/gratitude_039</link><description>Yesterday we had the great opportunity to meet with Leis from ramsey Solutions.  We were very honored to be able to meet with such knowledgeable advisor as Leis.  He confirmed many of the things that we had in our minds and was able to offer a few su</description><content:encoded>&lt;h4&gt;Leis&lt;/h4&gt;&lt;p&gt;Yesterday we had the great opportunity to meet with Leis from ramsey Solutions.  We were very honored to be able to meet with such knowledgeable advisor as Leis.  He confirmed many of the things that we had in our minds and was able to offer a few suggestions for us.  Most of all I was really proud of all fo the work that Rhiannon has done to set up for the future.  The meeting with Leis confirmed that she has done everything possible to set up for success.  She had an answer for all of his questions, and had everything setup that he suggested.  Her organizational skills have really paid off.  I have a really good feeling that we are as well prepared as we can be and on track to succeed in the future.  Thank you Leis for your time! It is greatly appreciated.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_039</guid></item><item><title>Gratitude 057</title><link>https://waylonwalker.com/gratitude_057</link><description>Lately I have been feeling great!  Literally great.  We have had a ton going on for awhile and its been a long time that I have truely felt this great.  The benefits are astounding.  They say that you can only help others when you are capable of help</description><content:encoded>&lt;h4&gt;Feeling Good&lt;/h4&gt;&lt;p&gt;Lately I have been feeling great!  Literally great.  We have had a ton going on for awhile and its been a long time that I have truely felt this great.  The benefits are astounding.  They say that you can only help others when you are capable of helping yourself, &lt;em&gt;oh how that is so true&lt;/em&gt;.  I feel like lately I have been able to keep my cool and help everyone else much better than when not feeling on top of my game.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;They say that you can only help others when you are capable of helping yourself, &lt;em&gt;oh how that is so true&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_057</guid></item><item><title>Gratitude 083</title><link>https://waylonwalker.com/gratitude_083</link><description>This weekend we re-implemented the ticket system in our house.  It is really supposed to help focus ADHD kids.  The kids have been really responsive to it.  Not only have they been really helpful to earn tickets so that they can have been cleaning up</description><content:encoded>&lt;h4&gt;Manners&lt;/h4&gt;&lt;p&gt;This weekend we re-implemented the ticket system in our house.  It is really supposed to help focus ADHD kids.  The kids have been really responsive to it.  Not only have they been really helpful to earn tickets so that they can have been cleaning up and doing nice things without being asked to.  They have been arguing less, and playing cooperatively more.  I really hope this is a sign of what is to come.  I am really grateful to have a wife that understands this kind of stuff and can research the latest techniques to help them.  She is just able to pick up and see things in kids that is far above normal.  She is then able to research and implement things to help them that are very targeted to their needs.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_083</guid></item><item><title>Gratitude 081</title><link>https://waylonwalker.com/gratitude_081</link><description>I am very grateful that I have the freedom to learn the things I need to in order to advance my skills and grow my career.  I am very stretched for time, just like everyone else, but I am able to get the things done that I need to and still find time</description><content:encoded>&lt;h4&gt;Freedom to learn&lt;/h4&gt;&lt;p&gt;I am very grateful that I have the freedom to learn the things I need to in order to advance my skills and grow my career.  I am very stretched for time, just like everyone else, but I am able to get the things done that I need to and still find time for learning.  I talk to some people that do not have the time.  They are piled so high with tasks to do that there is no time to learn.  I a grateful that my leadership sees value in it and do not really ask questions as long as tasks are being completed on time.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_081</guid></item><item><title>Gratitude 086</title><link>https://waylonwalker.com/gratitude_086</link><description>The morning is early as I open the door and am greated with the fresh skif of snow.  The perfect amount to go frolicing in.  Not too much to make it difficult to walk, but enough to cover everything in sight.  In the Afternoon Wyatt and I mustered up</description><content:encoded>&lt;h4&gt;Getting out of the house&lt;/h4&gt;&lt;p&gt;The morning is early as I open the door and am greated with the fresh skif of snow.  The perfect amount to go frolicing in.  Not too much to make it difficult to walk, but enough to cover everything in sight.  In the Afternoon Wyatt and I mustered up the courage to brave our way through some nearby trails.  The adventure was exciting as we have not yet ventured these trails much since our move here.  The trail we chose approached a nearby stream.  We watched as the glassy smooth stream cut through the shear white snow, ran through the fluffy off white catails, and into the frozen lake.  We continued to walk onto a park, where we had a long snowball fight in which I stood back and through snowballs at wyatt as he ran through the park.  Wyatt won of course as it was nearly impossible to hit him as he dodged in and out of the equipment, and I would lose one point for each and every miss.  Soon thereafter the sun was quickly setting and it was time to hit the trail home.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_086</guid></item><item><title>Gratitude 071</title><link>https://waylonwalker.com/gratitude_071</link><description>Yesterday we got a call from Wyatt's principal.  It was something that I did not quite know how to deal with.  These things are not in my wheelhouse at all!  Rhiannon jumped right in and was able to talk to him and say all of the right things that he</description><content:encoded>&lt;h4&gt;The Right Words&lt;/h4&gt;&lt;p&gt;Yesterday we got a call from Wyatt's principal.  It was something that I did not quite know how to deal with.  These things are not in my wheelhouse at all!  Rhiannon jumped right in and was able to talk to him and say all of the right things that he needed to hear.  I was amazed at the way she was able to speak to him with positivity, gratitude, and most of all inspiration.  She did not try to tear him down for what he did, but try to higlight the person that he was in those moments, and paint a picture of the person that he wants to be.  I was just amazed at how she was able to translate what we wanted to see from him into his terms, and give great example of things that he would really care about.  Hang in there mama we are on the right path to help him.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_071</guid></item><item><title>Gratitude 063</title><link>https://waylonwalker.com/gratitude_063</link><description>2019 I will be more professional looking every day... not just when convenient and to kick it off I got my hair cut today.  I have gone a few months now without a hair cut so I was pretty excited to get the shaggs cut down.  It was very nice to just </description><content:encoded>&lt;h4&gt;Shaggy No More&lt;/h4&gt;&lt;p&gt;2019 I will be more professional looking every day... not just when convenient and to kick it off I got my hair cut today.  I have gone a few months now without a hair cut so I was pretty excited to get the shaggs cut down.  It was very nice to just get out of the house and away for a short period and come back looking like $1M bucks.  Rhiannon has been on me about my hair and my wrickly shirts in the past.  No more, this is the year that I will keep up on it myself without needing my wife to hold my hand!&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_063</guid></item><item><title>Gratitude 91</title><link>https://waylonwalker.com/gratitude-91</link><description>Today I am grateful for having our housing maintenance taken care of for us.  Our AC went out last night. We called them up this morning and they had it fixed by the afternoon.  The relief of not having something else to contend with is ver nice.  I </description><content:encoded>&lt;h4&gt;Maintenance&lt;/h4&gt;&lt;p&gt;Today I am grateful for having our housing maintenance taken care of for us.  Our AC went out last night. We called them up this morning and they had it fixed by the afternoon.  The relief of not having something else to contend with is ver nice.  I didn't have to waste my time checking the simple things or worry that we are spending their minimum price to flip a breaker.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude-91</guid></item><item><title>Gratitude 030</title><link>https://waylonwalker.com/gratitude_030</link><description>I am grateful that I have such great friends that are able to help us through a very difficult time.  Today I am able to work and not have to worry about Rhiannon or the kids, knowing that someone is home with them.  The peace of mind is invaluable w</description><content:encoded>&lt;h4&gt;Great Friends&lt;/h4&gt;&lt;p&gt;I am grateful that I have such great friends that are able to help us through a very difficult time.  Today I am able to work and not have to worry about Rhiannon or the kids, knowing that someone is home with them.  The peace of mind is invaluable when you have a family member with a severe medical issue.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_030</guid></item><item><title>Gratitude 085</title><link>https://waylonwalker.com/gratitude_085</link><description>Today is Valentines day, and I have been getting all sorts of love from my family, and it is really amazing.  Rhiannon helped the kids create this massive heart out of post it notes that include all the ways that the kids love me.  The things they sa</description><content:encoded>&lt;h4&gt;Oh the Love&lt;/h4&gt;&lt;p&gt;Today is Valentines day, and I have been getting all sorts of love from my family, and it is really amazing.  Rhiannon helped the kids create this massive heart out of post it notes that include all the ways that the kids love me.  The things they said were so sweet, and really made me feel good.  It really reminded me of the difference I make in their lives every day.  Rhiannon remade a sign that we used to have haning in our house.  It has a saying that we always used to say &lt;em&gt;" Forever and Ever"&lt;/em&gt;.  She made it really modern and it looks amazing.  I also felt really good helping the kids give mommy a present, and giving the kids their presents from me.  Since Ayla was home sick, I decided to bring her a single rose home.  Seeing her face light up when she saw it was well worth it.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_085</guid></item><item><title>Gratitude 059</title><link>https://waylonwalker.com/gratitude_059</link><description>There is no substitute for a positive personality.  I am very grateful to have a super positive subset of folks that I work with every day, it really helps to cancel out the negative ones.   I really like what Gary V. says about surrounding yourself </description><content:encoded>&lt;h4&gt;Positivity&lt;/h4&gt;&lt;p&gt;There is no substitute for a positive personality.  I am very grateful to have a super positive subset of folks that I work with every day, it really helps to cancel out the negative ones.   I really like what Gary V. says about surrounding yourself with positive people, Keep  only those who are positive arounnd you and let the rest go.  I really struggle to completely shut out anyone from my life, but I do try to focus my interactions to those who are positive and uplifting.  I will give nearly anyone who asks for help in a nice positive way 15mins - 1hr.  Those who come and demand help with negativity are hard to give that time to.  I do not seek them out for help, feedback, or to check in on them.  Keep the positive ones close to you.&lt;/p&gt;&lt;p&gt;As this one is about positivity I find it odd that it went in a direction about negative folks and was on the edge of not really being a gratitude post.  I guess thats what happens in a short/timed freeflow sometimes.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gratitude_059</guid></item><item><title>Codeit Bro Interview</title><link>https://waylonwalker.com/codeit-bro-interview</link><description>use this profile image Please share your professional role as a data scientist? [Also feel free to
share about your personal projects, publications, etc.] I graduated with a Mechanical Engineering Degree 8 years ago.  Much of my work
early in my care</description><content:encoded>&lt;p&gt;&lt;img alt="profile image" src="https://waylonwalker.com/profile.jpg" /&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;use this profile image&lt;/p&gt;&lt;p&gt;Please share your professional role as a data scientist? [Also feel free toshare about your personal projects, publications, etc.]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I graduated with a Mechanical Engineering Degree 8 years ago.  Much of my work&lt;a href="https://waylonwalker.com/eight-years-cat"&gt;early in my career&lt;/a&gt; was wrappedaround analyzing larger datasets for my group to understand quality, drivechanges to improve quality or prove that quality was already good.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/eight-years-cat'&gt;&lt;imgstyle='width:500px; max-width:80%; margin: auto;'src="https://waylonwalker.com/eight-years-cat.png"alt="My first eight years as a working professional article"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Three years ago I made the switch to Data Science and have loved every minute ofit.  It is a very dynamic field that is continually changing and there arealways a new set of skills to learn and hone in on.  I talk a lot about themindset of always learning, sharing knowledge, and communicating in my&lt;a href="https://waylonwalker.com/newsletter"&gt;newsletter&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What are the most difficult challenges you faced as a data scientist and howyou resolved them?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Deployment is a high bar to enter.  Jupyter notebooks provide a suspiciously simple start into Data Science.  Folks with very little coding experience can easily get up and running and start bringing value back into their organization, but as you want to start sharing these notebooks, re-using components of them, and scheduling them to run autonomously the bar is raised very quickly.  Many places will have teams dedicated to each piece of the process, but all too often if you want your project to be successful you have to step out of your comfort zone and do much of it yourself.&lt;/p&gt;&lt;p&gt;Getting started in Data Science&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Jupyter&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Going to production&lt;/p&gt;&lt;ul&gt;&lt;li&gt;packaging&lt;/li&gt;&lt;li&gt;creating cli's&lt;/li&gt;&lt;li&gt;linux&lt;/li&gt;&lt;li&gt;bash&lt;/li&gt;&lt;li&gt;cron&lt;/li&gt;&lt;li&gt;CI/CD&lt;/li&gt;&lt;li&gt;git&lt;/li&gt;&lt;li&gt;Docker&lt;/li&gt;&lt;li&gt;AWS&lt;/li&gt;&lt;li&gt;Pipelines&lt;/li&gt;&lt;li&gt;Schedulers/orchestration&lt;/li&gt;&lt;li&gt;Virtual Machines&lt;/li&gt;&lt;li&gt;hosting docs&lt;/li&gt;&lt;li&gt;hosting models/apis&lt;/li&gt;&lt;li&gt;Visualizations&lt;/li&gt;&lt;li&gt;Databases&lt;/li&gt;&lt;li&gt;blob storage&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;What are the most required skills for a data scientist?&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Communication&lt;/li&gt;&lt;li&gt;project Estimation&lt;/li&gt;&lt;li&gt;Subject Matter Expertise&lt;/li&gt;&lt;li&gt;Python&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A good understanding of the business problems you are trying to solve.  Thisrequires very good communication between Subject matter experts and the DataScience team.&lt;/p&gt;&lt;p&gt;For the technical side, python is the core skill that I stick with.  As I saidbefore this quickly starts to grow as you start needing to take projects intoproduction.  Learning how to write good python efficiently without needing tolook up much really frees up your brain to focus on the harder challenge ofsolving the problem at hand.&lt;/p&gt;&lt;p&gt;Learn how to frame up your problem ahead of time and be flexible in just theright ways.&lt;/p&gt;&lt;p&gt;Let's make up a fictitious transportation company that is split into a number of divisions for car, train, bus, etc.  All too often I see projects setup as a pilot for the car division, or even a micro subset of the car division.  The proof of concept takes off, and now we need to expand the project from one city to a whole region, but since the city was hard coded in it makes it really hard to expand. After a few months we have a lot of copy and paste code and at some point it becomes nearly impossible to make any changes without needing to change everything, or expand to new regions or divisions. Understand the inputs to your problem set early on and plan for them to change.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;How a beginner can create a roadmap to become a successful data scientist inthe present scenario?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Someone who is currently working in any sort of role that involves manipulating data in excel can get their foot in the door by automating the work their team does in python, or visualizing it in a more powerful tool.&lt;/p&gt;&lt;p&gt;You will quickly find that you can handle much more data than spreadsheet tools can, you can start expanding projects to utilize more data, or use that extra free time to find new insights you didn't have time for before.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;How much Maths is required to be a good data scientist? [You can also sharewhich concepts should everyone focus on more]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I have a lot of math background from my Mechanical Engineering degree that I haven't use in years.&lt;/p&gt;&lt;p&gt;To be clear I am not generally building models in my day to day.  My role kindof sits between Data Engineering and MLOps these days.  I scaffold up newprojects for the team, take on more complex data pipelining projects, and ownour whole deployment system.  None of this really requires advanced math on aday to day basis.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What are some concepts that everyone should know more&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Linters.  They are so easy to run that no one should be bad code that failslinting these days.  You can set them to run from your favorite editor, thecommand line, in a git commit, from GitHub Actions, or an Azure pipeline, justfigure out the ones that fit you and run them.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Will data science be replaced by AI?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Everything that we see today will be different in the future whether replaced byAI or the next hot topic.  There might be subsets of our work that is completelyautomated away.  I think it will be a great opportunity to focus our minds onmore difficult things that AI cannot.  Data Science is a relatively new field,be ready for it to change and move with it.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Words of advice for people without a Computer Science background?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You can do it, there are more folks out there crushing Data Science and Software Engineering in general without a Computer Science background than you realize. Don't let the imposter syndrome get to you.  Keep honing your skills and be confident.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Be flexible&lt;/li&gt;&lt;li&gt;Always be open and ready for change&lt;/li&gt;&lt;li&gt;Never stop learning&lt;/li&gt;&lt;li&gt;Keep a positive attitude&lt;/li&gt;&lt;li&gt;Be kind to others&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Tell us about your journey towards becoming a successful data scientist?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;see Q1&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Which tools you use for Data Science and which one do you recommend forbeginners?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As a beginner definitely focus on a minimal number of things at a time.  As you go through the journey of learning anything you will likely to see articles that tell you that your tech of choice is dead and should never be used because some new hotness it so much better.  Focus on skills that have a real job market and solve real problems don't worry so much about it that you never learn one.&lt;/p&gt;&lt;p&gt;Python is my core skill, it can do so much so quickly and has a very strong ecosystem in data.&lt;/p&gt;&lt;p&gt;A skill I would add in general is to deploy early.  Too often we spend months on prototypes that need rewritten for the prod environment, when they could have just been written for prod from the beginning while ci tooling could have kept the project cleaner and easier to work with.  Whether its GitHub actions or Azure Pipelines CI/CD is cheaper and easier to setup than ever.  There is a fluid movement that happens when you are working with clean code along the way rather than cleaning it up after its all done.  Simplifying your work opens up mental space to put more focus on your problem at hand.&lt;/p&gt;&lt;p style='text-align: center'&gt;&lt;a href='https://waylonwalker.com/what-are-github-actions'&gt;&lt;imgstyle='width:500px; max-width:80%; margin: auto;'src="https://waylonwalker.com/what-are-github-actions.png"alt="introductory article to GitHub actions"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;check out this article about github actions&lt;/p&gt;&lt;p&gt;Is data science a stressful job?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It definitely can be if you let it.  Manage expectations and scope creep well and you will be fine.  My most stressful times have probably been when I over committed to something and it was my own fault for setting myself up for stress.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;What type of problems you faced every day as a data scientist?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;At a high level the business I support remanufactures ( similar to recycling ) parts for heavy equipment.  I find ways to re-use more core material to save cost and reduce emissions.  A lot of what I do is solving business problems with code.  This might be a problem that has been solved by hand for a small focused subset of a population and expanding it to everything.  More and more of my time is being dedicated to coaching.  Whether in the form of code review, pair programming, or general mentoring.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/codeit-bro-interview</guid></item><item><title>New Machine for developing Tests with TestProject.io</title><link>https://waylonwalker.com/new-machine-tpio</link><description>Today I setup a new machine on Digital Ocean to use with TestProject.io, Here are my installation notes.</description><content:encoded>&lt;p&gt;Today I setup a new machine on Digital Ocean to use with TestProject.io,  Here are my installation notes.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;apt update &amp;amp;&amp;amp; apt upgrade -yapt install zshchsh zshsh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"curl -fsSL https://starship.rs/install.sh | bashecho 'eval "$(starship init zsh)"' &amp;gt;&amp;gt; ~/.zshrc# pythonsudo apt updatesudo apt install python3-pip -yecho 'alias python=python3' &amp;gt;&amp;gt; ~/.zshrcecho 'alias pip=pip3' &amp;gt;&amp;gt; ~/.zshrc# pipxapt install python3-venvpip install pipxpipx install blackpipx install shell-functoolspip install ipython# dockersudo apt updatesudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-commoncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"sudo apt updatesudo apt install docker-ce# docker-composesudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose# configure gitgit config --global user.name "Waylon Walker"git config --global user.email waylon@waylonwalker.com# fzfgit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/install# forgitgit clone https://github.com/wfxr/forgit ~/.forgitecho ". ~/.forgit/forgit.plugin.zsh" &amp;gt;&amp;gt; ~/.zshrc# agapt install silversearcher-ag# batapt install batecho "alias cat=batcat" &amp;gt;&amp;gt; ~/.zshrc# testproject.io tokensecho 'export TP_AGENT_ALIAS="Digital Ocean Agent"' &amp;gt;&amp;gt;" ~/.zshrcecho "export TP_AGENT_API_KEY=&amp;lt;your-key&amp;gt; &amp;gt;&amp;gt;" ~/.zshrcecho "export TP_DEV_TOKEN=&amp;lt;your-token&amp;gt; &amp;gt;&amp;gt;" ~/.zshrc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;envsubst &amp;lt; .github/ci/docker-compose.yml &amp;gt; docker-compose.yml&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;# .github/ci/docker-compose.ymlversion: "3.1"services:  testproject-agent:    image: testproject/agent:latest    container_name: testproject-agent    depends_on:      - chrome      - firefox    environment:      TP_API_KEY: "${TP_API_KEY}"      TP_AGENT_ALIAS: "GitHub Action Agent"      TP_AGENT_TEMP: "true"      TP_SDK_PORT: "8686"      CHROME: "chrome:4444"      CHROME_EXT: "localhost:5555"      FIREFOX: "firefox:4444"      FIREFOX_EXT: "localhost:6666"    ports:    - "8585:8585"    - "8686:8686"  chrome:    image: selenium/standalone-chrome    volumes:      - /dev/shm:/dev/shm    ports:    - "5555:4444"  firefox:    image: selenium/standalone-firefox    volumes:      - /dev/shm:/dev/shm    ports:    - "6666:4444"&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;docker-compose -f docker-compose.yml&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/new-machine-tpio</guid></item><item><title>Find and Replace in the Terminal.</title><link>https://waylonwalker.com/find-replace</link><description>notes about find and replace techniques</description><content:encoded>&lt;h2&gt;grepr&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {grep -iRl "$1" | xargs sed -i "s/$1/$2/g"}```bashgrepr() {grep -iRl "$1" | xargs sed -i "s/$1/$2/g"}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;grepd&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;grepd() {grep -iRl "$1" | xargs sed -i "/^$1/d"}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;CocSearch&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;:CocSearch status: 'false' -g *.md&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/find-replace</guid></item><item><title>Digital Ocean</title><link>https://waylonwalker.com/digital-ocean</link><description>I love digital ocean for it's simplicity and its commitment to open source.</description><content:encoded>&lt;p&gt;I love digital ocean for it's &lt;strong&gt;simplicity&lt;/strong&gt; and its commitment to open source.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/digital-ocean</guid></item><item><title>Debugging Python</title><link>https://waylonwalker.com/debugging-python</link><description>Debugging Python</description><content:encoded>&lt;h2&gt;Using pdb&lt;/h2&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/debugging-python</guid></item><item><title>Filtering Pandas</title><link>https://waylonwalker.com/filtering-pandas</link><description>Filtering pandas DataFrames many different ways.</description><content:encoded>&lt;h2&gt;query&lt;/h2&gt;&lt;p&gt;Good for method chaining, i.e. adding more methods or filters without assigning a new variable.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# isskus.query('AVAILABILITY == " AVAILABLE"')# is notskus.query('AVAILABILITY != " AVAILABLE"')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;masking&lt;/h2&gt;&lt;p&gt;general purpose, this is probably the most common method you see in training/examples&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;# isskus[skus['AVAILABILITY'] == 'AVAILABLE']# is notskus[~skus['AVAILABILITY'] == 'AVAILABLE']&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;isin&lt;/h2&gt;&lt;p&gt;capable of including multiple strings to include&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# is indf[df.AVAILABILITY.isin(['AVAILABLE', 'AVL'])]# is not indf[~df.AVAILABILITY.isin(['AVAILABLE', 'AVL'])]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;contains&lt;/h2&gt;&lt;p&gt;Good For partial matches&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# containsdf[df.AVAILABILITY.str.contains('AVA')]# not containsdf[~df.AVAILABILITY.str.contains('AVA')]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;MASKS&lt;/h2&gt;&lt;p&gt;anything that we put inside of square brackets can be set as a variable then passed in.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;service_mask = skus['AVAILABILITY'] == 'AVAILABLE'name_mask = skus['NAME'] == 'Dell chromebook 11'&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Operators&lt;/h3&gt;&lt;p&gt;&amp;amp; - and~ - not| - or&lt;/p&gt;&lt;h3&gt;AVAILABLE and NAME&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code&gt;df[service_mask &amp;amp; name_mask]&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;AVAILABLE or NAME&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code&gt;df[service_mask | name_mask]&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;AVAILABLE and not NAME&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code&gt;df[service_mask &amp;amp; ~name_mask]&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/filtering-pandas</guid></item><item><title>Gatsby Scripts with onload</title><link>https://waylonwalker.com/gatsby-scripts-with-onload</link><description>This might be useful https://github.com/nfl/react-helmet/issues/146 https://github.com/gatsbyjs/gatsby/issues/13136</description><content:encoded>&lt;p&gt;This might be useful&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/nfl/react-helmet/issues/146" title="https://github.com/nfl/react-helmet/issues/146"&gt;https://github.com/nfl/react-helmet/issues/146&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/gatsbyjs/gatsby/issues/13136" title="https://github.com/gatsbyjs/gatsby/issues/13136"&gt;https://github.com/gatsbyjs/gatsby/issues/13136&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/gatsby-scripts-with-onload</guid></item><item><title>Kedro Preflight</title><link>https://waylonwalker.com/kedro-preflight</link><description>run checks before running the pipeline</description><content:encoded>&lt;p&gt;This is a very rough idea for a kedro package to prevent time lost to get partway through a pipeline run only to realize that you dont have access to data or resources.&lt;/p&gt;&lt;h1&gt;Must Haves&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;check that inputs exist or are of a type to skip (sql)&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Good to haves&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;check that all input and output databases are accessible with good credentials&lt;/li&gt;&lt;li&gt;check for s3 bucket access&lt;/li&gt;&lt;li&gt;check for spark install&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Implementation&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;@hook_specdef before_pipeline_run(run_params, pipeline, catalog):&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;run params&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-json"&gt;{  "run_id": str  "project_path": str,  "env": str,  "kedro_version": str,  "tags": Optional[List[str]],  "from_nodes": Optional[List[str]],  "to_nodes": Optional[List[str]],  "node_names": Optional[List[str]],  "from_inputs": Optional[List[str]],  "load_versions": Optional[List[str]],  "pipeline_name": str,  "extra_params": Optional[Dict[str, Any]]}&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-preflight</guid></item><item><title>Amazon Web Services</title><link>https://waylonwalker.com/amazon-web-services</link><description>I started using aws in March 2019.  Here are some of my notes.</description><content:encoded>&lt;p&gt;I started using aws in March 2019.  Here are some of my notes.&lt;/p&gt;&lt;h1&gt;aws-cli&lt;/h1&gt;&lt;h1&gt;ec-2&lt;/h1&gt;&lt;h1&gt;SageMaker&lt;/h1&gt;&lt;h1&gt;S3&lt;/h1&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/amazon-web-services</guid></item><item><title>Reading List</title><link>https://waylonwalker.com/reading-list</link><description>Things to read later</description><content:encoded>&lt;p&gt;STOP LEAVING Browser Tabs open and save them here!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Jungle Scout - &lt;a href="https://junglescouteng.medium.com/jungle-scout-case-study-kedro-airflow-and-mlflow-use-on-production-code-150d7231d42e"&gt;Kedro Case Study&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/quantumblacklabs/kedro/commit/b42845e2e9a6d96e395a5a6f75980ef55c24fddc"&gt;Kedro Sessions&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Julia Evans - &lt;a href="https://jvns.ca/blog/2020/10/28/a-few-things-i-ve-learned-about-email-marketing/"&gt;A few things I've learned about email marketing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;git course - &lt;a href="https://www.katacoda.com/courses/git/1"&gt;katacoda&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/reading-list</guid></item><item><title>Kedro Factory</title><link>https://waylonwalker.com/kedro-factory</link><description>Kedro Plugin Idea for creating Dags quickly</description><content:encoded>&lt;p&gt;Dynamically generate kedro pipelines with yaml or script&lt;/p&gt;&lt;p&gt;Inspiration&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/ajbosco/dag-factory"&gt;dag-factory&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-factory</guid></item><item><title>Resume Tips</title><link>https://waylonwalker.com/resume-tips</link><description>&lt;ul&gt;&lt;li&gt;customize for the job&lt;/li&gt;&lt;li&gt;Why are you a good fit?&lt;/li&gt;&lt;li&gt;What will you bring to the role?&lt;/li&gt;&lt;li&gt;Give real outcomes&lt;/li&gt;&lt;li&gt;give real experience&lt;/li&gt;&lt;li&gt;Stop tech vomiting&lt;/li&gt;&lt;li&gt;if you link to GitHub&lt;/li&gt;&lt;li&gt;Make a profile readme&lt;/li&gt;&lt;li&gt;Guide me to your best work&lt;/li&gt;&lt;li&gt;have some activity&lt;/li&gt;&lt;li&gt;if you link to LinkedIn&lt;/li&gt;&lt;li&gt;Provide some benefit that is not on your resume&lt;/li&gt;&lt;li&gt;Have a logical flow of experience (dont make me hunt for past experience)&lt;/li&gt;&lt;li&gt;Keep it under 2 pages&lt;/li&gt;&lt;li&gt;Who you know.&lt;/li&gt;&lt;li&gt;Reference real experience&lt;/li&gt;&lt;li&gt;Deployed 12 data pipelines with over 500 nodes to process 200GB of data at a Fortune 100 company&lt;/li&gt;&lt;li&gt;vs&lt;/li&gt;&lt;li&gt;Knowledge of Data Engineering methodology with python EC2&lt;/li&gt;&lt;li&gt;Dont be so fluffy&lt;/li&gt;&lt;/ul&gt;</description><guid isPermaLink="false">https://waylonwalker.com/resume-tips</guid></item><item><title>rebrand</title><link>https://waylonwalker.com/rebrand</link><description>A few notes for my next refactoring of waylonwalker.com</description><content:encoded>&lt;ul&gt;&lt;li&gt;simple landing page&lt;/li&gt;&lt;li&gt;&lt;a href="https://swyx.io"&gt;https://swyx.io&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.joelonsoftware.com/"&gt;joel on software&lt;/a&gt;&lt;ul&gt;&lt;li&gt;recent&lt;/li&gt;&lt;li&gt;reading lists&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;More from waylon just above footer&lt;/li&gt;&lt;li&gt;4x2 grid&lt;/li&gt;&lt;li&gt;link strategy&lt;/li&gt;&lt;li&gt;latest post&lt;/li&gt;&lt;li&gt;next/prev&lt;/li&gt;&lt;li&gt;similar tags&lt;/li&gt;&lt;li&gt;search in nav&lt;/li&gt;&lt;li&gt;tag stickers&lt;/li&gt;&lt;li&gt;simple cards?&lt;/li&gt;&lt;li&gt;bookmarks?&lt;/li&gt;&lt;li&gt;nav style stinks&lt;/li&gt;&lt;li&gt;single post template&lt;/li&gt;&lt;li&gt;flat routes no need to /blog /notes&lt;/li&gt;&lt;li&gt;post types&lt;/li&gt;&lt;li&gt;🌳  full&lt;/li&gt;&lt;li&gt;🌱  budding&lt;/li&gt;&lt;li&gt;🖊  Note&lt;/li&gt;&lt;li&gt;💻  hot tip&lt;/li&gt;&lt;li&gt;usage of tags&lt;/li&gt;&lt;li&gt;MDX&lt;/li&gt;&lt;li&gt;stories&lt;/li&gt;&lt;li&gt;slides&lt;/li&gt;&lt;li&gt;⚠&lt;/li&gt;&lt;li&gt;❌&lt;/li&gt;&lt;li&gt;✔&lt;/li&gt;&lt;li&gt;kedro viz&lt;/li&gt;&lt;li&gt;charts&lt;/li&gt;&lt;li&gt;inlink component&lt;/li&gt;&lt;li&gt;&lt;a href="https://joshwcomeau.com/" title="https://joshwcomeau.com/"&gt;https://joshwcomeau.com/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;auto-card oneline links&lt;/li&gt;&lt;li&gt;meta posts&lt;/li&gt;&lt;li&gt;about&lt;/li&gt;&lt;li&gt;uses&lt;/li&gt;&lt;li&gt;how site is built&lt;/li&gt;&lt;li&gt;how to search&lt;/li&gt;&lt;li&gt;stories&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;TODO&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;review package.json&lt;/li&gt;&lt;li&gt;update package.json&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Done&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;ahrefs&lt;/li&gt;&lt;li&gt;fix canonical urls&lt;/li&gt;&lt;li&gt;fix broken inlinks&lt;/li&gt;&lt;li&gt;convert to one post template*&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/rebrand</guid></item><item><title>Twitter deepdives</title><link>https://waylonwalker.com/twitter-deepdives</link><description>Inspired by Chris Achard Email course inspired by learn d3 in 5 days</description><content:encoded>&lt;p&gt;Inspired by Chris Achard&lt;/p&gt;&lt;h2&gt;My ideas&lt;/h2&gt;&lt;h3&gt;Python&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;List comps&lt;/li&gt;&lt;li&gt;Classes&lt;/li&gt;&lt;li&gt;Inheritance&lt;/li&gt;&lt;li&gt;Background&lt;/li&gt;&lt;li&gt;Click&lt;/li&gt;&lt;li&gt;Lambdas&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Kedro&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Cataloging&lt;/li&gt;&lt;li&gt;Custom datasets&lt;/li&gt;&lt;li&gt;Reusable pipelines&lt;/li&gt;&lt;li&gt;find-kedro&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Learn kedro in 5 days&lt;/h3&gt;&lt;p&gt;Email course inspired by learn d3 in 5 days&lt;/p&gt;&lt;h3&gt;Mail&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Share your knowledge&lt;/li&gt;&lt;li&gt;Practice&lt;/li&gt;&lt;li&gt;Practice in public&lt;/li&gt;&lt;li&gt;Make practice easy&lt;/li&gt;&lt;li&gt;Share your notes&lt;/li&gt;&lt;li&gt;Digital Gardening&lt;/li&gt;&lt;li&gt;Own your content&lt;/li&gt;&lt;li&gt;Build your audience&lt;/li&gt;&lt;li&gt;Be nice&lt;/li&gt;&lt;li&gt;Have empathy&lt;/li&gt;&lt;li&gt;Learn your way&lt;/li&gt;&lt;li&gt;Continuous learning&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/twitter-deepdives</guid></item><item><title>SqlAlchemy Models</title><link>https://waylonwalker.com/sqlalchemy-models</link><description>My Notes about using sqlalchemy models</description><content:encoded>&lt;h1&gt;Make a connection&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from sqlalchemy import create_enginedef get_engine():    return create_engine("sqlite:///mode_examples.sqlite")&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Make a session&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from sqlalchemy.orm import sessionmakerdef get_session():    con = get_engine()    Base.bind = con    Base.metadata.create_all()    Session = sessionmaker(bind=con)    session = Session()    return session&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Make a Base Class&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from sqlalchemy.ext.declarative import declarative_baseBase = declarative_base()Base.metadata.bind = get_engine()&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Make your First Model&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class User(Base):    __tablename__ = "users"    username = Column('username', Text())    firstname = Column('firstname', Text())    lastname = Column('lastname', Text())&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Make your own Base Class to inherit From&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class MyBaseHelper:    def to_dict(self):        return {k: v for k, v in self.__dict__.items() if k[0] != "_"}    def update(self, **attrs):        for key, value in attrs.items():            if hasattr(self, key):                setattr(self, key, value)&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Use the Custom Base Class&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;class User(Base, MyBaseHelper):    __tablename__ = "users"    username = Column('username', Text())    firstname = Column('firstname', Text())    lastname = Column('lastname', Text())&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/sqlalchemy-models</guid></item><item><title>python-deepwatch</title><link>https://waylonwalker.com/python-deepwatch</link><description>Is it possible to deep watch a single python function for changes? keeping track of a python functions hash is quite simple.  There is a__hash__ method attached to every python function.  Calling it will return a hash of the function. If the function</description><content:encoded>&lt;p&gt;Is it possible to deep watch a single python function for changes?&lt;/p&gt;&lt;h2&gt;Shallow Watch&lt;/h2&gt;&lt;p&gt;keeping track of a python functions hash is quite simple.  There is a&lt;code&gt;__hash__&lt;/code&gt; method attached to every python function.  Calling it will return a hash of the function. If the function changes the hash will change.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;[ins] In [1]: def test():         ...:     return "hello"[ins] In [2]: test.__hash__()Out[2]: 8760526380347[ins] In [3]: test.__hash__()Out[3]: 8760526380347[ins] In [4]: def test():         ...:     return "hello world"[ins] In [5]: test.__hash__()Out[5]: 8760525617988[ins] In [6]: def test():         ...:     return "hello"[ins] In [7]: test.__hash__()Out[7]: 8760526380491&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using hashlib provides a consistent hash.&lt;/p&gt;&lt;p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import inspectimport hashlibdef test():    return "hello"[ins] In [17]: m.update(inspect.getsource(test).encode())[ins] In [18]: mOut[18]: &amp;lt;sha256 HASH object @ 0x7f7b7b70fde0&amp;gt;[ins] In [19]: m.hexdigest()Out[19]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'[ins] In [20]: m.update(inspect.getsource(test).encode())[ins] In [21]: m.hexdigest()Out[21]: '93638f2c944f34a9069af9242657b7de556fcc63742f4c27c4c8deedeb976a5f'[ins] In [22]: m = hashlib.sha256()[ins] In [23]: m.update(inspect.getsource(test).encode())[ins] In [24]: m.update(inspect.getsource(test).encode())[ins] In [25]: m = hashlib.sha256()[ins] In [26]: m.update(inspect.getsource(test).encode())[ins] In [27]: m.hexdigest()Out[27]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'[ins] In [28]: def test():          ...:     return "hello world"[ins] In [29]: m = hashlib.sha256()[ins] In [30]: m.update(inspect.getsource(test).encode())[ins] In [31]: m.hexdigest()Out[31]: '121fa3a3f295d49d4609505bc5e96d8b6a8ed3b496e4f3dc6c0ead73bef4e3c7'[ins] In [32]: def test():          ...:     return "hello"[ins] In [33]: m = hashlib.sha256()[ins] In [34]: m.update(inspect.getsource(test).encode())[ins] In [35]: m.hexdigest()Out[35]: '1f2ff4c69eb69b545469686edd6f849136e104cd535785891586d90620328757'&lt;/code&gt;&lt;/pre&gt;Now we have a consistent way to hash function code.&lt;/p&gt;&lt;h2&gt;Deep hashing&lt;/h2&gt;&lt;h3&gt;Find dependencies&lt;/h3&gt;&lt;p&gt;setup a function in a module with a dependency&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;       │ File: one.py───────┼────────────────────────────────   1   │ def one():   2   │     return 1   3   │   4   │ def two():   5   │     return one() + one()&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;&amp;gt;&amp;gt;&amp;gt; import one&amp;gt;&amp;gt;&amp;gt; one.one.__code__.co_names()&amp;gt;&amp;gt;&amp;gt; one.two.__code__.co_names('one', )&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create Generic module importer by filepath&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import importlibimport importlib.utilimport osdef _import(path: Path, directory: Path, verbose: bool = False):    """dynamically imports module given a path"""    cwd = os.getcwd()    os.chdir(directory)    name = path.name    # path = str(path).replace(str(directory) + "/", "")    path = _make_path_relative(path, directory)    try:        spec = importlib.util.spec_from_file_location(name, path)        module = importlib.util.module_from_spec(spec)        spec.loader.exec_module(module)    except (ModuleNotFoundError, ValueError):        module = _use_importmodule(            str(path).replace(os.sep, ".").replace(".py", ""), verbose=verbose        )    os.chdir(cwd)    return moduledef _use_importmodule(path: Path, verbose: bool = False):    """    relative imports do not work well with importlib.util.spec_from_file_location,    and require a sys.path.append to be imported correctly.  For this reason    importlib.import_module is the second option.    """    # Not sure if this is needed, but it was never hit in a test    # if path[0] == ".":    #     path = path[1:]    sys.path.append(os.getcwd())    mod = importlib.import_module(path)    sys.path.pop()  # clean up path, do not permananatly change users path    return mod&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;get code of dependency&lt;/h3&gt;&lt;p&gt;the inspect module can tell us the filename of our current module.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import inspectmodule_path = inspect.getfile(one.one)module = _import(module_path)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;now we can hash the dependency&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;nested_function = eval(f'module.{one.two.__code__.co_names[0]}"&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/python-deepwatch</guid></item><item><title>Upcoming Posts</title><link>https://waylonwalker.com/upcoming-posts</link><description>My Notes about using kedro</description><content:encoded>&lt;h2&gt;🧠&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;How I manage Environments&lt;/li&gt;&lt;li&gt;My Data Workflow.&lt;/li&gt;&lt;li&gt;Daily Schedule&lt;/li&gt;&lt;li&gt;desk&lt;/li&gt;&lt;li&gt;keeb&lt;/li&gt;&lt;li&gt;Material Shell&lt;/li&gt;&lt;li&gt;Why blog&lt;/li&gt;&lt;li&gt;search with fuse.js&lt;/li&gt;&lt;li&gt;&lt;p&gt;Testing a blog with ahrefs&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Think like a Senior Dev&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Editor&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;tmux&lt;/li&gt;&lt;li&gt;vim&lt;/li&gt;&lt;li&gt;shortcuts&lt;/li&gt;&lt;li&gt;gitui&lt;/li&gt;&lt;li&gt;fzf&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Core&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;gracefully adopt kedro&lt;/li&gt;&lt;li&gt;catalog - in progress&lt;/li&gt;&lt;li&gt;pipeline&lt;/li&gt;&lt;li&gt;kedro&lt;/li&gt;&lt;li&gt;10 reasons you shouldnt use kedro&lt;/li&gt;&lt;li&gt;10 reasons to use &lt;/li&gt;&lt;li&gt;filter viz&lt;/li&gt;&lt;li&gt;Steel-toes env&lt;/li&gt;&lt;li&gt;Why framework&lt;/li&gt;&lt;li&gt;How I write pipelines&lt;/li&gt;&lt;li&gt;when I write pipelines&lt;/li&gt;&lt;li&gt;pipeline node templates&lt;/li&gt;&lt;li&gt;Convert a notebooks to pipelines&lt;/li&gt;&lt;li&gt;Testing Pipelines&lt;/li&gt;&lt;li&gt;professional python&lt;/li&gt;&lt;li&gt;cookiecutter&lt;/li&gt;&lt;li&gt;flake8&lt;/li&gt;&lt;li&gt;black&lt;/li&gt;&lt;li&gt;mypy&lt;/li&gt;&lt;li&gt;pre-commit&lt;/li&gt;&lt;li&gt;click&lt;/li&gt;&lt;li&gt;pytest&lt;ul&gt;&lt;li&gt;git&lt;/li&gt;&lt;li&gt;parametrize&lt;/li&gt;&lt;li&gt;environment variables&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;My top pandas methods&lt;/li&gt;&lt;li&gt;Actions&lt;/li&gt;&lt;li&gt;How I cut my gatsby deployment in half&lt;/li&gt;&lt;li&gt;VSCODE update&lt;/li&gt;&lt;li&gt;plugins I use&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;uses&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;python&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"&gt;What does if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”: do?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator"&gt;ternary operators&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists-without-exceptions"&gt;check if file exists&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/89228/calling-an-external-command-from-python"&gt;calling external commands&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/38987/how-do-i-merge-two-dictionaries-in-a-single-expression-in-python-taking-union-o"&gt;merging dictionaries&lt;/a&gt;&lt;/li&gt;&lt;li&gt;zip&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;learning&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;mdx&lt;/li&gt;&lt;li&gt;touch typing&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Newsletter&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Don't jump too early&lt;/li&gt;&lt;li&gt;keep a pulse on new things&lt;/li&gt;&lt;li&gt;be nice&lt;/li&gt;&lt;li&gt;take breaks&lt;/li&gt;&lt;li&gt;push at the right time&lt;/li&gt;&lt;li&gt;practice&lt;/li&gt;&lt;li&gt;optimize the hard things&lt;/li&gt;&lt;li&gt;failure&lt;/li&gt;&lt;li&gt;dont listen to the haters&lt;/li&gt;&lt;li&gt;Just start (make 20 minutes)&lt;/li&gt;&lt;li&gt;Mistakes Happen&lt;/li&gt;&lt;li&gt;Accountability&lt;/li&gt;&lt;li&gt;Giving without Expectations&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/upcoming-posts</guid></item><item><title>Serverless things to investigate</title><link>https://waylonwalker.com/serverless-things-to-investigate</link><description>* https://getform.io/forms Free to get started https://formkeep.com/pricing Free 7 day trial $4.99 cheapest after</description><content:encoded>&lt;h2&gt;Social Automation&lt;/h2&gt;&lt;h3&gt;Zappier&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Free&lt;/li&gt;&lt;li&gt;only one step is free&lt;/li&gt;&lt;li&gt;can take rss to social&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Automate.io&lt;/h3&gt;&lt;p&gt;*&lt;/p&gt;&lt;h2&gt;Form submission&lt;/h2&gt;&lt;p&gt;&lt;a href="https://getform.io/forms" title="https://getform.io/forms"&gt;https://getform.io/forms&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Free to get started&lt;/p&gt;&lt;p&gt;&lt;a href="https://formkeep.com/pricing" title="https://formkeep.com/pricing"&gt;https://formkeep.com/pricing&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Free 7 day trial $4.99 cheapest after&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/serverless-things-to-investigate</guid></item><item><title>What DataScientists Should Know About S3</title><link>https://waylonwalker.com/s3-datascience</link><description>What DataScientists Should Know About S3</description><content:encoded></content:encoded><guid isPermaLink="false">https://waylonwalker.com/s3-datascience</guid></item><item><title>Just Use Pathlib</title><link>https://waylonwalker.com/just-use-pathlib</link><description>Pathlib is an amazing cross-platform path tool.</description><content:encoded>&lt;p&gt;Pathlib is an amazing cross-platform path tool.&lt;/p&gt;&lt;h2&gt;Import&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from pathlib import Path&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create path object&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Current Directory&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;cwd = Path('.').absolute()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Users Home Directory&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;home = Path.home()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;module directory&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;module_path = Path(__file__)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;Let's create a path relative to our current module.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data_path = Path(__file__) / 'data'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Check if files exist&lt;/h2&gt;&lt;h2&gt;Make Directories&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data_path.mkdir(parents=True, exists_ok=True)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;rename files&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;Path(data_path /'example.csv').rename('real.csv')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;List files&lt;/h2&gt;&lt;h2&gt;Glob Files&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data_path.glob('*.csv')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;recursively&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data_path.rglob('*.csv')&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Write&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;Path(data_path / 'meta.txt').write_text(f'created on {datetime.datetime.today()})&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/just-use-pathlib</guid></item><item><title>Custom Python Exceptions</title><link>https://waylonwalker.com/custom-python-exceptions</link><description>Custom Python Exceptions</description><content:encoded>&lt;h2&gt;Custom Exceptions&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code&gt;class ProjectNameError(NameError):    passclass UserNameError(NameError):    passclass CondaEnvironmentError(RuntimeError):    passclass BucketNotDefinedError(NameError):    pass&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/custom-python-exceptions</guid></item><item><title>Kedro Catalog</title><link>https://waylonwalker.com/kedro-catalog</link><description>I am exploring a kedro catalog meta data hook</description><content:encoded>&lt;p&gt;I am exploring a kedro catalog meta data hook, these are some notes about what I am thinking.&lt;/p&gt;&lt;h2&gt;Process&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;metadata will be attached to the dataset object under a &lt;code&gt;.metadata&lt;/code&gt; attribute&lt;/li&gt;&lt;li&gt;metadata will be updated &lt;code&gt;after_node_run&lt;/code&gt;&lt;/li&gt;&lt;li&gt;metadata will be empty until a pipeline is ran with the hook on&lt;/li&gt;&lt;li&gt;optionally a function to add metadata will be added&lt;/li&gt;&lt;li&gt;metadata will be stored in a file next to the &lt;code&gt;filepath&lt;/code&gt;&lt;/li&gt;&lt;li&gt;meta&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Problems This Hook Should solve&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;what datasets have a columns with &lt;code&gt;sales&lt;/code&gt; in the name&lt;/li&gt;&lt;li&gt;what datasets were updated after last tuesday&lt;/li&gt;&lt;li&gt;which pipeline node created this dataset&lt;/li&gt;&lt;li&gt;how many rows are in this dataset (without reloading all datasets)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;implementation details&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;metadata will be attached to each dataset as a dictionary&lt;/li&gt;&lt;li&gt;list/dict comprehensions can be used to make queries&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Metadata to Capture&lt;/h2&gt;&lt;p&gt;try pandas method -&amp;gt; try spark -&amp;gt; try dict/list -&amp;gt; none&lt;/p&gt;&lt;ul&gt;&lt;li&gt;column names&lt;/li&gt;&lt;li&gt;length&lt;/li&gt;&lt;li&gt;Null count&lt;/li&gt;&lt;li&gt;created_by node name&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Database?&lt;/h2&gt;&lt;p&gt;Is there an easy way to create a nosql database in memory from a a list of dictionaries?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://pypi.org/project/list-dict-DB/"&gt;list-dict-DB&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://dataset.readthedocs.io/en/latest/"&gt;dataset&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://tinydb.readthedocs.io/en/latest/"&gt;TinyDB&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-catalog</guid></item><item><title>Adding google fonts to a gatsbyjs site</title><link>https://waylonwalker.com/adding-google-fonts-to-a-gatsbyjs-site</link><description>https://stackoverflow.com/questions/47488440/how-do-i-add-google-fonts-to-a-gatsby-site</description><content:encoded>&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/47488440/how-do-i-add-google-fonts-to-a-gatsby-site"&gt;stack overflow link&lt;/a&gt;&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/adding-google-fonts-to-a-gatsbyjs-site</guid></item><item><title>Reader</title><link>https://waylonwalker.com/reader</link><description>Notes about my reader idea</description><content:encoded>&lt;h1&gt;Inputs&lt;/h1&gt;&lt;p&gt;The input will be a yaml file containing a list of &lt;code&gt;Items&lt;/code&gt; you want to stay up to date with.  Inside each item will be a url, and weight.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;email:    max-entries: 10    recipients:      - waylon@waylonwalker.commarkdown:    max-entries: 100    output:        - README.mdjson:    max-entries: 1000    output:        - feeds/feed.jsonrss:    max-entries: 1000    output:        - feeds/feed.xmlhtml:    max-entries: 100    output:        index.htmlitems:    Waylon Walker:    weight: 5    url: https://waylonwalker.com/rss.xml    @_WaylonWalker:    weight: 3    twitter: https://twitter.com/_waylonwalker    DEV Waylon Walker:    weight: 8    url: https://dev.to/waylonwalker    Stack Overflow Kedro:    weight: 5    url: https://stackoverflow.com/questions/tagged/kedro    Kedro GitHub:    weight: 4    url: https://github.com/quantumblacklabs/kedro    Kedro Pypi        weight: 10        url: https://pypi.org/project/kedro/&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Types&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;rss feed (primary source)&lt;/li&gt;&lt;li&gt;youtube feed&lt;/li&gt;&lt;li&gt;Stack Overflow tags&lt;/li&gt;&lt;li&gt;GitHub repo activity&lt;/li&gt;&lt;li&gt;pypi release&lt;/li&gt;&lt;li&gt;dev.to post&lt;/li&gt;&lt;li&gt;Twitter Search # user will need an api key&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Methodology&lt;/h1&gt;&lt;p&gt;Each url will be pulled in and parsed into a standard data scructure.  Some items may yield special feaures, a schemaless/nosql datastructure may be best.  Pipeline will decide to how to weight posts based on users weight, recent position on feed, .&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code&gt;a_raw (raw plain text / json items) -&amp;gt; b_int (cleaned items) -&amp;gt; c_pri (single feed of items) -&amp;gt; d_fea (weighted feed of items) -&amp;gt; e_out (requested output formats)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;output&lt;/h2&gt;&lt;p&gt;Pipeline outputs will be email, json, markdown, xml, html.  Each will be able to be configured by the config file (max-entries, output location).&lt;/p&gt;&lt;h2&gt;Running&lt;/h2&gt;&lt;p&gt;Users will be able to create their own reader.  Here is a list of possiblilites.  Users will not have the pipeline inside their repo. It will pull the pipeline from a package repo, pypi, dockerhub, GitHub.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fork a template repo (might be cumbersome to update)&lt;/li&gt;&lt;li&gt;use a GitHub action from the Marketplace (easier to update)&lt;/li&gt;&lt;li&gt;GH actions will run the pipeline on a schedule&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/reader</guid></item><item><title>Testing Data Pipelines</title><link>https://waylonwalker.com/testing-data-pipelines</link><description>Thinking through testing best practices for Data Pipelines</description><content:encoded>&lt;h1&gt;Lint/Format/Doc&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;black&lt;/li&gt;&lt;li&gt;flake8&lt;/li&gt;&lt;li&gt;interrogate&lt;/li&gt;&lt;li&gt;mypy&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Pipeline Assertions&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;pipeline constructs&lt;/li&gt;&lt;li&gt;pipeline as expected nodes&lt;/li&gt;&lt;li&gt;pipeline has minimum nodes&lt;/li&gt;&lt;li&gt;test minimum tags&lt;/li&gt;&lt;li&gt;test alternate tags&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Catalog Assertions&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;test catalog follows naming structure&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Node Tests&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;test function does the correct operations on test data&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Great Expectations&lt;/h1&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/testing-data-pipelines</guid></item><item><title>Reasons to Kedro</title><link>https://waylonwalker.com/reasons-to-kedro-notes</link><description>&lt;h2&gt;Reasons to Kedro&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;collaboration&lt;/li&gt;&lt;li&gt;Sharable catalog&lt;/li&gt;&lt;li&gt;small nodes over monolithic notebooks&lt;/li&gt;&lt;li&gt;catalog&lt;/li&gt;&lt;li&gt;easily load anything without needing to run&lt;/li&gt;&lt;li&gt;No need to write read/write code&lt;/li&gt;&lt;li&gt;pipeline&lt;/li&gt;&lt;li&gt;No need to keep execution order in your head&lt;/li&gt;&lt;li&gt;easily run a slice of a pipeline&lt;/li&gt;&lt;li&gt;plugins&lt;/li&gt;&lt;li&gt;pip install&lt;/li&gt;&lt;li&gt;make your own&lt;/li&gt;&lt;li&gt;hooks&lt;/li&gt;&lt;li&gt;flexible expandable cli&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Reasons Not to Kedro&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Already utilizing another DAG framework&lt;/li&gt;&lt;li&gt;Data is not in a widely supported format&lt;/li&gt;&lt;li&gt;Micro short-lived project&lt;/li&gt;&lt;li&gt;Large Project / Deadline&lt;/li&gt;&lt;li&gt;Use a lower profile project to learn first&lt;/li&gt;&lt;li&gt;Team not willing to change&lt;/li&gt;&lt;li&gt;Need minimal dependencies&lt;/li&gt;&lt;li&gt;God Project - kedro owns everything??&lt;/li&gt;&lt;/ul&gt;</description><guid isPermaLink="false">https://waylonwalker.com/reasons-to-kedro-notes</guid></item><item><title>Bash</title><link>https://waylonwalker.com/bash</link><description>Waylon Walker's Bash Notes</description><content:encoded>&lt;h1&gt;Bash Notes&lt;/h1&gt;&lt;p&gt;Bash is super powerful.&lt;/p&gt;&lt;h2&gt;File System Full&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Show Remaining Space on Drives&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;df -h&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;show largest files in current directory&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;du . -h --max-depth=1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Move files then symlink them&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;mkdir /mnt/mounted_drivemv ~/bigdir /mnt/mounted_driveln -s /mnt/mounted_drive/bigdir ~/bigdir&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Fuzzy One Liners&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;a() {source activate "$(conda info --envs | fzf | awk '{print $&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;edit in vim&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;vf() { fzf | xargs -r -I % $EDITOR % ;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;cat a file&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;vf() { fzf | xargs -r -I % $EDITOR % ;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;bash execute&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;bf() { bash "$(fzf)" }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;git add&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;gadd() { git status -s | fzf -m | awk '{print $2}' | xargs git add &amp;amp;&amp;amp; git status -s}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;git reset&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;greset() { git status -s |  fzf -m | awk '{print $2}' |xargs git reset &amp;amp;&amp;amp; git status -s}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Kill a process&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;fkill() {kill $(ps aux | fzf | awk '{print($2)}')}&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Finding things&lt;/h2&gt;&lt;h3&gt;Files&lt;/h3&gt;&lt;p&gt;&lt;a href="https://github.com/sharkdp/fd"&gt;fd-find&lt;/a&gt; is amazing for finding files, it even respects your &lt;code&gt;.gitignore&lt;/code&gt; file 😲.  Install with &lt;code&gt;apt install fd-find&lt;/code&gt;.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;fd md&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ag -g python&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;find . -n "*.md"&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;++Vanilla Bonus&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;Content&lt;/h3&gt;&lt;p&gt;** show matching text **&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ag python&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grep -iR Python&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;++Vanilla Bonus&lt;/em&gt;&lt;/p&gt;&lt;p&gt;** show file names only **&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;ag -l python&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grep -iRl python&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;++Vanilla Bonus&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;Recursively Replace text&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;agr() {ag -l "$1" | xargs sed -i "s/$1/$2/g"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;++Vanilla Bonus&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {grep -iRl "$1" | xargs sed -i "s/$1/$2/g"}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Extending&lt;/strong&gt; &lt;code&gt;**agr**&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;**grepr**&lt;/code&gt;&lt;/p&gt;&lt;p&gt;There are so many options inside of &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;ag&lt;/code&gt;, and &lt;code&gt;sed&lt;/code&gt; that you could many an enormous amount of these if you really wanted to, but I like to keep it simple.  These cover 90% of my usage.  If I wanted to change something in the second half I would just paste in this command and edit it. More often though I want to limit the input, say only replace word1 to word2 inside of markdown files.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Limited Scope&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;fd md | xargs argr python python3&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;find . -n "*.md" | xargs grepr python python3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;++Vanilla Bonus&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://waylonwalker.com/refactor-in-cli"&gt;https://waylonwalker.com/refactor-in-cli&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I use these replace commands heavily when doing large refactorings.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;conditionally configure&lt;/h3&gt;&lt;p&gt;I like this one when there is not a good cli into config files and I need to replace something like a true to false if the value is in the config and append to the config if its not.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;grepr() {    # replaces first string with second string inside file from third argument    # example:    #   grepr "allow_conda_downgrades:.*" "allow_conda_downgrades: true" ~/.condarc    if grep -xq $1 $3    then        sed -i "s|$1|$2|g" $3    else        echo "$2" &amp;gt;&amp;gt; $3    fi}&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Watch the time&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;watch -n 1 date&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;++Vanilla Bonus&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;with figlet&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;watch -n 1 bash -c "date | figlet"&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;watch a function&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;run () {dateaws s3 sync $BUCKET .}export -f runwatch -n 10 run&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;if conda environment does not exist create it&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs | grep my_env &amp;amp;&amp;amp; echo "my_env environment is installed" || conda create -n my_env python=3.8 -ysource activate my_env&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Rename multiple files&lt;/h1&gt;&lt;p&gt;more info from &lt;a href="https://linuxize.com/post/how-to-rename-files-in-linux/"&gt;linuxize&lt;/a&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;for f in *.png; do   mv ${f} prefix-${f}done&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;convert all files in a directory to unix&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;dos2unix **/*&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;recursively remove all whitespace from .py files&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;find **/*.py -type f -exec sed -i 's/ *$//' '{}' ';'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;recursively autopep8&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;find . -name '*.py' -exec autopep8 --in-place '{}' \;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;make bash script a runnable command&lt;/h2&gt;&lt;p&gt;include a shebang&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;#! /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;chmod&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;chmod +x /usr/local/bin/my_script&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;accept positional input&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;#! /bin/bashinput=$1echo input&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;Using pyp&lt;/h1&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pipx install pyp&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;replacement for cut&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;❯ python -m http.server 5000 &amp;amp;[1] 8574✦ ❯ Serving HTTP on 0.0.0.0 port 5000 (http://0.0.0.0:5000/) ...✦ ❯ ps aux | grep "python -m http.server" | grep -v grep | pyp 'line.split()[1]' | xargs kill[1]  + terminated  python -m http.server 5000&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;replacement for wc&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;conda info --envs | pyp 'len(lines) - 3 # account for header and base'&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;print contents of shell function&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;declare -f &amp;lt;function-name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;batch rename files&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;for f in *.jpeg; do    mv -- "$f" "${f%.jpeg}.jpg"done&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;convert markdown files to reveal.js&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/jgm/pandoc/wiki/Using-pandoc-to-produce-reveal.js-slides"&gt;https://github.com/jgm/pandoc/wiki/Using-pandoc-to-produce-reveal.js-slides&lt;/a&gt;install pandoc&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;apt install pandoc&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;setup&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;wget https://github.com/hakimel/reveal.js/archive/master.tar.gztar -xzvf master.tar.gzmv reveal.js-master reveal.js&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;convert&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;pandoc -t revealjs -s -o myslides.html myslides.md -V revealjs-url=https://unpkg.com/reveal.js@3.9.2/&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Render Markdown at the command line&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/charmbracelet/glow"&gt;Glow&lt;/a&gt; is a terminal markdown renderer written in go.  There iis a prebuilt binary that can simply be unzipped and executed to render markdow.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;wget https://github.com/charmbracelet/glow/releases/download/v0.2.0/glow_0.2.0_linux_x86_64.tar.gztar -xzf glow_0.2.0_linux_x86_64.tar.gzchmod +x glowsudo mv glow /usr/binglow &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Autocomplete for click applications&lt;/h2&gt;&lt;p&gt;see the &lt;a href="https://click.palletsprojects.com/en/7.x/bashcomplete/"&gt;docs&lt;/a&gt; for more details&lt;/p&gt;&lt;h2&gt;Autocomplete for non click python cli's&lt;/h2&gt;&lt;p&gt;shtab &lt;a href="https://github.com/iterative/shtab" title="https://github.com/iterative/shtab"&gt;https://github.com/iterative/shtab&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Ensure functions reset context&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;project_log() {   _dir=$(pwd)   _project_log() {      cd ~/projects/project      git log   }   _project_log $@ &amp;amp;&amp;amp; cd $_dir || cd $_dir}&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/bash</guid></item><item><title>Kedro Basics</title><link>https://waylonwalker.com/kedro-basics</link><description>In my upcoming free kedro course, you can learn how to start building pipelines in 5 days.</description><content:encoded>&lt;p&gt;Learn Kedro in 5 days&lt;/p&gt;&lt;h2&gt;Day 0 Setup&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;vm&lt;/li&gt;&lt;li&gt;install&lt;/li&gt;&lt;li&gt;python&lt;/li&gt;&lt;li&gt;editor&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Day 1&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;kedro new&lt;/li&gt;&lt;li&gt;kedro viz&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Day 2&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;catalog&lt;/li&gt;&lt;li&gt;filter catalog&lt;/li&gt;&lt;li&gt;load data&lt;/li&gt;&lt;li&gt;fsspec&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Day 3&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;pipeline&lt;/li&gt;&lt;li&gt;nodes&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Day 4&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;filter pipeline&lt;/li&gt;&lt;li&gt;run partial pipeline&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Day 5&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;kedro docker&lt;/li&gt;&lt;li&gt;GitHub Actions&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Advanced Kedro&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;hooks&lt;/li&gt;&lt;li&gt;custom datasets&lt;/li&gt;&lt;li&gt;modular pipelines&lt;/li&gt;&lt;/ul&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro-basics</guid></item><item><title>Pyspark</title><link>https://waylonwalker.com/pyspark</link><description>I have been using pyspark since March 2019, here are my thoughts.</description><content:encoded>&lt;p&gt;I have been using pyspark since March 2019, here are my thoughts.&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/pyspark</guid></item><item><title>Building Cli apps in Python</title><link>https://waylonwalker.com/building-cli-apps-in-python</link><description>learning about building cli apps in python</description><content:encoded>&lt;h2&gt;Packages&lt;/h2&gt;&lt;h2&gt;&lt;a href="https://click.palletsprojects.com/en/7.x/" title="Click"&gt;Click&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Inputs&lt;/h3&gt;&lt;p&gt;Click primarily takes two forms of inputs Options and arguments.  I think of options as keyword argument and arguments as regular positional arguments.&lt;/p&gt;&lt;h4&gt;Option&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;typically aliased with a shorthand ('-v', '--verbose')&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;p&gt;**From the &lt;a href="https://click.palletsprojects.com/en/7.x/options/"&gt;Docs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To get the Python argument name, the chosen name is converted to lower case, up to two dashes are removed as the prefix, and other dashes are converted to underscores.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;@click.command()@click.option('-s', '--string-to-echo')def echo(string_to_echo):    click.echo(string_to_echo)&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;@click.command()@click.option('-s', '--string-to-echo', 'string')def echo(string):    click.echo(string)&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;h4&gt;Argument&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;positional&lt;/li&gt;&lt;li&gt;required&lt;/li&gt;&lt;li&gt;no help text supplied by click&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a href="https://pypi.org/project/yaspin/" title="Yaspin"&gt;Yaspin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img alt="Yaspin Gif" src="https://warehouse-camo.cmh1.psfhosted.org/1bf73e6062750b03a63648f4cab5147b82e4be97/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706176646d79742f79617370696e2f6d61737465722f676966732f64656d6f2e676966" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="https://github.com/click-contrib/click-help-colors"&gt;Click Help Colors&lt;/a&gt;&lt;/h2&gt;&lt;h2&gt;&lt;img alt="Click Help Colors Example" src="https://raw.githubusercontent.com/r-m-n/click-help-colors/master/examples/1.png" /&gt;&lt;/h2&gt;&lt;h2&gt;&lt;a href="https://github.com/tartley/colorama" title="colorama"&gt;Colorama&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/tartley/colorama/raw/master/screenshots/ubuntu-demo.png"&gt;Colorama Example&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href="https://github.com/click-contrib/click-didyoumean"&gt;Click DidYouMean&lt;/a&gt;&lt;/h3&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/building-cli-apps-in-python</guid></item><item><title>Packages to Investigate</title><link>https://waylonwalker.com/packages-to-investigate</link><description>|-|-|
|github: |https://github.com/zaxr/bulwark| I definitely want to try this out with kedro. Bulwark is a package for convenient property-based testing of pandas dataframes, supported for Python 3.5+.</description><content:encoded>&lt;ul&gt;&lt;li&gt;jmespath&lt;/li&gt;&lt;li&gt;Tabnine&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;Bulwark&lt;/h1&gt;&lt;p&gt;|-|-||github: |&lt;a href="https://github.com/zaxr/bulwark"&gt;https://github.com/zaxr/bulwark&lt;/a&gt;|&lt;/p&gt;&lt;p&gt;I definitely want to try this out with kedro.&lt;/p&gt;&lt;p&gt;Bulwark is a package for convenient property-based testing of pandas dataframes, supported for Python 3.5+.&lt;/p&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code&gt;    import bulwark.decorators as dc    @dc.IsShape((-1, 10))    @dc.IsMonotonic(strict=True)    @dc.HasNoNans()    def compute(df):        # complex operations to determine result        ...    return result_df&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/packages-to-investigate</guid></item><item><title>Kedro</title><link>https://waylonwalker.com/kedro</link><description>My Notes about using kedro</description><content:encoded>&lt;h1&gt;&lt;a href="https://twitter.com/search?q=%23kedrotips&amp;amp;f=live"&gt;#kedrotips&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;I am tweeting out most of these snippets as I add them, you can find them all here &lt;a href="https://twitter.com/search?q=%23kedrotips"&gt;#kedrotips&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;🗣 Heads up&lt;/h1&gt;&lt;p&gt;Below are some quick snippets/notes for when using kedro to build data pipelines. So far I am just compiling snippets. Eventually I will create several posts on kedro. These are mostly things that I use In my everyday with kedro. Some are a bit more essoteric. Some are helpful when writing production code, some are useful more usefule for exploration.&lt;/p&gt;&lt;h2&gt;📚 Catalog&lt;/h2&gt;&lt;p&gt;&lt;img alt="catalogs" src="/jesse-orrico-h6xNSDlgciU-unsplash.jpg" /&gt;&lt;em&gt;Photo by jesse orrico on Unsplash&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;CSVLocalDataSet&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdiris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')data_set = CSVLocalDataSet(filepath="test.csv",                                 load_args=None,                                 save_args={"index": False})iris_data_set.save(iris)reloaded_iris = iris_data_set.load()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;yaml&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;test_data:   type: CSVLocalDataset   filepath: test.csv   load_args: None   save_args:      index: False&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;CSVHTTPDataSet&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;cities = CSVHTTPDataSet(    fileurl="https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv",    auth=None,    load_args=None)iris = iris_data_set.load()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;cities:   type: CSVHTTPDataSet    fileurl: https://people.sc.fsu.edu/~jburkardt/data/csv/cities.csv    auth: None    load_args: None&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;HDFLocalDataSet&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom kedro.io import HDFLocalDataSetiris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')iris_data_set = HDFLocalDataSet(filepath="iris.hdf",                           key="test_hdf_key",                           load_args=None,                           save_args=None)iris_data_set.save(iris)reloaded_iris = iris_data_set.load()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;cars:   type: HDFLocalDataSet   filepath: test.hdf   key: test_hdf_key&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;HDFS3LocalDataSet&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom kedro.io import HDFS3DataSetiris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')iris_data_set = HDFS3DataSet(filepath="iris.hdf",                        bucket_name="bucket-us-west-1",                        key="test_hdf_key",                        load_args=None,                        save_args=None)iris_data_set.save(iris)reloaded_iris = iris_data_set.load()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;cars:   type: HDFS3DataSet   filepath: cars.hdf   bucket_name: bucket-us-west-1   key: test_hdf_key&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;JSONLocalDataSet&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom kedro.io import JSONLocalDataSetiris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')cars = JSONLocalDataSet(filepath="iris.json",                        load_args=None,                        save_args=None)iris_data_set.save(iris)reloaded_iris = iris_data_set.load()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;cars:   type: JSONLocalDataSet   filepath: iris.json&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;ParquetLocalDataSet&lt;/h2&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;import pandas as pdfrom kedro.io import ParquetLocalDataSetiris = pd.read_csv('https://raw.githubusercontent.com/quantumblacklabs/kedro/d3218bd89ce8d1148b1f79dfe589065f47037be6/kedro/template/%7B%7B%20cookiecutter.repo_name%20%7D%7D/data/01_raw/iris.csv')iris_data_set = ParquetLocalDataSet('iris',                           engine='auto',                           load_args=None,                           save_args=None,                           version=None)iris_data_set.save(iris)reloaded_iris = iris_data_set.load()&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-yaml"&gt;cars:   type: JSONLocalDataSet   filepath: cars&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PickleS3DataSet&lt;/p&gt;&lt;p&gt;SQLTableDataSet&lt;/p&gt;&lt;p&gt;SQLQueryDataSet&lt;/p&gt;&lt;p&gt;TextLocalDataSet&lt;/p&gt;&lt;p&gt;ExcelLocalDataSet&lt;/p&gt;&lt;h2&gt;⏳ Loading Data&lt;/h2&gt;&lt;p&gt;&lt;img alt="loading data" src="/battlecreek-coffee-roasters-eg6OUchGCsw-unsplash.jpg" /&gt;&lt;em&gt;Photo by Battlecreek Coffee Roasters on Unsplash&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;Simple Loading&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;df = catalog.load('cars')&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;list all datasets&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;catalog.list()&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Saving Data&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;catalog.save('cars', cars)&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;🔍 Finding data&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;simple keyword search&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;query = 'raw'[data for data in catalog.list() if query in data]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;see on&lt;/em&gt; &lt;a href="https://twitter.com/_WaylonWalker/status/1197130980659732480?s=20"&gt;&lt;em&gt;#kedrotips&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;multi keyword serch&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;query = 'raw sales'data_sets = catalog.list()for word in query.split():    data_sets = [       data       for data in data_sets       if query in data       ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;see on&lt;/em&gt; &lt;a href="https://twitter.com/_WaylonWalker/status/1197528461587419139?s=20"&gt;&lt;em&gt;#kedrotips&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;🐒 monkey patch it&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def query(*search_terms):     data_sets = catalog.list()     for search in search_terms:         data_sets = [         data         for data in data_sets         if search in data         ]     return data_setscatalog.query = query&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;_see on &lt;a href="https://twitter.com/_WaylonWalker/status/1197855759507300352?s=20"&gt;#kedrotips&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;🤙 YOLO&lt;/h3&gt;&lt;p&gt;&lt;em&gt;You Only Load Once&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;simple&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data = [catalog.load(d)        for d in        catalog.query('c_pri', 'cars')        ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;more refined&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;data = {   d: catalog.load(d)   for d in catalog.query('c_pri', 'cars')   }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;🍷 refined like a fine wine&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from types import SimpleNamespacedata = SimpleNamespace**{   d: catalog.load(d)   for d in catalog.query('c_pri', 'cars')   })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;🧀 Make it a function&lt;/strong&gt;&lt;em&gt;getting funcy&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from types import SimpleNamespacedef yolo(*search_terms):   """you only load once   using query method from previous tip"""   data = SimpleNamespace(**{       d: catalog.load(d)   for d in catalog.query(*search_terms)    })    return dataall_pri = yolo('c_pri')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;🐒 monkey patch it&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from functools import partialcatalog.yolo = yolocatalog.yolo.__doc__ = "you only load once"all_pri = catalog.yolo('c_pri')&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;adding catalogs together&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.io import DataCatalogDataCatalog({**cat1.__dict__['_data_sets'], **cat2.__dict__['_data_sets']})&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;🛢 Building pipelines&lt;/h2&gt;&lt;p&gt;&lt;img alt="building pipelines" src="/roman-pentin-T5QT2bmiD4E-unsplash.jpg" /&gt;&lt;em&gt;Photo by roman pentin on Unsplash&lt;/em&gt;&lt;/p&gt;&lt;h3&gt;📍 Creating Nodes&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline import nodenode = node(lambda x: x.dropna(), inputs='raw_cars', outputs='int_cars')&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline import nodedef drop_columns(df, *columns):   for column in columns:      df = df.drop(columns=column)   return dfnode = node(   lambda x: drop_columns(x, 'vs', 'am', 'gear', 'carb'),   inputs='int_cars',   outputs='pri_cars'   )&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;🛢 Creating a pipeline&lt;/h3&gt;&lt;h3&gt;Don't be so verbose&lt;/h3&gt;&lt;p&gt;Create similar nodes dynamically&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;def halve_dataframe(data: pd.DataFrame) -&amp;gt; List[pd.DataFrame]:   """ splits a dataframe in half """    return np.array_split(data, 2)nodes = []datasets = [   'cars', 'trucks', 'boats', 'motorcycles', 'planes',   'ships', 'busses', 'trains', 'subways'   ]# creates a pipeline node for every dataset in the datasets listfor dataset in datasets   nodes.append(       node(halve_dataframe,            'e_modin_{dataset}',            ['train_{dataset}', 'test_{dataset}']),   )&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;🏃‍♂️ Running Pipelines&lt;/h2&gt;&lt;p&gt;&lt;img alt="running pipelines" src="/rodion-kutsaev-xNdPWGJ6UCQ-unsplash.jpg" /&gt;&lt;em&gt;Photo by Rodion Kutsaev on Unsplash&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;🔖 filter by tags&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;nodes = pipeline.only_nodes_with_tags('cars')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;see on&lt;/em&gt; &lt;a href="https://twitter.com/_WaylonWalker/status/1195319044808888321?s=20"&gt;&lt;em&gt;#kedrotips&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;filter by node&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;nodes = pipeline.only_nodes('b_int_cars')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;_see on &lt;a href="https://twitter.com/_WaylonWalker/status/1196406204479737856?s=20"&gt;#kedrotips&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;filter nodes like&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;query_string = 'cars'nodes = [   node.name   for node in pipeline.nodes   if query_string in node.name   ]pipeline.only_nodes(*nodes)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;see on&lt;/em&gt; &lt;a href="https://twitter.com/_WaylonWalker/status/1196813895228428288?s=20"&gt;&lt;em&gt;#kedrotips&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;only nodes with tags&lt;/strong&gt; &lt;em&gt;or&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;nodes = pipeline.only_nodes_with_tags('cars', 'trains')&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;only nodes with tags&lt;/strong&gt; &lt;em&gt;and&lt;/em&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;raw_nodes = pipeline.only_nodes_with_tags('raw')car_nodes = pipeline.only_nodes_with_tags('cars')raw_car_nodes = raw_nodes &amp;amp; car_nodes&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;raw_nodes = (   pipeline   .only_nodes_with_tags('raw')   .only_nodes_with_tags('cars')   )&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;add pipelines&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;car_nodes = pipeline.only_nodes_with_tags('cars')train_nodes = pipeline.only_nodes_with_tags('trains')transportation_nodes = car_nodes + train_nodes&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ensure nodes are attached&lt;/strong&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;cars_attached = len(   pipeline   .only_nodes_with_tags('cars')   .grouped_nodes   ) == 1&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;🎂 Pipeline Decorators&lt;/h3&gt;&lt;p&gt;&lt;a href="https://kedro.readthedocs.io/en/latest/_modules/kedro/pipeline/decorators.html#log_time"&gt;example - log_time&lt;/a&gt;&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;from kedro.pipeline.decorators import log_time, mem_profilepipeline.decorate(log_running_time)&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Pipeline IO&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pipleine.all_inputs()&lt;/code&gt; and &lt;code&gt;pipeline.all_outputs()&lt;/code&gt; return sets of pipeline inputs and outputs and you can do set operations on them.  This is particularly useful to find the upper and lower edges of your pipeline or subset of pipeline.  The pipeline object here is any &lt;code&gt;kedro&lt;/code&gt; pipeline including a filtered subset.&lt;/p&gt;&lt;h3&gt;Find all raw data&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;pipeline.all_inputs() - pipeline.all_outputs()&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Find all final data&lt;/h3&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;pipeline.all_outputs() - pipeline.all_inputs()&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Find all nodes that do not raw&lt;/h3&gt;&lt;p&gt;This one is probably one that is pushing the limits of what I would do in a list comprehension that I use in prod or even put into a text editor, but I commonly use ipython for my adhoc work and keeping it all in one line is very handy.  Complex list comprehensions kinda start becoming like regex in a way that they are really easy to write and really hard to read.  I don't think this one quite hits that point but its getting close.&lt;/p&gt;&lt;p&gt;I find this one super useful to help me either move data beween environments, or avoid unnecessary database calls.&lt;/p&gt;&lt;pre class="highlight"&gt;&lt;code class="language-python"&gt;raw_inputs = pipeline.all_inputs() - pipeline.all_outputs()raw_nodes = [node for node in pipeline.nodes if [i for i in raw_inputs if i in set(node.inputs)] != []]&lt;/code&gt;&lt;/pre&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/kedro</guid></item><item><title>Making good documentation in python</title><link>https://waylonwalker.com/making-good-documentation-in-python</link><description>I just started using portray and it is amazingly simple to use!</description><content:encoded>&lt;h1&gt;Tools&lt;/h1&gt;&lt;h2&gt;Sphinx&lt;/h2&gt;&lt;h2&gt;Portray&lt;/h2&gt;&lt;p&gt;I just started using portray and it is amazingly simple to use!&lt;/p&gt;&lt;h1&gt;Methodology&lt;/h1&gt;</content:encoded><guid isPermaLink="false">https://waylonwalker.com/making-good-documentation-in-python</guid></item><item><title>Maintianing multiple git remotes</title><link>https://waylonwalker.com/maintianing-multiple-git-remotes</link><description>&lt;pre class="highlight"&gt;&lt;code class="language-bash"&gt;git remote -vgit remote add gitlab &amp;lt;url&amp;gt;git push gitlab main&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://waylonwalker.com/maintianing-multiple-git-remotes</guid></item></channel></rss>